<?xml version="1.0" encoding="UTF-8"?>
<arch:MigrationModel xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arch="http://www.example.org/arch">
  <source href="source.arch#/"/>
  <target href="target.arch#/"/>
  <interimmodels description="setup database: assignwirelog" nextModel="//@interimmodels.1" isStable="true" name="setup-database">
    <designmodel name="inter0">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.0/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.0/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.0/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.0/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.0/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.0/@designmodel/@connector.0/@role.1 //@interimmodels.0/@designmodel/@connector.1/@role.0 //@interimmodels.0/@designmodel/@connector.2/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.0/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.0/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.0/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.0/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.0/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.0/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" role="//@interimmodels.0/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.0/@designmodel/@host.0/@node.1">
        <port name="record" role="//@interimmodels.0/@designmodel/@connector.3/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.0/@designmodel/@connector.4/@role.1" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.0/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.0/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.0/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.0/@designmodel/@connector.5/@role.1 //@interimmodels.0/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.0/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.0/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.0/@designmodel/@connector.2/@role.0" connector="//@interimmodels.0/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.1"/>
        <role name="subscriber" roletype="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.0/@designmodel/@connector.1"/>
      </connector>
      <connector name="driverquerywire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.0/@designmodel/@connector.1/@role.0" connector="//@interimmodels.0/@designmodel/@connector.2"/>
        <role name="readstorage" roletype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.0/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.3"/>
        <role name="writestorage" roletype="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.0/@designmodel/@connector.3"/>
      </connector>
      <connector name="payprocesswire" type="REConnector" connectortype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.4"/>
        <role name="readstorage" roletype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.0/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.0/@designmodel/@connector.6/@role.0" connector="//@interimmodels.0/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.0/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.7"/>
        <role name="writestorage" roletype="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.0/@designmodel/@connector.7"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.0/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.0/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.0/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.0/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.0/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.0/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.0/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.0/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.0/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.0/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.0/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.0/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.0/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.0/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.0/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.0/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.0/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.0/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.0/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.0/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.0/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.0/@designmodel" visitedStates="79" verifyTime="0.0667849" testport="//@interimmodels.0/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!52 -> callwire_req?52 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!52 -> driverquerywire_req?52 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!52 -> driverquerywire_res?52 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!52 -> assignwire_pub?52 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!52 -> callwire_res?52" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.0/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.0/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.0/@designmodel" visitedStates="54" verifyTime="0.0038946999999999996" testport="//@interimmodels.0/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!46 -> callwire_req?46 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!46 -> driverquerywire_req?46 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!46 -> driverquerywire_res?46 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!46 -> assignwire_pub?46 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!46 -> callwire_res?46" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverDB.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.0/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.0/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.0/@designmodel" counterExample="" visitedStates="10" verifyTime="0.0028714" testport="//@interimmodels.0/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_writer_process -> paywire_req!61 -> paywire_req?61 -> Payment_paywire_writestorage_invoke -> Payment_record_payrecorded -> Payment_paywire_writestorage_process -> paywire_res!61 -> paywire_res?61" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.0/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.0/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.0/@designmodel" visitedStates="29" verifyTime="0.0026376" testport="//@interimmodels.0/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!84 -> authwire_req?84 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!84 -> userquerywire_req?84 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!84 -> userquerywire_res?84 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!84 -> authwire_res?84" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.0/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.0/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.0/@designmodel" visitedStates="29" verifyTime="0.0062919" testport="//@interimmodels.0/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!43 -> authwire_req?43 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!43 -> userquerywire_req?43 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!43 -> userquerywire_res?43 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!43 -> authwire_res?43" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.0/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.0/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.0/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.0/@designmodel/@component.3 //@interimmodels.0/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.0/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.0/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.0/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.0/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.0/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="1" description="setup database: paymentblockchain" nextModel="//@interimmodels.2" isStable="true" name="setup-database">
    <designmodel name="inter1">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.1/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.1/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.1/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.1/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.1/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.1/@designmodel/@connector.0/@role.1 //@interimmodels.1/@designmodel/@connector.1/@role.0 //@interimmodels.1/@designmodel/@connector.2/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.1/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.1/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.1/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.1/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.1/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.1/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" role="//@interimmodels.1/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.1/@designmodel/@host.0/@node.1">
        <port name="record" role="//@interimmodels.1/@designmodel/@connector.3/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.1/@designmodel/@connector.4/@role.1" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.1/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.1/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.1/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.1/@designmodel/@connector.5/@role.1 //@interimmodels.1/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.1/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.1/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.1/@designmodel/@connector.2/@role.0" connector="//@interimmodels.1/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.1"/>
        <role name="subscriber" roletype="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.1/@designmodel/@connector.1"/>
      </connector>
      <connector name="driverquerywire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.1/@designmodel/@connector.1/@role.0" connector="//@interimmodels.1/@designmodel/@connector.2"/>
        <role name="readstorage" roletype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.1/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.3"/>
        <role name="writestorage" roletype="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.1/@designmodel/@connector.3"/>
      </connector>
      <connector name="payprocesswire" type="REConnector" connectortype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.4"/>
        <role name="readstorage" roletype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.1/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.1/@designmodel/@connector.6/@role.0" connector="//@interimmodels.1/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.1/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.7"/>
        <role name="writestorage" roletype="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.1/@designmodel/@connector.7"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.1/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.1/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.1/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.1/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.1/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.1/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.1/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.1/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.1/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.1/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.1/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.1/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.1/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.1/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.1/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.1/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.1/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.1/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.1/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.1/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.1/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.1/@designmodel" visitedStates="79" verifyTime="0.0042661" testport="//@interimmodels.1/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!16 -> callwire_req?16 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!16 -> driverquerywire_req?16 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!16 -> driverquerywire_res?16 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!16 -> assignwire_pub?16 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!16 -> callwire_res?16" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.1/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.1/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.1/@designmodel" visitedStates="54" verifyTime="0.0036422" testport="//@interimmodels.1/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!57 -> callwire_req?57 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!57 -> driverquerywire_req?57 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!57 -> driverquerywire_res?57 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!57 -> assignwire_pub?57 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!57 -> callwire_res?57" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverDB.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.1/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.1/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.1/@designmodel" counterExample="" visitedStates="10" verifyTime="0.0064229" testport="//@interimmodels.1/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_writer_process -> paywire_req!31 -> paywire_req?31 -> Payment_paywire_writestorage_invoke -> Payment_record_payrecorded -> Payment_paywire_writestorage_process -> paywire_res!31 -> paywire_res?31" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.1/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.1/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.1/@designmodel" visitedStates="29" verifyTime="0.0031068999999999997" testport="//@interimmodels.1/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!34 -> authwire_req?34 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!34 -> userquerywire_req?34 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!34 -> userquerywire_res?34 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!34 -> authwire_res?34" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.1/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.1/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.1/@designmodel" visitedStates="29" verifyTime="0.0030391" testport="//@interimmodels.1/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!38 -> authwire_req?38 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!38 -> userquerywire_req?38 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!38 -> userquerywire_res?38 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!38 -> authwire_res?38" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.1/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.1/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.1/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.1/@designmodel/@component.3 //@interimmodels.1/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.1/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.1/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.1/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.1/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.1/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="2" description="setup database: driverupdatewirecommandlog" nextModel="//@interimmodels.3" isStable="true" name="setup-database">
    <designmodel name="inter2">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.2/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.2/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.2/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.2/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.2/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.2/@designmodel/@connector.0/@role.1 //@interimmodels.2/@designmodel/@connector.1/@role.0 //@interimmodels.2/@designmodel/@connector.2/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.2/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.2/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.2/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.2/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.2/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.2/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" role="//@interimmodels.2/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.2/@designmodel/@host.0/@node.1">
        <port name="record" role="//@interimmodels.2/@designmodel/@connector.3/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.2/@designmodel/@connector.4/@role.1" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.2/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.2/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.2/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.2/@designmodel/@connector.5/@role.1 //@interimmodels.2/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.2/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.2/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.2/@designmodel/@connector.2/@role.0" connector="//@interimmodels.2/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.1"/>
        <role name="subscriber" roletype="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.2/@designmodel/@connector.1"/>
      </connector>
      <connector name="driverquerywire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.2/@designmodel/@connector.1/@role.0" connector="//@interimmodels.2/@designmodel/@connector.2"/>
        <role name="readstorage" roletype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.2/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.3"/>
        <role name="writestorage" roletype="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.2/@designmodel/@connector.3"/>
      </connector>
      <connector name="payprocesswire" type="REConnector" connectortype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.4"/>
        <role name="readstorage" roletype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.2/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.2/@designmodel/@connector.6/@role.0" connector="//@interimmodels.2/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.2/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.7"/>
        <role name="writestorage" roletype="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.2/@designmodel/@connector.7"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.2/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.2/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.2/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.2/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.2/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.2/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.2/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.2/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.2/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.2/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.2/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.2/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.2/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.2/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.2/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.2/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.2/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.2/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.2/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.2/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.2/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.2/@designmodel" visitedStates="79" verifyTime="0.0043798" testport="//@interimmodels.2/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!34 -> callwire_req?34 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!34 -> driverquerywire_req?34 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!34 -> driverquerywire_res?34 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!34 -> assignwire_pub?34 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!34 -> callwire_res?34" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.2/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.2/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.2/@designmodel" visitedStates="54" verifyTime="0.0029211999999999997" testport="//@interimmodels.2/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!54 -> callwire_req?54 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!54 -> driverquerywire_req?54 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!54 -> driverquerywire_res?54 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!54 -> assignwire_pub?54 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!54 -> callwire_res?54" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverDB.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.2/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.2/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.2/@designmodel" counterExample="" visitedStates="10" verifyTime="0.0027421999999999998" testport="//@interimmodels.2/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_writer_process -> paywire_req!81 -> paywire_req?81 -> Payment_paywire_writestorage_invoke -> Payment_record_payrecorded -> Payment_paywire_writestorage_process -> paywire_res!81 -> paywire_res?81" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.2/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.2/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.2/@designmodel" visitedStates="29" verifyTime="0.0060599" testport="//@interimmodels.2/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!88 -> authwire_req?88 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!88 -> userquerywire_req?88 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!88 -> userquerywire_res?88 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!88 -> authwire_res?88" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.2/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.2/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.2/@designmodel" visitedStates="29" verifyTime="0.0033986" testport="//@interimmodels.2/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!86 -> authwire_req?86 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!86 -> userquerywire_req?86 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!86 -> userquerywire_res?86 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!86 -> authwire_res?86" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.2/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.2/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.2/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.2/@designmodel/@component.3 //@interimmodels.2/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.2/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.2/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.2/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.2/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.2/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="4" description="deploy service: paymentoracle" nextModel="//@interimmodels.4" isStable="true" name="deploy-service">
    <designmodel name="inter4">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.3/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.3/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.3/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.3/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.3/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.3/@designmodel/@connector.0/@role.1 //@interimmodels.3/@designmodel/@connector.1/@role.0 //@interimmodels.3/@designmodel/@connector.2/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.3/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.3/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.3/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.3/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.3/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.3/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" role="//@interimmodels.3/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.3/@designmodel/@host.0/@node.1">
        <port name="record" role="//@interimmodels.3/@designmodel/@connector.3/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.3/@designmodel/@connector.4/@role.1" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.3/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.3/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.3/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.3/@designmodel/@connector.5/@role.1 //@interimmodels.3/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.3/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.3/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentOracle" type="server,oracle">
        <port name="Paymentsupply" type="response,orafeed,OutboundPort,InboundPort">
          <events name="supplied"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.2"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.3/@designmodel/@connector.2/@role.0" connector="//@interimmodels.3/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.1"/>
        <role name="subscriber" roletype="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.3/@designmodel/@connector.1"/>
      </connector>
      <connector name="driverquerywire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.3/@designmodel/@connector.1/@role.0" connector="//@interimmodels.3/@designmodel/@connector.2"/>
        <role name="readstorage" roletype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.3/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.3"/>
        <role name="writestorage" roletype="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.3/@designmodel/@connector.3"/>
      </connector>
      <connector name="payprocesswire" type="REConnector" connectortype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.4"/>
        <role name="readstorage" roletype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.3/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.3/@designmodel/@connector.6/@role.0" connector="//@interimmodels.3/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.3/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.7"/>
        <role name="writestorage" roletype="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.3/@designmodel/@connector.7"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.3/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.3/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.3/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.3/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.3/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.3/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.3/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.3/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.3/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.3/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.3/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.3/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.3/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.3/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.3/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.3/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.3/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.3/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.3/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.3/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.3/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.3/@designmodel" visitedStates="79" verifyTime="0.0041863" testport="//@interimmodels.3/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!96 -> callwire_req?96 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!96 -> driverquerywire_req?96 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!96 -> driverquerywire_res?96 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!96 -> assignwire_pub?96 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!96 -> callwire_res?96" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.3/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.3/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.3/@designmodel" visitedStates="54" verifyTime="0.0031750999999999997" testport="//@interimmodels.3/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!24 -> callwire_req?24 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!24 -> driverquerywire_req?24 -> DriverDB_driverquerywire_readstorage_invoke -> DriverDB_driverquery_quried -> DriverDB_driverquerywire_readstorage_process -> driverquerywire_res!24 -> driverquerywire_res?24 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!24 -> assignwire_pub?24 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!24 -> callwire_res?24" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverRecord.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.3/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.3/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.3/@designmodel" counterExample="" visitedStates="10" verifyTime="0.0035808" testport="//@interimmodels.3/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_writer_process -> paywire_req!86 -> paywire_req?86 -> Payment_paywire_writestorage_invoke -> Payment_record_payrecorded -> Payment_paywire_writestorage_process -> paywire_res!86 -> paywire_res?86" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.3/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.3/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.3/@designmodel" visitedStates="29" verifyTime="0.0031149999999999997" testport="//@interimmodels.3/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!35 -> authwire_req?35 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!35 -> userquerywire_req?35 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!35 -> userquerywire_res?35 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!35 -> authwire_res?35" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.3/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.3/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.3/@designmodel" visitedStates="29" verifyTime="0.0031623" testport="//@interimmodels.3/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!69 -> authwire_req?69 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!69 -> userquerywire_req?69 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!69 -> userquerywire_res?69 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!69 -> authwire_res?69" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.3/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.3/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.3/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.3/@designmodel/@component.3 //@interimmodels.3/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.3/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.3/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.3/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.3/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.3/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="5" description="setup database: driverrecord" nextModel="//@interimmodels.5" isStable="true" name="setup-database">
    <designmodel name="inter5">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.4/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.4/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.4/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.4/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.4/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.4/@designmodel/@connector.0/@role.1 //@interimmodels.4/@designmodel/@connector.1/@role.0 //@interimmodels.4/@designmodel/@connector.2/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.4/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.4/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.4/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.4/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.4/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.4/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" role="//@interimmodels.4/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.4/@designmodel/@host.0/@node.1">
        <port name="record" role="//@interimmodels.4/@designmodel/@connector.3/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.4/@designmodel/@connector.4/@role.1" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.4/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.4/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.4/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.4/@designmodel/@connector.5/@role.1 //@interimmodels.4/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.4/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.4/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentOracle" type="server,oracle">
        <port name="Paymentsupply" type="response,orafeed,OutboundPort,InboundPort">
          <events name="supplied"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.2"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.4/@designmodel/@connector.2/@role.0" connector="//@interimmodels.4/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.1"/>
        <role name="subscriber" roletype="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.4/@designmodel/@connector.1"/>
      </connector>
      <connector name="driverquerywire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.4/@designmodel/@connector.1/@role.0" connector="//@interimmodels.4/@designmodel/@connector.2"/>
        <role name="readstorage" roletype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.4/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.3"/>
        <role name="writestorage" roletype="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.4/@designmodel/@connector.3"/>
      </connector>
      <connector name="payprocesswire" type="REConnector" connectortype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.4"/>
        <role name="readstorage" roletype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.4/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.4/@designmodel/@connector.6/@role.0" connector="//@interimmodels.4/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.4/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.7"/>
        <role name="writestorage" roletype="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.4/@designmodel/@connector.7"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.4/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.4/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.4/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.4/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.4/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.4/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.4/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.4/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.4/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.4/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.4/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.4/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.4/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.4/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.4/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.4/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.4/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.4/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.4/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.4/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.4/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.4/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.4/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.4/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.4/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.4/@designmodel" visitedStates="79" verifyTime="0.007138599999999999" testport="//@interimmodels.4/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!94 -> callwire_req?94 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!94 -> driverquerywire_req?94 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!94 -> driverquerywire_res?94 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!94 -> assignwire_pub?94 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!94 -> callwire_res?94" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.4/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.4/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.4/@designmodel" visitedStates="54" verifyTime="0.0033095999999999998" testport="//@interimmodels.4/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!57 -> callwire_req?57 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!57 -> driverquerywire_req?57 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!57 -> driverquerywire_res?57 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!57 -> assignwire_pub?57 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!57 -> callwire_res?57" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverDB.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.4/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.4/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.4/@designmodel" counterExample="" visitedStates="10" verifyTime="0.0623993" testport="//@interimmodels.4/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_writer_process -> paywire_req!14 -> paywire_req?14 -> Payment_paywire_writestorage_invoke -> Payment_record_payrecorded -> Payment_paywire_writestorage_process -> paywire_res!14 -> paywire_res?14" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.4/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.4/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.4/@designmodel" visitedStates="29" verifyTime="0.0065068999999999995" testport="//@interimmodels.4/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!86 -> authwire_req?86 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!86 -> userquerywire_req?86 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!86 -> userquerywire_res?86 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!86 -> authwire_res?86" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.4/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.4/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.4/@designmodel" visitedStates="29" verifyTime="0.0031528" testport="//@interimmodels.4/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!29 -> authwire_req?29 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!29 -> userquerywire_req?29 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!29 -> userquerywire_res?29 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!29 -> authwire_res?29" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.4/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.4/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.4/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.4/@designmodel/@component.3 //@interimmodels.4/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.4/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.4/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.4/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.4/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.4/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="6" description="network route for connector:driverupdatewire between: driverui driverupdatewirecommandlog " nextModel="//@interimmodels.6" isStable="true" name="network-route">
    <designmodel name="inter6">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.5/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.5/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.5/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.5/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.5/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.5/@designmodel/@connector.0/@role.1 //@interimmodels.5/@designmodel/@connector.1/@role.0 //@interimmodels.5/@designmodel/@connector.2/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.5/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.5/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.5/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.5/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.5/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.5/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.5/@designmodel/@host.0/@node.1">
        <port name="record" role="//@interimmodels.5/@designmodel/@connector.3/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.5/@designmodel/@connector.4/@role.1" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.5/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.5/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.5/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.5/@designmodel/@connector.5/@role.1 //@interimmodels.5/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.5/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.5/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" role="//@interimmodels.5/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentOracle" type="server,oracle">
        <port name="Paymentsupply" type="response,orafeed,OutboundPort,InboundPort">
          <events name="supplied"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.2"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.5/@designmodel/@connector.2/@role.0" connector="//@interimmodels.5/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.1"/>
        <role name="subscriber" roletype="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.5/@designmodel/@connector.1"/>
      </connector>
      <connector name="driverquerywire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.5/@designmodel/@connector.1/@role.0" connector="//@interimmodels.5/@designmodel/@connector.2"/>
        <role name="readstorage" roletype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.5/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.3"/>
        <role name="writestorage" roletype="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.5/@designmodel/@connector.3"/>
      </connector>
      <connector name="payprocesswire" type="REConnector" connectortype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.4"/>
        <role name="readstorage" roletype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.5/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.5/@designmodel/@connector.6/@role.0" connector="//@interimmodels.5/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.5/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="CRConnector" connectortype="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.5/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.3/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.5/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.5/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.5/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.5/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.5/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.5/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.5/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.5/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.5/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.5/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.5/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.5/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.5/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.5/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.5/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.5/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.5/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.5/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.5/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.5/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.5/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.5/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.5/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.5/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.5/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.5/@designmodel" visitedStates="79" verifyTime="0.0041592" testport="//@interimmodels.5/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!57 -> callwire_req?57 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!57 -> driverquerywire_req?57 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!57 -> driverquerywire_res?57 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!57 -> assignwire_pub?57 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!57 -> callwire_res?57" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.5/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.5/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.5/@designmodel" visitedStates="54" verifyTime="0.0031750999999999997" testport="//@interimmodels.5/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!24 -> callwire_req?24 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!24 -> driverquerywire_req?24 -> DriverDB_driverquerywire_readstorage_invoke -> DriverDB_driverquery_quried -> DriverDB_driverquerywire_readstorage_process -> driverquerywire_res!24 -> driverquerywire_res?24 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!24 -> assignwire_pub?24 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!24 -> callwire_res?24" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverDB.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.5/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.5/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.5/@designmodel" counterExample="" visitedStates="10" verifyTime="0.0027542" testport="//@interimmodels.5/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_writer_process -> paywire_req!22 -> paywire_req?22 -> Payment_paywire_writestorage_invoke -> Payment_record_payrecorded -> Payment_paywire_writestorage_process -> paywire_res!22 -> paywire_res?22" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.5/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.5/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.5/@designmodel" visitedStates="29" verifyTime="0.0028328999999999997" testport="//@interimmodels.5/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!58 -> authwire_req?58 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!58 -> userquerywire_req?58 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!58 -> userquerywire_res?58 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!58 -> authwire_res?58" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.5/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.5/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.5/@designmodel" visitedStates="29" verifyTime="0.0029925" testport="//@interimmodels.5/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!61 -> authwire_req?61 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!61 -> userquerywire_req?61 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!61 -> userquerywire_res?61 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!61 -> authwire_res?61" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.5/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.5/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-driverupdatewire" visitedStates="16" verifyTime="0.0034560999999999997" testport="//@interimmodels.5/@designmodel/@component.2/@port.2" traceExample="init -> DriverUI_locate_located -> DriverUI_driverupdatewire_commander_process -> driverupdatewire_stmt!88 -> driverupdatewire_cmmd!88 -> driverupdatewire_cmmd?88 -> DriverupdatewireCommandLog_logdriverupdatewire_logged -> DriverupdatewireCommandLog_driverupdatewire_commandstore_process -> DriverupdatewireCommandLog_driverupdatewire_commandstore_persist" exprText="[] (DriverUI.locate.located-> &lt;> DriverupdatewireCommandLog.driverupdatewire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.5/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.5/@designmodel/@component.3 //@interimmodels.5/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.5/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.5/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.5/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.5/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.5/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="7" description="network route for connector:oraclepaywire between: paymentoracle paymentblockchain " nextModel="//@interimmodels.7" name="network-route">
    <designmodel name="inter7">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.6/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.6/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.6/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.6/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.6/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.6/@designmodel/@connector.0/@role.1 //@interimmodels.6/@designmodel/@connector.1/@role.0 //@interimmodels.6/@designmodel/@connector.2/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.6/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.6/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.6/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.6/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.6/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.6/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.6/@designmodel/@host.0/@node.1">
        <port name="record" role="//@interimmodels.6/@designmodel/@connector.3/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.6/@designmodel/@connector.4/@role.1" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.6/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.6/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.6/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.6/@designmodel/@connector.5/@role.1 //@interimmodels.6/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.6/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.6/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" role="//@interimmodels.6/@designmodel/@connector.8/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" role="//@interimmodels.6/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentOracle" type="server,oracle">
        <port name="Paymentsupply" role="//@interimmodels.6/@designmodel/@connector.8/@role.1" type="response,orafeed,OutboundPort,InboundPort">
          <events name="supplied"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.2"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.6/@designmodel/@connector.2/@role.0" connector="//@interimmodels.6/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.1"/>
        <role name="subscriber" roletype="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.6/@designmodel/@connector.1"/>
      </connector>
      <connector name="driverquerywire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.6/@designmodel/@connector.1/@role.0" connector="//@interimmodels.6/@designmodel/@connector.2"/>
        <role name="readstorage" roletype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.6/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.3"/>
        <role name="writestorage" roletype="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.6/@designmodel/@connector.3"/>
      </connector>
      <connector name="payprocesswire" type="REConnector" connectortype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.4"/>
        <role name="readstorage" roletype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.6/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.6/@designmodel/@connector.6/@role.0" connector="//@interimmodels.6/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.6/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="CRConnector" connectortype="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.6/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.3/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.6/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.6/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.6/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.6/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.6/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.6/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.6/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.6/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.6/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.6/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.6/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.6/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.6/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.6/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.6/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.6/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.6/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.6/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.6/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.6/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.6/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.6/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.6/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.6/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.6/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.6/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.6/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.6/@designmodel" valid="false" counterExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!15 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!99 -> callwire_req?99 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!99 -> driverquerywire_req?99 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!99 -> driverquerywire_res?99 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!99 -> assignwire_pub?99 -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!99 -> callwire_res?99 -> oraclepaywire_token?15 -> (oraclepaywire_token!15 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?15)*" visitedStates="3051" verifyTime="0.0806633" testport="//@interimmodels.6/@designmodel/@component.0/@port.0" traceExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!15 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!99 -> callwire_req?99 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!99 -> driverquerywire_req?99 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!99 -> driverquerywire_res?99 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!99 -> assignwire_pub?99 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!99 -> callwire_res?99 -> oraclepaywire_token?15 -> (oraclepaywire_token!15 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?15)*" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.6/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.6/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.6/@designmodel" valid="false" counterExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!92 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!29 -> callwire_req?29 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!29 -> driverquerywire_req?29 -> DriverRecord_driverquerywire_readstorage_invoke -> oraclepaywire_token?92 -> (oraclepaywire_token!92 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?92)*" visitedStates="2510" verifyTime="0.0515802" testport="//@interimmodels.6/@designmodel/@component.0/@port.0" traceExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!92 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!29 -> callwire_req?29 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!29 -> driverquerywire_req?29 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!29 -> driverquerywire_res?29 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!29 -> assignwire_pub?29 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!29 -> callwire_res?29 -> oraclepaywire_token?92 -> (oraclepaywire_token!92 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?92)*" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverRecord.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.6/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.6/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.6/@designmodel" counterExample="" visitedStates="10" verifyTime="0.003918" testport="//@interimmodels.6/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_writer_process -> paywire_req!84 -> paywire_req?84 -> Payment_paywire_writestorage_invoke -> Payment_record_payrecorded -> Payment_paywire_writestorage_process -> paywire_res!84 -> paywire_res?84" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.6/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.6/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.6/@designmodel" valid="false" counterExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!51 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!20 -> authwire_req?20 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!20 -> userquerywire_req?20 -> UserDB_userquerywire_readstorage_invoke -> oraclepaywire_token?51 -> (oraclepaywire_token!51 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?51)*" visitedStates="1382" verifyTime="0.028953" testport="//@interimmodels.6/@designmodel/@component.0/@port.2" traceExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!51 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!20 -> authwire_req?20 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!20 -> userquerywire_req?20 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!20 -> userquerywire_res?20 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!20 -> authwire_res?20 -> oraclepaywire_token?51 -> (oraclepaywire_token!51 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?51)*" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.6/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.6/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.6/@designmodel" valid="false" counterExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!27 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!42 -> authwire_req?42 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!42 -> userquerywire_req?42 -> UserDB_userquerywire_readstorage_invoke -> oraclepaywire_token?27 -> (oraclepaywire_token!27 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?27)*" visitedStates="1382" verifyTime="0.0381789" testport="//@interimmodels.6/@designmodel/@component.2/@port.1" traceExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!27 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!42 -> authwire_req?42 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!42 -> userquerywire_req?42 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!42 -> userquerywire_res?42 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!42 -> authwire_res?42 -> oraclepaywire_token?27 -> (oraclepaywire_token!27 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?27)*" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.6/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.6/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-driverupdatewire" valid="false" counterExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!84 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> DriverUI_locate_located -> DriverUI_driverupdatewire_commander_process -> driverupdatewire_stmt!60 -> driverupdatewire_cmmd!60 -> driverupdatewire_cmmd?60 -> DriverupdatewireCommandLog_logdriverupdatewire_logged -> DriverupdatewireCommandLog_driverupdatewire_commandstore_process -> oraclepaywire_token?84 -> (oraclepaywire_token!84 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?84)*" visitedStates="636" verifyTime="0.0164284" testport="//@interimmodels.6/@designmodel/@component.2/@port.2" traceExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!84 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> DriverUI_locate_located -> DriverUI_driverupdatewire_commander_process -> driverupdatewire_stmt!60 -> driverupdatewire_cmmd!60 -> driverupdatewire_cmmd?60 -> DriverupdatewireCommandLog_logdriverupdatewire_logged -> DriverupdatewireCommandLog_driverupdatewire_commandstore_process -> DriverupdatewireCommandLog_driverupdatewire_commandstore_persist -> oraclepaywire_token?84 -> (oraclepaywire_token!84 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?84)*" exprText="[] (DriverUI.locate.located-> &lt;> DriverupdatewireCommandLog.driverupdatewire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" visitedStates="1184" verifyTime="0.027004999999999998" testport="//@interimmodels.6/@designmodel/@component.0/@port.1" traceExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!32 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PassengerUI_pay_issuepay -> PassengerUI_paywire_writer_process -> paywire_req!74 -> paywire_req?74 -> Payment_paywire_writestorage_invoke -> Payment_record_payrecorded -> Payment_paywire_writestorage_process -> paywire_res!74 -> paywire_res?74 -> oraclepaywire_token?32 -> (PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token!32 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token?32 -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored)*" exprText="[] (PaymentOracle.Paymentsupply.supplied-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.8"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.6/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.6/@designmodel/@component.3 //@interimmodels.6/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.6/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.6/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.6/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.6/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.6/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="9" description="deploy service: tripmgmt" nextModel="//@interimmodels.8" name="deploy-service">
    <designmodel name="inter9">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.7/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.7/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.7/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.7/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.7/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.7/@designmodel/@connector.0/@role.1 //@interimmodels.7/@designmodel/@connector.1/@role.0 //@interimmodels.7/@designmodel/@connector.2/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.7/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.7/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.7/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.7/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.7/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.7/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.7/@designmodel/@host.0/@node.1">
        <port name="record" role="//@interimmodels.7/@designmodel/@connector.3/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.7/@designmodel/@connector.4/@role.1" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.7/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.7/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.7/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.7/@designmodel/@connector.5/@role.1 //@interimmodels.7/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.7/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.7/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" role="//@interimmodels.7/@designmodel/@connector.8/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" role="//@interimmodels.7/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentOracle" type="server,oracle">
        <port name="Paymentsupply" role="//@interimmodels.7/@designmodel/@connector.8/@role.1" type="response,orafeed,OutboundPort,InboundPort">
          <events name="supplied"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.2"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.7/@designmodel/@connector.2/@role.0" connector="//@interimmodels.7/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.1"/>
        <role name="subscriber" roletype="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.7/@designmodel/@connector.1"/>
      </connector>
      <connector name="driverquerywire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.7/@designmodel/@connector.1/@role.0" connector="//@interimmodels.7/@designmodel/@connector.2"/>
        <role name="readstorage" roletype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.7/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.3"/>
        <role name="writestorage" roletype="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.7/@designmodel/@connector.3"/>
      </connector>
      <connector name="payprocesswire" type="REConnector" connectortype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.4"/>
        <role name="readstorage" roletype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.7/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.7/@designmodel/@connector.6/@role.0" connector="//@interimmodels.7/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.7/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="CRConnector" connectortype="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.7/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.3/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.7/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.7/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.7/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.7/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.7/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.7/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.7/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.7/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.7/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.7/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.7/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.7/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.7/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.7/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.7/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.7/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.7/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.7/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.7/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.7/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.7/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.7/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.7/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.7/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.7/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.7/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.7/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.7/@designmodel" valid="false" counterExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!78 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!80 -> callwire_req?80 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!80 -> driverquerywire_req?80 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!80 -> driverquerywire_res?80 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!80 -> assignwire_pub?80 -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!80 -> callwire_res?80 -> oraclepaywire_token?78 -> (oraclepaywire_token!78 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?78)*" visitedStates="3051" verifyTime="0.070383" testport="//@interimmodels.7/@designmodel/@component.0/@port.0" traceExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!78 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!80 -> callwire_req?80 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!80 -> driverquerywire_req?80 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!80 -> driverquerywire_res?80 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!80 -> assignwire_pub?80 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!80 -> callwire_res?80 -> oraclepaywire_token?78 -> (oraclepaywire_token!78 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?78)*" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.7/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.7/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.7/@designmodel" valid="false" counterExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!31 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!77 -> callwire_req?77 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!77 -> driverquerywire_req?77 -> DriverRecord_driverquerywire_readstorage_invoke -> oraclepaywire_token?31 -> (oraclepaywire_token!31 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?31)*" visitedStates="2510" verifyTime="0.0538016" testport="//@interimmodels.7/@designmodel/@component.0/@port.0" traceExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!31 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!77 -> callwire_req?77 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!77 -> driverquerywire_req?77 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!77 -> driverquerywire_res?77 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!77 -> assignwire_pub?77 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!77 -> callwire_res?77 -> oraclepaywire_token?31 -> (oraclepaywire_token!31 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?31)*" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverDB.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.7/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.7/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.7/@designmodel" counterExample="" visitedStates="627" verifyTime="0.0167473" testport="//@interimmodels.7/@designmodel/@component.0/@port.1" traceExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!35 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PassengerUI_pay_issuepay -> PassengerUI_paywire_writer_process -> paywire_req!89 -> paywire_req?89 -> Payment_paywire_writestorage_invoke -> Payment_record_payrecorded -> Payment_paywire_writestorage_process -> paywire_res!89 -> paywire_res?89 -> oraclepaywire_token?35 -> (oraclepaywire_token!35 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?35)*" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.7/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.7/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.7/@designmodel" valid="false" counterExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!15 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!69 -> authwire_req?69 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!69 -> userquerywire_req?69 -> UserDB_userquerywire_readstorage_invoke -> oraclepaywire_token?15 -> (oraclepaywire_token!15 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?15)*" visitedStates="1382" verifyTime="0.027489399999999997" testport="//@interimmodels.7/@designmodel/@component.0/@port.2" traceExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!15 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!69 -> authwire_req?69 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!69 -> userquerywire_req?69 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!69 -> userquerywire_res?69 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!69 -> authwire_res?69 -> oraclepaywire_token?15 -> (oraclepaywire_token!15 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?15)*" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.7/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.7/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.7/@designmodel" valid="false" counterExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!41 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!27 -> authwire_req?27 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!27 -> userquerywire_req?27 -> UserDB_userquerywire_readstorage_invoke -> oraclepaywire_token?41 -> (oraclepaywire_token!41 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?41)*" visitedStates="1382" verifyTime="0.1099836" testport="//@interimmodels.7/@designmodel/@component.2/@port.1" traceExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!41 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!27 -> authwire_req?27 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!27 -> userquerywire_req?27 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!27 -> userquerywire_res?27 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!27 -> authwire_res?27 -> oraclepaywire_token?41 -> (oraclepaywire_token!41 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?41)*" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.7/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.7/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-driverupdatewire" valid="false" counterExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!79 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> DriverUI_locate_located -> DriverUI_driverupdatewire_commander_process -> driverupdatewire_stmt!96 -> driverupdatewire_cmmd!96 -> driverupdatewire_cmmd?96 -> DriverupdatewireCommandLog_logdriverupdatewire_logged -> DriverupdatewireCommandLog_driverupdatewire_commandstore_process -> oraclepaywire_token?79 -> (oraclepaywire_token!79 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?79)*" visitedStates="636" verifyTime="0.0228302" testport="//@interimmodels.7/@designmodel/@component.2/@port.2" traceExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!79 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> DriverUI_locate_located -> DriverUI_driverupdatewire_commander_process -> driverupdatewire_stmt!96 -> driverupdatewire_cmmd!96 -> driverupdatewire_cmmd?96 -> DriverupdatewireCommandLog_logdriverupdatewire_logged -> DriverupdatewireCommandLog_driverupdatewire_commandstore_process -> DriverupdatewireCommandLog_driverupdatewire_commandstore_persist -> oraclepaywire_token?79 -> (oraclepaywire_token!79 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?79)*" exprText="[] (DriverUI.locate.located-> &lt;> DriverupdatewireCommandLog.driverupdatewire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" visitedStates="1184" verifyTime="0.035025299999999995" testport="//@interimmodels.7/@designmodel/@component.0/@port.1" traceExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!74 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PassengerUI_pay_issuepay -> PassengerUI_paywire_writer_process -> paywire_req!85 -> paywire_req?85 -> Payment_paywire_writestorage_invoke -> Payment_record_payrecorded -> Payment_paywire_writestorage_process -> paywire_res!85 -> paywire_res?85 -> oraclepaywire_token?74 -> (PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token!74 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token?74 -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored)*" exprText="[] (PaymentOracle.Paymentsupply.supplied-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.8"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.7/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.7/@designmodel/@component.3 //@interimmodels.7/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.7/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.7/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.7/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.7/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.7/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="11" description="network route for connector:paywire between: passengerui paymentoracle " nextModel="//@interimmodels.9" isStable="true" name="network-route">
    <designmodel name="inter11">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.8/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.8/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.8/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.8/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.8/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.8/@designmodel/@connector.0/@role.1 //@interimmodels.8/@designmodel/@connector.1/@role.0 //@interimmodels.8/@designmodel/@connector.2/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.8/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.8/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.8/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.8/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.8/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.8/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.8/@designmodel/@host.0/@node.1">
        <port name="record" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.8/@designmodel/@connector.4/@role.1" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.8/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.8/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.8/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.8/@designmodel/@connector.5/@role.1 //@interimmodels.8/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.8/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.8/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" role="//@interimmodels.8/@designmodel/@connector.8/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" role="//@interimmodels.8/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentOracle" type="server,oracle">
        <port name="Paymentsupply" role="//@interimmodels.8/@designmodel/@connector.8/@role.1 //@interimmodels.8/@designmodel/@connector.3/@role.1" type="response,orafeed,OutboundPort,InboundPort">
          <events name="supplied"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.2"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.8/@designmodel/@connector.2/@role.0" connector="//@interimmodels.8/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.1"/>
        <role name="subscriber" roletype="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.8/@designmodel/@connector.1"/>
      </connector>
      <connector name="driverquerywire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.8/@designmodel/@connector.1/@role.0" connector="//@interimmodels.8/@designmodel/@connector.2"/>
        <role name="readstorage" roletype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.8/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="CSConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.3"/>
        <role name="responder" type="in" nextRoleExpr="//@interimmodels.8/@designmodel/@connector.8/@role.1">
          <roletype href="target.arch#//@archstyle.0/@connectortype.0/@roletype.1"/>
          <connector href="target.arch#//@connector.3"/>
        </role>
      </connector>
      <connector name="payprocesswire" type="REConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.4"/>
        <role name="readstorage" roletype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.8/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.8/@designmodel/@connector.6/@role.0" connector="//@interimmodels.8/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.8/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="CRConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.8/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.3/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.8/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.8/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.8/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.8/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.8/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.8/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.8/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.8/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.8/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.8/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.8/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.8/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.8/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.8/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.8/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.8/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.8/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.8/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.8/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.8/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.8/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.8/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.8/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.8/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.8/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.8/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.8/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.8/@designmodel" visitedStates="79" verifyTime="0.0042082" testport="//@interimmodels.8/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!16 -> callwire_req?16 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!16 -> driverquerywire_req?16 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!16 -> driverquerywire_res?16 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!16 -> assignwire_pub?16 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!16 -> callwire_res?16" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.8/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.8/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.8/@designmodel" visitedStates="54" verifyTime="0.0031750999999999997" testport="//@interimmodels.8/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!24 -> callwire_req?24 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!24 -> driverquerywire_req?24 -> DriverDB_driverquerywire_readstorage_invoke -> DriverDB_driverquery_quried -> DriverDB_driverquerywire_readstorage_process -> driverquerywire_res!24 -> driverquerywire_res?24 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!24 -> assignwire_pub?24 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!24 -> callwire_res?24" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverRecord.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.8/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.8/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.8/@designmodel" counterExample="" visitedStates="40" verifyTime="0.0031592" testport="//@interimmodels.8/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_requester_process -> paywire_req!53 -> paywire_req?53 -> PaymentOracle_paywire_responder_invoke -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!53 -> PaymentOracle_paywire_responder_process -> paywire_res!53 -> oraclepaywire_token?53 -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> paywire_res?53" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.8/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.8/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.8/@designmodel" visitedStates="29" verifyTime="0.0036460999999999998" testport="//@interimmodels.8/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!21 -> authwire_req?21 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!21 -> userquerywire_req?21 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!21 -> userquerywire_res?21 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!21 -> authwire_res?21" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.8/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.8/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.8/@designmodel" visitedStates="29" verifyTime="0.0068251" testport="//@interimmodels.8/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!79 -> authwire_req?79 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!79 -> userquerywire_req?79 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!79 -> userquerywire_res?79 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!79 -> authwire_res?79" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.8/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.8/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-driverupdatewire" visitedStates="16" verifyTime="0.0033932999999999997" testport="//@interimmodels.8/@designmodel/@component.2/@port.2" traceExample="init -> DriverUI_locate_located -> DriverUI_driverupdatewire_commander_process -> driverupdatewire_stmt!76 -> driverupdatewire_cmmd!76 -> driverupdatewire_cmmd?76 -> DriverupdatewireCommandLog_logdriverupdatewire_logged -> DriverupdatewireCommandLog_driverupdatewire_commandstore_process -> DriverupdatewireCommandLog_driverupdatewire_commandstore_persist" exprText="[] (DriverUI.locate.located-> &lt;> DriverupdatewireCommandLog.driverupdatewire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" visitedStates="67" verifyTime="0.0036290999999999997" testport="//@interimmodels.8/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_requester_process -> paywire_req!47 -> paywire_req?47 -> PaymentOracle_paywire_responder_invoke -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!47 -> PaymentOracle_paywire_responder_process -> paywire_res!47 -> oraclepaywire_token?47 -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> paywire_res?47" exprText="[] (PaymentOracle.Paymentsupply.supplied-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.8"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.8/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.8/@designmodel/@component.3 //@interimmodels.8/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.8/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.8/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.8/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.8/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.8/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="12" description="network route for connector:driverupdatewire between: driverui driverrecord " nextModel="//@interimmodels.10" isStable="true" name="network-route">
    <designmodel name="inter12">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.9/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.9/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.9/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.9/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.9/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.9/@designmodel/@connector.0/@role.1 //@interimmodels.9/@designmodel/@connector.1/@role.0 //@interimmodels.9/@designmodel/@connector.2/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.9/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.9/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.9/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.9/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.9/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.9/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" role="//@interimmodels.9/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.9/@designmodel/@host.0/@node.1">
        <port name="record" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.9/@designmodel/@connector.4/@role.1" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.9/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.9/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.9/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.9/@designmodel/@connector.5/@role.1 //@interimmodels.9/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.9/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.9/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" role="//@interimmodels.9/@designmodel/@connector.8/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" role="//@interimmodels.9/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentOracle" type="server,oracle">
        <port name="Paymentsupply" role="//@interimmodels.9/@designmodel/@connector.8/@role.1 //@interimmodels.9/@designmodel/@connector.3/@role.1" type="response,orafeed,OutboundPort,InboundPort">
          <events name="supplied"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.2"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.9/@designmodel/@connector.2/@role.0" connector="//@interimmodels.9/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.1"/>
        <role name="subscriber" roletype="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.9/@designmodel/@connector.1"/>
      </connector>
      <connector name="driverquerywire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.9/@designmodel/@connector.1/@role.0" connector="//@interimmodels.9/@designmodel/@connector.2"/>
        <role name="readstorage" roletype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.9/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="CSConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.3"/>
        <role name="responder" type="in" nextRoleExpr="//@interimmodels.9/@designmodel/@connector.8/@role.1">
          <roletype href="target.arch#//@archstyle.0/@connectortype.0/@roletype.1"/>
          <connector href="target.arch#//@connector.3"/>
        </role>
      </connector>
      <connector name="payprocesswire" type="REConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.4"/>
        <role name="readstorage" roletype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.9/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.9/@designmodel/@connector.6/@role.0" connector="//@interimmodels.9/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.9/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="CRConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.9/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.3/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.9/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.9/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.9/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.9/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.9/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.9/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.9/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.9/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.9/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.9/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.9/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.9/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.9/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.9/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.9/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.9/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.9/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.9/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.9/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.9/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.9/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.9/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.9/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.9/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.9/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.9/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.9/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.9/@designmodel" visitedStates="79" verifyTime="0.0053162999999999995" testport="//@interimmodels.9/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!68 -> callwire_req?68 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!68 -> driverquerywire_req?68 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!68 -> driverquerywire_res?68 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!68 -> assignwire_pub?68 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!68 -> callwire_res?68" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.9/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.9/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.9/@designmodel" visitedStates="54" verifyTime="0.005399999999999999" testport="//@interimmodels.9/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!71 -> callwire_req?71 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!71 -> driverquerywire_req?71 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!71 -> driverquerywire_res?71 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!71 -> assignwire_pub?71 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!71 -> callwire_res?71" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverRecord.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.9/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.9/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.9/@designmodel" counterExample="" visitedStates="40" verifyTime="0.0042753" testport="//@interimmodels.9/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_requester_process -> paywire_req!29 -> paywire_req?29 -> PaymentOracle_paywire_responder_invoke -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!29 -> PaymentOracle_paywire_responder_process -> paywire_res!29 -> oraclepaywire_token?29 -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> paywire_res?29" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.9/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.9/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.9/@designmodel" visitedStates="29" verifyTime="0.0072575999999999995" testport="//@interimmodels.9/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!44 -> authwire_req?44 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!44 -> userquerywire_req?44 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!44 -> userquerywire_res?44 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!44 -> authwire_res?44" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.9/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.9/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.9/@designmodel" visitedStates="29" verifyTime="0.0037487999999999996" testport="//@interimmodels.9/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!47 -> authwire_req?47 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!47 -> userquerywire_req?47 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!47 -> userquerywire_res?47 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!47 -> authwire_res?47" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.9/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.9/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-driverupdatewire" visitedStates="96" verifyTime="0.0055147" testport="//@interimmodels.9/@designmodel/@component.2/@port.2" traceExample="init -> DriverUI_locate_located -> DriverUI_driverupdatewire_commander_process -> driverupdatewire_stmt!18 -> driverupdatewire_stmt?18 -> DriverRecord_driverupdate_updated -> DriverRecord_driverupdatewire_readstore_process -> DriverRecord_driverupdatewire_readstore_persist -> driverupdatewire_cmmd!18 -> driverupdatewire_cmmd?18 -> DriverupdatewireCommandLog_logdriverupdatewire_logged -> DriverupdatewireCommandLog_driverupdatewire_commandstore_process -> DriverupdatewireCommandLog_driverupdatewire_commandstore_persist" exprText="[] (DriverUI.locate.located-> &lt;> DriverupdatewireCommandLog.driverupdatewire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" visitedStates="67" verifyTime="0.0053555" testport="//@interimmodels.9/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_requester_process -> paywire_req!35 -> paywire_req?35 -> PaymentOracle_paywire_responder_invoke -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!35 -> PaymentOracle_paywire_responder_process -> paywire_res!35 -> oraclepaywire_token?35 -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> paywire_res?35" exprText="[] (PaymentOracle.Paymentsupply.supplied-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.8"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.9/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.9/@designmodel/@component.3 //@interimmodels.9/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.9/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.9/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.9/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.9/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.9/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="13" description="network route for connector:assignwire between: tripmgmt driverui " nextModel="//@interimmodels.11" name="network-route">
    <designmodel name="inter13">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.10/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.10/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.10/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.10/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.10/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.10/@designmodel/@connector.0/@role.1 //@interimmodels.10/@designmodel/@connector.2/@role.0 //@interimmodels.10/@designmodel/@connector.1/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.10/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.10/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.10/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.10/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.10/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.10/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" role="//@interimmodels.10/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.10/@designmodel/@host.0/@node.1">
        <port name="record" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.10/@designmodel/@connector.4/@role.1" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.10/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.10/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.10/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.10/@designmodel/@connector.5/@role.1 //@interimmodels.10/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.10/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.10/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" role="//@interimmodels.10/@designmodel/@connector.8/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" role="//@interimmodels.10/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentOracle" type="server,oracle">
        <port name="Paymentsupply" role="//@interimmodels.10/@designmodel/@connector.8/@role.1 //@interimmodels.10/@designmodel/@connector.3/@role.1" type="response,orafeed,OutboundPort,InboundPort">
          <events name="supplied"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.2"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.10/@designmodel/@connector.2/@role.0" connector="//@interimmodels.10/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="ESConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.1"/>
        <role name="eventsubscriber" roletype="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.10/@designmodel/@connector.1"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.1"/>
        </role>
      </connector>
      <connector name="driverquerywire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.10/@designmodel/@connector.1/@role.0" connector="//@interimmodels.10/@designmodel/@connector.2"/>
        <role name="readstorage" roletype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.10/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="CSConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.3"/>
        <role name="responder" type="in" nextRoleExpr="//@interimmodels.10/@designmodel/@connector.8/@role.1">
          <roletype href="target.arch#//@archstyle.0/@connectortype.0/@roletype.1"/>
          <connector href="target.arch#//@connector.3"/>
        </role>
      </connector>
      <connector name="payprocesswire" type="REConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.4"/>
        <role name="readstorage" roletype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.10/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.10/@designmodel/@connector.6/@role.0" connector="//@interimmodels.10/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.10/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="CRConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.10/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.3/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.10/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.10/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.10/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.10/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.10/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.10/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.10/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.10/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.10/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.10/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.10/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.10/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.10/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.10/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.10/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.10/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.10/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.10/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.10/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.10/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.10/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.10/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.10/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.10/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.10/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.10/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.10/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.10/@designmodel" valid="false" counterExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!14 -> callwire_req?14 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!14 -> driverquerywire_req?14 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!14 -> driverquerywire_res?14 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!14" visitedStates="35" verifyTime="0.0048435" testport="//@interimmodels.10/@designmodel/@component.0/@port.0" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter13() |= ![](PassengerUI_call_callride->&lt;" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.10/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.10/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.10/@designmodel" visitedStates="23" verifyTime="0.0042079" testport="//@interimmodels.10/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!97 -> callwire_req?97 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!97 -> driverquerywire_req?97 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!97 -> driverquerywire_res?97 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!97" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverRecord.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.10/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.10/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.10/@designmodel" counterExample="" visitedStates="40" verifyTime="0.0074567999999999995" testport="//@interimmodels.10/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_requester_process -> paywire_req!42 -> paywire_req?42 -> PaymentOracle_paywire_responder_invoke -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!42 -> PaymentOracle_paywire_responder_process -> paywire_res!42 -> oraclepaywire_token?42 -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> paywire_res?42" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.10/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.10/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.10/@designmodel" visitedStates="29" verifyTime="0.0082629" testport="//@interimmodels.10/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!24 -> authwire_req?24 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!24 -> userquerywire_req?24 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!24 -> userquerywire_res?24 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!24 -> authwire_res?24" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.10/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.10/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.10/@designmodel" visitedStates="29" verifyTime="0.0038799" testport="//@interimmodels.10/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!35 -> authwire_req?35 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!35 -> userquerywire_req?35 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!35 -> userquerywire_res?35 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!35 -> authwire_res?35" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.10/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.10/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-driverupdatewire" visitedStates="96" verifyTime="0.0725627" testport="//@interimmodels.10/@designmodel/@component.2/@port.2" traceExample="init -> DriverUI_locate_located -> DriverUI_driverupdatewire_commander_process -> driverupdatewire_stmt!82 -> driverupdatewire_stmt?82 -> DriverRecord_driverupdate_updated -> DriverRecord_driverupdatewire_readstore_process -> DriverRecord_driverupdatewire_readstore_persist -> driverupdatewire_cmmd!82 -> driverupdatewire_cmmd?82 -> DriverupdatewireCommandLog_logdriverupdatewire_logged -> DriverupdatewireCommandLog_driverupdatewire_commandstore_process -> DriverupdatewireCommandLog_driverupdatewire_commandstore_persist" exprText="[] (DriverUI.locate.located-> &lt;> DriverupdatewireCommandLog.driverupdatewire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" visitedStates="67" verifyTime="0.0088819" testport="//@interimmodels.10/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_requester_process -> paywire_req!24 -> paywire_req?24 -> PaymentOracle_paywire_responder_invoke -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!24 -> PaymentOracle_paywire_responder_process -> paywire_res!24 -> oraclepaywire_token?24 -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> paywire_res?24" exprText="[] (PaymentOracle.Paymentsupply.supplied-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.8"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-assignwire" valid="false" counterExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!85 -> callwire_req?85 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!85 -> driverquerywire_req?85 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!85 -> driverquerywire_res?85 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!85" visitedStates="30" verifyTime="0.0044599999999999996" testport="//@interimmodels.10/@designmodel/@component.0/@port.0" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter13() |= ![](TripMgmt_accept_acknowledged->&lt;" exprText="[] (TripMgmt.accept.acknowledged-> &lt;> AssignwireLog.assignwire.eventstore.persist)">
        <connector href="target.arch#//@connector.1"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.10/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.10/@designmodel/@component.3 //@interimmodels.10/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.10/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.10/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.10/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.10/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.10/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="14" description="deploy service: payment" nextModel="//@interimmodels.12" name="deploy-service">
    <designmodel name="inter14">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.11/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.11/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.11/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.11/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.11/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.11/@designmodel/@connector.0/@role.1 //@interimmodels.11/@designmodel/@connector.2/@role.0 //@interimmodels.11/@designmodel/@connector.1/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.11/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.11/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.11/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.11/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.11/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.11/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" role="//@interimmodels.11/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.11/@designmodel/@host.0/@node.1">
        <port name="record" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.11/@designmodel/@connector.4/@role.1" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.11/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.11/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.11/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.11/@designmodel/@connector.5/@role.1 //@interimmodels.11/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.11/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.11/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" role="//@interimmodels.11/@designmodel/@connector.8/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" role="//@interimmodels.11/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentOracle" type="server,oracle">
        <port name="Paymentsupply" role="//@interimmodels.11/@designmodel/@connector.8/@role.1 //@interimmodels.11/@designmodel/@connector.3/@role.1" type="response,orafeed,OutboundPort,InboundPort">
          <events name="supplied"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.2"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.11/@designmodel/@connector.2/@role.0" connector="//@interimmodels.11/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="ESConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.1"/>
        <role name="eventsubscriber" roletype="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.11/@designmodel/@connector.1"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.1"/>
        </role>
      </connector>
      <connector name="driverquerywire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.11/@designmodel/@connector.1/@role.0" connector="//@interimmodels.11/@designmodel/@connector.2"/>
        <role name="readstorage" roletype="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.11/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="CSConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.3"/>
        <role name="responder" type="in" nextRoleExpr="//@interimmodels.11/@designmodel/@connector.8/@role.1">
          <roletype href="target.arch#//@archstyle.0/@connectortype.0/@roletype.1"/>
          <connector href="target.arch#//@connector.3"/>
        </role>
      </connector>
      <connector name="payprocesswire" type="REConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.4"/>
        <role name="readstorage" roletype="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.11/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.11/@designmodel/@connector.6/@role.0" connector="//@interimmodels.11/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.11/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="CRConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.11/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.3/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.11/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.11/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.11/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.11/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.11/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.11/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.11/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.11/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.11/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.11/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.11/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.11/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.11/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.11/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.11/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.11/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.11/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.11/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.11/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.11/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.11/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.11/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.11/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.11/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.11/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.11/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.11/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.11/@designmodel" valid="false" counterExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!93 -> callwire_req?93 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!93 -> driverquerywire_req?93 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!93 -> driverquerywire_res?93 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!93" visitedStates="35" verifyTime="0.0043798" testport="//@interimmodels.11/@designmodel/@component.0/@port.0" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter14() |= ![](PassengerUI_call_callride->&lt;" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.11/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.11/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.11/@designmodel" visitedStates="23" verifyTime="0.0043774" testport="//@interimmodels.11/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!15 -> callwire_req?15 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!15 -> driverquerywire_req?15 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!15 -> driverquerywire_res?15 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!15" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverRecord.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.11/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.11/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.11/@designmodel" counterExample="" visitedStates="40" verifyTime="0.004749199999999999" testport="//@interimmodels.11/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_requester_process -> paywire_req!87 -> paywire_req?87 -> PaymentOracle_paywire_responder_invoke -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!87 -> PaymentOracle_paywire_responder_process -> paywire_res!87 -> oraclepaywire_token?87 -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> paywire_res?87" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.11/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.11/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.11/@designmodel" visitedStates="29" verifyTime="0.004085" testport="//@interimmodels.11/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!65 -> authwire_req?65 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!65 -> userquerywire_req?65 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!65 -> userquerywire_res?65 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!65 -> authwire_res?65" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.11/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.11/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.11/@designmodel" visitedStates="29" verifyTime="0.0039363" testport="//@interimmodels.11/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!54 -> authwire_req?54 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!54 -> userquerywire_req?54 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!54 -> userquerywire_res?54 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!54 -> authwire_res?54" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.11/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.11/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-driverupdatewire" visitedStates="96" verifyTime="0.0060038" testport="//@interimmodels.11/@designmodel/@component.2/@port.2" traceExample="init -> DriverUI_locate_located -> DriverUI_driverupdatewire_commander_process -> driverupdatewire_stmt!83 -> driverupdatewire_stmt?83 -> DriverRecord_driverupdate_updated -> DriverRecord_driverupdatewire_readstore_process -> DriverRecord_driverupdatewire_readstore_persist -> driverupdatewire_cmmd!83 -> driverupdatewire_cmmd?83 -> DriverupdatewireCommandLog_logdriverupdatewire_logged -> DriverupdatewireCommandLog_driverupdatewire_commandstore_process -> DriverupdatewireCommandLog_driverupdatewire_commandstore_persist" exprText="[] (DriverUI.locate.located-> &lt;> DriverupdatewireCommandLog.driverupdatewire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" visitedStates="67" verifyTime="0.0046426" testport="//@interimmodels.11/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_requester_process -> paywire_req!58 -> paywire_req?58 -> PaymentOracle_paywire_responder_invoke -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!58 -> PaymentOracle_paywire_responder_process -> paywire_res!58 -> oraclepaywire_token?58 -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> paywire_res?58" exprText="[] (PaymentOracle.Paymentsupply.supplied-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.8"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-assignwire" valid="false" counterExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!11 -> callwire_req?11 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!11 -> driverquerywire_req?11 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!11 -> driverquerywire_res?11 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!11" visitedStates="30" verifyTime="0.0052732" testport="//@interimmodels.11/@designmodel/@component.0/@port.0" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter14() |= ![](TripMgmt_accept_acknowledged->&lt;" exprText="[] (TripMgmt.accept.acknowledged-> &lt;> AssignwireLog.assignwire.eventstore.persist)">
        <connector href="target.arch#//@connector.1"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.11/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.11/@designmodel/@component.3 //@interimmodels.11/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.11/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.11/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.11/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.11/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.11/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="15" description="network route for connector:driverquerywire between: tripmgmt driverrecord " nextModel="//@interimmodels.13" name="network-route">
    <designmodel name="inter15">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.12/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.12/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.12/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.12/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.12/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.12/@designmodel/@connector.0/@role.1 //@interimmodels.12/@designmodel/@connector.1/@role.0 //@interimmodels.12/@designmodel/@connector.2/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.12/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.12/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.12/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.12/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.12/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.12/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" role="//@interimmodels.12/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.12/@designmodel/@host.0/@node.1">
        <port name="record" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.12/@designmodel/@connector.4/@role.1" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.12/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.12/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.12/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.12/@designmodel/@connector.5/@role.1 //@interimmodels.12/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.12/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.12/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" role="//@interimmodels.12/@designmodel/@connector.8/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" role="//@interimmodels.12/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentOracle" type="server,oracle">
        <port name="Paymentsupply" role="//@interimmodels.12/@designmodel/@connector.8/@role.1 //@interimmodels.12/@designmodel/@connector.3/@role.1" type="response,orafeed,OutboundPort,InboundPort">
          <events name="supplied"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.2"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.12/@designmodel/@connector.2/@role.0" connector="//@interimmodels.12/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="ESConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.1"/>
        <role name="eventsubscriber" roletype="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.12/@designmodel/@connector.1"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.1"/>
        </role>
      </connector>
      <connector name="driverquerywire" type="QRConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0">
        <role name="querier" roletype="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.12/@designmodel/@connector.1/@role.0" connector="//@interimmodels.12/@designmodel/@connector.2"/>
        <role name="readstore" roletype="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.12/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="CSConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.3"/>
        <role name="responder" type="in" nextRoleExpr="//@interimmodels.12/@designmodel/@connector.8/@role.1">
          <roletype href="target.arch#//@archstyle.0/@connectortype.0/@roletype.1"/>
          <connector href="target.arch#//@connector.3"/>
        </role>
      </connector>
      <connector name="payprocesswire" type="REConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.4"/>
        <role name="readstorage" roletype="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.12/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.12/@designmodel/@connector.6/@role.0" connector="//@interimmodels.12/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.12/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="CRConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.12/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.3/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.12/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.12/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.12/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.12/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.12/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.12/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.12/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.12/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.12/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.12/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.12/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.12/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.12/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.12/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.12/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.12/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.12/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.12/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.12/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.12/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.12/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.12/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.12/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.12/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.12/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.12/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.12/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.12/@designmodel" valid="false" counterExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!28 -> callwire_req?28 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!28 -> driverquerywire_stmt?28 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!28 -> driverquerywire_res?28 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!28" visitedStates="33" verifyTime="0.0043022" testport="//@interimmodels.12/@designmodel/@component.0/@port.0" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter15() |= ![](PassengerUI_call_callride->&lt;" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.12/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.12/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.12/@designmodel" visitedStates="21" verifyTime="0.0036546" testport="//@interimmodels.12/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!19 -> callwire_req?19 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!19 -> driverquerywire_stmt?19 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!19 -> driverquerywire_res?19 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!19" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverDB.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.12/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.12/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.12/@designmodel" counterExample="" visitedStates="40" verifyTime="0.0043127999999999994" testport="//@interimmodels.12/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_requester_process -> paywire_req!52 -> paywire_req?52 -> PaymentOracle_paywire_responder_invoke -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!52 -> PaymentOracle_paywire_responder_process -> paywire_res!52 -> oraclepaywire_token?52 -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> paywire_res?52" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.12/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.12/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.12/@designmodel" visitedStates="29" verifyTime="0.0064459" testport="//@interimmodels.12/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!55 -> authwire_req?55 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!55 -> userquerywire_req?55 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!55 -> userquerywire_res?55 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!55 -> authwire_res?55" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.12/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.12/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.12/@designmodel" visitedStates="29" verifyTime="0.0041938" testport="//@interimmodels.12/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!38 -> authwire_req?38 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!38 -> userquerywire_req?38 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!38 -> userquerywire_res?38 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!38 -> authwire_res?38" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.12/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.12/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-driverupdatewire" visitedStates="96" verifyTime="0.004867799999999999" testport="//@interimmodels.12/@designmodel/@component.2/@port.2" traceExample="init -> DriverUI_locate_located -> DriverUI_driverupdatewire_commander_process -> driverupdatewire_stmt!72 -> driverupdatewire_stmt?72 -> DriverRecord_driverupdate_updated -> DriverRecord_driverupdatewire_readstore_process -> DriverRecord_driverupdatewire_readstore_persist -> driverupdatewire_cmmd!72 -> driverupdatewire_cmmd?72 -> DriverupdatewireCommandLog_logdriverupdatewire_logged -> DriverupdatewireCommandLog_driverupdatewire_commandstore_process -> DriverupdatewireCommandLog_driverupdatewire_commandstore_persist" exprText="[] (DriverUI.locate.located-> &lt;> DriverupdatewireCommandLog.driverupdatewire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" visitedStates="67" verifyTime="0.0045334" testport="//@interimmodels.12/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_requester_process -> paywire_req!91 -> paywire_req?91 -> PaymentOracle_paywire_responder_invoke -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!91 -> PaymentOracle_paywire_responder_process -> paywire_res!91 -> oraclepaywire_token?91 -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> paywire_res?91" exprText="[] (PaymentOracle.Paymentsupply.supplied-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.8"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-assignwire" valid="false" counterExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!27 -> callwire_req?27 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!27 -> driverquerywire_stmt?27 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!27 -> driverquerywire_res?27 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!27" visitedStates="28" verifyTime="0.0073148" testport="//@interimmodels.12/@designmodel/@component.0/@port.0" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter15() |= ![](TripMgmt_accept_acknowledged->&lt;" exprText="[] (TripMgmt.accept.acknowledged-> &lt;> AssignwireLog.assignwire.eventstore.persist)">
        <connector href="target.arch#//@connector.1"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-query-driverquerywire" visitedStates="22" verifyTime="0.004954699999999999" testport="//@interimmodels.12/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!91 -> callwire_req?91 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!91 -> driverquerywire_stmt?91 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!91 -> driverquerywire_res?91 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!91" exprText="[] (TripMgmt.accept.acknowledged-> &lt;> DriverRecord.driverquerywire.readstore.process)">
        <connector href="target.arch#//@connector.2"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.12/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.12/@designmodel/@component.3 //@interimmodels.12/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.12/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.12/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.12/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.12/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.12/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="16" description="network route for connector:ropayprocesswire between: payment paymentblockchain " nextModel="//@interimmodels.14" name="network-route">
    <designmodel name="inter16">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.13/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.13/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.13/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.13/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.13/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.13/@designmodel/@connector.0/@role.1 //@interimmodels.13/@designmodel/@connector.1/@role.0 //@interimmodels.13/@designmodel/@connector.2/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.13/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.13/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.13/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.13/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.13/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.13/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" role="//@interimmodels.13/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.13/@designmodel/@host.0/@node.1">
        <port name="record" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.13/@designmodel/@connector.4/@role.1 //@interimmodels.13/@designmodel/@connector.9/@role.0" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.13/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.13/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.13/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.13/@designmodel/@connector.5/@role.1 //@interimmodels.13/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.13/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.13/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" role="//@interimmodels.13/@designmodel/@connector.8/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" role="//@interimmodels.13/@designmodel/@connector.9/@role.1" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" role="//@interimmodels.13/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentOracle" type="server,oracle">
        <port name="Paymentsupply" role="//@interimmodels.13/@designmodel/@connector.8/@role.1 //@interimmodels.13/@designmodel/@connector.3/@role.1" type="response,orafeed,OutboundPort,InboundPort">
          <events name="supplied"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.2"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.13/@designmodel/@connector.2/@role.0" connector="//@interimmodels.13/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="ESConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.1"/>
        <role name="eventsubscriber" roletype="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.13/@designmodel/@connector.1"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.1"/>
        </role>
      </connector>
      <connector name="driverquerywire" type="QRConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0">
        <role name="querier" roletype="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.13/@designmodel/@connector.1/@role.0" connector="//@interimmodels.13/@designmodel/@connector.2"/>
        <role name="readstore" roletype="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.13/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="CSConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.3"/>
        <role name="responder" type="in" nextRoleExpr="//@interimmodels.13/@designmodel/@connector.8/@role.1">
          <roletype href="target.arch#//@archstyle.0/@connectortype.0/@roletype.1"/>
          <connector href="target.arch#//@connector.3"/>
        </role>
      </connector>
      <connector name="payprocesswire" type="REConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.4"/>
        <role name="readstorage" roletype="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.13/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.13/@designmodel/@connector.6/@role.0" connector="//@interimmodels.13/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.13/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="CRConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.13/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.3/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.13/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.13/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <connector name="ropayprocesswire" type="ROConnector">
        <role name="extquerier" type="out" connector="//@interimmodels.13/@designmodel/@connector.9">
          <roletype href="target.arch#//@archstyle.1/@connectortype.0/@roletype.0"/>
        </role>
        <role name="blocksupplier" type="in" connector="//@interimmodels.13/@designmodel/@connector.9">
          <roletype href="target.arch#//@archstyle.1/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.1/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.13/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.13/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.13/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.13/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.13/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.13/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.13/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.13/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.13/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.13/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.13/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.13/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.13/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.13/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.13/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.13/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.13/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.13/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.13/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.13/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.13/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.13/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.13/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.13/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.13/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.13/@designmodel" valid="false" counterExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!12 -> callwire_req?12 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!12 -> driverquerywire_stmt?12 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!12 -> driverquerywire_res?12 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!12" visitedStates="33" verifyTime="0.0068971" testport="//@interimmodels.13/@designmodel/@component.0/@port.0" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter16() |= ![](PassengerUI_call_callride->&lt;" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.13/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.13/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.13/@designmodel" visitedStates="21" verifyTime="0.06810229999999999" testport="//@interimmodels.13/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!52 -> callwire_req?52 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!52 -> driverquerywire_stmt?52 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!52 -> driverquerywire_res?52 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!52" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverDB.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.13/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.13/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.13/@designmodel" counterExample="" visitedStates="40" verifyTime="0.0059264" testport="//@interimmodels.13/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_requester_process -> paywire_req!79 -> paywire_req?79 -> PaymentOracle_paywire_responder_invoke -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!79 -> PaymentOracle_paywire_responder_process -> paywire_res!79 -> oraclepaywire_token?79 -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> paywire_res?79" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.13/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.13/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.13/@designmodel" visitedStates="29" verifyTime="0.0069374" testport="//@interimmodels.13/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!28 -> authwire_req?28 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!28 -> userquerywire_req?28 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!28 -> userquerywire_res?28 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!28 -> authwire_res?28" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.13/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.13/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.13/@designmodel" visitedStates="29" verifyTime="0.0054846999999999995" testport="//@interimmodels.13/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!26 -> authwire_req?26 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!26 -> userquerywire_req?26 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!26 -> userquerywire_res?26 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!26 -> authwire_res?26" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.13/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.13/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-driverupdatewire" visitedStates="96" verifyTime="0.0064973999999999995" testport="//@interimmodels.13/@designmodel/@component.2/@port.2" traceExample="init -> DriverUI_locate_located -> DriverUI_driverupdatewire_commander_process -> driverupdatewire_stmt!43 -> driverupdatewire_stmt?43 -> DriverRecord_driverupdate_updated -> DriverRecord_driverupdatewire_readstore_process -> DriverRecord_driverupdatewire_readstore_persist -> driverupdatewire_cmmd!43 -> driverupdatewire_cmmd?43 -> DriverupdatewireCommandLog_logdriverupdatewire_logged -> DriverupdatewireCommandLog_driverupdatewire_commandstore_process -> DriverupdatewireCommandLog_driverupdatewire_commandstore_persist" exprText="[] (DriverUI.locate.located-> &lt;> DriverupdatewireCommandLog.driverupdatewire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" visitedStates="67" verifyTime="0.0069356" testport="//@interimmodels.13/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_requester_process -> paywire_req!89 -> paywire_req?89 -> PaymentOracle_paywire_responder_invoke -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!89 -> PaymentOracle_paywire_responder_process -> paywire_res!89 -> oraclepaywire_token?89 -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> paywire_res?89" exprText="[] (PaymentOracle.Paymentsupply.supplied-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.8"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-assignwire" valid="false" counterExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!30 -> callwire_req?30 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!30 -> driverquerywire_stmt?30 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!30 -> driverquerywire_res?30 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!30" visitedStates="28" verifyTime="0.005079" testport="//@interimmodels.13/@designmodel/@component.0/@port.0" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter16() |= ![](TripMgmt_accept_acknowledged->&lt;" exprText="[] (TripMgmt.accept.acknowledged-> &lt;> AssignwireLog.assignwire.eventstore.persist)">
        <connector href="target.arch#//@connector.1"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-query-driverquerywire" visitedStates="22" verifyTime="0.005347" testport="//@interimmodels.13/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!87 -> callwire_req?87 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!87 -> driverquerywire_stmt?87 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!87 -> driverquerywire_res?87 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!87" exprText="[] (TripMgmt.accept.acknowledged-> &lt;> DriverRecord.driverquerywire.readstore.process)">
        <connector href="target.arch#//@connector.2"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-readropayprocesswire" visitedStates="10" verifyTime="0.0081114" testport="//@interimmodels.13/@designmodel/@component.5/@port.0" traceExample="init -> BillingGateway_process_processed -> BillingGateway_payprocesswire_reader_process -> payprocesswire_req!54 -> payprocesswire_req?54 -> Payment_payprocesswire_readstorage_invoke -> Payment_list_listed -> Payment_payprocesswire_readstorage_process -> payprocesswire_res!54 -> payprocesswire_res?54" exprText="[] (PaymentBlockchain.ropayprocesswire.blocksupplier.process-> &lt;> Payment.list.listed)">
        <connector href="target.arch#//@connector.9"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.13/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.13/@designmodel/@component.3 //@interimmodels.13/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.13/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.13/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.13/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.13/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.13/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="17" description="network route for connector:payprocesswire between: billinggateway payment " nextModel="//@interimmodels.15" name="network-route">
    <designmodel name="inter17">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.14/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.14/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.14/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.14/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.14/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.14/@designmodel/@connector.0/@role.1 //@interimmodels.14/@designmodel/@connector.1/@role.0 //@interimmodels.14/@designmodel/@connector.2/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.14/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.14/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.14/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.14/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.14/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.14/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" role="//@interimmodels.14/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.14/@designmodel/@host.0/@node.1">
        <port name="record" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.14/@designmodel/@connector.9/@role.0 //@interimmodels.14/@designmodel/@connector.4/@role.1" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.14/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.14/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.14/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.14/@designmodel/@connector.5/@role.1 //@interimmodels.14/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.14/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.14/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" role="//@interimmodels.14/@designmodel/@connector.8/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" role="//@interimmodels.14/@designmodel/@connector.9/@role.1" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" role="//@interimmodels.14/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentOracle" type="server,oracle">
        <port name="Paymentsupply" role="//@interimmodels.14/@designmodel/@connector.8/@role.1 //@interimmodels.14/@designmodel/@connector.3/@role.1" type="response,orafeed,OutboundPort,InboundPort">
          <events name="supplied"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.2"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.14/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.14/@designmodel/@connector.2/@role.0" connector="//@interimmodels.14/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="ESConnector" connectortype="//@interimmodels.14/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.14/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.14/@designmodel/@connector.1"/>
        <role name="eventsubscriber" roletype="//@interimmodels.14/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.14/@designmodel/@connector.1"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.1"/>
        </role>
      </connector>
      <connector name="driverquerywire" type="QRConnector" connectortype="//@interimmodels.14/@designmodel/@archstyle.7/@connectortype.0">
        <role name="querier" roletype="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.14/@designmodel/@connector.1/@role.0" connector="//@interimmodels.14/@designmodel/@connector.2"/>
        <role name="readstore" roletype="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.14/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="CSConnector" connectortype="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.14/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.14/@designmodel/@connector.3"/>
        <role name="responder" type="in" nextRoleExpr="//@interimmodels.14/@designmodel/@connector.8/@role.1">
          <roletype href="target.arch#//@archstyle.0/@connectortype.0/@roletype.1"/>
          <connector href="target.arch#//@connector.3"/>
        </role>
      </connector>
      <connector name="payprocesswire" type="CSConnector" connectortype="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.14/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.14/@designmodel/@connector.9/@role.0" connector="//@interimmodels.14/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.14/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.14/@designmodel/@connector.6/@role.0" connector="//@interimmodels.14/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.14/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.14/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="CRConnector" connectortype="//@interimmodels.14/@designmodel/@archstyle.3/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.14/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.14/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.14/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.14/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.3/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.14/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.14/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <connector name="ropayprocesswire" type="ROConnector">
        <role name="extquerier" type="out" connector="//@interimmodels.14/@designmodel/@connector.9">
          <roletype href="target.arch#//@archstyle.1/@connectortype.0/@roletype.0"/>
        </role>
        <role name="blocksupplier" type="in" connector="//@interimmodels.14/@designmodel/@connector.9">
          <roletype href="target.arch#//@archstyle.1/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.1/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.14/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.14/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.14/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.14/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.14/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.14/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.14/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.14/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.14/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.14/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.14/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.14/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.14/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.14/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.14/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.14/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.14/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.14/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.14/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.14/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.14/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.14/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.14/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.14/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.14/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.14/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.14/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.14/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.14/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.14/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.14/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.14/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.14/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.14/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.14/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.14/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.14/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.14/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.14/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.14/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.14/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.14/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.14/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.14/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.14/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.14/@designmodel" valid="false" counterExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!20 -> callwire_req?20 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!20 -> driverquerywire_stmt?20 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!20 -> driverquerywire_res?20 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!20" visitedStates="33" verifyTime="0.0059028" testport="//@interimmodels.14/@designmodel/@component.0/@port.0" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter17() |= ![](PassengerUI_call_callride->&lt;" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.14/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.14/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.14/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.14/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.14/@designmodel" visitedStates="21" verifyTime="0.005168" testport="//@interimmodels.14/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!15 -> callwire_req?15 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!15 -> driverquerywire_stmt?15 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!15 -> driverquerywire_res?15 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!15" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverDB.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.14/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.14/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.14/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.14/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.14/@designmodel" counterExample="" visitedStates="40" verifyTime="0.0085299" testport="//@interimmodels.14/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_requester_process -> paywire_req!88 -> paywire_req?88 -> PaymentOracle_paywire_responder_invoke -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!88 -> PaymentOracle_paywire_responder_process -> paywire_res!88 -> oraclepaywire_token?88 -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> paywire_res?88" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.14/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.14/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.14/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.14/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.14/@designmodel" visitedStates="29" verifyTime="0.0051959" testport="//@interimmodels.14/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!59 -> authwire_req?59 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!59 -> userquerywire_req?59 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!59 -> userquerywire_res?59 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!59 -> authwire_res?59" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.14/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.14/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.14/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.14/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.14/@designmodel" visitedStates="29" verifyTime="0.0084458" testport="//@interimmodels.14/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!58 -> authwire_req?58 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!58 -> userquerywire_req?58 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!58 -> userquerywire_res?58 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!58 -> authwire_res?58" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.14/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.14/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.14/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.14/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-driverupdatewire" visitedStates="96" verifyTime="0.0065942" testport="//@interimmodels.14/@designmodel/@component.2/@port.2" traceExample="init -> DriverUI_locate_located -> DriverUI_driverupdatewire_commander_process -> driverupdatewire_stmt!25 -> driverupdatewire_stmt?25 -> DriverRecord_driverupdate_updated -> DriverRecord_driverupdatewire_readstore_process -> DriverRecord_driverupdatewire_readstore_persist -> driverupdatewire_cmmd!25 -> driverupdatewire_cmmd?25 -> DriverupdatewireCommandLog_logdriverupdatewire_logged -> DriverupdatewireCommandLog_driverupdatewire_commandstore_process -> DriverupdatewireCommandLog_driverupdatewire_commandstore_persist" exprText="[] (DriverUI.locate.located-> &lt;> DriverupdatewireCommandLog.driverupdatewire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" visitedStates="67" verifyTime="0.0058078" testport="//@interimmodels.14/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_requester_process -> paywire_req!81 -> paywire_req?81 -> PaymentOracle_paywire_responder_invoke -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!81 -> PaymentOracle_paywire_responder_process -> paywire_res!81 -> oraclepaywire_token?81 -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> paywire_res?81" exprText="[] (PaymentOracle.Paymentsupply.supplied-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.8"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-assignwire" valid="false" counterExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!85 -> callwire_req?85 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!85 -> driverquerywire_stmt?85 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!85 -> driverquerywire_res?85 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!85" visitedStates="28" verifyTime="0.008480099999999999" testport="//@interimmodels.14/@designmodel/@component.0/@port.0" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter17() |= ![](TripMgmt_accept_acknowledged->&lt;" exprText="[] (TripMgmt.accept.acknowledged-> &lt;> AssignwireLog.assignwire.eventstore.persist)">
        <connector href="target.arch#//@connector.1"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-query-driverquerywire" visitedStates="22" verifyTime="0.005787" testport="//@interimmodels.14/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!79 -> callwire_req?79 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!79 -> driverquerywire_stmt?79 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!79 -> driverquerywire_res?79 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!79" exprText="[] (TripMgmt.accept.acknowledged-> &lt;> DriverRecord.driverquerywire.readstore.process)">
        <connector href="target.arch#//@connector.2"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-readropayprocesswire" visitedStates="22" verifyTime="0.005110099999999999" testport="//@interimmodels.14/@designmodel/@component.5/@port.0" traceExample="init -> BillingGateway_process_processed -> BillingGateway_payprocesswire_requester_process -> payprocesswire_req!53 -> payprocesswire_req?53 -> Payment_payprocesswire_responder_invoke -> Payment_ropayprocesswire_extquerier_request -> ropayprocesswire_uid!53 -> ropayprocesswire_uid?53 -> PaymentBlockchain_payaccess_accessed -> PaymentBlockchain_ropayprocesswire_blocksupplier_process -> ropayprocesswire_res!53 -> ropayprocesswire_res?53 -> Payment_list_listed -> Payment_ropayprocesswire_extquerier_process -> Payment_ropayprocesswire_extquerier_Skip -> Payment_payprocesswire_responder_process -> payprocesswire_res!53 -> payprocesswire_res?53" exprText="[] (PaymentBlockchain.ropayprocesswire.blocksupplier.process-> &lt;> Payment.list.listed)">
        <connector href="target.arch#//@connector.9"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.14/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.14/@designmodel/@component.3 //@interimmodels.14/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.14/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.14/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.14/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.14/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.14/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="18" description="network route for connector:assignwire between: tripmgmt assignwirelog " isStable="true" name="network-route">
    <designmodel name="inter18">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.15/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.15/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.15/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.15/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.15/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.15/@designmodel/@connector.0/@role.1 //@interimmodels.15/@designmodel/@connector.1/@role.0 //@interimmodels.15/@designmodel/@connector.2/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.15/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.15/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.15/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.15/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.15/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.15/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" role="//@interimmodels.15/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.15/@designmodel/@host.0/@node.1">
        <port name="record" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.15/@designmodel/@connector.9/@role.0 //@interimmodels.15/@designmodel/@connector.4/@role.1" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.15/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.15/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.15/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.15/@designmodel/@connector.5/@role.1 //@interimmodels.15/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.15/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.15/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" role="//@interimmodels.15/@designmodel/@connector.1/@role.2" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" role="//@interimmodels.15/@designmodel/@connector.8/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" role="//@interimmodels.15/@designmodel/@connector.9/@role.1" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" role="//@interimmodels.15/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentOracle" type="server,oracle">
        <port name="Paymentsupply" role="//@interimmodels.15/@designmodel/@connector.8/@role.1 //@interimmodels.15/@designmodel/@connector.3/@role.1" type="response,orafeed,OutboundPort,InboundPort">
          <events name="supplied"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.2"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.15/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.15/@designmodel/@connector.2/@role.0" connector="//@interimmodels.15/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="ESConnector" connectortype="//@interimmodels.15/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.15/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.15/@designmodel/@connector.1"/>
        <role name="eventsubscriber" roletype="//@interimmodels.15/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.15/@designmodel/@connector.1"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.1"/>
        </role>
      </connector>
      <connector name="driverquerywire" type="QRConnector" connectortype="//@interimmodels.15/@designmodel/@archstyle.7/@connectortype.0">
        <role name="querier" roletype="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.15/@designmodel/@connector.1/@role.0" connector="//@interimmodels.15/@designmodel/@connector.2"/>
        <role name="readstore" roletype="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.15/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="CSConnector" connectortype="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.15/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.15/@designmodel/@connector.3"/>
        <role name="responder" type="in" nextRoleExpr="//@interimmodels.15/@designmodel/@connector.8/@role.1">
          <roletype href="target.arch#//@archstyle.0/@connectortype.0/@roletype.1"/>
          <connector href="target.arch#//@connector.3"/>
        </role>
      </connector>
      <connector name="payprocesswire" type="CSConnector" connectortype="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.15/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.15/@designmodel/@connector.9/@role.0" connector="//@interimmodels.15/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.15/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.15/@designmodel/@connector.6/@role.0" connector="//@interimmodels.15/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.15/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.15/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="CRConnector" connectortype="//@interimmodels.15/@designmodel/@archstyle.3/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.15/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.15/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.15/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.15/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.3/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.15/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.15/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <connector name="ropayprocesswire" type="ROConnector">
        <role name="extquerier" type="out" connector="//@interimmodels.15/@designmodel/@connector.9">
          <roletype href="target.arch#//@archstyle.1/@connectortype.0/@roletype.0"/>
        </role>
        <role name="blocksupplier" type="in" connector="//@interimmodels.15/@designmodel/@connector.9">
          <roletype href="target.arch#//@archstyle.1/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.1/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.15/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.15/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.15/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.15/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.15/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.15/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.15/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.15/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.15/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.15/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.15/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.15/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.15/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.15/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.15/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.15/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.15/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.15/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.15/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.15/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.15/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.15/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.15/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.15/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.15/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.15/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.15/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.15/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.15/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.15/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.15/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.15/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.15/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.15/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.15/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.15/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.15/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.15/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.15/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.15/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.15/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.15/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.15/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.15/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.15/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.15/@designmodel" visitedStates="197" verifyTime="0.016260399999999998" testport="//@interimmodels.15/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!90 -> callwire_req?90 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!90 -> driverquerywire_stmt?90 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!90 -> driverquerywire_res?90 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!90 -> assignwire_pevt?90 -> AssignwireLog_logassignwire_logged -> AssignwireLog_assignwire_eventstore_process -> assignwire_sevt!90 -> AssignwireLog_assignwire_eventstore_persist -> assignwire_sevt?90 -> assignwire_bevt!90 -> assignwire_bevt?90 -> DriverUI_notify_notified -> DriverUI_assignwire_eventsubscriber_process -> TripMgmt_assignwire_eventpublisher_broadcast -> TripMgmt_assignwire_eventpublisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!90 -> callwire_res?90" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.15/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.15/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.15/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.15/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.15/@designmodel" visitedStates="131" verifyTime="0.0160404" testport="//@interimmodels.15/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!31 -> callwire_req?31 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!31 -> driverquerywire_stmt?31 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!31 -> driverquerywire_res?31 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!31 -> assignwire_pevt?31 -> AssignwireLog_logassignwire_logged -> AssignwireLog_assignwire_eventstore_process -> assignwire_sevt!31 -> AssignwireLog_assignwire_eventstore_persist -> assignwire_sevt?31 -> assignwire_bevt!31 -> assignwire_bevt?31 -> DriverUI_notify_notified -> DriverUI_assignwire_eventsubscriber_process -> TripMgmt_assignwire_eventpublisher_broadcast -> TripMgmt_assignwire_eventpublisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!31 -> callwire_res?31" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverRecord.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.15/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.15/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.15/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.15/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.15/@designmodel" counterExample="" visitedStates="40" verifyTime="0.0686087" testport="//@interimmodels.15/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_requester_process -> paywire_req!26 -> paywire_req?26 -> PaymentOracle_paywire_responder_invoke -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!26 -> PaymentOracle_paywire_responder_process -> paywire_res!26 -> oraclepaywire_token?26 -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> paywire_res?26" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.15/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.15/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.15/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.15/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.15/@designmodel" visitedStates="29" verifyTime="0.011625199999999999" testport="//@interimmodels.15/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!67 -> authwire_req?67 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!67 -> userquerywire_req?67 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!67 -> userquerywire_res?67 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!67 -> authwire_res?67" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.15/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.15/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.15/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.15/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.15/@designmodel" visitedStates="29" verifyTime="0.009746999999999999" testport="//@interimmodels.15/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!97 -> authwire_req?97 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!97 -> userquerywire_req?97 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!97 -> userquerywire_res?97 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!97 -> authwire_res?97" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.15/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.15/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.15/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.15/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-driverupdatewire" visitedStates="96" verifyTime="0.0114228" testport="//@interimmodels.15/@designmodel/@component.2/@port.2" traceExample="init -> DriverUI_locate_located -> DriverUI_driverupdatewire_commander_process -> driverupdatewire_stmt!94 -> driverupdatewire_stmt?94 -> DriverRecord_driverupdate_updated -> DriverRecord_driverupdatewire_readstore_process -> DriverRecord_driverupdatewire_readstore_persist -> driverupdatewire_cmmd!94 -> driverupdatewire_cmmd?94 -> DriverupdatewireCommandLog_logdriverupdatewire_logged -> DriverupdatewireCommandLog_driverupdatewire_commandstore_process -> DriverupdatewireCommandLog_driverupdatewire_commandstore_persist" exprText="[] (DriverUI.locate.located-> &lt;> DriverupdatewireCommandLog.driverupdatewire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" visitedStates="67" verifyTime="0.0085684" testport="//@interimmodels.15/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_requester_process -> paywire_req!56 -> paywire_req?56 -> PaymentOracle_paywire_responder_invoke -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!56 -> PaymentOracle_paywire_responder_process -> paywire_res!56 -> oraclepaywire_token?56 -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> paywire_res?56" exprText="[] (PaymentOracle.Paymentsupply.supplied-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.8"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-assignwire" visitedStates="182" verifyTime="0.014641399999999999" testport="//@interimmodels.15/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!78 -> callwire_req?78 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!78 -> driverquerywire_stmt?78 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!78 -> driverquerywire_res?78 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!78 -> assignwire_pevt?78 -> AssignwireLog_logassignwire_logged -> AssignwireLog_assignwire_eventstore_process -> assignwire_sevt!78 -> AssignwireLog_assignwire_eventstore_persist -> assignwire_sevt?78 -> assignwire_bevt!78 -> assignwire_bevt?78 -> DriverUI_notify_notified -> DriverUI_assignwire_eventsubscriber_process -> TripMgmt_assignwire_eventpublisher_broadcast -> TripMgmt_assignwire_eventpublisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!78 -> callwire_res?78" exprText="[] (TripMgmt.accept.acknowledged-> &lt;> AssignwireLog.assignwire.eventstore.persist)">
        <connector href="target.arch#//@connector.1"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-query-driverquerywire" visitedStates="132" verifyTime="0.0099232" testport="//@interimmodels.15/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!71 -> callwire_req?71 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!71 -> driverquerywire_stmt?71 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!71 -> driverquerywire_res?71 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!71 -> assignwire_pevt?71 -> AssignwireLog_logassignwire_logged -> AssignwireLog_assignwire_eventstore_process -> assignwire_sevt!71 -> AssignwireLog_assignwire_eventstore_persist -> assignwire_sevt?71 -> assignwire_bevt!71 -> assignwire_bevt?71 -> DriverUI_notify_notified -> DriverUI_assignwire_eventsubscriber_process -> TripMgmt_assignwire_eventpublisher_broadcast -> TripMgmt_assignwire_eventpublisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!71 -> callwire_res?71" exprText="[] (TripMgmt.accept.acknowledged-> &lt;> DriverRecord.driverquerywire.readstore.process)">
        <connector href="target.arch#//@connector.2"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-readropayprocesswire" visitedStates="22" verifyTime="0.010078199999999999" testport="//@interimmodels.15/@designmodel/@component.5/@port.0" traceExample="init -> BillingGateway_process_processed -> BillingGateway_payprocesswire_requester_process -> payprocesswire_req!80 -> payprocesswire_req?80 -> Payment_payprocesswire_responder_invoke -> Payment_ropayprocesswire_extquerier_request -> ropayprocesswire_uid!80 -> ropayprocesswire_uid?80 -> PaymentBlockchain_payaccess_accessed -> PaymentBlockchain_ropayprocesswire_blocksupplier_process -> ropayprocesswire_res!80 -> ropayprocesswire_res?80 -> Payment_list_listed -> Payment_ropayprocesswire_extquerier_process -> Payment_ropayprocesswire_extquerier_Skip -> Payment_payprocesswire_responder_process -> payprocesswire_res!80 -> payprocesswire_res?80" exprText="[] (PaymentBlockchain.ropayprocesswire.blocksupplier.process-> &lt;> Payment.list.listed)">
        <connector href="target.arch#//@connector.9"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.15/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.15/@designmodel/@component.3 //@interimmodels.15/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.15/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.15/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.15/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.15/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.15/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
</arch:MigrationModel>
