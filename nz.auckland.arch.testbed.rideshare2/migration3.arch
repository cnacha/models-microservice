<?xml version="1.0" encoding="UTF-8"?>
<arch:MigrationModel xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arch="http://www.example.org/arch">
  <source href="source.arch#/"/>
  <target href="target.arch#/"/>
  <interimmodels description="setup database: paymentblockchain" nextModel="//@interimmodels.1" isStable="true" name="setup-database">
    <designmodel name="inter0">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.0/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.0/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.0/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.0/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.0/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.0/@designmodel/@connector.0/@role.1 //@interimmodels.0/@designmodel/@connector.1/@role.0 //@interimmodels.0/@designmodel/@connector.2/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.0/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.0/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.0/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.0/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.0/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.0/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" role="//@interimmodels.0/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.0/@designmodel/@host.0/@node.1">
        <port name="record" role="//@interimmodels.0/@designmodel/@connector.3/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.0/@designmodel/@connector.4/@role.1" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.0/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.0/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.0/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.0/@designmodel/@connector.5/@role.1 //@interimmodels.0/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.0/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.0/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.0/@designmodel/@connector.2/@role.0" connector="//@interimmodels.0/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.1"/>
        <role name="subscriber" roletype="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.0/@designmodel/@connector.1"/>
      </connector>
      <connector name="driverquerywire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.0/@designmodel/@connector.1/@role.0" connector="//@interimmodels.0/@designmodel/@connector.2"/>
        <role name="readstorage" roletype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.0/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.3"/>
        <role name="writestorage" roletype="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.0/@designmodel/@connector.3"/>
      </connector>
      <connector name="payprocesswire" type="REConnector" connectortype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.4"/>
        <role name="readstorage" roletype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.0/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.0/@designmodel/@connector.6/@role.0" connector="//@interimmodels.0/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.0/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.7"/>
        <role name="writestorage" roletype="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.0/@designmodel/@connector.7"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.0/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.0/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.0/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.0/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.0/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.0/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.0/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.0/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.0/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.0/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.0/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.0/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.0/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.0/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.0/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.0/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.0/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.0/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.0/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.0/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.0/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.0/@designmodel" visitedStates="79" verifyTime="0.0649466" testport="//@interimmodels.0/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!38 -> callwire_req?38 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!38 -> driverquerywire_req?38 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!38 -> driverquerywire_res?38 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!38 -> assignwire_pub?38 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!38 -> callwire_res?38" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.0/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.0/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.0/@designmodel" visitedStates="54" verifyTime="0.0035987999999999997" testport="//@interimmodels.0/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!40 -> callwire_req?40 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!40 -> driverquerywire_req?40 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!40 -> driverquerywire_res?40 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!40 -> assignwire_pub?40 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!40 -> callwire_res?40" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverRecord.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.0/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.0/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.0/@designmodel" counterExample="" visitedStates="10" verifyTime="0.006263299999999999" testport="//@interimmodels.0/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_writer_process -> paywire_req!65 -> paywire_req?65 -> Payment_paywire_writestorage_invoke -> Payment_record_payrecorded -> Payment_paywire_writestorage_process -> paywire_res!65 -> paywire_res?65" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.0/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.0/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.0/@designmodel" visitedStates="29" verifyTime="0.0030967" testport="//@interimmodels.0/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!31 -> authwire_req?31 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!31 -> userquerywire_req?31 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!31 -> userquerywire_res?31 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!31 -> authwire_res?31" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.0/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.0/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.0/@designmodel" visitedStates="29" verifyTime="0.0032067999999999997" testport="//@interimmodels.0/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!42 -> authwire_req?42 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!42 -> userquerywire_req?42 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!42 -> userquerywire_res?42 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!42 -> authwire_res?42" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.0/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.0/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.0/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.0/@designmodel/@component.3 //@interimmodels.0/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.0/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.0/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.0/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.0/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.0/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="1" description="setup database: driverupdatewirecommandlog" nextModel="//@interimmodels.2" isStable="true" name="setup-database">
    <designmodel name="inter1">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.1/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.1/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.1/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.1/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.1/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.1/@designmodel/@connector.0/@role.1 //@interimmodels.1/@designmodel/@connector.1/@role.0 //@interimmodels.1/@designmodel/@connector.2/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.1/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.1/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.1/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.1/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.1/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.1/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" role="//@interimmodels.1/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.1/@designmodel/@host.0/@node.1">
        <port name="record" role="//@interimmodels.1/@designmodel/@connector.3/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.1/@designmodel/@connector.4/@role.1" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.1/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.1/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.1/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.1/@designmodel/@connector.5/@role.1 //@interimmodels.1/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.1/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.1/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.1/@designmodel/@connector.2/@role.0" connector="//@interimmodels.1/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.1"/>
        <role name="subscriber" roletype="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.1/@designmodel/@connector.1"/>
      </connector>
      <connector name="driverquerywire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.1/@designmodel/@connector.1/@role.0" connector="//@interimmodels.1/@designmodel/@connector.2"/>
        <role name="readstorage" roletype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.1/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.3"/>
        <role name="writestorage" roletype="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.1/@designmodel/@connector.3"/>
      </connector>
      <connector name="payprocesswire" type="REConnector" connectortype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.4"/>
        <role name="readstorage" roletype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.1/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.1/@designmodel/@connector.6/@role.0" connector="//@interimmodels.1/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.1/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.7"/>
        <role name="writestorage" roletype="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.1/@designmodel/@connector.7"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.1/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.1/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.1/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.1/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.1/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.1/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.1/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.1/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.1/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.1/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.1/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.1/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.1/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.1/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.1/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.1/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.1/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.1/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.1/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.1/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.1/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.1/@designmodel" visitedStates="79" verifyTime="0.0067372" testport="//@interimmodels.1/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!34 -> callwire_req?34 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!34 -> driverquerywire_req?34 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!34 -> driverquerywire_res?34 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!34 -> assignwire_pub?34 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!34 -> callwire_res?34" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.1/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.1/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.1/@designmodel" visitedStates="54" verifyTime="0.0043046" testport="//@interimmodels.1/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!94 -> callwire_req?94 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!94 -> driverquerywire_req?94 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!94 -> driverquerywire_res?94 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!94 -> assignwire_pub?94 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!94 -> callwire_res?94" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverRecord.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.1/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.1/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.1/@designmodel" counterExample="" visitedStates="10" verifyTime="0.0027838" testport="//@interimmodels.1/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_writer_process -> paywire_req!71 -> paywire_req?71 -> Payment_paywire_writestorage_invoke -> Payment_record_payrecorded -> Payment_paywire_writestorage_process -> paywire_res!71 -> paywire_res?71" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.1/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.1/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.1/@designmodel" visitedStates="29" verifyTime="0.0040066" testport="//@interimmodels.1/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!74 -> authwire_req?74 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!74 -> userquerywire_req?74 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!74 -> userquerywire_res?74 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!74 -> authwire_res?74" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.1/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.1/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.1/@designmodel" visitedStates="29" verifyTime="0.0030797" testport="//@interimmodels.1/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!19 -> authwire_req?19 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!19 -> userquerywire_req?19 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!19 -> userquerywire_res?19 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!19 -> authwire_res?19" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.1/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.1/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.1/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.1/@designmodel/@component.3 //@interimmodels.1/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.1/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.1/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.1/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.1/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.1/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="2" description="setup database: assignwirelog" nextModel="//@interimmodels.3" isStable="true" name="setup-database">
    <designmodel name="inter2">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.2/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.2/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.2/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.2/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.2/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.2/@designmodel/@connector.0/@role.1 //@interimmodels.2/@designmodel/@connector.1/@role.0 //@interimmodels.2/@designmodel/@connector.2/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.2/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.2/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.2/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.2/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.2/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.2/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" role="//@interimmodels.2/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.2/@designmodel/@host.0/@node.1">
        <port name="record" role="//@interimmodels.2/@designmodel/@connector.3/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.2/@designmodel/@connector.4/@role.1" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.2/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.2/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.2/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.2/@designmodel/@connector.5/@role.1 //@interimmodels.2/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.2/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.2/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.2/@designmodel/@connector.2/@role.0" connector="//@interimmodels.2/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.1"/>
        <role name="subscriber" roletype="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.2/@designmodel/@connector.1"/>
      </connector>
      <connector name="driverquerywire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.2/@designmodel/@connector.1/@role.0" connector="//@interimmodels.2/@designmodel/@connector.2"/>
        <role name="readstorage" roletype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.2/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.3"/>
        <role name="writestorage" roletype="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.2/@designmodel/@connector.3"/>
      </connector>
      <connector name="payprocesswire" type="REConnector" connectortype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.4"/>
        <role name="readstorage" roletype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.2/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.2/@designmodel/@connector.6/@role.0" connector="//@interimmodels.2/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.2/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.7"/>
        <role name="writestorage" roletype="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.2/@designmodel/@connector.7"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.2/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.2/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.2/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.2/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.2/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.2/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.2/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.2/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.2/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.2/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.2/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.2/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.2/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.2/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.2/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.2/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.2/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.2/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.2/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.2/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.2/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.2/@designmodel" visitedStates="79" verifyTime="0.007215999999999999" testport="//@interimmodels.2/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!49 -> callwire_req?49 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!49 -> driverquerywire_req?49 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!49 -> driverquerywire_res?49 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!49 -> assignwire_pub?49 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!49 -> callwire_res?49" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.2/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.2/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.2/@designmodel" visitedStates="54" verifyTime="0.0031641" testport="//@interimmodels.2/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!45 -> callwire_req?45 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!45 -> driverquerywire_req?45 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!45 -> driverquerywire_res?45 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!45 -> assignwire_pub?45 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!45 -> callwire_res?45" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverDB.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.2/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.2/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.2/@designmodel" counterExample="" visitedStates="10" verifyTime="0.003918" testport="//@interimmodels.2/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_writer_process -> paywire_req!84 -> paywire_req?84 -> Payment_paywire_writestorage_invoke -> Payment_record_payrecorded -> Payment_paywire_writestorage_process -> paywire_res!84 -> paywire_res?84" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.2/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.2/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.2/@designmodel" visitedStates="29" verifyTime="0.0029914" testport="//@interimmodels.2/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!39 -> authwire_req?39 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!39 -> userquerywire_req?39 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!39 -> userquerywire_res?39 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!39 -> authwire_res?39" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.2/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.2/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.2/@designmodel" visitedStates="29" verifyTime="0.0028633" testport="//@interimmodels.2/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!90 -> authwire_req?90 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!90 -> userquerywire_req?90 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!90 -> userquerywire_res?90 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!90 -> authwire_res?90" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.2/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.2/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.2/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.2/@designmodel/@component.3 //@interimmodels.2/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.2/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.2/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.2/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.2/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.2/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="3" description="setup database: driverrecord" nextModel="//@interimmodels.4" isStable="true" name="setup-database">
    <designmodel name="inter3">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.3/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.3/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.3/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.3/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.3/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.3/@designmodel/@connector.0/@role.1 //@interimmodels.3/@designmodel/@connector.1/@role.0 //@interimmodels.3/@designmodel/@connector.2/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.3/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.3/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.3/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.3/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.3/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.3/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" role="//@interimmodels.3/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.3/@designmodel/@host.0/@node.1">
        <port name="record" role="//@interimmodels.3/@designmodel/@connector.3/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.3/@designmodel/@connector.4/@role.1" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.3/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.3/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.3/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.3/@designmodel/@connector.5/@role.1 //@interimmodels.3/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.3/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.3/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.3/@designmodel/@connector.2/@role.0" connector="//@interimmodels.3/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.1"/>
        <role name="subscriber" roletype="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.3/@designmodel/@connector.1"/>
      </connector>
      <connector name="driverquerywire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.3/@designmodel/@connector.1/@role.0" connector="//@interimmodels.3/@designmodel/@connector.2"/>
        <role name="readstorage" roletype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.3/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.3"/>
        <role name="writestorage" roletype="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.3/@designmodel/@connector.3"/>
      </connector>
      <connector name="payprocesswire" type="REConnector" connectortype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.4"/>
        <role name="readstorage" roletype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.3/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.3/@designmodel/@connector.6/@role.0" connector="//@interimmodels.3/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.3/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.7"/>
        <role name="writestorage" roletype="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.3/@designmodel/@connector.7"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.3/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.3/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.3/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.3/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.3/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.3/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.3/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.3/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.3/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.3/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.3/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.3/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.3/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.3/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.3/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.3/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.3/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.3/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.3/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.3/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.3/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.3/@designmodel" visitedStates="79" verifyTime="0.0034448" testport="//@interimmodels.3/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!20 -> callwire_req?20 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!20 -> driverquerywire_req?20 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!20 -> driverquerywire_res?20 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!20 -> assignwire_pub?20 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!20 -> callwire_res?20" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.3/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.3/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.3/@designmodel" visitedStates="54" verifyTime="0.0070333999999999995" testport="//@interimmodels.3/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!25 -> callwire_req?25 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!25 -> driverquerywire_req?25 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!25 -> driverquerywire_res?25 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!25 -> assignwire_pub?25 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!25 -> callwire_res?25" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverRecord.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.3/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.3/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.3/@designmodel" counterExample="" visitedStates="10" verifyTime="0.0038004" testport="//@interimmodels.3/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_writer_process -> paywire_req!92 -> paywire_req?92 -> Payment_paywire_writestorage_invoke -> Payment_record_payrecorded -> Payment_paywire_writestorage_process -> paywire_res!92 -> paywire_res?92" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.3/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.3/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.3/@designmodel" visitedStates="29" verifyTime="0.0031704999999999997" testport="//@interimmodels.3/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!92 -> authwire_req?92 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!92 -> userquerywire_req?92 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!92 -> userquerywire_res?92 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!92 -> authwire_res?92" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.3/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.3/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.3/@designmodel" visitedStates="29" verifyTime="0.0029134" testport="//@interimmodels.3/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!55 -> authwire_req?55 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!55 -> userquerywire_req?55 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!55 -> userquerywire_res?55 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!55 -> authwire_res?55" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.3/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.3/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.3/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.3/@designmodel/@component.3 //@interimmodels.3/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.3/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.3/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.3/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.3/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.3/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="4" description="network route for connector:driverupdatewire between: driverui driverupdatewirecommandlog " nextModel="//@interimmodels.5" isStable="true" name="network-route">
    <designmodel name="inter4">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.4/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.4/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.4/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.4/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.4/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.4/@designmodel/@connector.0/@role.1 //@interimmodels.4/@designmodel/@connector.1/@role.0 //@interimmodels.4/@designmodel/@connector.2/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.4/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.4/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.4/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.4/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.4/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.4/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.4/@designmodel/@host.0/@node.1">
        <port name="record" role="//@interimmodels.4/@designmodel/@connector.3/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.4/@designmodel/@connector.4/@role.1" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.4/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.4/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.4/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.4/@designmodel/@connector.5/@role.1 //@interimmodels.4/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.4/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.4/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" role="//@interimmodels.4/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.4/@designmodel/@connector.2/@role.0" connector="//@interimmodels.4/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.1"/>
        <role name="subscriber" roletype="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.4/@designmodel/@connector.1"/>
      </connector>
      <connector name="driverquerywire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.4/@designmodel/@connector.1/@role.0" connector="//@interimmodels.4/@designmodel/@connector.2"/>
        <role name="readstorage" roletype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.4/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.3"/>
        <role name="writestorage" roletype="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.4/@designmodel/@connector.3"/>
      </connector>
      <connector name="payprocesswire" type="REConnector" connectortype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.4"/>
        <role name="readstorage" roletype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.4/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.4/@designmodel/@connector.6/@role.0" connector="//@interimmodels.4/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.4/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="CRConnector" connectortype="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.4/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.3/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.4/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.4/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.4/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.4/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.4/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.4/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.4/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.4/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.4/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.4/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.4/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.4/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.4/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.4/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.4/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.4/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.4/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.4/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.4/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.4/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.4/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.4/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.4/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.4/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.4/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.4/@designmodel" visitedStates="79" verifyTime="0.0038716999999999996" testport="//@interimmodels.4/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!24 -> callwire_req?24 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!24 -> driverquerywire_req?24 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!24 -> driverquerywire_res?24 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!24 -> assignwire_pub?24 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!24 -> callwire_res?24" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.4/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.4/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.4/@designmodel" visitedStates="54" verifyTime="0.006521099999999999" testport="//@interimmodels.4/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!84 -> callwire_req?84 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!84 -> driverquerywire_req?84 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!84 -> driverquerywire_res?84 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!84 -> assignwire_pub?84 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!84 -> callwire_res?84" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverRecord.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.4/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.4/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.4/@designmodel" counterExample="" visitedStates="10" verifyTime="0.062038499999999996" testport="//@interimmodels.4/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_writer_process -> paywire_req!44 -> paywire_req?44 -> Payment_paywire_writestorage_invoke -> Payment_record_payrecorded -> Payment_paywire_writestorage_process -> paywire_res!44 -> paywire_res?44" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.4/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.4/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.4/@designmodel" visitedStates="29" verifyTime="0.0033357" testport="//@interimmodels.4/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!17 -> authwire_req?17 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!17 -> userquerywire_req?17 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!17 -> userquerywire_res?17 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!17 -> authwire_res?17" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.4/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.4/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.4/@designmodel" visitedStates="29" verifyTime="0.0063127" testport="//@interimmodels.4/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!10 -> authwire_req?10 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!10 -> userquerywire_req?10 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!10 -> userquerywire_res?10 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!10 -> authwire_res?10" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.4/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.4/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-driverupdatewire" visitedStates="16" verifyTime="0.0027248" testport="//@interimmodels.4/@designmodel/@component.2/@port.2" traceExample="init -> DriverUI_locate_located -> DriverUI_driverupdatewire_commander_process -> driverupdatewire_stmt!64 -> driverupdatewire_cmmd!64 -> driverupdatewire_cmmd?64 -> DriverupdatewireCommandLog_logdriverupdatewire_logged -> DriverupdatewireCommandLog_driverupdatewire_commandstore_process -> DriverupdatewireCommandLog_driverupdatewire_commandstore_persist" exprText="[] (DriverUI.locate.located-> &lt;> DriverupdatewireCommandLog.driverupdatewire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.4/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.4/@designmodel/@component.3 //@interimmodels.4/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.4/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.4/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.4/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.4/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.4/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="5" description="network route for connector:driverupdatewire between: driverui driverrecord " nextModel="//@interimmodels.6" isStable="true" name="network-route">
    <designmodel name="inter5">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.5/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.5/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.5/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.5/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.5/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.5/@designmodel/@connector.0/@role.1 //@interimmodels.5/@designmodel/@connector.1/@role.0 //@interimmodels.5/@designmodel/@connector.2/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.5/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.5/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.5/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.5/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.5/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.5/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" role="//@interimmodels.5/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.5/@designmodel/@host.0/@node.1">
        <port name="record" role="//@interimmodels.5/@designmodel/@connector.3/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.5/@designmodel/@connector.4/@role.1" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.5/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.5/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.5/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.5/@designmodel/@connector.5/@role.1 //@interimmodels.5/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.5/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.5/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" role="//@interimmodels.5/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.5/@designmodel/@connector.2/@role.0" connector="//@interimmodels.5/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.1"/>
        <role name="subscriber" roletype="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.5/@designmodel/@connector.1"/>
      </connector>
      <connector name="driverquerywire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.5/@designmodel/@connector.1/@role.0" connector="//@interimmodels.5/@designmodel/@connector.2"/>
        <role name="readstorage" roletype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.5/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.3"/>
        <role name="writestorage" roletype="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.5/@designmodel/@connector.3"/>
      </connector>
      <connector name="payprocesswire" type="REConnector" connectortype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.4"/>
        <role name="readstorage" roletype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.5/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.5/@designmodel/@connector.6/@role.0" connector="//@interimmodels.5/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.5/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="CRConnector" connectortype="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.5/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.3/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.5/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.5/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.5/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.5/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.5/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.5/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.5/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.5/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.5/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.5/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.5/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.5/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.5/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.5/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.5/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.5/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.5/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.5/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.5/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.5/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.5/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.5/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.5/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.5/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.5/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.5/@designmodel" visitedStates="79" verifyTime="0.0037686" testport="//@interimmodels.5/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!99 -> callwire_req?99 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!99 -> driverquerywire_req?99 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!99 -> driverquerywire_res?99 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!99 -> assignwire_pub?99 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!99 -> callwire_res?99" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.5/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.5/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.5/@designmodel" visitedStates="54" verifyTime="0.0039289" testport="//@interimmodels.5/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!78 -> callwire_req?78 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!78 -> driverquerywire_req?78 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!78 -> driverquerywire_res?78 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!78 -> assignwire_pub?78 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!78 -> callwire_res?78" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverRecord.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.5/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.5/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.5/@designmodel" counterExample="" visitedStates="10" verifyTime="0.0062188" testport="//@interimmodels.5/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_writer_process -> paywire_req!38 -> paywire_req?38 -> Payment_paywire_writestorage_invoke -> Payment_record_payrecorded -> Payment_paywire_writestorage_process -> paywire_res!38 -> paywire_res?38" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.5/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.5/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.5/@designmodel" visitedStates="29" verifyTime="0.0053622" testport="//@interimmodels.5/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!61 -> authwire_req?61 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!61 -> userquerywire_req?61 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!61 -> userquerywire_res?61 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!61 -> authwire_res?61" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.5/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.5/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.5/@designmodel" visitedStates="29" verifyTime="0.0036376" testport="//@interimmodels.5/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!24 -> authwire_req?24 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!24 -> userquerywire_req?24 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!24 -> userquerywire_res?24 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!24 -> authwire_res?24" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.5/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.5/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-driverupdatewire" visitedStates="96" verifyTime="0.0077506" testport="//@interimmodels.5/@designmodel/@component.2/@port.2" traceExample="init -> DriverUI_locate_located -> DriverUI_driverupdatewire_commander_process -> driverupdatewire_stmt!90 -> driverupdatewire_stmt?90 -> DriverRecord_driverupdate_updated -> DriverRecord_driverupdatewire_readstore_process -> DriverRecord_driverupdatewire_readstore_persist -> driverupdatewire_cmmd!90 -> driverupdatewire_cmmd?90 -> DriverupdatewireCommandLog_logdriverupdatewire_logged -> DriverupdatewireCommandLog_driverupdatewire_commandstore_process -> DriverupdatewireCommandLog_driverupdatewire_commandstore_persist" exprText="[] (DriverUI.locate.located-> &lt;> DriverupdatewireCommandLog.driverupdatewire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.5/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.5/@designmodel/@component.3 //@interimmodels.5/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.5/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.5/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.5/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.5/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.5/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="7" description="deploy service: payment" nextModel="//@interimmodels.7" isStable="true" name="deploy-service">
    <designmodel name="inter7">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.6/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.6/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.6/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.6/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.6/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.6/@designmodel/@connector.0/@role.1 //@interimmodels.6/@designmodel/@connector.1/@role.0 //@interimmodels.6/@designmodel/@connector.2/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.6/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.6/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.6/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.6/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.6/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.6/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" role="//@interimmodels.6/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.6/@designmodel/@host.0/@node.1">
        <port name="record" role="//@interimmodels.6/@designmodel/@connector.3/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.6/@designmodel/@connector.4/@role.1" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.6/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.6/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.6/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.6/@designmodel/@connector.5/@role.1 //@interimmodels.6/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.6/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.6/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" role="//@interimmodels.6/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.6/@designmodel/@connector.2/@role.0" connector="//@interimmodels.6/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.1"/>
        <role name="subscriber" roletype="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.6/@designmodel/@connector.1"/>
      </connector>
      <connector name="driverquerywire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.6/@designmodel/@connector.1/@role.0" connector="//@interimmodels.6/@designmodel/@connector.2"/>
        <role name="readstorage" roletype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.6/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.3"/>
        <role name="writestorage" roletype="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.6/@designmodel/@connector.3"/>
      </connector>
      <connector name="payprocesswire" type="REConnector" connectortype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.4"/>
        <role name="readstorage" roletype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.6/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.6/@designmodel/@connector.6/@role.0" connector="//@interimmodels.6/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.6/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="CRConnector" connectortype="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.6/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.3/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.6/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.6/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.6/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.6/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.6/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.6/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.6/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.6/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.6/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.6/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.6/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.6/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.6/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.6/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.6/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.6/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.6/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.6/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.6/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.6/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.6/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.6/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.6/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.6/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.6/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.6/@designmodel" visitedStates="79" verifyTime="0.0050409" testport="//@interimmodels.6/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!78 -> callwire_req?78 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!78 -> driverquerywire_req?78 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!78 -> driverquerywire_res?78 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!78 -> assignwire_pub?78 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!78 -> callwire_res?78" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.6/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.6/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.6/@designmodel" visitedStates="54" verifyTime="0.0039038999999999996" testport="//@interimmodels.6/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!97 -> callwire_req?97 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!97 -> driverquerywire_req?97 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!97 -> driverquerywire_res?97 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!97 -> assignwire_pub?97 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!97 -> callwire_res?97" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverRecord.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.6/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.6/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.6/@designmodel" counterExample="" visitedStates="10" verifyTime="0.0064978" testport="//@interimmodels.6/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_writer_process -> paywire_req!73 -> paywire_req?73 -> Payment_paywire_writestorage_invoke -> Payment_record_payrecorded -> Payment_paywire_writestorage_process -> paywire_res!73 -> paywire_res?73" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.6/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.6/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.6/@designmodel" visitedStates="29" verifyTime="0.004425" testport="//@interimmodels.6/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!14 -> authwire_req?14 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!14 -> userquerywire_req?14 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!14 -> userquerywire_res?14 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!14 -> authwire_res?14" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.6/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.6/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.6/@designmodel" visitedStates="29" verifyTime="0.0033843999999999996" testport="//@interimmodels.6/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!90 -> authwire_req?90 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!90 -> userquerywire_req?90 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!90 -> userquerywire_res?90 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!90 -> authwire_res?90" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.6/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.6/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-driverupdatewire" visitedStates="96" verifyTime="0.008417899999999999" testport="//@interimmodels.6/@designmodel/@component.2/@port.2" traceExample="init -> DriverUI_locate_located -> DriverUI_driverupdatewire_commander_process -> driverupdatewire_stmt!21 -> driverupdatewire_stmt?21 -> DriverRecord_driverupdate_updated -> DriverRecord_driverupdatewire_readstore_process -> DriverRecord_driverupdatewire_readstore_persist -> driverupdatewire_cmmd!21 -> driverupdatewire_cmmd?21 -> DriverupdatewireCommandLog_logdriverupdatewire_logged -> DriverupdatewireCommandLog_driverupdatewire_commandstore_process -> DriverupdatewireCommandLog_driverupdatewire_commandstore_persist" exprText="[] (DriverUI.locate.located-> &lt;> DriverupdatewireCommandLog.driverupdatewire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.6/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.6/@designmodel/@component.3 //@interimmodels.6/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.6/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.6/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.6/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.6/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.6/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="8" description="network route for connector:payprocesswire between: billinggateway payment " nextModel="//@interimmodels.8" isStable="true" name="network-route">
    <designmodel name="inter8">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.7/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.7/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.7/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.7/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.7/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.7/@designmodel/@connector.0/@role.1 //@interimmodels.7/@designmodel/@connector.1/@role.0 //@interimmodels.7/@designmodel/@connector.2/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.7/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.7/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.7/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.7/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.7/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.7/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" role="//@interimmodels.7/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.7/@designmodel/@host.0/@node.1">
        <port name="record" role="//@interimmodels.7/@designmodel/@connector.3/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.7/@designmodel/@connector.4/@role.1" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.7/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.7/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.7/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.7/@designmodel/@connector.5/@role.1 //@interimmodels.7/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.7/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.7/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" role="//@interimmodels.7/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.7/@designmodel/@connector.2/@role.0" connector="//@interimmodels.7/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.1"/>
        <role name="subscriber" roletype="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.7/@designmodel/@connector.1"/>
      </connector>
      <connector name="driverquerywire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.7/@designmodel/@connector.1/@role.0" connector="//@interimmodels.7/@designmodel/@connector.2"/>
        <role name="readstorage" roletype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.7/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.3"/>
        <role name="writestorage" roletype="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.7/@designmodel/@connector.3"/>
      </connector>
      <connector name="payprocesswire" type="CSConnector" connectortype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.7/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.7/@designmodel/@connector.6/@role.0" connector="//@interimmodels.7/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.7/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="CRConnector" connectortype="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.7/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.3/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.7/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.7/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.7/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.7/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.7/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.7/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.7/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.7/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.7/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.7/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.7/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.7/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.7/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.7/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.7/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.7/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.7/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.7/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.7/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.7/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.7/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.7/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.7/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.7/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.7/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.7/@designmodel" visitedStates="79" verifyTime="0.0048477" testport="//@interimmodels.7/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!10 -> callwire_req?10 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!10 -> driverquerywire_req?10 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!10 -> driverquerywire_res?10 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!10 -> assignwire_pub?10 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!10 -> callwire_res?10" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.7/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.7/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.7/@designmodel" visitedStates="54" verifyTime="0.0031831999999999997" testport="//@interimmodels.7/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!45 -> callwire_req?45 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!45 -> driverquerywire_req?45 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!45 -> driverquerywire_res?45 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!45 -> assignwire_pub?45 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!45 -> callwire_res?45" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverDB.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.7/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.7/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.7/@designmodel" counterExample="" visitedStates="10" verifyTime="0.0035483" testport="//@interimmodels.7/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_writer_process -> paywire_req!68 -> paywire_req?68 -> Payment_paywire_writestorage_invoke -> Payment_record_payrecorded -> Payment_paywire_writestorage_process -> paywire_res!68 -> paywire_res?68" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.7/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.7/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.7/@designmodel" visitedStates="29" verifyTime="0.0036393999999999997" testport="//@interimmodels.7/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!42 -> authwire_req?42 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!42 -> userquerywire_req?42 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!42 -> userquerywire_res?42 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!42 -> authwire_res?42" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.7/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.7/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.7/@designmodel" visitedStates="29" verifyTime="0.0028276" testport="//@interimmodels.7/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!43 -> authwire_req?43 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!43 -> userquerywire_req?43 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!43 -> userquerywire_res?43 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!43 -> authwire_res?43" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.7/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.7/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-driverupdatewire" visitedStates="96" verifyTime="0.0686948" testport="//@interimmodels.7/@designmodel/@component.2/@port.2" traceExample="init -> DriverUI_locate_located -> DriverUI_driverupdatewire_commander_process -> driverupdatewire_stmt!88 -> driverupdatewire_stmt?88 -> DriverRecord_driverupdate_updated -> DriverRecord_driverupdatewire_readstore_process -> DriverRecord_driverupdatewire_readstore_persist -> driverupdatewire_cmmd!88 -> driverupdatewire_cmmd?88 -> DriverupdatewireCommandLog_logdriverupdatewire_logged -> DriverupdatewireCommandLog_driverupdatewire_commandstore_process -> DriverupdatewireCommandLog_driverupdatewire_commandstore_persist" exprText="[] (DriverUI.locate.located-> &lt;> DriverupdatewireCommandLog.driverupdatewire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.7/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.7/@designmodel/@component.3 //@interimmodels.7/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.7/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.7/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.7/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.7/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.7/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="9" description="network route for connector:ropayprocesswire between: payment paymentblockchain " nextModel="//@interimmodels.9" isStable="true" name="network-route">
    <designmodel name="inter9">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.8/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.8/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.8/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.8/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.8/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.8/@designmodel/@connector.0/@role.1 //@interimmodels.8/@designmodel/@connector.1/@role.0 //@interimmodels.8/@designmodel/@connector.2/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.8/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.8/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.8/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.8/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.8/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.8/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" role="//@interimmodels.8/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.8/@designmodel/@host.0/@node.1">
        <port name="record" role="//@interimmodels.8/@designmodel/@connector.3/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.8/@designmodel/@connector.4/@role.1 //@interimmodels.8/@designmodel/@connector.8/@role.0" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.8/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.8/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.8/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.8/@designmodel/@connector.5/@role.1 //@interimmodels.8/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.8/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.8/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" role="//@interimmodels.8/@designmodel/@connector.8/@role.1" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" role="//@interimmodels.8/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.8/@designmodel/@connector.2/@role.0" connector="//@interimmodels.8/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.1"/>
        <role name="subscriber" roletype="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.8/@designmodel/@connector.1"/>
      </connector>
      <connector name="driverquerywire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.8/@designmodel/@connector.1/@role.0" connector="//@interimmodels.8/@designmodel/@connector.2"/>
        <role name="readstorage" roletype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.8/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.3"/>
        <role name="writestorage" roletype="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.8/@designmodel/@connector.3"/>
      </connector>
      <connector name="payprocesswire" type="CSConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.8/@designmodel/@connector.8/@role.0" connector="//@interimmodels.8/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.8/@designmodel/@connector.6/@role.0" connector="//@interimmodels.8/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.8/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="CRConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.8/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.3/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="ropayprocesswire" type="ROConnector">
        <role name="extquerier" type="out" connector="//@interimmodels.8/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.1/@connectortype.0/@roletype.0"/>
        </role>
        <role name="blocksupplier" type="in" connector="//@interimmodels.8/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.1/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.1/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.8/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.8/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.8/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.8/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.8/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.8/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.8/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.8/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.8/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.8/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.8/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.8/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.8/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.8/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.8/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.8/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.8/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.8/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.8/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.8/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.8/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.8/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.8/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.8/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.8/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.8/@designmodel" visitedStates="79" verifyTime="0.006450099999999999" testport="//@interimmodels.8/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!33 -> callwire_req?33 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!33 -> driverquerywire_req?33 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!33 -> driverquerywire_res?33 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!33 -> assignwire_pub?33 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!33 -> callwire_res?33" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.8/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.8/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.8/@designmodel" visitedStates="54" verifyTime="0.0031750999999999997" testport="//@interimmodels.8/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!24 -> callwire_req?24 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!24 -> driverquerywire_req?24 -> DriverDB_driverquerywire_readstorage_invoke -> DriverDB_driverquery_quried -> DriverDB_driverquerywire_readstorage_process -> driverquerywire_res!24 -> driverquerywire_res?24 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!24 -> assignwire_pub?24 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!24 -> callwire_res?24" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverRecord.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.8/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.8/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.8/@designmodel" counterExample="" visitedStates="10" verifyTime="0.0038572999999999997" testport="//@interimmodels.8/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_writer_process -> paywire_req!95 -> paywire_req?95 -> Payment_paywire_writestorage_invoke -> Payment_record_payrecorded -> Payment_paywire_writestorage_process -> paywire_res!95 -> paywire_res?95" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.8/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.8/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.8/@designmodel" visitedStates="29" verifyTime="0.0072061" testport="//@interimmodels.8/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!76 -> authwire_req?76 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!76 -> userquerywire_req?76 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!76 -> userquerywire_res?76 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!76 -> authwire_res?76" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.8/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.8/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.8/@designmodel" visitedStates="29" verifyTime="0.0034579" testport="//@interimmodels.8/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!23 -> authwire_req?23 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!23 -> userquerywire_req?23 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!23 -> userquerywire_res?23 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!23 -> authwire_res?23" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.8/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.8/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-driverupdatewire" visitedStates="96" verifyTime="0.006465299999999999" testport="//@interimmodels.8/@designmodel/@component.2/@port.2" traceExample="init -> DriverUI_locate_located -> DriverUI_driverupdatewire_commander_process -> driverupdatewire_stmt!96 -> driverupdatewire_stmt?96 -> DriverRecord_driverupdate_updated -> DriverRecord_driverupdatewire_readstore_process -> DriverRecord_driverupdatewire_readstore_persist -> driverupdatewire_cmmd!96 -> driverupdatewire_cmmd?96 -> DriverupdatewireCommandLog_logdriverupdatewire_logged -> DriverupdatewireCommandLog_driverupdatewire_commandstore_process -> DriverupdatewireCommandLog_driverupdatewire_commandstore_persist" exprText="[] (DriverUI.locate.located-> &lt;> DriverupdatewireCommandLog.driverupdatewire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-readropayprocesswire" visitedStates="22" verifyTime="0.007369199999999999" testport="//@interimmodels.8/@designmodel/@component.5/@port.0" traceExample="init -> BillingGateway_process_processed -> BillingGateway_payprocesswire_requester_process -> payprocesswire_req!25 -> payprocesswire_req?25 -> Payment_payprocesswire_responder_invoke -> Payment_ropayprocesswire_extquerier_request -> ropayprocesswire_uid!25 -> ropayprocesswire_uid?25 -> PaymentBlockchain_payaccess_accessed -> PaymentBlockchain_ropayprocesswire_blocksupplier_process -> ropayprocesswire_res!25 -> ropayprocesswire_res?25 -> Payment_list_listed -> Payment_ropayprocesswire_extquerier_process -> Payment_ropayprocesswire_extquerier_Skip -> Payment_payprocesswire_responder_process -> payprocesswire_res!25 -> payprocesswire_res?25" exprText="[] (PaymentBlockchain.ropayprocesswire.blocksupplier.process-> &lt;> Payment.list.listed)">
        <connector href="target.arch#//@connector.9"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.8/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.8/@designmodel/@component.3 //@interimmodels.8/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.8/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.8/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.8/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.8/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.8/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="11" description="deploy service: tripmgmt" nextModel="//@interimmodels.10" isStable="true" name="deploy-service">
    <designmodel name="inter11">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.9/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.9/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.9/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.9/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.9/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.9/@designmodel/@connector.0/@role.1 //@interimmodels.9/@designmodel/@connector.1/@role.0 //@interimmodels.9/@designmodel/@connector.2/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.9/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.9/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.9/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.9/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.9/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.9/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" role="//@interimmodels.9/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.9/@designmodel/@host.0/@node.1">
        <port name="record" role="//@interimmodels.9/@designmodel/@connector.3/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.9/@designmodel/@connector.4/@role.1 //@interimmodels.9/@designmodel/@connector.8/@role.0" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.9/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.9/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.9/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.9/@designmodel/@connector.5/@role.1 //@interimmodels.9/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.9/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.9/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" role="//@interimmodels.9/@designmodel/@connector.8/@role.1" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" role="//@interimmodels.9/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.9/@designmodel/@connector.2/@role.0" connector="//@interimmodels.9/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.1"/>
        <role name="subscriber" roletype="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.9/@designmodel/@connector.1"/>
      </connector>
      <connector name="driverquerywire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.9/@designmodel/@connector.1/@role.0" connector="//@interimmodels.9/@designmodel/@connector.2"/>
        <role name="readstorage" roletype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.9/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.3"/>
        <role name="writestorage" roletype="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.9/@designmodel/@connector.3"/>
      </connector>
      <connector name="payprocesswire" type="CSConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.9/@designmodel/@connector.8/@role.0" connector="//@interimmodels.9/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.9/@designmodel/@connector.6/@role.0" connector="//@interimmodels.9/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.9/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="CRConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.9/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.3/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="ropayprocesswire" type="ROConnector">
        <role name="extquerier" type="out" connector="//@interimmodels.9/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.1/@connectortype.0/@roletype.0"/>
        </role>
        <role name="blocksupplier" type="in" connector="//@interimmodels.9/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.1/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.1/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.9/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.9/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.9/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.9/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.9/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.9/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.9/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.9/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.9/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.9/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.9/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.9/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.9/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.9/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.9/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.9/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.9/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.9/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.9/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.9/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.9/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.9/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.9/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.9/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.9/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.9/@designmodel" visitedStates="79" verifyTime="0.005371" testport="//@interimmodels.9/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!10 -> callwire_req?10 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!10 -> driverquerywire_req?10 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!10 -> driverquerywire_res?10 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!10 -> assignwire_pub?10 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!10 -> callwire_res?10" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.9/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.9/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.9/@designmodel" visitedStates="54" verifyTime="0.0043438" testport="//@interimmodels.9/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!63 -> callwire_req?63 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!63 -> driverquerywire_req?63 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!63 -> driverquerywire_res?63 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!63 -> assignwire_pub?63 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!63 -> callwire_res?63" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverDB.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.9/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.9/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.9/@designmodel" counterExample="" visitedStates="10" verifyTime="0.0035748" testport="//@interimmodels.9/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_writer_process -> paywire_req!28 -> paywire_req?28 -> Payment_paywire_writestorage_invoke -> Payment_record_payrecorded -> Payment_paywire_writestorage_process -> paywire_res!28 -> paywire_res?28" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.9/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.9/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.9/@designmodel" visitedStates="29" verifyTime="0.0037778" testport="//@interimmodels.9/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!36 -> authwire_req?36 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!36 -> userquerywire_req?36 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!36 -> userquerywire_res?36 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!36 -> authwire_res?36" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.9/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.9/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.9/@designmodel" visitedStates="29" verifyTime="0.006942299999999999" testport="//@interimmodels.9/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!99 -> authwire_req?99 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!99 -> userquerywire_req?99 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!99 -> userquerywire_res?99 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!99 -> authwire_res?99" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.9/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.9/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-driverupdatewire" visitedStates="96" verifyTime="0.0067967999999999995" testport="//@interimmodels.9/@designmodel/@component.2/@port.2" traceExample="init -> DriverUI_locate_located -> DriverUI_driverupdatewire_commander_process -> driverupdatewire_stmt!66 -> driverupdatewire_stmt?66 -> DriverRecord_driverupdate_updated -> DriverRecord_driverupdatewire_readstore_process -> DriverRecord_driverupdatewire_readstore_persist -> driverupdatewire_cmmd!66 -> driverupdatewire_cmmd?66 -> DriverupdatewireCommandLog_logdriverupdatewire_logged -> DriverupdatewireCommandLog_driverupdatewire_commandstore_process -> DriverupdatewireCommandLog_driverupdatewire_commandstore_persist" exprText="[] (DriverUI.locate.located-> &lt;> DriverupdatewireCommandLog.driverupdatewire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-readropayprocesswire" visitedStates="22" verifyTime="0.0086047" testport="//@interimmodels.9/@designmodel/@component.5/@port.0" traceExample="init -> BillingGateway_process_processed -> BillingGateway_payprocesswire_requester_process -> payprocesswire_req!98 -> payprocesswire_req?98 -> Payment_payprocesswire_responder_invoke -> Payment_ropayprocesswire_extquerier_request -> ropayprocesswire_uid!98 -> ropayprocesswire_uid?98 -> PaymentBlockchain_payaccess_accessed -> PaymentBlockchain_ropayprocesswire_blocksupplier_process -> ropayprocesswire_res!98 -> ropayprocesswire_res?98 -> Payment_list_listed -> Payment_ropayprocesswire_extquerier_process -> Payment_ropayprocesswire_extquerier_Skip -> Payment_payprocesswire_responder_process -> payprocesswire_res!98 -> payprocesswire_res?98" exprText="[] (PaymentBlockchain.ropayprocesswire.blocksupplier.process-> &lt;> Payment.list.listed)">
        <connector href="target.arch#//@connector.9"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.9/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.9/@designmodel/@component.3 //@interimmodels.9/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.9/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.9/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.9/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.9/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.9/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="12" description="network route for connector:driverquerywire between: tripmgmt driverrecord " nextModel="//@interimmodels.11" isStable="true" name="network-route">
    <designmodel name="inter12">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.10/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.10/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.10/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.10/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.10/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.10/@designmodel/@connector.0/@role.1 //@interimmodels.10/@designmodel/@connector.1/@role.0 //@interimmodels.10/@designmodel/@connector.2/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.10/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.10/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.10/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.10/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.10/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.10/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" role="//@interimmodels.10/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.10/@designmodel/@host.0/@node.1">
        <port name="record" role="//@interimmodels.10/@designmodel/@connector.3/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.10/@designmodel/@connector.4/@role.1 //@interimmodels.10/@designmodel/@connector.8/@role.0" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.10/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.10/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.10/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.10/@designmodel/@connector.5/@role.1 //@interimmodels.10/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.10/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.10/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" role="//@interimmodels.10/@designmodel/@connector.8/@role.1" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" role="//@interimmodels.10/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.10/@designmodel/@connector.2/@role.0" connector="//@interimmodels.10/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.1"/>
        <role name="subscriber" roletype="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.10/@designmodel/@connector.1"/>
      </connector>
      <connector name="driverquerywire" type="QRConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0">
        <role name="querier" roletype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.10/@designmodel/@connector.1/@role.0" connector="//@interimmodels.10/@designmodel/@connector.2"/>
        <role name="readstore" roletype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.10/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.3"/>
        <role name="writestorage" roletype="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.10/@designmodel/@connector.3"/>
      </connector>
      <connector name="payprocesswire" type="CSConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.10/@designmodel/@connector.8/@role.0" connector="//@interimmodels.10/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.10/@designmodel/@connector.6/@role.0" connector="//@interimmodels.10/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.10/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="CRConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.10/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.3/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="ropayprocesswire" type="ROConnector">
        <role name="extquerier" type="out" connector="//@interimmodels.10/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.1/@connectortype.0/@roletype.0"/>
        </role>
        <role name="blocksupplier" type="in" connector="//@interimmodels.10/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.1/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.1/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.10/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.10/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.10/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.10/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.10/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.10/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.10/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.10/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.10/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.10/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.10/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.10/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.10/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.10/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.10/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.10/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.10/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.10/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.10/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.10/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.10/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.10/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.10/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.10/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.10/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.10/@designmodel" visitedStates="77" verifyTime="0.0079695" testport="//@interimmodels.10/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!43 -> callwire_req?43 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!43 -> driverquerywire_stmt?43 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!43 -> driverquerywire_res?43 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!43 -> assignwire_pub?43 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!43 -> callwire_res?43" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.10/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.10/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.10/@designmodel" visitedStates="52" verifyTime="0.0045762" testport="//@interimmodels.10/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!11 -> callwire_req?11 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!11 -> driverquerywire_stmt?11 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!11 -> driverquerywire_res?11 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!11 -> assignwire_pub?11 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!11 -> callwire_res?11" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverRecord.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.10/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.10/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.10/@designmodel" counterExample="" visitedStates="10" verifyTime="0.0034205" testport="//@interimmodels.10/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_writer_process -> paywire_req!38 -> paywire_req?38 -> Payment_paywire_writestorage_invoke -> Payment_record_payrecorded -> Payment_paywire_writestorage_process -> paywire_res!38 -> paywire_res?38" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.10/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.10/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.10/@designmodel" visitedStates="29" verifyTime="0.0042859" testport="//@interimmodels.10/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!49 -> authwire_req?49 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!49 -> userquerywire_req?49 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!49 -> userquerywire_res?49 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!49 -> authwire_res?49" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.10/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.10/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.10/@designmodel" visitedStates="29" verifyTime="0.0046535" testport="//@interimmodels.10/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!38 -> authwire_req?38 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!38 -> userquerywire_req?38 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!38 -> userquerywire_res?38 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!38 -> authwire_res?38" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.10/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.10/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-driverupdatewire" visitedStates="96" verifyTime="0.0054046" testport="//@interimmodels.10/@designmodel/@component.2/@port.2" traceExample="init -> DriverUI_locate_located -> DriverUI_driverupdatewire_commander_process -> driverupdatewire_stmt!58 -> driverupdatewire_stmt?58 -> DriverRecord_driverupdate_updated -> DriverRecord_driverupdatewire_readstore_process -> DriverRecord_driverupdatewire_readstore_persist -> driverupdatewire_cmmd!58 -> driverupdatewire_cmmd?58 -> DriverupdatewireCommandLog_logdriverupdatewire_logged -> DriverupdatewireCommandLog_driverupdatewire_commandstore_process -> DriverupdatewireCommandLog_driverupdatewire_commandstore_persist" exprText="[] (DriverUI.locate.located-> &lt;> DriverupdatewireCommandLog.driverupdatewire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-readropayprocesswire" visitedStates="22" verifyTime="0.066685" testport="//@interimmodels.10/@designmodel/@component.5/@port.0" traceExample="init -> BillingGateway_process_processed -> BillingGateway_payprocesswire_requester_process -> payprocesswire_req!16 -> payprocesswire_req?16 -> Payment_payprocesswire_responder_invoke -> Payment_ropayprocesswire_extquerier_request -> ropayprocesswire_uid!16 -> ropayprocesswire_uid?16 -> PaymentBlockchain_payaccess_accessed -> PaymentBlockchain_ropayprocesswire_blocksupplier_process -> ropayprocesswire_res!16 -> ropayprocesswire_res?16 -> Payment_list_listed -> Payment_ropayprocesswire_extquerier_process -> Payment_ropayprocesswire_extquerier_Skip -> Payment_payprocesswire_responder_process -> payprocesswire_res!16 -> payprocesswire_res?16" exprText="[] (PaymentBlockchain.ropayprocesswire.blocksupplier.process-> &lt;> Payment.list.listed)">
        <connector href="target.arch#//@connector.9"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-query-driverquerywire" visitedStates="53" verifyTime="0.0047060999999999995" testport="//@interimmodels.10/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!31 -> callwire_req?31 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!31 -> driverquerywire_stmt?31 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!31 -> driverquerywire_res?31 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!31 -> assignwire_pub?31 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!31 -> callwire_res?31" exprText="[] (TripMgmt.accept.acknowledged-> &lt;> DriverRecord.driverquerywire.readstore.process)">
        <connector href="target.arch#//@connector.2"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.10/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.10/@designmodel/@component.3 //@interimmodels.10/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.10/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.10/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.10/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.10/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.10/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="13" description="network route for connector:assignwire between: tripmgmt driverui " nextModel="//@interimmodels.12" name="network-route">
    <designmodel name="inter13">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.11/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.11/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.11/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.11/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.11/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.11/@designmodel/@connector.0/@role.1 //@interimmodels.11/@designmodel/@connector.2/@role.0 //@interimmodels.11/@designmodel/@connector.1/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.11/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.11/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.11/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.11/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.11/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.11/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" role="//@interimmodels.11/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.11/@designmodel/@host.0/@node.1">
        <port name="record" role="//@interimmodels.11/@designmodel/@connector.3/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.11/@designmodel/@connector.4/@role.1 //@interimmodels.11/@designmodel/@connector.8/@role.0" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.11/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.11/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.11/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.11/@designmodel/@connector.5/@role.1 //@interimmodels.11/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.11/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.11/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" role="//@interimmodels.11/@designmodel/@connector.8/@role.1" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" role="//@interimmodels.11/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.11/@designmodel/@connector.2/@role.0" connector="//@interimmodels.11/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="ESConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.1"/>
        <role name="eventsubscriber" roletype="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.11/@designmodel/@connector.1"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.1"/>
        </role>
      </connector>
      <connector name="driverquerywire" type="QRConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0">
        <role name="querier" roletype="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.11/@designmodel/@connector.1/@role.0" connector="//@interimmodels.11/@designmodel/@connector.2"/>
        <role name="readstore" roletype="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.11/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.3"/>
        <role name="writestorage" roletype="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.11/@designmodel/@connector.3"/>
      </connector>
      <connector name="payprocesswire" type="CSConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.11/@designmodel/@connector.8/@role.0" connector="//@interimmodels.11/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.11/@designmodel/@connector.6/@role.0" connector="//@interimmodels.11/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.11/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="CRConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.11/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.3/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="ropayprocesswire" type="ROConnector">
        <role name="extquerier" type="out" connector="//@interimmodels.11/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.1/@connectortype.0/@roletype.0"/>
        </role>
        <role name="blocksupplier" type="in" connector="//@interimmodels.11/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.1/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.1/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.11/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.11/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.11/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.11/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.11/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.11/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.11/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.11/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.11/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.11/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.11/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.11/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.11/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.11/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.11/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.11/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.11/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.11/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.11/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.11/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.11/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.11/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.11/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.11/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.11/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="func-prop1" model="//@interimmodels.11/@designmodel" valid="false" counterExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!38 -> callwire_req?38 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!38 -> driverquerywire_stmt?38 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!38 -> driverquerywire_res?38 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!38" visitedStates="33" verifyTime="0.0055705" testport="//@interimmodels.11/@designmodel/@component.0/@port.0" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter13() |= ![](PassengerUI_call_callride->&lt;" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.11/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.11/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="func-prop2" model="//@interimmodels.11/@designmodel" visitedStates="21" verifyTime="0.008522499999999999" testport="//@interimmodels.11/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!41 -> callwire_req?41 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!41 -> driverquerywire_stmt?41 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!41 -> driverquerywire_res?41 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!41" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverRecord.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.11/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.11/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="func-prop3" model="//@interimmodels.11/@designmodel" counterExample="" visitedStates="10" verifyTime="0.0036718999999999996" testport="//@interimmodels.11/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_writer_process -> paywire_req!56 -> paywire_req?56 -> Payment_paywire_writestorage_invoke -> Payment_record_payrecorded -> Payment_paywire_writestorage_process -> paywire_res!56 -> paywire_res?56" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.11/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.11/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="func-prop4" model="//@interimmodels.11/@designmodel" visitedStates="29" verifyTime="0.0039512" testport="//@interimmodels.11/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!48 -> authwire_req?48 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!48 -> userquerywire_req?48 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!48 -> userquerywire_res?48 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!48 -> authwire_res?48" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.11/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.11/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="func-prop5" model="//@interimmodels.11/@designmodel" visitedStates="29" verifyTime="0.0030916999999999997" testport="//@interimmodels.11/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!72 -> authwire_req?72 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!72 -> userquerywire_req?72 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!72 -> userquerywire_res?72 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!72 -> authwire_res?72" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.11/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.11/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-driverupdatewire" visitedStates="96" verifyTime="0.0050203999999999995" testport="//@interimmodels.11/@designmodel/@component.2/@port.2" traceExample="init -> DriverUI_locate_located -> DriverUI_driverupdatewire_commander_process -> driverupdatewire_stmt!90 -> driverupdatewire_stmt?90 -> DriverRecord_driverupdate_updated -> DriverRecord_driverupdatewire_readstore_process -> DriverRecord_driverupdatewire_readstore_persist -> driverupdatewire_cmmd!90 -> driverupdatewire_cmmd?90 -> DriverupdatewireCommandLog_logdriverupdatewire_logged -> DriverupdatewireCommandLog_driverupdatewire_commandstore_process -> DriverupdatewireCommandLog_driverupdatewire_commandstore_persist" exprText="[] (DriverUI.locate.located-> &lt;> DriverupdatewireCommandLog.driverupdatewire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-readropayprocesswire" visitedStates="22" verifyTime="0.0072791999999999996" testport="//@interimmodels.11/@designmodel/@component.5/@port.0" traceExample="init -> BillingGateway_process_processed -> BillingGateway_payprocesswire_requester_process -> payprocesswire_req!69 -> payprocesswire_req?69 -> Payment_payprocesswire_responder_invoke -> Payment_ropayprocesswire_extquerier_request -> ropayprocesswire_uid!69 -> ropayprocesswire_uid?69 -> PaymentBlockchain_payaccess_accessed -> PaymentBlockchain_ropayprocesswire_blocksupplier_process -> ropayprocesswire_res!69 -> ropayprocesswire_res?69 -> Payment_list_listed -> Payment_ropayprocesswire_extquerier_process -> Payment_ropayprocesswire_extquerier_Skip -> Payment_payprocesswire_responder_process -> payprocesswire_res!69 -> payprocesswire_res?69" exprText="[] (PaymentBlockchain.ropayprocesswire.blocksupplier.process-> &lt;> Payment.list.listed)">
        <connector href="target.arch#//@connector.9"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-query-driverquerywire" visitedStates="22" verifyTime="0.0037319" testport="//@interimmodels.11/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!88 -> callwire_req?88 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!88 -> driverquerywire_stmt?88 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!88 -> driverquerywire_res?88 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!88" exprText="[] (TripMgmt.accept.acknowledged-> &lt;> DriverRecord.driverquerywire.readstore.process)">
        <connector href="target.arch#//@connector.2"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-assignwire" valid="false" counterExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!85 -> callwire_req?85 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!85 -> driverquerywire_stmt?85 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!85 -> driverquerywire_res?85 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!85" visitedStates="28" verifyTime="0.0043272" testport="//@interimmodels.11/@designmodel/@component.0/@port.0" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter13() |= ![](TripMgmt_accept_acknowledged->&lt;" exprText="[] (TripMgmt.accept.acknowledged-> &lt;> AssignwireLog.assignwire.eventstore.persist)">
        <connector href="target.arch#//@connector.1"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.11/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.11/@designmodel/@component.3 //@interimmodels.11/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.11/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.11/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.11/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.11/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.11/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="14" description="network route for connector:assignwire between: tripmgmt assignwirelog " nextModel="//@interimmodels.13" isStable="true" name="network-route">
    <designmodel name="inter14">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.12/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.12/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.12/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.12/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.12/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.12/@designmodel/@connector.0/@role.1 //@interimmodels.12/@designmodel/@connector.2/@role.0 //@interimmodels.12/@designmodel/@connector.1/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.12/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.12/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.12/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.12/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.12/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.12/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" role="//@interimmodels.12/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.12/@designmodel/@host.0/@node.1">
        <port name="record" role="//@interimmodels.12/@designmodel/@connector.3/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.12/@designmodel/@connector.4/@role.1 //@interimmodels.12/@designmodel/@connector.8/@role.0" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.12/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.12/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.12/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.12/@designmodel/@connector.5/@role.1 //@interimmodels.12/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.12/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.12/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" role="//@interimmodels.12/@designmodel/@connector.8/@role.1" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" role="//@interimmodels.12/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" role="//@interimmodels.12/@designmodel/@connector.1/@role.2" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.12/@designmodel/@connector.2/@role.0" connector="//@interimmodels.12/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="ESConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.1"/>
        <role name="eventsubscriber" roletype="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.12/@designmodel/@connector.1"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.1"/>
        </role>
      </connector>
      <connector name="driverquerywire" type="QRConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0">
        <role name="querier" roletype="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.12/@designmodel/@connector.1/@role.0" connector="//@interimmodels.12/@designmodel/@connector.2"/>
        <role name="readstore" roletype="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.12/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.3"/>
        <role name="writestorage" roletype="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.12/@designmodel/@connector.3"/>
      </connector>
      <connector name="payprocesswire" type="CSConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.12/@designmodel/@connector.8/@role.0" connector="//@interimmodels.12/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.12/@designmodel/@connector.6/@role.0" connector="//@interimmodels.12/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.12/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="CRConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.12/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.3/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="ropayprocesswire" type="ROConnector">
        <role name="extquerier" type="out" connector="//@interimmodels.12/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.1/@connectortype.0/@roletype.0"/>
        </role>
        <role name="blocksupplier" type="in" connector="//@interimmodels.12/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.1/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.1/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.12/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.12/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.12/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.12/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.12/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.12/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.12/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.12/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.12/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.12/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.12/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.12/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.12/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.12/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.12/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.12/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.12/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.12/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.12/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.12/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.12/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.12/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.12/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.12/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.12/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.12/@designmodel" visitedStates="197" verifyTime="0.011171799999999999" testport="//@interimmodels.12/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!42 -> callwire_req?42 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!42 -> driverquerywire_stmt?42 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!42 -> driverquerywire_res?42 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!42 -> assignwire_pevt?42 -> AssignwireLog_logassignwire_logged -> AssignwireLog_assignwire_eventstore_process -> assignwire_sevt!42 -> AssignwireLog_assignwire_eventstore_persist -> assignwire_sevt?42 -> assignwire_bevt!42 -> assignwire_bevt?42 -> DriverUI_notify_notified -> DriverUI_assignwire_eventsubscriber_process -> TripMgmt_assignwire_eventpublisher_broadcast -> TripMgmt_assignwire_eventpublisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!42 -> callwire_res?42" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.12/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.12/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.12/@designmodel" visitedStates="131" verifyTime="0.0072488" testport="//@interimmodels.12/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!63 -> callwire_req?63 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!63 -> driverquerywire_stmt?63 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!63 -> driverquerywire_res?63 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!63 -> assignwire_pevt?63 -> AssignwireLog_logassignwire_logged -> AssignwireLog_assignwire_eventstore_process -> assignwire_sevt!63 -> AssignwireLog_assignwire_eventstore_persist -> assignwire_sevt?63 -> assignwire_bevt!63 -> assignwire_bevt?63 -> DriverUI_notify_notified -> DriverUI_assignwire_eventsubscriber_process -> TripMgmt_assignwire_eventpublisher_broadcast -> TripMgmt_assignwire_eventpublisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!63 -> callwire_res?63" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverRecord.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.12/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.12/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.12/@designmodel" counterExample="" visitedStates="10" verifyTime="0.0051662" testport="//@interimmodels.12/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_writer_process -> paywire_req!36 -> paywire_req?36 -> Payment_paywire_writestorage_invoke -> Payment_record_payrecorded -> Payment_paywire_writestorage_process -> paywire_res!36 -> paywire_res?36" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.12/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.12/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.12/@designmodel" visitedStates="29" verifyTime="0.0085737" testport="//@interimmodels.12/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!83 -> authwire_req?83 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!83 -> userquerywire_req?83 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!83 -> userquerywire_res?83 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!83 -> authwire_res?83" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.12/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.12/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.12/@designmodel" visitedStates="29" verifyTime="0.0052965" testport="//@interimmodels.12/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!75 -> authwire_req?75 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!75 -> userquerywire_req?75 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!75 -> userquerywire_res?75 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!75 -> authwire_res?75" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.12/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.12/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-driverupdatewire" visitedStates="96" verifyTime="0.0110048" testport="//@interimmodels.12/@designmodel/@component.2/@port.2" traceExample="init -> DriverUI_locate_located -> DriverUI_driverupdatewire_commander_process -> driverupdatewire_stmt!51 -> driverupdatewire_stmt?51 -> DriverRecord_driverupdate_updated -> DriverRecord_driverupdatewire_readstore_process -> DriverRecord_driverupdatewire_readstore_persist -> driverupdatewire_cmmd!51 -> driverupdatewire_cmmd?51 -> DriverupdatewireCommandLog_logdriverupdatewire_logged -> DriverupdatewireCommandLog_driverupdatewire_commandstore_process -> DriverupdatewireCommandLog_driverupdatewire_commandstore_persist" exprText="[] (DriverUI.locate.located-> &lt;> DriverupdatewireCommandLog.driverupdatewire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-readropayprocesswire" visitedStates="22" verifyTime="0.0053381999999999995" testport="//@interimmodels.12/@designmodel/@component.5/@port.0" traceExample="init -> BillingGateway_process_processed -> BillingGateway_payprocesswire_requester_process -> payprocesswire_req!49 -> payprocesswire_req?49 -> Payment_payprocesswire_responder_invoke -> Payment_ropayprocesswire_extquerier_request -> ropayprocesswire_uid!49 -> ropayprocesswire_uid?49 -> PaymentBlockchain_payaccess_accessed -> PaymentBlockchain_ropayprocesswire_blocksupplier_process -> ropayprocesswire_res!49 -> ropayprocesswire_res?49 -> Payment_list_listed -> Payment_ropayprocesswire_extquerier_process -> Payment_ropayprocesswire_extquerier_Skip -> Payment_payprocesswire_responder_process -> payprocesswire_res!49 -> payprocesswire_res?49" exprText="[] (PaymentBlockchain.ropayprocesswire.blocksupplier.process-> &lt;> Payment.list.listed)">
        <connector href="target.arch#//@connector.9"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-query-driverquerywire" visitedStates="132" verifyTime="0.0086277" testport="//@interimmodels.12/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!32 -> callwire_req?32 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!32 -> driverquerywire_stmt?32 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!32 -> driverquerywire_res?32 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!32 -> assignwire_pevt?32 -> AssignwireLog_logassignwire_logged -> AssignwireLog_assignwire_eventstore_process -> assignwire_sevt!32 -> AssignwireLog_assignwire_eventstore_persist -> assignwire_sevt?32 -> assignwire_bevt!32 -> assignwire_bevt?32 -> DriverUI_notify_notified -> DriverUI_assignwire_eventsubscriber_process -> TripMgmt_assignwire_eventpublisher_broadcast -> TripMgmt_assignwire_eventpublisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!32 -> callwire_res?32" exprText="[] (TripMgmt.accept.acknowledged-> &lt;> DriverRecord.driverquerywire.readstore.process)">
        <connector href="target.arch#//@connector.2"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-assignwire" visitedStates="182" verifyTime="0.009669299999999999" testport="//@interimmodels.12/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!86 -> callwire_req?86 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!86 -> driverquerywire_stmt?86 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!86 -> driverquerywire_res?86 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!86 -> assignwire_pevt?86 -> AssignwireLog_logassignwire_logged -> AssignwireLog_assignwire_eventstore_process -> assignwire_sevt!86 -> AssignwireLog_assignwire_eventstore_persist -> assignwire_sevt?86 -> assignwire_bevt!86 -> assignwire_bevt?86 -> DriverUI_notify_notified -> DriverUI_assignwire_eventsubscriber_process -> TripMgmt_assignwire_eventpublisher_broadcast -> TripMgmt_assignwire_eventpublisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!86 -> callwire_res?86" exprText="[] (TripMgmt.accept.acknowledged-> &lt;> AssignwireLog.assignwire.eventstore.persist)">
        <connector href="target.arch#//@connector.1"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.12/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.12/@designmodel/@component.3 //@interimmodels.12/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.12/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.12/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.12/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.12/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.12/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="16" description="deploy service: paymentoracle" nextModel="//@interimmodels.14" isStable="true" name="deploy-service">
    <designmodel name="inter16">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.13/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.13/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.13/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.13/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.13/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.13/@designmodel/@connector.0/@role.1 //@interimmodels.13/@designmodel/@connector.2/@role.0 //@interimmodels.13/@designmodel/@connector.1/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.13/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.13/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.13/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.13/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.13/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.13/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" role="//@interimmodels.13/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.13/@designmodel/@host.0/@node.1">
        <port name="record" role="//@interimmodels.13/@designmodel/@connector.3/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.13/@designmodel/@connector.4/@role.1 //@interimmodels.13/@designmodel/@connector.8/@role.0" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.13/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.13/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.13/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.13/@designmodel/@connector.5/@role.1 //@interimmodels.13/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.13/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.13/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" role="//@interimmodels.13/@designmodel/@connector.8/@role.1" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" role="//@interimmodels.13/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" role="//@interimmodels.13/@designmodel/@connector.1/@role.2" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentOracle" type="server,oracle">
        <port name="Paymentsupply" type="response,orafeed,OutboundPort,InboundPort">
          <events name="supplied"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.2"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.13/@designmodel/@connector.2/@role.0" connector="//@interimmodels.13/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="ESConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.1"/>
        <role name="eventsubscriber" roletype="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.13/@designmodel/@connector.1"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.1"/>
        </role>
      </connector>
      <connector name="driverquerywire" type="QRConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0">
        <role name="querier" roletype="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.13/@designmodel/@connector.1/@role.0" connector="//@interimmodels.13/@designmodel/@connector.2"/>
        <role name="readstore" roletype="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.13/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.3"/>
        <role name="writestorage" roletype="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.13/@designmodel/@connector.3"/>
      </connector>
      <connector name="payprocesswire" type="CSConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.13/@designmodel/@connector.8/@role.0" connector="//@interimmodels.13/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.13/@designmodel/@connector.6/@role.0" connector="//@interimmodels.13/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.13/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="CRConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.13/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.3/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="ropayprocesswire" type="ROConnector">
        <role name="extquerier" type="out" connector="//@interimmodels.13/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.1/@connectortype.0/@roletype.0"/>
        </role>
        <role name="blocksupplier" type="in" connector="//@interimmodels.13/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.1/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.1/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.13/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.13/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.13/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.13/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.13/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.13/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.13/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.13/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.13/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.13/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.13/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.13/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.13/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.13/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.13/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.13/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.13/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.13/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.13/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.13/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.13/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.13/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.13/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.13/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.13/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.13/@designmodel" visitedStates="197" verifyTime="0.0129295" testport="//@interimmodels.13/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!64 -> callwire_req?64 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!64 -> driverquerywire_stmt?64 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!64 -> driverquerywire_res?64 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!64 -> assignwire_pevt?64 -> AssignwireLog_logassignwire_logged -> AssignwireLog_assignwire_eventstore_process -> assignwire_sevt!64 -> AssignwireLog_assignwire_eventstore_persist -> assignwire_sevt?64 -> assignwire_bevt!64 -> assignwire_bevt?64 -> DriverUI_notify_notified -> DriverUI_assignwire_eventsubscriber_process -> TripMgmt_assignwire_eventpublisher_broadcast -> TripMgmt_assignwire_eventpublisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!64 -> callwire_res?64" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.13/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.13/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.13/@designmodel" visitedStates="131" verifyTime="0.0649279" testport="//@interimmodels.13/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!86 -> callwire_req?86 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!86 -> driverquerywire_stmt?86 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!86 -> driverquerywire_res?86 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!86 -> assignwire_pevt?86 -> AssignwireLog_logassignwire_logged -> AssignwireLog_assignwire_eventstore_process -> assignwire_sevt!86 -> AssignwireLog_assignwire_eventstore_persist -> assignwire_sevt?86 -> assignwire_bevt!86 -> assignwire_bevt?86 -> DriverUI_notify_notified -> DriverUI_assignwire_eventsubscriber_process -> TripMgmt_assignwire_eventpublisher_broadcast -> TripMgmt_assignwire_eventpublisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!86 -> callwire_res?86" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverRecord.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.13/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.13/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.13/@designmodel" counterExample="" visitedStates="10" verifyTime="0.0060154" testport="//@interimmodels.13/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_writer_process -> paywire_req!57 -> paywire_req?57 -> Payment_paywire_writestorage_invoke -> Payment_record_payrecorded -> Payment_paywire_writestorage_process -> paywire_res!57 -> paywire_res?57" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.13/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.13/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.13/@designmodel" visitedStates="29" verifyTime="0.005644" testport="//@interimmodels.13/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!27 -> authwire_req?27 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!27 -> userquerywire_req?27 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!27 -> userquerywire_res?27 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!27 -> authwire_res?27" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.13/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.13/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.13/@designmodel" visitedStates="29" verifyTime="0.0070249" testport="//@interimmodels.13/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!25 -> authwire_req?25 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!25 -> userquerywire_req?25 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!25 -> userquerywire_res?25 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!25 -> authwire_res?25" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.13/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.13/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-driverupdatewire" visitedStates="96" verifyTime="0.0069042" testport="//@interimmodels.13/@designmodel/@component.2/@port.2" traceExample="init -> DriverUI_locate_located -> DriverUI_driverupdatewire_commander_process -> driverupdatewire_stmt!73 -> driverupdatewire_stmt?73 -> DriverRecord_driverupdate_updated -> DriverRecord_driverupdatewire_readstore_process -> DriverRecord_driverupdatewire_readstore_persist -> driverupdatewire_cmmd!73 -> driverupdatewire_cmmd?73 -> DriverupdatewireCommandLog_logdriverupdatewire_logged -> DriverupdatewireCommandLog_driverupdatewire_commandstore_process -> DriverupdatewireCommandLog_driverupdatewire_commandstore_persist" exprText="[] (DriverUI.locate.located-> &lt;> DriverupdatewireCommandLog.driverupdatewire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-readropayprocesswire" visitedStates="22" verifyTime="0.0051683" testport="//@interimmodels.13/@designmodel/@component.5/@port.0" traceExample="init -> BillingGateway_process_processed -> BillingGateway_payprocesswire_requester_process -> payprocesswire_req!89 -> payprocesswire_req?89 -> Payment_payprocesswire_responder_invoke -> Payment_ropayprocesswire_extquerier_request -> ropayprocesswire_uid!89 -> ropayprocesswire_uid?89 -> PaymentBlockchain_payaccess_accessed -> PaymentBlockchain_ropayprocesswire_blocksupplier_process -> ropayprocesswire_res!89 -> ropayprocesswire_res?89 -> Payment_list_listed -> Payment_ropayprocesswire_extquerier_process -> Payment_ropayprocesswire_extquerier_Skip -> Payment_payprocesswire_responder_process -> payprocesswire_res!89 -> payprocesswire_res?89" exprText="[] (PaymentBlockchain.ropayprocesswire.blocksupplier.process-> &lt;> Payment.list.listed)">
        <connector href="target.arch#//@connector.9"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-query-driverquerywire" visitedStates="132" verifyTime="0.0081768" testport="//@interimmodels.13/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!30 -> callwire_req?30 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!30 -> driverquerywire_stmt?30 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!30 -> driverquerywire_res?30 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!30 -> assignwire_pevt?30 -> AssignwireLog_logassignwire_logged -> AssignwireLog_assignwire_eventstore_process -> assignwire_sevt!30 -> AssignwireLog_assignwire_eventstore_persist -> assignwire_sevt?30 -> assignwire_bevt!30 -> assignwire_bevt?30 -> DriverUI_notify_notified -> DriverUI_assignwire_eventsubscriber_process -> TripMgmt_assignwire_eventpublisher_broadcast -> TripMgmt_assignwire_eventpublisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!30 -> callwire_res?30" exprText="[] (TripMgmt.accept.acknowledged-> &lt;> DriverRecord.driverquerywire.readstore.process)">
        <connector href="target.arch#//@connector.2"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-assignwire" visitedStates="182" verifyTime="0.0089388" testport="//@interimmodels.13/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!19 -> callwire_req?19 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!19 -> driverquerywire_stmt?19 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!19 -> driverquerywire_res?19 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!19 -> assignwire_pevt?19 -> AssignwireLog_logassignwire_logged -> AssignwireLog_assignwire_eventstore_process -> assignwire_sevt!19 -> AssignwireLog_assignwire_eventstore_persist -> assignwire_sevt?19 -> assignwire_bevt!19 -> assignwire_bevt?19 -> DriverUI_notify_notified -> DriverUI_assignwire_eventsubscriber_process -> TripMgmt_assignwire_eventpublisher_broadcast -> TripMgmt_assignwire_eventpublisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!19 -> callwire_res?19" exprText="[] (TripMgmt.accept.acknowledged-> &lt;> AssignwireLog.assignwire.eventstore.persist)">
        <connector href="target.arch#//@connector.1"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.13/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.13/@designmodel/@component.3 //@interimmodels.13/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.13/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.13/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.13/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.13/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.13/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="17" description="network route for connector:oraclepaywire between: paymentoracle paymentblockchain " nextModel="//@interimmodels.15" name="network-route">
    <designmodel name="inter17">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.14/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.14/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.14/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.14/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.14/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.14/@designmodel/@connector.0/@role.1 //@interimmodels.14/@designmodel/@connector.2/@role.0 //@interimmodels.14/@designmodel/@connector.1/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.14/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.14/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.14/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.14/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.14/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.14/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" role="//@interimmodels.14/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.14/@designmodel/@host.0/@node.1">
        <port name="record" role="//@interimmodels.14/@designmodel/@connector.3/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.14/@designmodel/@connector.4/@role.1 //@interimmodels.14/@designmodel/@connector.8/@role.0" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.14/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.14/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.14/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.14/@designmodel/@connector.5/@role.1 //@interimmodels.14/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.14/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.14/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" role="//@interimmodels.14/@designmodel/@connector.9/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" role="//@interimmodels.14/@designmodel/@connector.8/@role.1" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" role="//@interimmodels.14/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" role="//@interimmodels.14/@designmodel/@connector.1/@role.2" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentOracle" type="server,oracle">
        <port name="Paymentsupply" role="//@interimmodels.14/@designmodel/@connector.9/@role.1" type="response,orafeed,OutboundPort,InboundPort">
          <events name="supplied"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.2"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.14/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.14/@designmodel/@connector.2/@role.0" connector="//@interimmodels.14/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="ESConnector" connectortype="//@interimmodels.14/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.14/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.14/@designmodel/@connector.1"/>
        <role name="eventsubscriber" roletype="//@interimmodels.14/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.14/@designmodel/@connector.1"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.1"/>
        </role>
      </connector>
      <connector name="driverquerywire" type="QRConnector" connectortype="//@interimmodels.14/@designmodel/@archstyle.7/@connectortype.0">
        <role name="querier" roletype="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.14/@designmodel/@connector.1/@role.0" connector="//@interimmodels.14/@designmodel/@connector.2"/>
        <role name="readstore" roletype="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.14/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.14/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.14/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.14/@designmodel/@connector.3"/>
        <role name="writestorage" roletype="//@interimmodels.14/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.14/@designmodel/@connector.3"/>
      </connector>
      <connector name="payprocesswire" type="CSConnector" connectortype="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.14/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.14/@designmodel/@connector.8/@role.0" connector="//@interimmodels.14/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.14/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.14/@designmodel/@connector.6/@role.0" connector="//@interimmodels.14/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.14/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.14/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="CRConnector" connectortype="//@interimmodels.14/@designmodel/@archstyle.3/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.14/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.14/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.14/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.14/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.3/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="ropayprocesswire" type="ROConnector">
        <role name="extquerier" type="out" connector="//@interimmodels.14/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.1/@connectortype.0/@roletype.0"/>
        </role>
        <role name="blocksupplier" type="in" connector="//@interimmodels.14/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.1/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.1/@connectortype.0"/>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.14/@designmodel/@connector.9">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.14/@designmodel/@connector.9">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.14/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.14/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.14/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.14/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.14/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.14/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.14/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.14/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.14/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.14/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.14/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.14/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.14/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.14/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.14/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.14/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.14/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.14/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.14/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.14/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.14/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.14/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.14/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.14/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.14/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.14/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.14/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.14/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.14/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.14/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.14/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.14/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.14/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.14/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.14/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.14/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.14/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.14/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.14/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.14/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.14/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.14/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.14/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.14/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.14/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.14/@designmodel" valid="false" counterExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!44 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!10 -> callwire_req?10 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!10 -> driverquerywire_stmt?10 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!10 -> driverquerywire_res?10 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!10 -> assignwire_pevt?10 -> AssignwireLog_logassignwire_logged -> AssignwireLog_assignwire_eventstore_process -> assignwire_sevt!10 -> AssignwireLog_assignwire_eventstore_persist -> assignwire_sevt?10 -> assignwire_bevt!10 -> assignwire_bevt?10 -> TripMgmt_assignwire_eventpublisher_broadcast -> TripMgmt_assignwire_eventpublisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!10 -> callwire_res?10 -> oraclepaywire_token?44 -> (oraclepaywire_token!44 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?44)*" visitedStates="6403" verifyTime="0.22324929999999998" testport="//@interimmodels.14/@designmodel/@component.0/@port.0" traceExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!44 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!10 -> callwire_req?10 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!10 -> driverquerywire_stmt?10 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!10 -> driverquerywire_res?10 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!10 -> assignwire_pevt?10 -> AssignwireLog_logassignwire_logged -> AssignwireLog_assignwire_eventstore_process -> assignwire_sevt!10 -> AssignwireLog_assignwire_eventstore_persist -> assignwire_sevt?10 -> assignwire_bevt!10 -> assignwire_bevt?10 -> DriverUI_notify_notified -> DriverUI_assignwire_eventsubscriber_process -> TripMgmt_assignwire_eventpublisher_broadcast -> TripMgmt_assignwire_eventpublisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!10 -> callwire_res?10 -> oraclepaywire_token?44 -> (oraclepaywire_token!44 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?44)*" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.14/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.14/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.14/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.14/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.14/@designmodel" valid="false" counterExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!28 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!85 -> callwire_req?85 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!85 -> driverquerywire_stmt?85 -> oraclepaywire_token?28 -> (oraclepaywire_token!28 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?28)*" visitedStates="5800" verifyTime="0.16419129999999998" testport="//@interimmodels.14/@designmodel/@component.0/@port.0" traceExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!28 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!85 -> callwire_req?85 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!85 -> driverquerywire_stmt?85 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!85 -> driverquerywire_res?85 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!85 -> assignwire_pevt?85 -> AssignwireLog_logassignwire_logged -> AssignwireLog_assignwire_eventstore_process -> assignwire_sevt!85 -> AssignwireLog_assignwire_eventstore_persist -> assignwire_sevt?85 -> assignwire_bevt!85 -> assignwire_bevt?85 -> DriverUI_notify_notified -> DriverUI_assignwire_eventsubscriber_process -> TripMgmt_assignwire_eventpublisher_broadcast -> TripMgmt_assignwire_eventpublisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!85 -> callwire_res?85 -> oraclepaywire_token?28 -> (oraclepaywire_token!28 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?28)*" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverRecord.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.14/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.14/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.14/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.14/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.14/@designmodel" counterExample="" visitedStates="627" verifyTime="0.027816" testport="//@interimmodels.14/@designmodel/@component.0/@port.1" traceExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!74 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PassengerUI_pay_issuepay -> PassengerUI_paywire_writer_process -> paywire_req!10 -> paywire_req?10 -> Payment_paywire_writestorage_invoke -> Payment_record_payrecorded -> Payment_paywire_writestorage_process -> paywire_res!10 -> paywire_res?10 -> oraclepaywire_token?74 -> (oraclepaywire_token!74 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?74)*" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.14/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.14/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.14/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.14/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.14/@designmodel" valid="false" counterExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!31 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!69 -> authwire_req?69 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!69 -> userquerywire_req?69 -> UserDB_userquerywire_readstorage_invoke -> oraclepaywire_token?31 -> (oraclepaywire_token!31 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?31)*" visitedStates="1382" verifyTime="0.0442551" testport="//@interimmodels.14/@designmodel/@component.0/@port.2" traceExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!31 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!69 -> authwire_req?69 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!69 -> userquerywire_req?69 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!69 -> userquerywire_res?69 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!69 -> authwire_res?69 -> oraclepaywire_token?31 -> (oraclepaywire_token!31 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?31)*" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.14/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.14/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.14/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.14/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.14/@designmodel" valid="false" counterExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!91 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!92 -> authwire_req?92 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!92 -> userquerywire_req?92 -> UserDB_userquerywire_readstorage_invoke -> oraclepaywire_token?91 -> (oraclepaywire_token!91 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?91)*" visitedStates="1382" verifyTime="0.045820099999999996" testport="//@interimmodels.14/@designmodel/@component.2/@port.1" traceExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!91 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!92 -> authwire_req?92 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!92 -> userquerywire_req?92 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!92 -> userquerywire_res?92 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!92 -> authwire_res?92 -> oraclepaywire_token?91 -> (oraclepaywire_token!91 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?91)*" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.14/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.14/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.14/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.14/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-driverupdatewire" valid="false" counterExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!48 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> DriverUI_locate_located -> DriverUI_driverupdatewire_commander_process -> driverupdatewire_stmt!70 -> driverupdatewire_stmt?70 -> DriverRecord_driverupdate_updated -> DriverRecord_driverupdatewire_readstore_process -> DriverRecord_driverupdatewire_readstore_persist -> driverupdatewire_cmmd!70 -> driverupdatewire_cmmd?70 -> DriverupdatewireCommandLog_logdriverupdatewire_logged -> DriverupdatewireCommandLog_driverupdatewire_commandstore_process -> oraclepaywire_token?48 -> (oraclepaywire_token!48 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?48)*" visitedStates="2772" verifyTime="0.0822731" testport="//@interimmodels.14/@designmodel/@component.2/@port.2" traceExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!48 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> DriverUI_locate_located -> DriverUI_driverupdatewire_commander_process -> driverupdatewire_stmt!70 -> driverupdatewire_stmt?70 -> DriverRecord_driverupdate_updated -> DriverRecord_driverupdatewire_readstore_process -> DriverRecord_driverupdatewire_readstore_persist -> driverupdatewire_cmmd!70 -> driverupdatewire_cmmd?70 -> DriverupdatewireCommandLog_logdriverupdatewire_logged -> DriverupdatewireCommandLog_driverupdatewire_commandstore_process -> DriverupdatewireCommandLog_driverupdatewire_commandstore_persist -> oraclepaywire_token?48 -> (oraclepaywire_token!48 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?48)*" exprText="[] (DriverUI.locate.located-> &lt;> DriverupdatewireCommandLog.driverupdatewire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-readropayprocesswire" valid="false" counterExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!18 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> BillingGateway_process_processed -> BillingGateway_payprocesswire_requester_process -> payprocesswire_req!88 -> payprocesswire_req?88 -> Payment_payprocesswire_responder_invoke -> Payment_ropayprocesswire_extquerier_request -> ropayprocesswire_uid!88 -> ropayprocesswire_uid?88 -> PaymentBlockchain_payaccess_accessed -> PaymentBlockchain_ropayprocesswire_blocksupplier_process -> ropayprocesswire_res!88 -> ropayprocesswire_res?88 -> oraclepaywire_token?18 -> (oraclepaywire_token!18 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?18)*" visitedStates="760" verifyTime="0.0327648" testport="//@interimmodels.14/@designmodel/@component.5/@port.0" traceExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!18 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> BillingGateway_process_processed -> BillingGateway_payprocesswire_requester_process -> payprocesswire_req!88 -> payprocesswire_req?88 -> Payment_payprocesswire_responder_invoke -> Payment_ropayprocesswire_extquerier_request -> ropayprocesswire_uid!88 -> ropayprocesswire_uid?88 -> PaymentBlockchain_payaccess_accessed -> PaymentBlockchain_ropayprocesswire_blocksupplier_process -> ropayprocesswire_res!88 -> ropayprocesswire_res?88 -> Payment_list_listed -> Payment_ropayprocesswire_extquerier_process -> Payment_ropayprocesswire_extquerier_Skip -> Payment_payprocesswire_responder_process -> payprocesswire_res!88 -> payprocesswire_res?88 -> oraclepaywire_token?18 -> (oraclepaywire_token!18 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?18)*" exprText="[] (PaymentBlockchain.ropayprocesswire.blocksupplier.process-> &lt;> Payment.list.listed)">
        <connector href="target.arch#//@connector.9"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-query-driverquerywire" valid="false" counterExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!87 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!14 -> callwire_req?14 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!14 -> driverquerywire_stmt?14 -> DriverRecord_driverquery_quried -> oraclepaywire_token?87 -> (oraclepaywire_token!87 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?87)*" visitedStates="5817" verifyTime="0.1553559" testport="//@interimmodels.14/@designmodel/@component.0/@port.0" traceExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!87 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!14 -> callwire_req?14 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!14 -> driverquerywire_stmt?14 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!14 -> driverquerywire_res?14 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!14 -> assignwire_pevt?14 -> AssignwireLog_logassignwire_logged -> AssignwireLog_assignwire_eventstore_process -> assignwire_sevt!14 -> AssignwireLog_assignwire_eventstore_persist -> assignwire_sevt?14 -> assignwire_bevt!14 -> assignwire_bevt?14 -> DriverUI_notify_notified -> DriverUI_assignwire_eventsubscriber_process -> TripMgmt_assignwire_eventpublisher_broadcast -> TripMgmt_assignwire_eventpublisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!14 -> callwire_res?14 -> oraclepaywire_token?87 -> (oraclepaywire_token!87 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?87)*" exprText="[] (TripMgmt.accept.acknowledged-> &lt;> DriverRecord.driverquerywire.readstore.process)">
        <connector href="target.arch#//@connector.2"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-assignwire" valid="false" counterExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!24 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!87 -> callwire_req?87 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!87 -> driverquerywire_stmt?87 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!87 -> driverquerywire_res?87 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!87 -> assignwire_pevt?87 -> AssignwireLog_logassignwire_logged -> AssignwireLog_assignwire_eventstore_process -> assignwire_sevt!87 -> assignwire_sevt?87 -> assignwire_bevt!87 -> assignwire_bevt?87 -> DriverUI_notify_notified -> DriverUI_assignwire_eventsubscriber_process -> TripMgmt_assignwire_eventpublisher_broadcast -> TripMgmt_assignwire_eventpublisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!87 -> callwire_res?87 -> oraclepaywire_token?24 -> (oraclepaywire_token!24 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?24)*" visitedStates="6118" verifyTime="0.1575713" testport="//@interimmodels.14/@designmodel/@component.0/@port.0" traceExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!24 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!87 -> callwire_req?87 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!87 -> driverquerywire_stmt?87 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!87 -> driverquerywire_res?87 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!87 -> assignwire_pevt?87 -> AssignwireLog_logassignwire_logged -> AssignwireLog_assignwire_eventstore_process -> assignwire_sevt!87 -> AssignwireLog_assignwire_eventstore_persist -> assignwire_sevt?87 -> assignwire_bevt!87 -> assignwire_bevt?87 -> DriverUI_notify_notified -> DriverUI_assignwire_eventsubscriber_process -> TripMgmt_assignwire_eventpublisher_broadcast -> TripMgmt_assignwire_eventpublisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!87 -> callwire_res?87 -> oraclepaywire_token?24 -> (oraclepaywire_token!24 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?24)*" exprText="[] (TripMgmt.accept.acknowledged-> &lt;> AssignwireLog.assignwire.eventstore.persist)">
        <connector href="target.arch#//@connector.1"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" visitedStates="1184" verifyTime="0.039466" testport="//@interimmodels.14/@designmodel/@component.0/@port.1" traceExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!22 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PassengerUI_pay_issuepay -> PassengerUI_paywire_writer_process -> paywire_req!59 -> paywire_req?59 -> Payment_paywire_writestorage_invoke -> Payment_record_payrecorded -> Payment_paywire_writestorage_process -> paywire_res!59 -> paywire_res?59 -> oraclepaywire_token?22 -> (PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token!22 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token?22 -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored)*" exprText="[] (PaymentOracle.Paymentsupply.supplied-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.8"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.14/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.14/@designmodel/@component.3 //@interimmodels.14/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.14/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.14/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.14/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.14/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.14/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="18" description="network route for connector:paywire between: passengerui paymentoracle " isStable="true" name="network-route">
    <designmodel name="inter18">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.15/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.15/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.15/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.15/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.15/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.15/@designmodel/@connector.0/@role.1 //@interimmodels.15/@designmodel/@connector.2/@role.0 //@interimmodels.15/@designmodel/@connector.1/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.15/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.15/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.15/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.15/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.15/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.15/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" role="//@interimmodels.15/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.15/@designmodel/@host.0/@node.1">
        <port name="record" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.15/@designmodel/@connector.4/@role.1 //@interimmodels.15/@designmodel/@connector.8/@role.0" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.15/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.15/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.15/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.15/@designmodel/@connector.5/@role.1 //@interimmodels.15/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.15/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.15/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" role="//@interimmodels.15/@designmodel/@connector.9/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" role="//@interimmodels.15/@designmodel/@connector.8/@role.1" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" role="//@interimmodels.15/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" role="//@interimmodels.15/@designmodel/@connector.1/@role.2" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentOracle" type="server,oracle">
        <port name="Paymentsupply" role="//@interimmodels.15/@designmodel/@connector.9/@role.1 //@interimmodels.15/@designmodel/@connector.3/@role.1" type="response,orafeed,OutboundPort,InboundPort">
          <events name="supplied"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.2"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.15/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.15/@designmodel/@connector.2/@role.0" connector="//@interimmodels.15/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="ESConnector" connectortype="//@interimmodels.15/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.15/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.15/@designmodel/@connector.1"/>
        <role name="eventsubscriber" roletype="//@interimmodels.15/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.15/@designmodel/@connector.1"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.1"/>
        </role>
      </connector>
      <connector name="driverquerywire" type="QRConnector" connectortype="//@interimmodels.15/@designmodel/@archstyle.7/@connectortype.0">
        <role name="querier" roletype="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.15/@designmodel/@connector.1/@role.0" connector="//@interimmodels.15/@designmodel/@connector.2"/>
        <role name="readstore" roletype="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.15/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="CSConnector" connectortype="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.15/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.15/@designmodel/@connector.3"/>
        <role name="responder" type="in" nextRoleExpr="//@interimmodels.15/@designmodel/@connector.9/@role.1">
          <roletype href="target.arch#//@archstyle.0/@connectortype.0/@roletype.1"/>
          <connector href="target.arch#//@connector.3"/>
        </role>
      </connector>
      <connector name="payprocesswire" type="CSConnector" connectortype="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.15/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.15/@designmodel/@connector.8/@role.0" connector="//@interimmodels.15/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.15/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.15/@designmodel/@connector.6/@role.0" connector="//@interimmodels.15/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.15/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.15/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="CRConnector" connectortype="//@interimmodels.15/@designmodel/@archstyle.3/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.15/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.15/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.15/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.15/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.3/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="ropayprocesswire" type="ROConnector">
        <role name="extquerier" type="out" connector="//@interimmodels.15/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.1/@connectortype.0/@roletype.0"/>
        </role>
        <role name="blocksupplier" type="in" connector="//@interimmodels.15/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.1/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.1/@connectortype.0"/>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.15/@designmodel/@connector.9">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.15/@designmodel/@connector.9">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.15/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.15/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.15/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.15/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.15/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.15/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.15/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.15/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.15/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.15/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.15/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.15/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.15/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.15/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.15/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.15/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.15/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.15/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.15/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.15/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.15/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.15/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.15/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.15/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.15/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.15/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.15/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.15/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.15/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.15/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.15/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.15/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.15/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.15/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.15/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.15/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.15/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.15/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.15/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.15/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.15/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.15/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.15/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.15/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.15/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.15/@designmodel" visitedStates="197" verifyTime="0.0107082" testport="//@interimmodels.15/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!97 -> callwire_req?97 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!97 -> driverquerywire_stmt?97 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!97 -> driverquerywire_res?97 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!97 -> assignwire_pevt?97 -> AssignwireLog_logassignwire_logged -> AssignwireLog_assignwire_eventstore_process -> assignwire_sevt!97 -> AssignwireLog_assignwire_eventstore_persist -> assignwire_sevt?97 -> assignwire_bevt!97 -> assignwire_bevt?97 -> DriverUI_notify_notified -> DriverUI_assignwire_eventsubscriber_process -> TripMgmt_assignwire_eventpublisher_broadcast -> TripMgmt_assignwire_eventpublisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!97 -> callwire_res?97" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.15/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.15/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.15/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.15/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.15/@designmodel" visitedStates="54" verifyTime="0.0031750999999999997" testport="//@interimmodels.15/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!24 -> callwire_req?24 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!24 -> driverquerywire_req?24 -> DriverDB_driverquerywire_readstorage_invoke -> DriverDB_driverquery_quried -> DriverDB_driverquerywire_readstorage_process -> driverquerywire_res!24 -> driverquerywire_res?24 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!24 -> assignwire_pub?24 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!24 -> callwire_res?24" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverRecord.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.15/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.15/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.15/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.15/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.15/@designmodel" counterExample="" visitedStates="40" verifyTime="0.0094197" testport="//@interimmodels.15/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_requester_process -> paywire_req!62 -> paywire_req?62 -> PaymentOracle_paywire_responder_invoke -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!62 -> PaymentOracle_paywire_responder_process -> paywire_res!62 -> oraclepaywire_token?62 -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> paywire_res?62" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.15/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.15/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.15/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.15/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.15/@designmodel" visitedStates="29" verifyTime="0.06955" testport="//@interimmodels.15/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!10 -> authwire_req?10 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!10 -> userquerywire_req?10 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!10 -> userquerywire_res?10 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!10 -> authwire_res?10" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.15/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.15/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.15/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.15/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.15/@designmodel" visitedStates="29" verifyTime="0.0107572" testport="//@interimmodels.15/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!62 -> authwire_req?62 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!62 -> userquerywire_req?62 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!62 -> userquerywire_res?62 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!62 -> authwire_res?62" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.15/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.15/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.15/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.15/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-driverupdatewire" visitedStates="96" verifyTime="0.0100514" testport="//@interimmodels.15/@designmodel/@component.2/@port.2" traceExample="init -> DriverUI_locate_located -> DriverUI_driverupdatewire_commander_process -> driverupdatewire_stmt!87 -> driverupdatewire_stmt?87 -> DriverRecord_driverupdate_updated -> DriverRecord_driverupdatewire_readstore_process -> DriverRecord_driverupdatewire_readstore_persist -> driverupdatewire_cmmd!87 -> driverupdatewire_cmmd?87 -> DriverupdatewireCommandLog_logdriverupdatewire_logged -> DriverupdatewireCommandLog_driverupdatewire_commandstore_process -> DriverupdatewireCommandLog_driverupdatewire_commandstore_persist" exprText="[] (DriverUI.locate.located-> &lt;> DriverupdatewireCommandLog.driverupdatewire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-readropayprocesswire" visitedStates="22" verifyTime="0.0102099" testport="//@interimmodels.15/@designmodel/@component.5/@port.0" traceExample="init -> BillingGateway_process_processed -> BillingGateway_payprocesswire_requester_process -> payprocesswire_req!94 -> payprocesswire_req?94 -> Payment_payprocesswire_responder_invoke -> Payment_ropayprocesswire_extquerier_request -> ropayprocesswire_uid!94 -> ropayprocesswire_uid?94 -> PaymentBlockchain_payaccess_accessed -> PaymentBlockchain_ropayprocesswire_blocksupplier_process -> ropayprocesswire_res!94 -> ropayprocesswire_res?94 -> Payment_list_listed -> Payment_ropayprocesswire_extquerier_process -> Payment_ropayprocesswire_extquerier_Skip -> Payment_payprocesswire_responder_process -> payprocesswire_res!94 -> payprocesswire_res?94" exprText="[] (PaymentBlockchain.ropayprocesswire.blocksupplier.process-> &lt;> Payment.list.listed)">
        <connector href="target.arch#//@connector.9"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-query-driverquerywire" visitedStates="132" verifyTime="0.012039699999999999" testport="//@interimmodels.15/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!89 -> callwire_req?89 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!89 -> driverquerywire_stmt?89 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!89 -> driverquerywire_res?89 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!89 -> assignwire_pevt?89 -> AssignwireLog_logassignwire_logged -> AssignwireLog_assignwire_eventstore_process -> assignwire_sevt!89 -> AssignwireLog_assignwire_eventstore_persist -> assignwire_sevt?89 -> assignwire_bevt!89 -> assignwire_bevt?89 -> DriverUI_notify_notified -> DriverUI_assignwire_eventsubscriber_process -> TripMgmt_assignwire_eventpublisher_broadcast -> TripMgmt_assignwire_eventpublisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!89 -> callwire_res?89" exprText="[] (TripMgmt.accept.acknowledged-> &lt;> DriverRecord.driverquerywire.readstore.process)">
        <connector href="target.arch#//@connector.2"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-assignwire" visitedStates="182" verifyTime="0.017165" testport="//@interimmodels.15/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!11 -> callwire_req?11 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!11 -> driverquerywire_stmt?11 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!11 -> driverquerywire_res?11 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!11 -> assignwire_pevt?11 -> AssignwireLog_logassignwire_logged -> AssignwireLog_assignwire_eventstore_process -> assignwire_sevt!11 -> AssignwireLog_assignwire_eventstore_persist -> assignwire_sevt?11 -> assignwire_bevt!11 -> assignwire_bevt?11 -> DriverUI_notify_notified -> DriverUI_assignwire_eventsubscriber_process -> TripMgmt_assignwire_eventpublisher_broadcast -> TripMgmt_assignwire_eventpublisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!11 -> callwire_res?11" exprText="[] (TripMgmt.accept.acknowledged-> &lt;> AssignwireLog.assignwire.eventstore.persist)">
        <connector href="target.arch#//@connector.1"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" visitedStates="67" verifyTime="0.0080161" testport="//@interimmodels.15/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_requester_process -> paywire_req!13 -> paywire_req?13 -> PaymentOracle_paywire_responder_invoke -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!13 -> PaymentOracle_paywire_responder_process -> paywire_res!13 -> oraclepaywire_token?13 -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> paywire_res?13" exprText="[] (PaymentOracle.Paymentsupply.supplied-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.8"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.15/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.15/@designmodel/@component.3 //@interimmodels.15/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.15/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.15/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.15/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.15/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.15/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
</arch:MigrationModel>
