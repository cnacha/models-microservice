<?xml version="1.0" encoding="UTF-8"?>
<arch:MigrationModel xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arch="http://www.example.org/arch">
  <source href="source.arch#/"/>
  <target href="target.arch#/"/>
  <interimmodels description="setup database: driverupdatewirecommandlog" nextModel="//@interimmodels.1" isStable="true" name="setup-database">
    <designmodel name="inter0">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.0/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.0/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.0/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.0/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.0/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.0/@designmodel/@connector.0/@role.1 //@interimmodels.0/@designmodel/@connector.1/@role.0 //@interimmodels.0/@designmodel/@connector.2/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.0/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.0/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.0/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.0/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.0/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.0/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" role="//@interimmodels.0/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.0/@designmodel/@host.0/@node.1">
        <port name="record" role="//@interimmodels.0/@designmodel/@connector.3/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.0/@designmodel/@connector.4/@role.1" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.0/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.0/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.0/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.0/@designmodel/@connector.5/@role.1 //@interimmodels.0/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.0/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.0/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.0/@designmodel/@connector.2/@role.0" connector="//@interimmodels.0/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.1"/>
        <role name="subscriber" roletype="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.0/@designmodel/@connector.1"/>
      </connector>
      <connector name="driverquerywire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.0/@designmodel/@connector.1/@role.0" connector="//@interimmodels.0/@designmodel/@connector.2"/>
        <role name="readstorage" roletype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.0/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.3"/>
        <role name="writestorage" roletype="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.0/@designmodel/@connector.3"/>
      </connector>
      <connector name="payprocesswire" type="REConnector" connectortype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.4"/>
        <role name="readstorage" roletype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.0/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.0/@designmodel/@connector.6/@role.0" connector="//@interimmodels.0/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.0/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.7"/>
        <role name="writestorage" roletype="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.0/@designmodel/@connector.7"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.0/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.0/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.0/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.0/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.0/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.0/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.0/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.0/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.0/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.0/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.0/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.0/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.0/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.0/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.0/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.0/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.0/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.0/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.0/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.0/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.0/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.0/@designmodel" visitedStates="79" verifyTime="0.07836" testport="//@interimmodels.0/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!31 -> callwire_req?31 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!31 -> driverquerywire_req?31 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!31 -> driverquerywire_res?31 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!31 -> assignwire_pub?31 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!31 -> callwire_res?31" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.0/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.0/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.0/@designmodel" visitedStates="54" verifyTime="0.0036154" testport="//@interimmodels.0/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!49 -> callwire_req?49 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!49 -> driverquerywire_req?49 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!49 -> driverquerywire_res?49 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!49 -> assignwire_pub?49 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!49 -> callwire_res?49" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverDB.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.0/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.0/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.0/@designmodel" counterExample="" visitedStates="10" verifyTime="0.0031368999999999998" testport="//@interimmodels.0/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_writer_process -> paywire_req!81 -> paywire_req?81 -> Payment_paywire_writestorage_invoke -> Payment_record_payrecorded -> Payment_paywire_writestorage_process -> paywire_res!81 -> paywire_res?81" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.0/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.0/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.0/@designmodel" visitedStates="29" verifyTime="0.0035596" testport="//@interimmodels.0/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!36 -> authwire_req?36 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!36 -> userquerywire_req?36 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!36 -> userquerywire_res?36 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!36 -> authwire_res?36" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.0/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.0/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.0/@designmodel" visitedStates="29" verifyTime="0.00649" testport="//@interimmodels.0/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!12 -> authwire_req?12 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!12 -> userquerywire_req?12 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!12 -> userquerywire_res?12 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!12 -> authwire_res?12" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.0/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.0/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.0/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.0/@designmodel/@component.3 //@interimmodels.0/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.0/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.0/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.0/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.0/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.0/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="1" description="setup database: assignwirelog" nextModel="//@interimmodels.2" isStable="true" name="setup-database">
    <designmodel name="inter1">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.1/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.1/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.1/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.1/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.1/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.1/@designmodel/@connector.0/@role.1 //@interimmodels.1/@designmodel/@connector.1/@role.0 //@interimmodels.1/@designmodel/@connector.2/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.1/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.1/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.1/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.1/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.1/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.1/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" role="//@interimmodels.1/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.1/@designmodel/@host.0/@node.1">
        <port name="record" role="//@interimmodels.1/@designmodel/@connector.3/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.1/@designmodel/@connector.4/@role.1" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.1/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.1/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.1/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.1/@designmodel/@connector.5/@role.1 //@interimmodels.1/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.1/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.1/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.1/@designmodel/@connector.2/@role.0" connector="//@interimmodels.1/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.1"/>
        <role name="subscriber" roletype="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.1/@designmodel/@connector.1"/>
      </connector>
      <connector name="driverquerywire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.1/@designmodel/@connector.1/@role.0" connector="//@interimmodels.1/@designmodel/@connector.2"/>
        <role name="readstorage" roletype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.1/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.3"/>
        <role name="writestorage" roletype="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.1/@designmodel/@connector.3"/>
      </connector>
      <connector name="payprocesswire" type="REConnector" connectortype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.4"/>
        <role name="readstorage" roletype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.1/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.1/@designmodel/@connector.6/@role.0" connector="//@interimmodels.1/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.1/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.7"/>
        <role name="writestorage" roletype="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.1/@designmodel/@connector.7"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.1/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.1/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.1/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.1/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.1/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.1/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.1/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.1/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.1/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.1/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.1/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.1/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.1/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.1/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.1/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.1/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.1/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.1/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.1/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.1/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.1/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.1/@designmodel" visitedStates="79" verifyTime="0.0039625" testport="//@interimmodels.1/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!41 -> callwire_req?41 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!41 -> driverquerywire_req?41 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!41 -> driverquerywire_res?41 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!41 -> assignwire_pub?41 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!41 -> callwire_res?41" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.1/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.1/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.1/@designmodel" visitedStates="54" verifyTime="0.0035627999999999996" testport="//@interimmodels.1/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!75 -> callwire_req?75 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!75 -> driverquerywire_req?75 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!75 -> driverquerywire_res?75 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!75 -> assignwire_pub?75 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!75 -> callwire_res?75" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverDB.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.1/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.1/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.1/@designmodel" counterExample="" visitedStates="10" verifyTime="0.0062169999999999994" testport="//@interimmodels.1/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_writer_process -> paywire_req!79 -> paywire_req?79 -> Payment_paywire_writestorage_invoke -> Payment_record_payrecorded -> Payment_paywire_writestorage_process -> paywire_res!79 -> paywire_res?79" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.1/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.1/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.1/@designmodel" visitedStates="29" verifyTime="0.0035169" testport="//@interimmodels.1/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!86 -> authwire_req?86 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!86 -> userquerywire_req?86 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!86 -> userquerywire_res?86 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!86 -> authwire_res?86" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.1/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.1/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.1/@designmodel" visitedStates="29" verifyTime="0.0032256" testport="//@interimmodels.1/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!49 -> authwire_req?49 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!49 -> userquerywire_req?49 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!49 -> userquerywire_res?49 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!49 -> authwire_res?49" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.1/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.1/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.1/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.1/@designmodel/@component.3 //@interimmodels.1/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.1/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.1/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.1/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.1/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.1/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="2" description="setup database: driverrecord" nextModel="//@interimmodels.3" isStable="true" name="setup-database">
    <designmodel name="inter2">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.2/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.2/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.2/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.2/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.2/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.2/@designmodel/@connector.0/@role.1 //@interimmodels.2/@designmodel/@connector.1/@role.0 //@interimmodels.2/@designmodel/@connector.2/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.2/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.2/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.2/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.2/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.2/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.2/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" role="//@interimmodels.2/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.2/@designmodel/@host.0/@node.1">
        <port name="record" role="//@interimmodels.2/@designmodel/@connector.3/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.2/@designmodel/@connector.4/@role.1" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.2/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.2/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.2/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.2/@designmodel/@connector.5/@role.1 //@interimmodels.2/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.2/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.2/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.2/@designmodel/@connector.2/@role.0" connector="//@interimmodels.2/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.1"/>
        <role name="subscriber" roletype="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.2/@designmodel/@connector.1"/>
      </connector>
      <connector name="driverquerywire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.2/@designmodel/@connector.1/@role.0" connector="//@interimmodels.2/@designmodel/@connector.2"/>
        <role name="readstorage" roletype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.2/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.3"/>
        <role name="writestorage" roletype="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.2/@designmodel/@connector.3"/>
      </connector>
      <connector name="payprocesswire" type="REConnector" connectortype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.4"/>
        <role name="readstorage" roletype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.2/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.2/@designmodel/@connector.6/@role.0" connector="//@interimmodels.2/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.2/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.7"/>
        <role name="writestorage" roletype="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.2/@designmodel/@connector.7"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.2/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.2/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.2/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.2/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.2/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.2/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.2/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.2/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.2/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.2/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.2/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.2/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.2/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.2/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.2/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.2/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.2/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.2/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.2/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.2/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.2/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.2/@designmodel" visitedStates="79" verifyTime="0.0045401999999999994" testport="//@interimmodels.2/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!75 -> callwire_req?75 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!75 -> driverquerywire_req?75 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!75 -> driverquerywire_res?75 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!75 -> assignwire_pub?75 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!75 -> callwire_res?75" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.2/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.2/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.2/@designmodel" visitedStates="54" verifyTime="0.0031945" testport="//@interimmodels.2/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!89 -> callwire_req?89 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!89 -> driverquerywire_req?89 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!89 -> driverquerywire_res?89 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!89 -> assignwire_pub?89 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!89 -> callwire_res?89" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverDB.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.2/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.2/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.2/@designmodel" counterExample="" visitedStates="10" verifyTime="0.0029982" testport="//@interimmodels.2/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_writer_process -> paywire_req!32 -> paywire_req?32 -> Payment_paywire_writestorage_invoke -> Payment_record_payrecorded -> Payment_paywire_writestorage_process -> paywire_res!32 -> paywire_res?32" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.2/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.2/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.2/@designmodel" visitedStates="29" verifyTime="0.0030405" testport="//@interimmodels.2/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!54 -> authwire_req?54 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!54 -> userquerywire_req?54 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!54 -> userquerywire_res?54 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!54 -> authwire_res?54" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.2/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.2/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.2/@designmodel" visitedStates="29" verifyTime="0.0033509" testport="//@interimmodels.2/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!99 -> authwire_req?99 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!99 -> userquerywire_req?99 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!99 -> userquerywire_res?99 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!99 -> authwire_res?99" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.2/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.2/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.2/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.2/@designmodel/@component.3 //@interimmodels.2/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.2/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.2/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.2/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.2/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.2/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="3" description="setup database: paymentblockchain" nextModel="//@interimmodels.4" isStable="true" name="setup-database">
    <designmodel name="inter3">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.3/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.3/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.3/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.3/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.3/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.3/@designmodel/@connector.0/@role.1 //@interimmodels.3/@designmodel/@connector.1/@role.0 //@interimmodels.3/@designmodel/@connector.2/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.3/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.3/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.3/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.3/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.3/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.3/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" role="//@interimmodels.3/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.3/@designmodel/@host.0/@node.1">
        <port name="record" role="//@interimmodels.3/@designmodel/@connector.3/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.3/@designmodel/@connector.4/@role.1" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.3/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.3/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.3/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.3/@designmodel/@connector.5/@role.1 //@interimmodels.3/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.3/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.3/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.3/@designmodel/@connector.2/@role.0" connector="//@interimmodels.3/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.1"/>
        <role name="subscriber" roletype="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.3/@designmodel/@connector.1"/>
      </connector>
      <connector name="driverquerywire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.3/@designmodel/@connector.1/@role.0" connector="//@interimmodels.3/@designmodel/@connector.2"/>
        <role name="readstorage" roletype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.3/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.3"/>
        <role name="writestorage" roletype="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.3/@designmodel/@connector.3"/>
      </connector>
      <connector name="payprocesswire" type="REConnector" connectortype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.4"/>
        <role name="readstorage" roletype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.3/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.3/@designmodel/@connector.6/@role.0" connector="//@interimmodels.3/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.3/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.7"/>
        <role name="writestorage" roletype="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.3/@designmodel/@connector.7"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.3/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.3/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.3/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.3/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.3/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.3/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.3/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.3/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.3/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.3/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.3/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.3/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.3/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.3/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.3/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.3/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.3/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.3/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.3/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.3/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.3/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.3/@designmodel" visitedStates="79" verifyTime="0.007637199999999999" testport="//@interimmodels.3/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!90 -> callwire_req?90 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!90 -> driverquerywire_req?90 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!90 -> driverquerywire_res?90 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!90 -> assignwire_pub?90 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!90 -> callwire_res?90" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.3/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.3/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.3/@designmodel" visitedStates="54" verifyTime="0.0036525" testport="//@interimmodels.3/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!48 -> callwire_req?48 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!48 -> driverquerywire_req?48 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!48 -> driverquerywire_res?48 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!48 -> assignwire_pub?48 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!48 -> callwire_res?48" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverDB.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.3/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.3/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.3/@designmodel" counterExample="" visitedStates="10" verifyTime="0.0063865" testport="//@interimmodels.3/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_writer_process -> paywire_req!36 -> paywire_req?36 -> Payment_paywire_writestorage_invoke -> Payment_record_payrecorded -> Payment_paywire_writestorage_process -> paywire_res!36 -> paywire_res?36" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.3/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.3/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.3/@designmodel" visitedStates="29" verifyTime="0.003323" testport="//@interimmodels.3/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!47 -> authwire_req?47 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!47 -> userquerywire_req?47 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!47 -> userquerywire_res?47 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!47 -> authwire_res?47" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.3/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.3/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.3/@designmodel" visitedStates="29" verifyTime="0.0065052" testport="//@interimmodels.3/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!26 -> authwire_req?26 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!26 -> userquerywire_req?26 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!26 -> userquerywire_res?26 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!26 -> authwire_res?26" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.3/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.3/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.3/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.3/@designmodel/@component.3 //@interimmodels.3/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.3/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.3/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.3/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.3/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.3/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="4" description="network route for connector:driverupdatewire between: driverui driverupdatewirecommandlog " nextModel="//@interimmodels.5" isStable="true" name="network-route">
    <designmodel name="inter4">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.4/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.4/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.4/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.4/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.4/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.4/@designmodel/@connector.0/@role.1 //@interimmodels.4/@designmodel/@connector.1/@role.0 //@interimmodels.4/@designmodel/@connector.2/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.4/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.4/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.4/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.4/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.4/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.4/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.4/@designmodel/@host.0/@node.1">
        <port name="record" role="//@interimmodels.4/@designmodel/@connector.3/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.4/@designmodel/@connector.4/@role.1" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.4/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.4/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.4/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.4/@designmodel/@connector.5/@role.1 //@interimmodels.4/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.4/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.4/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" role="//@interimmodels.4/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.4/@designmodel/@connector.2/@role.0" connector="//@interimmodels.4/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.1"/>
        <role name="subscriber" roletype="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.4/@designmodel/@connector.1"/>
      </connector>
      <connector name="driverquerywire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.4/@designmodel/@connector.1/@role.0" connector="//@interimmodels.4/@designmodel/@connector.2"/>
        <role name="readstorage" roletype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.4/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.3"/>
        <role name="writestorage" roletype="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.4/@designmodel/@connector.3"/>
      </connector>
      <connector name="payprocesswire" type="REConnector" connectortype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.4"/>
        <role name="readstorage" roletype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.4/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.4/@designmodel/@connector.6/@role.0" connector="//@interimmodels.4/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.4/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="CRConnector" connectortype="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.4/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.3/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.4/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.4/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.4/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.4/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.4/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.4/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.4/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.4/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.4/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.4/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.4/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.4/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.4/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.4/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.4/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.4/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.4/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.4/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.4/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.4/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.4/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.4/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.4/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.4/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.4/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.4/@designmodel" visitedStates="79" verifyTime="0.0048703" testport="//@interimmodels.4/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!66 -> callwire_req?66 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!66 -> driverquerywire_req?66 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!66 -> driverquerywire_res?66 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!66 -> assignwire_pub?66 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!66 -> callwire_res?66" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.4/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.4/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.4/@designmodel" visitedStates="54" verifyTime="0.0037625999999999996" testport="//@interimmodels.4/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!17 -> callwire_req?17 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!17 -> driverquerywire_req?17 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!17 -> driverquerywire_res?17 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!17 -> assignwire_pub?17 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!17 -> callwire_res?17" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverRecord.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.4/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.4/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.4/@designmodel" counterExample="" visitedStates="10" verifyTime="0.062423299999999994" testport="//@interimmodels.4/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_writer_process -> paywire_req!61 -> paywire_req?61 -> Payment_paywire_writestorage_invoke -> Payment_record_payrecorded -> Payment_paywire_writestorage_process -> paywire_res!61 -> paywire_res?61" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.4/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.4/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.4/@designmodel" visitedStates="29" verifyTime="0.0038385" testport="//@interimmodels.4/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!74 -> authwire_req?74 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!74 -> userquerywire_req?74 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!74 -> userquerywire_res?74 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!74 -> authwire_res?74" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.4/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.4/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.4/@designmodel" visitedStates="29" verifyTime="0.0041034" testport="//@interimmodels.4/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!91 -> authwire_req?91 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!91 -> userquerywire_req?91 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!91 -> userquerywire_res?91 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!91 -> authwire_res?91" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.4/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.4/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-driverupdatewire" visitedStates="16" verifyTime="0.0026623999999999997" testport="//@interimmodels.4/@designmodel/@component.2/@port.2" traceExample="init -> DriverUI_locate_located -> DriverUI_driverupdatewire_commander_process -> driverupdatewire_stmt!86 -> driverupdatewire_cmmd!86 -> driverupdatewire_cmmd?86 -> DriverupdatewireCommandLog_logdriverupdatewire_logged -> DriverupdatewireCommandLog_driverupdatewire_commandstore_process -> DriverupdatewireCommandLog_driverupdatewire_commandstore_persist" exprText="[] (DriverUI.locate.located-> &lt;> DriverupdatewireCommandLog.driverupdatewire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.4/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.4/@designmodel/@component.3 //@interimmodels.4/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.4/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.4/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.4/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.4/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.4/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="5" description="network route for connector:driverupdatewire between: driverui driverrecord " nextModel="//@interimmodels.6" isStable="true" name="network-route">
    <designmodel name="inter5">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.5/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.5/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.5/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.5/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.5/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.5/@designmodel/@connector.0/@role.1 //@interimmodels.5/@designmodel/@connector.1/@role.0 //@interimmodels.5/@designmodel/@connector.2/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.5/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.5/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.5/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.5/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.5/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.5/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" role="//@interimmodels.5/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.5/@designmodel/@host.0/@node.1">
        <port name="record" role="//@interimmodels.5/@designmodel/@connector.3/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.5/@designmodel/@connector.4/@role.1" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.5/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.5/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.5/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.5/@designmodel/@connector.5/@role.1 //@interimmodels.5/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.5/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.5/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" role="//@interimmodels.5/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.5/@designmodel/@connector.2/@role.0" connector="//@interimmodels.5/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.1"/>
        <role name="subscriber" roletype="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.5/@designmodel/@connector.1"/>
      </connector>
      <connector name="driverquerywire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.5/@designmodel/@connector.1/@role.0" connector="//@interimmodels.5/@designmodel/@connector.2"/>
        <role name="readstorage" roletype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.5/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.3"/>
        <role name="writestorage" roletype="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.5/@designmodel/@connector.3"/>
      </connector>
      <connector name="payprocesswire" type="REConnector" connectortype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.4"/>
        <role name="readstorage" roletype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.5/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.5/@designmodel/@connector.6/@role.0" connector="//@interimmodels.5/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.5/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="CRConnector" connectortype="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.5/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.3/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.5/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.5/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.5/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.5/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.5/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.5/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.5/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.5/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.5/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.5/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.5/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.5/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.5/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.5/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.5/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.5/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.5/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.5/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.5/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.5/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.5/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.5/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.5/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.5/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.5/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.5/@designmodel" visitedStates="79" verifyTime="0.0047060999999999995" testport="//@interimmodels.5/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!32 -> callwire_req?32 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!32 -> driverquerywire_req?32 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!32 -> driverquerywire_res?32 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!32 -> assignwire_pub?32 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!32 -> callwire_res?32" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.5/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.5/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.5/@designmodel" visitedStates="54" verifyTime="0.0037895" testport="//@interimmodels.5/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!41 -> callwire_req?41 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!41 -> driverquerywire_req?41 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!41 -> driverquerywire_res?41 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!41 -> assignwire_pub?41 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!41 -> callwire_res?41" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverRecord.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.5/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.5/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.5/@designmodel" counterExample="" visitedStates="10" verifyTime="0.0033078" testport="//@interimmodels.5/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_writer_process -> paywire_req!59 -> paywire_req?59 -> Payment_paywire_writestorage_invoke -> Payment_record_payrecorded -> Payment_paywire_writestorage_process -> paywire_res!59 -> paywire_res?59" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.5/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.5/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.5/@designmodel" visitedStates="29" verifyTime="0.0044472999999999995" testport="//@interimmodels.5/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!34 -> authwire_req?34 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!34 -> userquerywire_req?34 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!34 -> userquerywire_res?34 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!34 -> authwire_res?34" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.5/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.5/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.5/@designmodel" visitedStates="29" verifyTime="0.0038036" testport="//@interimmodels.5/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!59 -> authwire_req?59 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!59 -> userquerywire_req?59 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!59 -> userquerywire_res?59 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!59 -> authwire_res?59" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.5/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.5/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-driverupdatewire" visitedStates="96" verifyTime="0.004640399999999999" testport="//@interimmodels.5/@designmodel/@component.2/@port.2" traceExample="init -> DriverUI_locate_located -> DriverUI_driverupdatewire_commander_process -> driverupdatewire_stmt!46 -> driverupdatewire_stmt?46 -> DriverRecord_driverupdate_updated -> DriverRecord_driverupdatewire_readstore_process -> DriverRecord_driverupdatewire_readstore_persist -> driverupdatewire_cmmd!46 -> driverupdatewire_cmmd?46 -> DriverupdatewireCommandLog_logdriverupdatewire_logged -> DriverupdatewireCommandLog_driverupdatewire_commandstore_process -> DriverupdatewireCommandLog_driverupdatewire_commandstore_persist" exprText="[] (DriverUI.locate.located-> &lt;> DriverupdatewireCommandLog.driverupdatewire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.5/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.5/@designmodel/@component.3 //@interimmodels.5/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.5/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.5/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.5/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.5/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.5/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="7" description="deploy service: paymentoracle" nextModel="//@interimmodels.7" isStable="true" name="deploy-service">
    <designmodel name="inter7">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.6/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.6/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.6/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.6/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.6/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.6/@designmodel/@connector.0/@role.1 //@interimmodels.6/@designmodel/@connector.1/@role.0 //@interimmodels.6/@designmodel/@connector.2/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.6/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.6/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.6/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.6/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.6/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.6/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" role="//@interimmodels.6/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.6/@designmodel/@host.0/@node.1">
        <port name="record" role="//@interimmodels.6/@designmodel/@connector.3/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.6/@designmodel/@connector.4/@role.1" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.6/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.6/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.6/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.6/@designmodel/@connector.5/@role.1 //@interimmodels.6/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.6/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.6/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" role="//@interimmodels.6/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <component name="PaymentOracle" type="server,oracle">
        <port name="Paymentsupply" type="response,orafeed,OutboundPort,InboundPort">
          <events name="supplied"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.2"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.6/@designmodel/@connector.2/@role.0" connector="//@interimmodels.6/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.1"/>
        <role name="subscriber" roletype="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.6/@designmodel/@connector.1"/>
      </connector>
      <connector name="driverquerywire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.6/@designmodel/@connector.1/@role.0" connector="//@interimmodels.6/@designmodel/@connector.2"/>
        <role name="readstorage" roletype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.6/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.3"/>
        <role name="writestorage" roletype="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.6/@designmodel/@connector.3"/>
      </connector>
      <connector name="payprocesswire" type="REConnector" connectortype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.4"/>
        <role name="readstorage" roletype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.6/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.6/@designmodel/@connector.6/@role.0" connector="//@interimmodels.6/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.6/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="CRConnector" connectortype="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.6/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.3/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.6/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.6/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.6/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.6/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.6/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.6/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.6/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.6/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.6/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.6/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.6/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.6/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.6/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.6/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.6/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.6/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.6/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.6/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.6/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.6/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.6/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.6/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.6/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.6/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.6/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.6/@designmodel" visitedStates="79" verifyTime="0.0044519" testport="//@interimmodels.6/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!13 -> callwire_req?13 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!13 -> driverquerywire_req?13 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!13 -> driverquerywire_res?13 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!13 -> assignwire_pub?13 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!13 -> callwire_res?13" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.6/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.6/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.6/@designmodel" visitedStates="54" verifyTime="0.0088127" testport="//@interimmodels.6/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!14 -> callwire_req?14 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!14 -> driverquerywire_req?14 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!14 -> driverquerywire_res?14 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!14 -> assignwire_pub?14 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!14 -> callwire_res?14" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverDB.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.6/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.6/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.6/@designmodel" counterExample="" visitedStates="10" verifyTime="0.0040087" testport="//@interimmodels.6/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_writer_process -> paywire_req!12 -> paywire_req?12 -> Payment_paywire_writestorage_invoke -> Payment_record_payrecorded -> Payment_paywire_writestorage_process -> paywire_res!12 -> paywire_res?12" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.6/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.6/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.6/@designmodel" visitedStates="29" verifyTime="0.0038247999999999997" testport="//@interimmodels.6/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!58 -> authwire_req?58 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!58 -> userquerywire_req?58 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!58 -> userquerywire_res?58 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!58 -> authwire_res?58" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.6/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.6/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.6/@designmodel" visitedStates="29" verifyTime="0.0042453" testport="//@interimmodels.6/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!25 -> authwire_req?25 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!25 -> userquerywire_req?25 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!25 -> userquerywire_res?25 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!25 -> authwire_res?25" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.6/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.6/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-driverupdatewire" visitedStates="96" verifyTime="0.007912599999999999" testport="//@interimmodels.6/@designmodel/@component.2/@port.2" traceExample="init -> DriverUI_locate_located -> DriverUI_driverupdatewire_commander_process -> driverupdatewire_stmt!41 -> driverupdatewire_stmt?41 -> DriverRecord_driverupdate_updated -> DriverRecord_driverupdatewire_readstore_process -> DriverRecord_driverupdatewire_readstore_persist -> driverupdatewire_cmmd!41 -> driverupdatewire_cmmd?41 -> DriverupdatewireCommandLog_logdriverupdatewire_logged -> DriverupdatewireCommandLog_driverupdatewire_commandstore_process -> DriverupdatewireCommandLog_driverupdatewire_commandstore_persist" exprText="[] (DriverUI.locate.located-> &lt;> DriverupdatewireCommandLog.driverupdatewire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.6/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.6/@designmodel/@component.3 //@interimmodels.6/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.6/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.6/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.6/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.6/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.6/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="8" description="network route for connector:oraclepaywire between: paymentoracle paymentblockchain " nextModel="//@interimmodels.8" name="network-route">
    <designmodel name="inter8">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.7/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.7/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.7/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.7/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.7/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.7/@designmodel/@connector.0/@role.1 //@interimmodels.7/@designmodel/@connector.1/@role.0 //@interimmodels.7/@designmodel/@connector.2/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.7/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.7/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.7/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.7/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.7/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.7/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" role="//@interimmodels.7/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.7/@designmodel/@host.0/@node.1">
        <port name="record" role="//@interimmodels.7/@designmodel/@connector.3/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.7/@designmodel/@connector.4/@role.1" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.7/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.7/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.7/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.7/@designmodel/@connector.5/@role.1 //@interimmodels.7/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.7/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.7/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" role="//@interimmodels.7/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" role="//@interimmodels.7/@designmodel/@connector.8/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <component name="PaymentOracle" type="server,oracle">
        <port name="Paymentsupply" role="//@interimmodels.7/@designmodel/@connector.8/@role.1" type="response,orafeed,OutboundPort,InboundPort">
          <events name="supplied"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.2"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.7/@designmodel/@connector.2/@role.0" connector="//@interimmodels.7/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.1"/>
        <role name="subscriber" roletype="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.7/@designmodel/@connector.1"/>
      </connector>
      <connector name="driverquerywire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.7/@designmodel/@connector.1/@role.0" connector="//@interimmodels.7/@designmodel/@connector.2"/>
        <role name="readstorage" roletype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.7/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.3"/>
        <role name="writestorage" roletype="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.7/@designmodel/@connector.3"/>
      </connector>
      <connector name="payprocesswire" type="REConnector" connectortype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.4"/>
        <role name="readstorage" roletype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.7/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.7/@designmodel/@connector.6/@role.0" connector="//@interimmodels.7/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.7/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="CRConnector" connectortype="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.7/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.3/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.7/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.7/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.7/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.7/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.7/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.7/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.7/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.7/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.7/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.7/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.7/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.7/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.7/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.7/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.7/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.7/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.7/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.7/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.7/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.7/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.7/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.7/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.7/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.7/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.7/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.7/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.7/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.7/@designmodel" valid="false" counterExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!38 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!72 -> callwire_req?72 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!72 -> driverquerywire_req?72 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!72 -> driverquerywire_res?72 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!72 -> assignwire_pub?72 -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!72 -> callwire_res?72 -> oraclepaywire_token?38 -> (oraclepaywire_token!38 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?38)*" visitedStates="3051" verifyTime="0.094792" testport="//@interimmodels.7/@designmodel/@component.0/@port.0" traceExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!38 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!72 -> callwire_req?72 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!72 -> driverquerywire_req?72 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!72 -> driverquerywire_res?72 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!72 -> assignwire_pub?72 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!72 -> callwire_res?72 -> oraclepaywire_token?38 -> (oraclepaywire_token!38 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?38)*" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.7/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.7/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.7/@designmodel" valid="false" counterExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!62 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!22 -> callwire_req?22 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!22 -> driverquerywire_req?22 -> DriverRecord_driverquerywire_readstorage_invoke -> oraclepaywire_token?62 -> (oraclepaywire_token!62 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?62)*" visitedStates="2510" verifyTime="0.0571992" testport="//@interimmodels.7/@designmodel/@component.0/@port.0" traceExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!62 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!22 -> callwire_req?22 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!22 -> driverquerywire_req?22 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!22 -> driverquerywire_res?22 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!22 -> assignwire_pub?22 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!22 -> callwire_res?22 -> oraclepaywire_token?62 -> (oraclepaywire_token!62 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?62)*" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverDB.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.7/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.7/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.7/@designmodel" counterExample="" visitedStates="627" verifyTime="0.0258485" testport="//@interimmodels.7/@designmodel/@component.0/@port.1" traceExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!40 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PassengerUI_pay_issuepay -> PassengerUI_paywire_writer_process -> paywire_req!98 -> paywire_req?98 -> Payment_paywire_writestorage_invoke -> Payment_record_payrecorded -> Payment_paywire_writestorage_process -> paywire_res!98 -> paywire_res?98 -> oraclepaywire_token?40 -> (oraclepaywire_token!40 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?40)*" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.7/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.7/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.7/@designmodel" valid="false" counterExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!22 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!17 -> authwire_req?17 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!17 -> userquerywire_req?17 -> UserDB_userquerywire_readstorage_invoke -> oraclepaywire_token?22 -> (oraclepaywire_token!22 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?22)*" visitedStates="1382" verifyTime="0.0336203" testport="//@interimmodels.7/@designmodel/@component.0/@port.2" traceExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!22 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!17 -> authwire_req?17 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!17 -> userquerywire_req?17 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!17 -> userquerywire_res?17 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!17 -> authwire_res?17 -> oraclepaywire_token?22 -> (oraclepaywire_token!22 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?22)*" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.7/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.7/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.7/@designmodel" valid="false" counterExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!20 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!16 -> authwire_req?16 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!16 -> userquerywire_req?16 -> UserDB_userquerywire_readstorage_invoke -> oraclepaywire_token?20 -> (oraclepaywire_token!20 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?20)*" visitedStates="1382" verifyTime="0.0455517" testport="//@interimmodels.7/@designmodel/@component.2/@port.1" traceExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!20 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!16 -> authwire_req?16 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!16 -> userquerywire_req?16 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!16 -> userquerywire_res?16 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!16 -> authwire_res?16 -> oraclepaywire_token?20 -> (oraclepaywire_token!20 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?20)*" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.7/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.7/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-driverupdatewire" valid="false" counterExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!31 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> DriverUI_locate_located -> DriverUI_driverupdatewire_commander_process -> driverupdatewire_stmt!33 -> driverupdatewire_stmt?33 -> DriverRecord_driverupdate_updated -> DriverRecord_driverupdatewire_readstore_process -> DriverRecord_driverupdatewire_readstore_persist -> driverupdatewire_cmmd!33 -> driverupdatewire_cmmd?33 -> DriverupdatewireCommandLog_logdriverupdatewire_logged -> DriverupdatewireCommandLog_driverupdatewire_commandstore_process -> oraclepaywire_token?31 -> (oraclepaywire_token!31 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?31)*" visitedStates="2817" verifyTime="0.161983" testport="//@interimmodels.7/@designmodel/@component.2/@port.2" traceExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!31 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> DriverUI_locate_located -> DriverUI_driverupdatewire_commander_process -> driverupdatewire_stmt!33 -> driverupdatewire_stmt?33 -> DriverRecord_driverupdate_updated -> DriverRecord_driverupdatewire_readstore_process -> DriverRecord_driverupdatewire_readstore_persist -> driverupdatewire_cmmd!33 -> driverupdatewire_cmmd?33 -> DriverupdatewireCommandLog_logdriverupdatewire_logged -> DriverupdatewireCommandLog_driverupdatewire_commandstore_process -> DriverupdatewireCommandLog_driverupdatewire_commandstore_persist -> oraclepaywire_token?31 -> (oraclepaywire_token!31 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token?31)*" exprText="[] (DriverUI.locate.located-> &lt;> DriverupdatewireCommandLog.driverupdatewire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" visitedStates="1184" verifyTime="0.0303563" testport="//@interimmodels.7/@designmodel/@component.0/@port.1" traceExample="init -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!69 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> PassengerUI_pay_issuepay -> PassengerUI_paywire_writer_process -> paywire_req!32 -> paywire_req?32 -> Payment_paywire_writestorage_invoke -> Payment_record_payrecorded -> Payment_paywire_writestorage_process -> paywire_res!32 -> paywire_res?32 -> oraclepaywire_token?69 -> (PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> oraclepaywire_token!69 -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token?69 -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored)*" exprText="[] (PaymentOracle.Paymentsupply.supplied-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.8"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.7/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.7/@designmodel/@component.3 //@interimmodels.7/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.7/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.7/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.7/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.7/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.7/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="9" description="network route for connector:paywire between: passengerui paymentoracle " nextModel="//@interimmodels.9" isStable="true" name="network-route">
    <designmodel name="inter9">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.8/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.8/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.8/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.8/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.8/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.8/@designmodel/@connector.0/@role.1 //@interimmodels.8/@designmodel/@connector.1/@role.0 //@interimmodels.8/@designmodel/@connector.2/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.8/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.8/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.8/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.8/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.8/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.8/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" role="//@interimmodels.8/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.8/@designmodel/@host.0/@node.1">
        <port name="record" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.8/@designmodel/@connector.4/@role.1" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.8/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.8/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.8/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.8/@designmodel/@connector.5/@role.1 //@interimmodels.8/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.8/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.8/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" role="//@interimmodels.8/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" role="//@interimmodels.8/@designmodel/@connector.8/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <component name="PaymentOracle" type="server,oracle">
        <port name="Paymentsupply" role="//@interimmodels.8/@designmodel/@connector.8/@role.1 //@interimmodels.8/@designmodel/@connector.3/@role.1" type="response,orafeed,OutboundPort,InboundPort">
          <events name="supplied"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.2"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.8/@designmodel/@connector.2/@role.0" connector="//@interimmodels.8/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.1"/>
        <role name="subscriber" roletype="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.8/@designmodel/@connector.1"/>
      </connector>
      <connector name="driverquerywire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.8/@designmodel/@connector.1/@role.0" connector="//@interimmodels.8/@designmodel/@connector.2"/>
        <role name="readstorage" roletype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.8/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="CSConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.3"/>
        <role name="responder" type="in" nextRoleExpr="//@interimmodels.8/@designmodel/@connector.8/@role.1">
          <roletype href="target.arch#//@archstyle.0/@connectortype.0/@roletype.1"/>
          <connector href="target.arch#//@connector.3"/>
        </role>
      </connector>
      <connector name="payprocesswire" type="REConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.4"/>
        <role name="readstorage" roletype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.8/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.8/@designmodel/@connector.6/@role.0" connector="//@interimmodels.8/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.8/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="CRConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.8/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.3/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.8/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.8/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.8/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.8/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.8/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.8/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.8/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.8/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.8/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.8/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.8/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.8/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.8/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.8/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.8/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.8/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.8/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.8/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.8/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.8/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.8/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.8/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.8/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.8/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.8/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.8/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.8/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.8/@designmodel" visitedStates="79" verifyTime="0.0051616" testport="//@interimmodels.8/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!16 -> callwire_req?16 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!16 -> driverquerywire_req?16 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!16 -> driverquerywire_res?16 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!16 -> assignwire_pub?16 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!16 -> callwire_res?16" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.8/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.8/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.8/@designmodel" visitedStates="54" verifyTime="0.0046803" testport="//@interimmodels.8/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!16 -> callwire_req?16 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!16 -> driverquerywire_req?16 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!16 -> driverquerywire_res?16 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!16 -> assignwire_pub?16 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!16 -> callwire_res?16" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverDB.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.8/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.8/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.8/@designmodel" counterExample="" visitedStates="40" verifyTime="0.008860699999999999" testport="//@interimmodels.8/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_requester_process -> paywire_req!74 -> paywire_req?74 -> PaymentOracle_paywire_responder_invoke -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!74 -> PaymentOracle_paywire_responder_process -> paywire_res!74 -> oraclepaywire_token?74 -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> paywire_res?74" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.8/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.8/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.8/@designmodel" visitedStates="29" verifyTime="0.0043244" testport="//@interimmodels.8/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!49 -> authwire_req?49 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!49 -> userquerywire_req?49 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!49 -> userquerywire_res?49 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!49 -> authwire_res?49" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.8/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.8/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.8/@designmodel" visitedStates="29" verifyTime="0.0042572999999999995" testport="//@interimmodels.8/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!32 -> authwire_req?32 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!32 -> userquerywire_req?32 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!32 -> userquerywire_res?32 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!32 -> authwire_res?32" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.8/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.8/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-driverupdatewire" visitedStates="96" verifyTime="0.0086121" testport="//@interimmodels.8/@designmodel/@component.2/@port.2" traceExample="init -> DriverUI_locate_located -> DriverUI_driverupdatewire_commander_process -> driverupdatewire_stmt!49 -> driverupdatewire_stmt?49 -> DriverRecord_driverupdate_updated -> DriverRecord_driverupdatewire_readstore_process -> DriverRecord_driverupdatewire_readstore_persist -> driverupdatewire_cmmd!49 -> driverupdatewire_cmmd?49 -> DriverupdatewireCommandLog_logdriverupdatewire_logged -> DriverupdatewireCommandLog_driverupdatewire_commandstore_process -> DriverupdatewireCommandLog_driverupdatewire_commandstore_persist" exprText="[] (DriverUI.locate.located-> &lt;> DriverupdatewireCommandLog.driverupdatewire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" visitedStates="67" verifyTime="0.0042838" testport="//@interimmodels.8/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_requester_process -> paywire_req!74 -> paywire_req?74 -> PaymentOracle_paywire_responder_invoke -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!74 -> PaymentOracle_paywire_responder_process -> paywire_res!74 -> oraclepaywire_token?74 -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> paywire_res?74" exprText="[] (PaymentOracle.Paymentsupply.supplied-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.8"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.8/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.8/@designmodel/@component.3 //@interimmodels.8/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.8/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.8/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.8/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.8/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.8/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="11" description="deploy service: tripmgmt" nextModel="//@interimmodels.10" isStable="true" name="deploy-service">
    <designmodel name="inter11">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.9/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.9/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.9/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.9/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.9/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.9/@designmodel/@connector.0/@role.1 //@interimmodels.9/@designmodel/@connector.1/@role.0 //@interimmodels.9/@designmodel/@connector.2/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.9/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.9/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.9/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.9/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.9/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.9/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" role="//@interimmodels.9/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.9/@designmodel/@host.0/@node.1">
        <port name="record" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.9/@designmodel/@connector.4/@role.1" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.9/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.9/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.9/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.9/@designmodel/@connector.5/@role.1 //@interimmodels.9/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.9/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.9/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" role="//@interimmodels.9/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" role="//@interimmodels.9/@designmodel/@connector.8/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <component name="PaymentOracle" type="server,oracle">
        <port name="Paymentsupply" role="//@interimmodels.9/@designmodel/@connector.8/@role.1 //@interimmodels.9/@designmodel/@connector.3/@role.1" type="response,orafeed,OutboundPort,InboundPort">
          <events name="supplied"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.2"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.9/@designmodel/@connector.2/@role.0" connector="//@interimmodels.9/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.1"/>
        <role name="subscriber" roletype="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.9/@designmodel/@connector.1"/>
      </connector>
      <connector name="driverquerywire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.9/@designmodel/@connector.1/@role.0" connector="//@interimmodels.9/@designmodel/@connector.2"/>
        <role name="readstorage" roletype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.9/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="CSConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.3"/>
        <role name="responder" type="in" nextRoleExpr="//@interimmodels.9/@designmodel/@connector.8/@role.1">
          <roletype href="target.arch#//@archstyle.0/@connectortype.0/@roletype.1"/>
          <connector href="target.arch#//@connector.3"/>
        </role>
      </connector>
      <connector name="payprocesswire" type="REConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.4"/>
        <role name="readstorage" roletype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.9/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.9/@designmodel/@connector.6/@role.0" connector="//@interimmodels.9/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.9/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="CRConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.9/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.3/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.9/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.9/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.9/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.9/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.9/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.9/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.9/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.9/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.9/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.9/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.9/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.9/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.9/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.9/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.9/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.9/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.9/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.9/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.9/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.9/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.9/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.9/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.9/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.9/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.9/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.9/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.9/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.9/@designmodel" visitedStates="79" verifyTime="0.0048262" testport="//@interimmodels.9/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!40 -> callwire_req?40 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!40 -> driverquerywire_req?40 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!40 -> driverquerywire_res?40 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!40 -> assignwire_pub?40 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!40 -> callwire_res?40" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.9/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.9/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.9/@designmodel" visitedStates="54" verifyTime="0.0048809" testport="//@interimmodels.9/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!14 -> callwire_req?14 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!14 -> driverquerywire_req?14 -> DriverRecord_driverquerywire_readstorage_invoke -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstorage_process -> driverquerywire_res!14 -> driverquerywire_res?14 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!14 -> assignwire_pub?14 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!14 -> callwire_res?14" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverDB.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.9/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.9/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.9/@designmodel" counterExample="" visitedStates="40" verifyTime="0.007528099999999999" testport="//@interimmodels.9/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_requester_process -> paywire_req!70 -> paywire_req?70 -> PaymentOracle_paywire_responder_invoke -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!70 -> PaymentOracle_paywire_responder_process -> paywire_res!70 -> oraclepaywire_token?70 -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> paywire_res?70" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.9/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.9/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.9/@designmodel" visitedStates="29" verifyTime="0.0049699" testport="//@interimmodels.9/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!42 -> authwire_req?42 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!42 -> userquerywire_req?42 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!42 -> userquerywire_res?42 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!42 -> authwire_res?42" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.9/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.9/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.9/@designmodel" visitedStates="29" verifyTime="0.0071344" testport="//@interimmodels.9/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!95 -> authwire_req?95 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!95 -> userquerywire_req?95 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!95 -> userquerywire_res?95 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!95 -> authwire_res?95" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.9/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.9/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-driverupdatewire" visitedStates="96" verifyTime="0.0065398" testport="//@interimmodels.9/@designmodel/@component.2/@port.2" traceExample="init -> DriverUI_locate_located -> DriverUI_driverupdatewire_commander_process -> driverupdatewire_stmt!49 -> driverupdatewire_stmt?49 -> DriverRecord_driverupdate_updated -> DriverRecord_driverupdatewire_readstore_process -> DriverRecord_driverupdatewire_readstore_persist -> driverupdatewire_cmmd!49 -> driverupdatewire_cmmd?49 -> DriverupdatewireCommandLog_logdriverupdatewire_logged -> DriverupdatewireCommandLog_driverupdatewire_commandstore_process -> DriverupdatewireCommandLog_driverupdatewire_commandstore_persist" exprText="[] (DriverUI.locate.located-> &lt;> DriverupdatewireCommandLog.driverupdatewire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" visitedStates="67" verifyTime="0.004827199999999999" testport="//@interimmodels.9/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_requester_process -> paywire_req!39 -> paywire_req?39 -> PaymentOracle_paywire_responder_invoke -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!39 -> PaymentOracle_paywire_responder_process -> paywire_res!39 -> oraclepaywire_token?39 -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> paywire_res?39" exprText="[] (PaymentOracle.Paymentsupply.supplied-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.8"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.9/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.9/@designmodel/@component.3 //@interimmodels.9/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.9/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.9/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.9/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.9/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.9/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="12" description="network route for connector:driverquerywire between: tripmgmt driverrecord " nextModel="//@interimmodels.11" isStable="true" name="network-route">
    <designmodel name="inter12">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.10/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.10/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.10/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.10/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.10/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.10/@designmodel/@connector.0/@role.1 //@interimmodels.10/@designmodel/@connector.1/@role.0 //@interimmodels.10/@designmodel/@connector.2/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.10/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.10/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.10/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.10/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.10/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.10/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" role="//@interimmodels.10/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.10/@designmodel/@host.0/@node.1">
        <port name="record" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.10/@designmodel/@connector.4/@role.1" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.10/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.10/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.10/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.10/@designmodel/@connector.5/@role.1 //@interimmodels.10/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.10/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.10/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" role="//@interimmodels.10/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" role="//@interimmodels.10/@designmodel/@connector.8/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <component name="PaymentOracle" type="server,oracle">
        <port name="Paymentsupply" role="//@interimmodels.10/@designmodel/@connector.8/@role.1 //@interimmodels.10/@designmodel/@connector.3/@role.1" type="response,orafeed,OutboundPort,InboundPort">
          <events name="supplied"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.2"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.10/@designmodel/@connector.2/@role.0" connector="//@interimmodels.10/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.1"/>
        <role name="subscriber" roletype="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.10/@designmodel/@connector.1"/>
      </connector>
      <connector name="driverquerywire" type="QRConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0">
        <role name="querier" roletype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.10/@designmodel/@connector.1/@role.0" connector="//@interimmodels.10/@designmodel/@connector.2"/>
        <role name="readstore" roletype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.10/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="CSConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.3"/>
        <role name="responder" type="in" nextRoleExpr="//@interimmodels.10/@designmodel/@connector.8/@role.1">
          <roletype href="target.arch#//@archstyle.0/@connectortype.0/@roletype.1"/>
          <connector href="target.arch#//@connector.3"/>
        </role>
      </connector>
      <connector name="payprocesswire" type="REConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.4"/>
        <role name="readstorage" roletype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.10/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.10/@designmodel/@connector.6/@role.0" connector="//@interimmodels.10/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.10/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="CRConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.10/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.3/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.10/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.10/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.10/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.10/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.10/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.10/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.10/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.10/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.10/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.10/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.10/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.10/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.10/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.10/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.10/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.10/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.10/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.10/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.10/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.10/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.10/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.10/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.10/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.10/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.10/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.10/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.10/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.10/@designmodel" visitedStates="77" verifyTime="0.0080013" testport="//@interimmodels.10/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!69 -> callwire_req?69 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!69 -> driverquerywire_stmt?69 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!69 -> driverquerywire_res?69 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!69 -> assignwire_pub?69 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!69 -> callwire_res?69" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.10/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.10/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.10/@designmodel" visitedStates="52" verifyTime="0.0053269" testport="//@interimmodels.10/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!53 -> callwire_req?53 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!53 -> driverquerywire_stmt?53 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!53 -> driverquerywire_res?53 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!53 -> assignwire_pub?53 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!53 -> callwire_res?53" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverRecord.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.10/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.10/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.10/@designmodel" counterExample="" visitedStates="40" verifyTime="0.0037375999999999998" testport="//@interimmodels.10/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_requester_process -> paywire_req!31 -> paywire_req?31 -> PaymentOracle_paywire_responder_invoke -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!31 -> PaymentOracle_paywire_responder_process -> paywire_res!31 -> oraclepaywire_token?31 -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> paywire_res?31" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.10/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.10/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.10/@designmodel" visitedStates="29" verifyTime="0.0072223" testport="//@interimmodels.10/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!93 -> authwire_req?93 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!93 -> userquerywire_req?93 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!93 -> userquerywire_res?93 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!93 -> authwire_res?93" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.10/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.10/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.10/@designmodel" visitedStates="29" verifyTime="0.0039226" testport="//@interimmodels.10/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!53 -> authwire_req?53 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!53 -> userquerywire_req?53 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!53 -> userquerywire_res?53 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!53 -> authwire_res?53" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.10/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.10/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-driverupdatewire" visitedStates="96" verifyTime="0.07070889999999999" testport="//@interimmodels.10/@designmodel/@component.2/@port.2" traceExample="init -> DriverUI_locate_located -> DriverUI_driverupdatewire_commander_process -> driverupdatewire_stmt!54 -> driverupdatewire_stmt?54 -> DriverRecord_driverupdate_updated -> DriverRecord_driverupdatewire_readstore_process -> DriverRecord_driverupdatewire_readstore_persist -> driverupdatewire_cmmd!54 -> driverupdatewire_cmmd?54 -> DriverupdatewireCommandLog_logdriverupdatewire_logged -> DriverupdatewireCommandLog_driverupdatewire_commandstore_process -> DriverupdatewireCommandLog_driverupdatewire_commandstore_persist" exprText="[] (DriverUI.locate.located-> &lt;> DriverupdatewireCommandLog.driverupdatewire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" visitedStates="67" verifyTime="0.0044551" testport="//@interimmodels.10/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_requester_process -> paywire_req!75 -> paywire_req?75 -> PaymentOracle_paywire_responder_invoke -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!75 -> PaymentOracle_paywire_responder_process -> paywire_res!75 -> oraclepaywire_token?75 -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> paywire_res?75" exprText="[] (PaymentOracle.Paymentsupply.supplied-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.8"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-query-driverquerywire" visitedStates="53" verifyTime="0.0044713" testport="//@interimmodels.10/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!17 -> callwire_req?17 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!17 -> driverquerywire_stmt?17 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!17 -> driverquerywire_res?17 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!17 -> assignwire_pub?17 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!17 -> callwire_res?17" exprText="[] (TripMgmt.accept.acknowledged-> &lt;> DriverRecord.driverquerywire.readstore.process)">
        <connector href="target.arch#//@connector.2"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.10/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.10/@designmodel/@component.3 //@interimmodels.10/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.10/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.10/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.10/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.10/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.10/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="13" description="network route for connector:assignwire between: tripmgmt driverui " nextModel="//@interimmodels.12" name="network-route">
    <designmodel name="inter13">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.11/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.11/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.11/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.11/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.11/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.11/@designmodel/@connector.0/@role.1 //@interimmodels.11/@designmodel/@connector.2/@role.0 //@interimmodels.11/@designmodel/@connector.1/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.11/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.11/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.11/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.11/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.11/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.11/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" role="//@interimmodels.11/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.11/@designmodel/@host.0/@node.1">
        <port name="record" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.11/@designmodel/@connector.4/@role.1" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.11/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.11/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.11/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.11/@designmodel/@connector.5/@role.1 //@interimmodels.11/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.11/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.11/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" role="//@interimmodels.11/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" role="//@interimmodels.11/@designmodel/@connector.8/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <component name="PaymentOracle" type="server,oracle">
        <port name="Paymentsupply" role="//@interimmodels.11/@designmodel/@connector.8/@role.1 //@interimmodels.11/@designmodel/@connector.3/@role.1" type="response,orafeed,OutboundPort,InboundPort">
          <events name="supplied"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.2"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.11/@designmodel/@connector.2/@role.0" connector="//@interimmodels.11/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="ESConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.1"/>
        <role name="eventsubscriber" roletype="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.11/@designmodel/@connector.1"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.1"/>
        </role>
      </connector>
      <connector name="driverquerywire" type="QRConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0">
        <role name="querier" roletype="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.11/@designmodel/@connector.1/@role.0" connector="//@interimmodels.11/@designmodel/@connector.2"/>
        <role name="readstore" roletype="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.11/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="CSConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.3"/>
        <role name="responder" type="in" nextRoleExpr="//@interimmodels.11/@designmodel/@connector.8/@role.1">
          <roletype href="target.arch#//@archstyle.0/@connectortype.0/@roletype.1"/>
          <connector href="target.arch#//@connector.3"/>
        </role>
      </connector>
      <connector name="payprocesswire" type="REConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.4"/>
        <role name="readstorage" roletype="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.11/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.11/@designmodel/@connector.6/@role.0" connector="//@interimmodels.11/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.11/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="CRConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.11/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.3/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.11/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.11/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.11/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.11/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.11/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.11/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.11/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.11/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.11/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.11/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.11/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.11/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.11/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.11/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.11/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.11/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.11/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.11/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.11/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.11/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.11/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.11/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.11/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.11/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.11/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.11/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.11/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.11/@designmodel" valid="false" counterExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!94 -> callwire_req?94 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!94 -> driverquerywire_stmt?94 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!94 -> driverquerywire_res?94 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!94" visitedStates="33" verifyTime="0.0043755999999999995" testport="//@interimmodels.11/@designmodel/@component.0/@port.0" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter13() |= ![](PassengerUI_call_callride->&lt;" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.11/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.11/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.11/@designmodel" visitedStates="21" verifyTime="0.0040815" testport="//@interimmodels.11/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!32 -> callwire_req?32 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!32 -> driverquerywire_stmt?32 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!32 -> driverquerywire_res?32 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!32" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverDB.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.11/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.11/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.11/@designmodel" counterExample="" visitedStates="40" verifyTime="0.004344499999999999" testport="//@interimmodels.11/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_requester_process -> paywire_req!94 -> paywire_req?94 -> PaymentOracle_paywire_responder_invoke -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!94 -> PaymentOracle_paywire_responder_process -> paywire_res!94 -> oraclepaywire_token?94 -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> paywire_res?94" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.11/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.11/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.11/@designmodel" visitedStates="29" verifyTime="0.0041009" testport="//@interimmodels.11/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!41 -> authwire_req?41 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!41 -> userquerywire_req?41 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!41 -> userquerywire_res?41 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!41 -> authwire_res?41" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.11/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.11/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.11/@designmodel" visitedStates="29" verifyTime="0.0030916999999999997" testport="//@interimmodels.11/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!72 -> authwire_req?72 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!72 -> userquerywire_req?72 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!72 -> userquerywire_res?72 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!72 -> authwire_res?72" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.11/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.11/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-driverupdatewire" visitedStates="96" verifyTime="0.0052312" testport="//@interimmodels.11/@designmodel/@component.2/@port.2" traceExample="init -> DriverUI_locate_located -> DriverUI_driverupdatewire_commander_process -> driverupdatewire_stmt!16 -> driverupdatewire_stmt?16 -> DriverRecord_driverupdate_updated -> DriverRecord_driverupdatewire_readstore_process -> DriverRecord_driverupdatewire_readstore_persist -> driverupdatewire_cmmd!16 -> driverupdatewire_cmmd?16 -> DriverupdatewireCommandLog_logdriverupdatewire_logged -> DriverupdatewireCommandLog_driverupdatewire_commandstore_process -> DriverupdatewireCommandLog_driverupdatewire_commandstore_persist" exprText="[] (DriverUI.locate.located-> &lt;> DriverupdatewireCommandLog.driverupdatewire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" visitedStates="67" verifyTime="0.0054727" testport="//@interimmodels.11/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_requester_process -> paywire_req!92 -> paywire_req?92 -> PaymentOracle_paywire_responder_invoke -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!92 -> PaymentOracle_paywire_responder_process -> paywire_res!92 -> oraclepaywire_token?92 -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> paywire_res?92" exprText="[] (PaymentOracle.Paymentsupply.supplied-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.8"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-query-driverquerywire" visitedStates="22" verifyTime="0.0069134" testport="//@interimmodels.11/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!37 -> callwire_req?37 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!37 -> driverquerywire_stmt?37 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!37 -> driverquerywire_res?37 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!37" exprText="[] (TripMgmt.accept.acknowledged-> &lt;> DriverRecord.driverquerywire.readstore.process)">
        <connector href="target.arch#//@connector.2"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-assignwire" valid="false" counterExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!12 -> callwire_req?12 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!12 -> driverquerywire_stmt?12 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!12 -> driverquerywire_res?12 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!12" visitedStates="28" verifyTime="0.0051249" testport="//@interimmodels.11/@designmodel/@component.0/@port.0" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter13() |= ![](TripMgmt_accept_acknowledged->&lt;" exprText="[] (TripMgmt.accept.acknowledged-> &lt;> AssignwireLog.assignwire.eventstore.persist)">
        <connector href="target.arch#//@connector.1"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.11/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.11/@designmodel/@component.3 //@interimmodels.11/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.11/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.11/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.11/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.11/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.11/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="14" description="network route for connector:assignwire between: tripmgmt assignwirelog " nextModel="//@interimmodels.13" isStable="true" name="network-route">
    <designmodel name="inter14">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.12/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.12/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.12/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.12/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.12/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.12/@designmodel/@connector.0/@role.1 //@interimmodels.12/@designmodel/@connector.2/@role.0 //@interimmodels.12/@designmodel/@connector.1/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.12/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.12/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.12/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.12/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.12/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.12/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" role="//@interimmodels.12/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.12/@designmodel/@host.0/@node.1">
        <port name="record" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.12/@designmodel/@connector.4/@role.1" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.12/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.12/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.12/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.12/@designmodel/@connector.5/@role.1 //@interimmodels.12/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.12/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.12/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" role="//@interimmodels.12/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" role="//@interimmodels.12/@designmodel/@connector.1/@role.2" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" role="//@interimmodels.12/@designmodel/@connector.8/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <component name="PaymentOracle" type="server,oracle">
        <port name="Paymentsupply" role="//@interimmodels.12/@designmodel/@connector.8/@role.1 //@interimmodels.12/@designmodel/@connector.3/@role.1" type="response,orafeed,OutboundPort,InboundPort">
          <events name="supplied"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.2"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.12/@designmodel/@connector.2/@role.0" connector="//@interimmodels.12/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="ESConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.1"/>
        <role name="eventsubscriber" roletype="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.12/@designmodel/@connector.1"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.1"/>
        </role>
      </connector>
      <connector name="driverquerywire" type="QRConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0">
        <role name="querier" roletype="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.12/@designmodel/@connector.1/@role.0" connector="//@interimmodels.12/@designmodel/@connector.2"/>
        <role name="readstore" roletype="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.12/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="CSConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.3"/>
        <role name="responder" type="in" nextRoleExpr="//@interimmodels.12/@designmodel/@connector.8/@role.1">
          <roletype href="target.arch#//@archstyle.0/@connectortype.0/@roletype.1"/>
          <connector href="target.arch#//@connector.3"/>
        </role>
      </connector>
      <connector name="payprocesswire" type="REConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.4"/>
        <role name="readstorage" roletype="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.12/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.12/@designmodel/@connector.6/@role.0" connector="//@interimmodels.12/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.12/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="CRConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.12/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.3/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.12/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.12/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.12/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.12/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.12/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.12/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.12/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.12/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.12/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.12/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.12/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.12/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.12/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.12/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.12/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.12/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.12/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.12/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.12/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.12/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.12/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.12/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.12/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.12/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.12/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.12/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.12/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.12/@designmodel" visitedStates="197" verifyTime="0.0093805" testport="//@interimmodels.12/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!91 -> callwire_req?91 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!91 -> driverquerywire_stmt?91 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!91 -> driverquerywire_res?91 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!91 -> assignwire_pevt?91 -> AssignwireLog_logassignwire_logged -> AssignwireLog_assignwire_eventstore_process -> assignwire_sevt!91 -> AssignwireLog_assignwire_eventstore_persist -> assignwire_sevt?91 -> assignwire_bevt!91 -> assignwire_bevt?91 -> DriverUI_notify_notified -> DriverUI_assignwire_eventsubscriber_process -> TripMgmt_assignwire_eventpublisher_broadcast -> TripMgmt_assignwire_eventpublisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!91 -> callwire_res?91" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.12/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.12/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.12/@designmodel" visitedStates="131" verifyTime="0.0125846" testport="//@interimmodels.12/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!35 -> callwire_req?35 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!35 -> driverquerywire_stmt?35 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!35 -> driverquerywire_res?35 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!35 -> assignwire_pevt?35 -> AssignwireLog_logassignwire_logged -> AssignwireLog_assignwire_eventstore_process -> assignwire_sevt!35 -> AssignwireLog_assignwire_eventstore_persist -> assignwire_sevt?35 -> assignwire_bevt!35 -> assignwire_bevt?35 -> DriverUI_notify_notified -> DriverUI_assignwire_eventsubscriber_process -> TripMgmt_assignwire_eventpublisher_broadcast -> TripMgmt_assignwire_eventpublisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!35 -> callwire_res?35" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverRecord.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.12/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.12/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.12/@designmodel" counterExample="" visitedStates="40" verifyTime="0.0064437" testport="//@interimmodels.12/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_requester_process -> paywire_req!91 -> paywire_req?91 -> PaymentOracle_paywire_responder_invoke -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!91 -> PaymentOracle_paywire_responder_process -> paywire_res!91 -> oraclepaywire_token?91 -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> paywire_res?91" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.12/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.12/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.12/@designmodel" visitedStates="29" verifyTime="0.0050592" testport="//@interimmodels.12/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!57 -> authwire_req?57 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!57 -> userquerywire_req?57 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!57 -> userquerywire_res?57 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!57 -> authwire_res?57" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.12/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.12/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.12/@designmodel" visitedStates="29" verifyTime="0.0098402" testport="//@interimmodels.12/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!61 -> authwire_req?61 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!61 -> userquerywire_req?61 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!61 -> userquerywire_res?61 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!61 -> authwire_res?61" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.12/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.12/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-driverupdatewire" visitedStates="96" verifyTime="0.0090853" testport="//@interimmodels.12/@designmodel/@component.2/@port.2" traceExample="init -> DriverUI_locate_located -> DriverUI_driverupdatewire_commander_process -> driverupdatewire_stmt!50 -> driverupdatewire_stmt?50 -> DriverRecord_driverupdate_updated -> DriverRecord_driverupdatewire_readstore_process -> DriverRecord_driverupdatewire_readstore_persist -> driverupdatewire_cmmd!50 -> driverupdatewire_cmmd?50 -> DriverupdatewireCommandLog_logdriverupdatewire_logged -> DriverupdatewireCommandLog_driverupdatewire_commandstore_process -> DriverupdatewireCommandLog_driverupdatewire_commandstore_persist" exprText="[] (DriverUI.locate.located-> &lt;> DriverupdatewireCommandLog.driverupdatewire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" visitedStates="67" verifyTime="0.0060355" testport="//@interimmodels.12/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_requester_process -> paywire_req!31 -> paywire_req?31 -> PaymentOracle_paywire_responder_invoke -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!31 -> PaymentOracle_paywire_responder_process -> paywire_res!31 -> oraclepaywire_token?31 -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> paywire_res?31" exprText="[] (PaymentOracle.Paymentsupply.supplied-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.8"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-query-driverquerywire" visitedStates="132" verifyTime="0.0076284" testport="//@interimmodels.12/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!28 -> callwire_req?28 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!28 -> driverquerywire_stmt?28 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!28 -> driverquerywire_res?28 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!28 -> assignwire_pevt?28 -> AssignwireLog_logassignwire_logged -> AssignwireLog_assignwire_eventstore_process -> assignwire_sevt!28 -> AssignwireLog_assignwire_eventstore_persist -> assignwire_sevt?28 -> assignwire_bevt!28 -> assignwire_bevt?28 -> DriverUI_notify_notified -> DriverUI_assignwire_eventsubscriber_process -> TripMgmt_assignwire_eventpublisher_broadcast -> TripMgmt_assignwire_eventpublisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!28 -> callwire_res?28" exprText="[] (TripMgmt.accept.acknowledged-> &lt;> DriverRecord.driverquerywire.readstore.process)">
        <connector href="target.arch#//@connector.2"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-assignwire" visitedStates="182" verifyTime="0.0103512" testport="//@interimmodels.12/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!41 -> callwire_req?41 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!41 -> driverquerywire_stmt?41 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!41 -> driverquerywire_res?41 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!41 -> assignwire_pevt?41 -> AssignwireLog_logassignwire_logged -> AssignwireLog_assignwire_eventstore_process -> assignwire_sevt!41 -> AssignwireLog_assignwire_eventstore_persist -> assignwire_sevt?41 -> assignwire_bevt!41 -> assignwire_bevt?41 -> DriverUI_notify_notified -> DriverUI_assignwire_eventsubscriber_process -> TripMgmt_assignwire_eventpublisher_broadcast -> TripMgmt_assignwire_eventpublisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!41 -> callwire_res?41" exprText="[] (TripMgmt.accept.acknowledged-> &lt;> AssignwireLog.assignwire.eventstore.persist)">
        <connector href="target.arch#//@connector.1"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.12/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.12/@designmodel/@component.3 //@interimmodels.12/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.12/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.12/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.12/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.12/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.12/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="16" description="deploy service: payment" nextModel="//@interimmodels.14" isStable="true" name="deploy-service">
    <designmodel name="inter16">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.13/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.13/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.13/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.13/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.13/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.13/@designmodel/@connector.0/@role.1 //@interimmodels.13/@designmodel/@connector.2/@role.0 //@interimmodels.13/@designmodel/@connector.1/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.13/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.13/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.13/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.13/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.13/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.13/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" role="//@interimmodels.13/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.13/@designmodel/@host.0/@node.1">
        <port name="record" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.13/@designmodel/@connector.4/@role.1" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.13/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.13/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.13/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.13/@designmodel/@connector.5/@role.1 //@interimmodels.13/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.13/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.13/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" role="//@interimmodels.13/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" role="//@interimmodels.13/@designmodel/@connector.1/@role.2" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" role="//@interimmodels.13/@designmodel/@connector.8/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <component name="PaymentOracle" type="server,oracle">
        <port name="Paymentsupply" role="//@interimmodels.13/@designmodel/@connector.8/@role.1 //@interimmodels.13/@designmodel/@connector.3/@role.1" type="response,orafeed,OutboundPort,InboundPort">
          <events name="supplied"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.2"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.13/@designmodel/@connector.2/@role.0" connector="//@interimmodels.13/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="ESConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.1"/>
        <role name="eventsubscriber" roletype="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.13/@designmodel/@connector.1"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.1"/>
        </role>
      </connector>
      <connector name="driverquerywire" type="QRConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0">
        <role name="querier" roletype="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.13/@designmodel/@connector.1/@role.0" connector="//@interimmodels.13/@designmodel/@connector.2"/>
        <role name="readstore" roletype="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.13/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="CSConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.3"/>
        <role name="responder" type="in" nextRoleExpr="//@interimmodels.13/@designmodel/@connector.8/@role.1">
          <roletype href="target.arch#//@archstyle.0/@connectortype.0/@roletype.1"/>
          <connector href="target.arch#//@connector.3"/>
        </role>
      </connector>
      <connector name="payprocesswire" type="REConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.4"/>
        <role name="readstorage" roletype="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.13/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.13/@designmodel/@connector.6/@role.0" connector="//@interimmodels.13/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.13/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="CRConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.13/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.3/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.13/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.13/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.13/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.13/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.13/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.13/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.13/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.13/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.13/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.13/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.13/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.13/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.13/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.13/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.13/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.13/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.13/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.13/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.13/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.13/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.13/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.13/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.13/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.13/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.13/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.13/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.13/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.13/@designmodel" visitedStates="197" verifyTime="0.06804299999999999" testport="//@interimmodels.13/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!89 -> callwire_req?89 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!89 -> driverquerywire_stmt?89 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!89 -> driverquerywire_res?89 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!89 -> assignwire_pevt?89 -> AssignwireLog_logassignwire_logged -> AssignwireLog_assignwire_eventstore_process -> assignwire_sevt!89 -> AssignwireLog_assignwire_eventstore_persist -> assignwire_sevt?89 -> assignwire_bevt!89 -> assignwire_bevt?89 -> DriverUI_notify_notified -> DriverUI_assignwire_eventsubscriber_process -> TripMgmt_assignwire_eventpublisher_broadcast -> TripMgmt_assignwire_eventpublisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!89 -> callwire_res?89" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.13/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.13/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.13/@designmodel" visitedStates="54" verifyTime="0.0031750999999999997" testport="//@interimmodels.13/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!24 -> callwire_req?24 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_reader_process -> driverquerywire_req!24 -> driverquerywire_req?24 -> DriverDB_driverquerywire_readstorage_invoke -> DriverDB_driverquery_quried -> DriverDB_driverquerywire_readstorage_process -> driverquerywire_res!24 -> driverquerywire_res?24 -> TripMgmt_driverquerywire_reader_Skip -> TripMgmt_assignwire_publisher_process -> assignwire_pub!24 -> assignwire_pub?24 -> DriverUI_notify_notified -> DriverUI_assignwire_subscriber_process -> TripMgmt_assignwire_publisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!24 -> callwire_res?24" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverDB.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.13/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.13/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.13/@designmodel" counterExample="" visitedStates="40" verifyTime="0.005337499999999999" testport="//@interimmodels.13/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_requester_process -> paywire_req!44 -> paywire_req?44 -> PaymentOracle_paywire_responder_invoke -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!44 -> PaymentOracle_paywire_responder_process -> paywire_res!44 -> oraclepaywire_token?44 -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> paywire_res?44" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.13/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.13/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.13/@designmodel" visitedStates="29" verifyTime="0.0048438" testport="//@interimmodels.13/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!30 -> authwire_req?30 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!30 -> userquerywire_req?30 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!30 -> userquerywire_res?30 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!30 -> authwire_res?30" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.13/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.13/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.13/@designmodel" visitedStates="29" verifyTime="0.0084119" testport="//@interimmodels.13/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!29 -> authwire_req?29 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!29 -> userquerywire_req?29 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!29 -> userquerywire_res?29 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!29 -> authwire_res?29" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.13/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.13/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-driverupdatewire" visitedStates="96" verifyTime="0.0066796" testport="//@interimmodels.13/@designmodel/@component.2/@port.2" traceExample="init -> DriverUI_locate_located -> DriverUI_driverupdatewire_commander_process -> driverupdatewire_stmt!68 -> driverupdatewire_stmt?68 -> DriverRecord_driverupdate_updated -> DriverRecord_driverupdatewire_readstore_process -> DriverRecord_driverupdatewire_readstore_persist -> driverupdatewire_cmmd!68 -> driverupdatewire_cmmd?68 -> DriverupdatewireCommandLog_logdriverupdatewire_logged -> DriverupdatewireCommandLog_driverupdatewire_commandstore_process -> DriverupdatewireCommandLog_driverupdatewire_commandstore_persist" exprText="[] (DriverUI.locate.located-> &lt;> DriverupdatewireCommandLog.driverupdatewire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" visitedStates="67" verifyTime="0.0062326" testport="//@interimmodels.13/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_requester_process -> paywire_req!29 -> paywire_req?29 -> PaymentOracle_paywire_responder_invoke -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!29 -> PaymentOracle_paywire_responder_process -> paywire_res!29 -> oraclepaywire_token?29 -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> paywire_res?29" exprText="[] (PaymentOracle.Paymentsupply.supplied-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.8"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-query-driverquerywire" visitedStates="132" verifyTime="0.0098272" testport="//@interimmodels.13/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!43 -> callwire_req?43 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!43 -> driverquerywire_stmt?43 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!43 -> driverquerywire_res?43 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!43 -> assignwire_pevt?43 -> AssignwireLog_logassignwire_logged -> AssignwireLog_assignwire_eventstore_process -> assignwire_sevt!43 -> AssignwireLog_assignwire_eventstore_persist -> assignwire_sevt?43 -> assignwire_bevt!43 -> assignwire_bevt?43 -> DriverUI_notify_notified -> DriverUI_assignwire_eventsubscriber_process -> TripMgmt_assignwire_eventpublisher_broadcast -> TripMgmt_assignwire_eventpublisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!43 -> callwire_res?43" exprText="[] (TripMgmt.accept.acknowledged-> &lt;> DriverRecord.driverquerywire.readstore.process)">
        <connector href="target.arch#//@connector.2"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-assignwire" visitedStates="182" verifyTime="0.009802499999999999" testport="//@interimmodels.13/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!61 -> callwire_req?61 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!61 -> driverquerywire_stmt?61 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!61 -> driverquerywire_res?61 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!61 -> assignwire_pevt?61 -> AssignwireLog_logassignwire_logged -> AssignwireLog_assignwire_eventstore_process -> assignwire_sevt!61 -> AssignwireLog_assignwire_eventstore_persist -> assignwire_sevt?61 -> assignwire_bevt!61 -> assignwire_bevt?61 -> DriverUI_notify_notified -> DriverUI_assignwire_eventsubscriber_process -> TripMgmt_assignwire_eventpublisher_broadcast -> TripMgmt_assignwire_eventpublisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!61 -> callwire_res?61" exprText="[] (TripMgmt.accept.acknowledged-> &lt;> AssignwireLog.assignwire.eventstore.persist)">
        <connector href="target.arch#//@connector.1"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.13/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.13/@designmodel/@component.3 //@interimmodels.13/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.13/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.13/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.13/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.13/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.13/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="17" description="network route for connector:payprocesswire between: billinggateway payment " nextModel="//@interimmodels.15" isStable="true" name="network-route">
    <designmodel name="inter17">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.14/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.14/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.14/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.14/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.14/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.14/@designmodel/@connector.0/@role.1 //@interimmodels.14/@designmodel/@connector.2/@role.0 //@interimmodels.14/@designmodel/@connector.1/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.14/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.14/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.14/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.14/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.14/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.14/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" role="//@interimmodels.14/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.14/@designmodel/@host.0/@node.1">
        <port name="record" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.14/@designmodel/@connector.4/@role.1" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.14/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.14/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.14/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.14/@designmodel/@connector.5/@role.1 //@interimmodels.14/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.14/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.14/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" role="//@interimmodels.14/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" role="//@interimmodels.14/@designmodel/@connector.1/@role.2" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" role="//@interimmodels.14/@designmodel/@connector.8/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <component name="PaymentOracle" type="server,oracle">
        <port name="Paymentsupply" role="//@interimmodels.14/@designmodel/@connector.8/@role.1 //@interimmodels.14/@designmodel/@connector.3/@role.1" type="response,orafeed,OutboundPort,InboundPort">
          <events name="supplied"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.2"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.14/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.14/@designmodel/@connector.2/@role.0" connector="//@interimmodels.14/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="ESConnector" connectortype="//@interimmodels.14/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.14/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.14/@designmodel/@connector.1"/>
        <role name="eventsubscriber" roletype="//@interimmodels.14/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.14/@designmodel/@connector.1"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.1"/>
        </role>
      </connector>
      <connector name="driverquerywire" type="QRConnector" connectortype="//@interimmodels.14/@designmodel/@archstyle.7/@connectortype.0">
        <role name="querier" roletype="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.14/@designmodel/@connector.1/@role.0" connector="//@interimmodels.14/@designmodel/@connector.2"/>
        <role name="readstore" roletype="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.14/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="CSConnector" connectortype="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.14/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.14/@designmodel/@connector.3"/>
        <role name="responder" type="in" nextRoleExpr="//@interimmodels.14/@designmodel/@connector.8/@role.1">
          <roletype href="target.arch#//@archstyle.0/@connectortype.0/@roletype.1"/>
          <connector href="target.arch#//@connector.3"/>
        </role>
      </connector>
      <connector name="payprocesswire" type="CSConnector" connectortype="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.14/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.14/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.14/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.14/@designmodel/@connector.6/@role.0" connector="//@interimmodels.14/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.14/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.14/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="CRConnector" connectortype="//@interimmodels.14/@designmodel/@archstyle.3/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.14/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.14/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.14/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.14/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.3/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.14/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.14/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.14/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.14/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.14/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.14/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.14/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.14/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.14/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.14/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.14/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.14/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.14/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.14/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.14/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.14/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.14/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.14/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.14/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.14/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.14/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.14/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.14/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.14/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.14/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.14/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.14/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.14/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.14/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.14/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.14/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.14/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.14/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.14/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.14/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.14/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.14/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.14/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.14/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.14/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.14/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.14/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.14/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.14/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.14/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.14/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.14/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.14/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.14/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.14/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.14/@designmodel" visitedStates="197" verifyTime="0.0112442" testport="//@interimmodels.14/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!28 -> callwire_req?28 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!28 -> driverquerywire_stmt?28 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!28 -> driverquerywire_res?28 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!28 -> assignwire_pevt?28 -> AssignwireLog_logassignwire_logged -> AssignwireLog_assignwire_eventstore_process -> assignwire_sevt!28 -> AssignwireLog_assignwire_eventstore_persist -> assignwire_sevt?28 -> assignwire_bevt!28 -> assignwire_bevt?28 -> DriverUI_notify_notified -> DriverUI_assignwire_eventsubscriber_process -> TripMgmt_assignwire_eventpublisher_broadcast -> TripMgmt_assignwire_eventpublisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!28 -> callwire_res?28" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.14/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.14/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.14/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.14/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.14/@designmodel" visitedStates="131" verifyTime="0.009587799999999999" testport="//@interimmodels.14/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!35 -> callwire_req?35 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!35 -> driverquerywire_stmt?35 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!35 -> driverquerywire_res?35 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!35 -> assignwire_pevt?35 -> AssignwireLog_logassignwire_logged -> AssignwireLog_assignwire_eventstore_process -> assignwire_sevt!35 -> AssignwireLog_assignwire_eventstore_persist -> assignwire_sevt?35 -> assignwire_bevt!35 -> assignwire_bevt?35 -> DriverUI_notify_notified -> DriverUI_assignwire_eventsubscriber_process -> TripMgmt_assignwire_eventpublisher_broadcast -> TripMgmt_assignwire_eventpublisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!35 -> callwire_res?35" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverRecord.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.14/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.14/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.14/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.14/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.14/@designmodel" counterExample="" visitedStates="40" verifyTime="0.0083392" testport="//@interimmodels.14/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_requester_process -> paywire_req!26 -> paywire_req?26 -> PaymentOracle_paywire_responder_invoke -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!26 -> PaymentOracle_paywire_responder_process -> paywire_res!26 -> oraclepaywire_token?26 -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> paywire_res?26" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.14/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.14/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.14/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.14/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.14/@designmodel" visitedStates="29" verifyTime="0.0062905" testport="//@interimmodels.14/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!56 -> authwire_req?56 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!56 -> userquerywire_req?56 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!56 -> userquerywire_res?56 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!56 -> authwire_res?56" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.14/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.14/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.14/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.14/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.14/@designmodel" visitedStates="29" verifyTime="0.0053269" testport="//@interimmodels.14/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!19 -> authwire_req?19 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!19 -> userquerywire_req?19 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!19 -> userquerywire_res?19 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!19 -> authwire_res?19" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.14/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.14/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.14/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.14/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-driverupdatewire" visitedStates="96" verifyTime="0.0062258999999999995" testport="//@interimmodels.14/@designmodel/@component.2/@port.2" traceExample="init -> DriverUI_locate_located -> DriverUI_driverupdatewire_commander_process -> driverupdatewire_stmt!29 -> driverupdatewire_stmt?29 -> DriverRecord_driverupdate_updated -> DriverRecord_driverupdatewire_readstore_process -> DriverRecord_driverupdatewire_readstore_persist -> driverupdatewire_cmmd!29 -> driverupdatewire_cmmd?29 -> DriverupdatewireCommandLog_logdriverupdatewire_logged -> DriverupdatewireCommandLog_driverupdatewire_commandstore_process -> DriverupdatewireCommandLog_driverupdatewire_commandstore_persist" exprText="[] (DriverUI.locate.located-> &lt;> DriverupdatewireCommandLog.driverupdatewire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" visitedStates="67" verifyTime="0.0090857" testport="//@interimmodels.14/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_requester_process -> paywire_req!24 -> paywire_req?24 -> PaymentOracle_paywire_responder_invoke -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!24 -> PaymentOracle_paywire_responder_process -> paywire_res!24 -> oraclepaywire_token?24 -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> paywire_res?24" exprText="[] (PaymentOracle.Paymentsupply.supplied-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.8"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-query-driverquerywire" visitedStates="132" verifyTime="0.0088011" testport="//@interimmodels.14/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!69 -> callwire_req?69 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!69 -> driverquerywire_stmt?69 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!69 -> driverquerywire_res?69 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!69 -> assignwire_pevt?69 -> AssignwireLog_logassignwire_logged -> AssignwireLog_assignwire_eventstore_process -> assignwire_sevt!69 -> AssignwireLog_assignwire_eventstore_persist -> assignwire_sevt?69 -> assignwire_bevt!69 -> assignwire_bevt?69 -> DriverUI_notify_notified -> DriverUI_assignwire_eventsubscriber_process -> TripMgmt_assignwire_eventpublisher_broadcast -> TripMgmt_assignwire_eventpublisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!69 -> callwire_res?69" exprText="[] (TripMgmt.accept.acknowledged-> &lt;> DriverRecord.driverquerywire.readstore.process)">
        <connector href="target.arch#//@connector.2"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-assignwire" visitedStates="182" verifyTime="0.0082562" testport="//@interimmodels.14/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!93 -> callwire_req?93 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!93 -> driverquerywire_stmt?93 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!93 -> driverquerywire_res?93 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!93 -> assignwire_pevt?93 -> AssignwireLog_logassignwire_logged -> AssignwireLog_assignwire_eventstore_process -> assignwire_sevt!93 -> AssignwireLog_assignwire_eventstore_persist -> assignwire_sevt?93 -> assignwire_bevt!93 -> assignwire_bevt?93 -> DriverUI_notify_notified -> DriverUI_assignwire_eventsubscriber_process -> TripMgmt_assignwire_eventpublisher_broadcast -> TripMgmt_assignwire_eventpublisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!93 -> callwire_res?93" exprText="[] (TripMgmt.accept.acknowledged-> &lt;> AssignwireLog.assignwire.eventstore.persist)">
        <connector href="target.arch#//@connector.1"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.14/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.14/@designmodel/@component.3 //@interimmodels.14/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.14/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.14/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.14/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.14/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.14/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="18" description="network route for connector:ropayprocesswire between: payment paymentblockchain " isStable="true" name="network-route">
    <designmodel name="inter18">
      <component name="PassengerUI" type="client,datawriter" deploymentnode="//@interimmodels.15/@designmodel/@host.1/@node.0">
        <port name="call" role="//@interimmodels.15/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="callride"/>
        </port>
        <port name="pay" role="//@interimmodels.15/@designmodel/@connector.3/@role.0" type="write,OutboundPort">
          <events name="issuepay"/>
        </port>
        <port name="plogin" role="//@interimmodels.15/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
      </component>
      <component name="TripMgmt" type="server,datareader,broadcaster,readendpoint" deploymentnode="//@interimmodels.15/@designmodel/@host.0/@node.0">
        <port name="accept" role="//@interimmodels.15/@designmodel/@connector.0/@role.1 //@interimmodels.15/@designmodel/@connector.2/@role.0 //@interimmodels.15/@designmodel/@connector.1/@role.0" type="response,read,broadcast,OutboundPort,InboundPort,EventProcessorPort">
          <events name="acknowledged"/>
        </port>
      </component>
      <component name="DriverUI" type="client,eventconsumer,datawriter,listener" deploymentnode="//@interimmodels.15/@designmodel/@host.2/@node.0">
        <port name="notify" role="//@interimmodels.15/@designmodel/@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
          <events name="notified"/>
        </port>
        <port name="dlogin" role="//@interimmodels.15/@designmodel/@connector.5/@role.0" type="request,OutboundPort">
          <events name="login"/>
        </port>
        <port name="locate" role="//@interimmodels.15/@designmodel/@connector.7/@role.0" type="write,OutboundPort,EventProcessorPort">
          <events name="located"/>
        </port>
      </component>
      <component name="DriverRecord" type="repository,datastore" deploymentnode="//@interimmodels.15/@designmodel/@host.0/@node.1">
        <port name="driverquery" role="//@interimmodels.15/@designmodel/@connector.2/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="quried"/>
        </port>
        <port name="driverupdate" role="//@interimmodels.15/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="updated"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore" deploymentnode="//@interimmodels.15/@designmodel/@host.0/@node.1">
        <port name="record" type="store,InboundPort,TamperingProofPort">
          <events name="payrecorded"/>
        </port>
        <port name="list" role="//@interimmodels.15/@designmodel/@connector.4/@role.1 //@interimmodels.15/@designmodel/@connector.9/@role.0" type="access,InboundPort,TamperingProofPort">
          <events name="listed"/>
        </port>
      </component>
      <component name="BillingGateway" type="datareader,readendpoint" deploymentnode="//@interimmodels.15/@designmodel/@host.4/@node.0">
        <port name="process" role="//@interimmodels.15/@designmodel/@connector.4/@role.0" type="read,OutboundPort">
          <events name="processed"/>
        </port>
      </component>
      <component name="SignOn" type="server,datareader,readendpoint" deploymentnode="//@interimmodels.15/@designmodel/@host.3/@node.0">
        <port name="auth" role="//@interimmodels.15/@designmodel/@connector.5/@role.1 //@interimmodels.15/@designmodel/@connector.6/@role.0" type="response,read,OutboundPort,InboundPort">
          <events name="authenticated"/>
        </port>
      </component>
      <component name="UserDB" type="repository,datastore" deploymentnode="//@interimmodels.15/@designmodel/@host.3/@node.1">
        <port name="find" role="//@interimmodels.15/@designmodel/@connector.6/@role.1" type="access,InboundPort">
          <events name="queried"/>
        </port>
      </component>
      <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
        <port name="logdriverupdatewire" role="//@interimmodels.15/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="AssignwireLog" type="eventlogger,datastore">
        <port name="logassignwire" role="//@interimmodels.15/@designmodel/@connector.1/@role.2" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.3"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="payappend" role="//@interimmodels.15/@designmodel/@connector.8/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <port name="payaccess" role="//@interimmodels.15/@designmodel/@connector.9/@role.1" type="blocksupply,InboundPort">
          <events name="accessed"/>
        </port>
        <deploymentnode href="target.arch#//@host.5/@node.0"/>
      </component>
      <component name="PaymentOracle" type="server,oracle">
        <port name="Paymentsupply" role="//@interimmodels.15/@designmodel/@connector.8/@role.1 //@interimmodels.15/@designmodel/@connector.3/@role.1" type="response,orafeed,OutboundPort,InboundPort">
          <events name="supplied"/>
        </port>
        <deploymentnode href="target.arch#//@host.0/@node.2"/>
      </component>
      <connector name="callwire" type="CSConnector" connectortype="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.15/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.15/@designmodel/@connector.2/@role.0" connector="//@interimmodels.15/@designmodel/@connector.0"/>
      </connector>
      <connector name="assignwire" type="ESConnector" connectortype="//@interimmodels.15/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.15/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.15/@designmodel/@connector.1"/>
        <role name="eventsubscriber" roletype="//@interimmodels.15/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.15/@designmodel/@connector.1"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.1"/>
        </role>
      </connector>
      <connector name="driverquerywire" type="QRConnector" connectortype="//@interimmodels.15/@designmodel/@archstyle.7/@connectortype.0">
        <role name="querier" roletype="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.15/@designmodel/@connector.1/@role.0" connector="//@interimmodels.15/@designmodel/@connector.2"/>
        <role name="readstore" roletype="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.15/@designmodel/@connector.2"/>
      </connector>
      <connector name="paywire" type="CSConnector" connectortype="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.15/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.15/@designmodel/@connector.3"/>
        <role name="responder" type="in" nextRoleExpr="//@interimmodels.15/@designmodel/@connector.8/@role.1">
          <roletype href="target.arch#//@archstyle.0/@connectortype.0/@roletype.1"/>
          <connector href="target.arch#//@connector.3"/>
        </role>
      </connector>
      <connector name="payprocesswire" type="CSConnector" connectortype="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.15/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.15/@designmodel/@connector.9/@role.0" connector="//@interimmodels.15/@designmodel/@connector.4"/>
      </connector>
      <connector name="authwire" type="CSConnector" connectortype="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.15/@designmodel/@connector.5"/>
        <role name="responder" roletype="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.15/@designmodel/@connector.6/@role.0" connector="//@interimmodels.15/@designmodel/@connector.5"/>
      </connector>
      <connector name="userquerywire" type="REConnector" connectortype="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.15/@designmodel/@connector.6"/>
        <role name="readstorage" roletype="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.15/@designmodel/@connector.6"/>
      </connector>
      <connector name="driverupdatewire" type="CRConnector" connectortype="//@interimmodels.15/@designmodel/@archstyle.3/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.15/@designmodel/@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.15/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.15/@designmodel/@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.15/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.3/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.15/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.15/@designmodel/@connector.8">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <connector name="ropayprocesswire" type="ROConnector">
        <role name="extquerier" type="out" connector="//@interimmodels.15/@designmodel/@connector.9">
          <roletype href="target.arch#//@archstyle.1/@connectortype.0/@roletype.0"/>
        </role>
        <role name="blocksupplier" type="in" connector="//@interimmodels.15/@designmodel/@connector.9">
          <roletype href="target.arch#//@archstyle.1/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.1/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.15/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.15/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.15/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.15/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.15/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.15/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.15/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.15/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.15/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.15/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.15/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.15/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.15/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.15/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.15/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.15/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.15/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.15/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.15/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.15/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.15/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.15/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.15/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.15/@designmodel/@archstyle.3/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.15/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.15/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.15/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.15/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.15/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.15/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.15/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.15/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.15/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.15/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.15/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.15/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.15/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.15/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.15/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.15/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.15/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.15/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.15/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.15/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.15/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.15/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.15/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.15/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.15/@designmodel" visitedStates="197" verifyTime="0.0146156" testport="//@interimmodels.15/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!71 -> callwire_req?71 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!71 -> driverquerywire_stmt?71 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!71 -> driverquerywire_res?71 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!71 -> assignwire_pevt?71 -> AssignwireLog_logassignwire_logged -> AssignwireLog_assignwire_eventstore_process -> assignwire_sevt!71 -> AssignwireLog_assignwire_eventstore_persist -> assignwire_sevt?71 -> assignwire_bevt!71 -> assignwire_bevt?71 -> DriverUI_notify_notified -> DriverUI_assignwire_eventsubscriber_process -> TripMgmt_assignwire_eventpublisher_broadcast -> TripMgmt_assignwire_eventpublisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!71 -> callwire_res?71" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.15/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.15/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.15/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.15/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.15/@designmodel" visitedStates="131" verifyTime="0.011628699999999999" testport="//@interimmodels.15/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!28 -> callwire_req?28 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!28 -> driverquerywire_stmt?28 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!28 -> driverquerywire_res?28 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!28 -> assignwire_pevt?28 -> AssignwireLog_logassignwire_logged -> AssignwireLog_assignwire_eventstore_process -> assignwire_sevt!28 -> AssignwireLog_assignwire_eventstore_persist -> assignwire_sevt?28 -> assignwire_bevt!28 -> assignwire_bevt?28 -> DriverUI_notify_notified -> DriverUI_assignwire_eventsubscriber_process -> TripMgmt_assignwire_eventpublisher_broadcast -> TripMgmt_assignwire_eventpublisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!28 -> callwire_res?28" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverRecord.driverquery.quried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.15/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.15/@designmodel/@component.1/@port.0/@events.0" nextExpr="//@interimmodels.15/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.15/@designmodel/@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.15/@designmodel" counterExample="" visitedStates="10" verifyTime="0.003918" testport="//@interimmodels.15/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_writer_process -> paywire_req!84 -> paywire_req?84 -> Payment_paywire_writestorage_invoke -> Payment_record_payrecorded -> Payment_paywire_writestorage_process -> paywire_res!84 -> paywire_res?84" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.15/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.15/@designmodel/@component.5/@port.0/@events.0" nextExpr="//@interimmodels.15/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.15/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.15/@designmodel" visitedStates="29" verifyTime="0.06956129999999999" testport="//@interimmodels.15/@designmodel/@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!23 -> authwire_req?23 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!23 -> userquerywire_req?23 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!23 -> userquerywire_res?23 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!23 -> authwire_res?23" exprText="[]  (PassengerUI.plogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.15/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.15/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.15/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.15/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.15/@designmodel" visitedStates="29" verifyTime="0.010348" testport="//@interimmodels.15/@designmodel/@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!12 -> authwire_req?12 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!12 -> userquerywire_req?12 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!12 -> userquerywire_res?12 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!12 -> authwire_res?12" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.15/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.15/@designmodel/@component.2/@port.1/@events.0" nextExpr="//@interimmodels.15/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.15/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-driverupdatewire" visitedStates="96" verifyTime="0.009484" testport="//@interimmodels.15/@designmodel/@component.2/@port.2" traceExample="init -> DriverUI_locate_located -> DriverUI_driverupdatewire_commander_process -> driverupdatewire_stmt!80 -> driverupdatewire_stmt?80 -> DriverRecord_driverupdate_updated -> DriverRecord_driverupdatewire_readstore_process -> DriverRecord_driverupdatewire_readstore_persist -> driverupdatewire_cmmd!80 -> driverupdatewire_cmmd?80 -> DriverupdatewireCommandLog_logdriverupdatewire_logged -> DriverupdatewireCommandLog_driverupdatewire_commandstore_process -> DriverupdatewireCommandLog_driverupdatewire_commandstore_persist" exprText="[] (DriverUI.locate.located-> &lt;> DriverupdatewireCommandLog.driverupdatewire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" visitedStates="67" verifyTime="0.0105553" testport="//@interimmodels.15/@designmodel/@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_requester_process -> paywire_req!25 -> paywire_req?25 -> PaymentOracle_paywire_responder_invoke -> PaymentOracle_Paymentsupply_supplied -> PaymentOracle_oraclepaywire_extsupplier_process -> oraclepaywire_token!25 -> PaymentOracle_paywire_responder_process -> paywire_res!25 -> oraclepaywire_token?25 -> PaymentBlockchain_payappend_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> paywire_res?25" exprText="[] (PaymentOracle.Paymentsupply.supplied-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.8"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-query-driverquerywire" visitedStates="132" verifyTime="0.0120168" testport="//@interimmodels.15/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!69 -> callwire_req?69 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!69 -> driverquerywire_stmt?69 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!69 -> driverquerywire_res?69 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!69 -> assignwire_pevt?69 -> AssignwireLog_logassignwire_logged -> AssignwireLog_assignwire_eventstore_process -> assignwire_sevt!69 -> AssignwireLog_assignwire_eventstore_persist -> assignwire_sevt?69 -> assignwire_bevt!69 -> assignwire_bevt?69 -> DriverUI_notify_notified -> DriverUI_assignwire_eventsubscriber_process -> TripMgmt_assignwire_eventpublisher_broadcast -> TripMgmt_assignwire_eventpublisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!69 -> callwire_res?69" exprText="[] (TripMgmt.accept.acknowledged-> &lt;> DriverRecord.driverquerywire.readstore.process)">
        <connector href="target.arch#//@connector.2"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-assignwire" visitedStates="182" verifyTime="0.012680199999999999" testport="//@interimmodels.15/@designmodel/@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!39 -> callwire_req?39 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!39 -> driverquerywire_stmt?39 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!39 -> driverquerywire_res?39 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!39 -> assignwire_pevt?39 -> AssignwireLog_logassignwire_logged -> AssignwireLog_assignwire_eventstore_process -> assignwire_sevt!39 -> AssignwireLog_assignwire_eventstore_persist -> assignwire_sevt?39 -> assignwire_bevt!39 -> assignwire_bevt?39 -> DriverUI_notify_notified -> DriverUI_assignwire_eventsubscriber_process -> TripMgmt_assignwire_eventpublisher_broadcast -> TripMgmt_assignwire_eventpublisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!39 -> callwire_res?39" exprText="[] (TripMgmt.accept.acknowledged-> &lt;> AssignwireLog.assignwire.eventstore.persist)">
        <connector href="target.arch#//@connector.1"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-readropayprocesswire" visitedStates="22" verifyTime="0.0103565" testport="//@interimmodels.15/@designmodel/@component.5/@port.0" traceExample="init -> BillingGateway_process_processed -> BillingGateway_payprocesswire_requester_process -> payprocesswire_req!72 -> payprocesswire_req?72 -> Payment_payprocesswire_responder_invoke -> Payment_ropayprocesswire_extquerier_request -> ropayprocesswire_uid!72 -> ropayprocesswire_uid?72 -> PaymentBlockchain_payaccess_accessed -> PaymentBlockchain_ropayprocesswire_blocksupplier_process -> ropayprocesswire_res!72 -> ropayprocesswire_res?72 -> Payment_list_listed -> Payment_ropayprocesswire_extquerier_process -> Payment_ropayprocesswire_extquerier_Skip -> Payment_payprocesswire_responder_process -> payprocesswire_res!72 -> payprocesswire_res?72" exprText="[] (PaymentBlockchain.ropayprocesswire.blocksupplier.process-> &lt;> Payment.list.listed)">
        <connector href="target.arch#//@connector.9"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="AppContainer1" component="//@interimmodels.15/@designmodel/@component.1"/>
        <node type="APPLICATION_CONTAINER" name="MySQL" component="//@interimmodels.15/@designmodel/@component.3 //@interimmodels.15/@designmodel/@component.4"/>
      </host>
      <host name="Mobile1" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android1" component="//@interimmodels.15/@designmodel/@component.0"/>
      </host>
      <host name="Mobile2" hostType="MOBILE_PHONE">
        <node type="APPLICATION_CONTAINER" name="Android2" component="//@interimmodels.15/@designmodel/@component.2"/>
      </host>
      <host netAccessType="PUBLIC" name="SecureServer">
        <node type="APPLICATION_CONTAINER" name="AppContainer2" component="//@interimmodels.15/@designmodel/@component.6"/>
        <node type="APPLICATION_CONTAINER" name="DBServer" component="//@interimmodels.15/@designmodel/@component.7"/>
      </host>
      <host name="BankServer" hostType="DEDICATED_SERVER">
        <node type="APPLICATION_CONTAINER" name="BankOS" component="//@interimmodels.15/@designmodel/@component.5"/>
      </host>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
    </designmodel>
  </interimmodels>
</arch:MigrationModel>
