<?xml version="1.0" encoding="UTF-8"?>
<arch:MigrationModel xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arch="http://www.example.org/arch">
  <source href="sample.arch#/"/>
  <target href="target.arch#/"/>
  <interimmodels description="setup database: shippinglogwirecommandlog" nextModel="//@interimmodels.1" isStable="true" name="setup-database">
    <designmodel name="inter0">
      <component name="ShopFrontend" type="client,broadcaster" deploymentnode="//@interimmodels.0/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface,LeastPriviledge">
        <port name="auth" role="//@interimmodels.0/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="checked"/>
        </port>
        <port name="browse" role="//@interimmodels.0/@designmodel/@connector.1/@role.0" type="request,OutboundPort">
          <events name="read"/>
        </port>
        <port name="order" role="//@interimmodels.0/@designmodel/@connector.9/@role.0" type="broadcast,OutboundPort">
          <events name="purchased"/>
        </port>
        <port name="shop" role="//@interimmodels.0/@designmodel/@connector.3/@role.0" type="request,OutboundPort">
          <events name="itemadded"/>
        </port>
      </component>
      <component name="CateloqueService" type="server" deploymentnode="//@interimmodels.0/@designmodel/@host.0/@node.1" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
        <port name="list" role="//@interimmodels.0/@designmodel/@connector.1/@role.1" type="response,InboundPort">
          <events name="query"/>
        </port>
      </component>
      <component name="UserService" type="server" deploymentnode="//@interimmodels.0/@designmodel/@host.1/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DefenseInDepth,DenialOfService">
        <port name="login" role="//@interimmodels.0/@designmodel/@connector.0/@role.1" type="response,InboundPort">
          <events name="signedon"/>
        </port>
      </component>
      <component name="OrdersService" type="client,server,listener,eventconsumer,readendpoint,datawriter,datareader" deploymentnode="//@interimmodels.0/@designmodel/@host.2/@node.0" criticalLevel="Low" securityCharacters="AttackSurface,LeastPriviledge,Compartmentalization,DenialOfService,DataTampering">
        <port name="postorder" role="//@interimmodels.0/@designmodel/@connector.4/@role.0 //@interimmodels.0/@designmodel/@connector.7/@role.0 //@interimmodels.0/@designmodel/@connector.9/@role.1 //@interimmodels.0/@designmodel/@connector.10/@role.0" type="request,listen,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="check" next="//@interimmodels.0/@designmodel/@component.3/@port.0/@events.1"/>
          <events name="save"/>
        </port>
        <port name="get" role="//@interimmodels.0/@designmodel/@connector.2/@role.1 //@interimmodels.0/@designmodel/@connector.8/@role.0" type="response,read,OutboundPort,InboundPort,EventProcessorPort">
          <events name="ack"/>
        </port>
      </component>
      <component name="OrdersDB" type="repository,datastore" deploymentnode="//@interimmodels.0/@designmodel/@host.2/@node.1">
        <port name="writeorder" role="//@interimmodels.0/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="orderwritten"/>
        </port>
        <port name="queryorder" role="//@interimmodels.0/@designmodel/@connector.8/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="orderreaded"/>
        </port>
      </component>
      <component name="CartsService" type="server" deploymentnode="//@interimmodels.0/@designmodel/@host.2/@node.0" securityCharacters="AttackSurface,DenialOfService,DataTampering">
        <port name="manage" role="//@interimmodels.0/@designmodel/@connector.3/@role.1" type="response,InboundPort">
          <events name="saveitem"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,datastore" deploymentnode="//@interimmodels.0/@designmodel/@host.1/@node.1" criticalLevel="High" securityCharacters="DefenseInDepth,Compartmentalization">
        <port name="pay" role="//@interimmodels.0/@designmodel/@connector.10/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="paid"/>
        </port>
      </component>
      <component name="ShippingService" type="server,datawriter" deploymentnode="//@interimmodels.0/@designmodel/@host.3/@node.0" securityCharacters="Compartmentalization">
        <port name="postshipping" role="//@interimmodels.0/@designmodel/@connector.4/@role.1 //@interimmodels.0/@designmodel/@connector.6/@role.0" type="response,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="posted"/>
        </port>
      </component>
      <component name="ShippingWorker" type="readendpoint,datareader" deploymentnode="//@interimmodels.0/@designmodel/@host.3/@node.0">
        <port name="listqueue" role="//@interimmodels.0/@designmodel/@connector.5/@role.0" type="read,OutboundPort,EventProcessorPort">
          <events name="renderqueue"/>
        </port>
      </component>
      <component name="QueueDB" type="repository,datastore" deploymentnode="//@interimmodels.0/@designmodel/@host.3/@node.1">
        <port name="writequeue" role="//@interimmodels.0/@designmodel/@connector.6/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="queuewritten"/>
        </port>
        <port name="readqueue" role="//@interimmodels.0/@designmodel/@connector.5/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="queuereaded"/>
        </port>
      </component>
      <component name="ShopBackend" type="client" deploymentnode="//@interimmodels.0/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface">
        <port name="listorder" role="//@interimmodels.0/@designmodel/@connector.2/@role.0" type="request,OutboundPort">
          <events name="renderlist"/>
        </port>
      </component>
      <component name="ShippinglogwireCommandLog" type="commanddb,datastore">
        <port name="logshippinglogwire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.3/@node.2"/>
      </component>
      <connector name="userwire" type="CSConnector" connectortype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.0/@designmodel/@connector.0"/>
      </connector>
      <connector name="cateloquewire" type="CSConnector" connectortype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.1"/>
        <role name="responder" roletype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.0/@designmodel/@connector.1"/>
      </connector>
      <connector name="orderquerywire" type="CSConnector" connectortype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.2"/>
        <role name="responder" roletype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.0/@designmodel/@connector.8/@role.0" connector="//@interimmodels.0/@designmodel/@connector.2"/>
      </connector>
      <connector name="cartwire" type="CSConnector" connectortype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.3"/>
        <role name="responder" roletype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.0/@designmodel/@connector.3"/>
      </connector>
      <connector name="shippingwire" type="CSConnector" connectortype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.0/@designmodel/@connector.6/@role.0" connector="//@interimmodels.0/@designmodel/@connector.4"/>
      </connector>
      <connector name="queuereadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.5"/>
        <role name="readstorage" roletype="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.0/@designmodel/@connector.5"/>
      </connector>
      <connector name="shippinglogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.6"/>
        <role name="writestorage" roletype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.0/@designmodel/@connector.6"/>
      </connector>
      <connector name="orderlogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.0/@designmodel/@connector.10/@role.0" connector="//@interimmodels.0/@designmodel/@connector.7"/>
        <role name="writestorage" roletype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.0/@designmodel/@connector.7"/>
      </connector>
      <connector name="orderreadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.8"/>
        <role name="readstorage" roletype="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.0/@designmodel/@connector.8"/>
      </connector>
      <connector name="orderwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.9"/>
        <role name="subscriber" roletype="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.0/@designmodel/@connector.7/@role.0" connector="//@interimmodels.0/@designmodel/@connector.9"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="writer" nextRoleExpr="//@interimmodels.0/@designmodel/@connector.4/@role.0" connector="//@interimmodels.0/@designmodel/@connector.10"/>
        <role name="writestorage" roletype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="writestorage" connector="//@interimmodels.0/@designmodel/@connector.10"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.0/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.0/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.0/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.0/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.0/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.0/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.0/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.4" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
            <event name="Skip"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.0/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.0/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.0/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.0/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.0/@designmodel/@archstyle.4/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.0/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.0/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.0/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.0/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.0/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.0/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.0/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.0/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.0/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.0/@designmodel" counterExample="" visitedStates="15" verifyTime="0.005627699999999999" testport="//@interimmodels.0/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!73 -> cartwire_req?73 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!73 -> cartwire_res?73" exprText="[]  (ShopFrontend.shop.itemadded -> &lt;> CartsService.manage.saveitem)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.0/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.0/@port.3/@events.0" nextExpr="//@interimmodels.0/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.0/@designmodel" counterExample="" visitedStates="65" verifyTime="0.006097699999999999" testport="//@interimmodels.0/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_publisher_process -> orderwire_pub!68 -> orderwire_pub?68 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!68 -> orderlogwire_req?68 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!68 -> orderlogwire_res?68 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_writer_request -> paywire_req!68 -> paywire_req?68 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!68 -> paywire_res?68 -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!68 -> shippingwire_req?68 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!68 -> shippinglogwire_req?68 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!68 -> shippinglogwire_res?68 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!68 -> shippingwire_res?68 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_subscriber_process" exprText="[]  (Payment.pay.paid -> &lt;> ShippingService.postshipping.posted)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.0/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.6/@port.0/@events.0" nextExpr="//@interimmodels.0/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.0/@designmodel" visitedStates="10" verifyTime="0.0054662999999999995" testport="//@interimmodels.0/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!44 -> cartwire_req?44 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!44 -> cartwire_res?44" exprText="[]  (OrdersService.postorder.save -> &lt;> Payment.pay.paid)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.0/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.3/@port.0/@events.1" nextExpr="//@interimmodels.0/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.0/@designmodel" counterExample="" visitedStates="15" verifyTime="0.0088413" testport="//@interimmodels.0/@designmodel/@component.0/@port.0" traceExample="init -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!55 -> userwire_req?55 -> UserService_userwire_responder_invoke -> UserService_login_signedon -> UserService_userwire_responder_process -> userwire_res!55 -> userwire_res?55" exprText="[]  (ShopFrontend.auth.checked -> &lt;> UserService.login.signedon)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.0/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.0/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.0/@designmodel" counterExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!62 -> cateloquewire_req?62 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!62 -> cateloquewire_res?62" visitedStates="24" verifyTime="0.005437" testport="//@interimmodels.0/@designmodel/@component.0/@port.1" traceExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!84 -> cateloquewire_req?84 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!84 -> cateloquewire_res?84" exprText="[]  (&lt;> ShopFrontend.browse.read -> &lt;> CateloqueService.list.query)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.0/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.1/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.0/@port.1/@events.0" operator="EVENTUALLY" nextExpr="//@interimmodels.0/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop6" model="//@interimmodels.0/@designmodel" counterExample="" visitedStates="29" verifyTime="0.0053647" testport="//@interimmodels.0/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!20 -> orderquerywire_req?20 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_reader_process -> orderreadwire_req!20 -> orderreadwire_req?20 -> OrdersDB_orderreadwire_readstorage_invoke -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstorage_process -> orderreadwire_res!20 -> orderreadwire_res?20 -> OrdersService_orderreadwire_reader_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!20 -> orderquerywire_res?20" exprText="[]  (ShopBackend.listorder.renderlist -> &lt;> OrdersDB.queryorder.orderreaded)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.0/@designmodel/@verifyProperty.5">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.10/@port.0/@events.0" nextExpr="//@interimmodels.0/@designmodel/@verifyProperty.5/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop7" model="//@interimmodels.0/@designmodel" counterExample="" visitedStates="60" verifyTime="0.005468499999999999" testport="//@interimmodels.0/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_publisher_process -> orderwire_pub!42 -> orderwire_pub?42 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!42 -> orderlogwire_req?42 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!42 -> orderlogwire_res?42 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_writer_request -> paywire_req!42 -> paywire_req?42 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!42 -> paywire_res?42 -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!42 -> shippingwire_req?42 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!42 -> shippinglogwire_req?42 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!42 -> shippinglogwire_res?42 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!42 -> shippingwire_res?42 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_subscriber_process" exprText="[]  (ShopFrontend.order.purchased -> &lt;> OrdersService.postorder.save)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.0/@designmodel/@verifyProperty.6">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.3/@port.0/@events.1" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.0/@designmodel/@verifyProperty.6/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="CLOUD_PLATFORM">
        <node name="NodeJSContainer1" component="//@interimmodels.0/@designmodel/@component.0 //@interimmodels.0/@designmodel/@component.10">
          <port name="port" portNumber="15551" node="//@interimmodels.0/@designmodel/@host.0/@node.0" namedport="//@interimmodels.0/@designmodel/@component.0/@port.0"/>
          <port name="port" portNumber="15552" node="//@interimmodels.0/@designmodel/@host.0/@node.0" namedport="//@interimmodels.0/@designmodel/@component.0/@port.2"/>
          <port name="port" portNumber="15553" node="//@interimmodels.0/@designmodel/@host.0/@node.0" namedport="//@interimmodels.0/@designmodel/@component.10/@port.0"/>
          <port name="port" portNumber="15554" node="//@interimmodels.0/@designmodel/@host.0/@node.0" namedport="//@interimmodels.0/@designmodel/@component.0/@port.3"/>
          <port name="port" portNumber="15555" node="//@interimmodels.0/@designmodel/@host.0/@node.0" namedport="//@interimmodels.0/@designmodel/@component.0/@port.1"/>
        </node>
        <node name="GoContainer3" component="//@interimmodels.0/@designmodel/@component.1">
          <port name="port" portNumber="80" node="//@interimmodels.0/@designmodel/@host.0/@node.1" namedport="//@interimmodels.0/@designmodel/@component.1/@port.0" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="SecureServer">
        <node name="GoContainer1" component="//@interimmodels.0/@designmodel/@component.2">
          <port name="port" portNumber="80" node="//@interimmodels.0/@designmodel/@host.1/@node.0" namedport="//@interimmodels.0/@designmodel/@component.2/@port.0" hasFirewall="true"/>
        </node>
        <node name="GoContainer2" component="//@interimmodels.0/@designmodel/@component.6">
          <port name="port" portNumber="80" node="//@interimmodels.0/@designmodel/@host.1/@node.1" namedport="//@interimmodels.0/@designmodel/@component.6/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="LocalServer">
        <node name="JEEContainer1" component="//@interimmodels.0/@designmodel/@component.3 //@interimmodels.0/@designmodel/@component.5">
          <port name="port" portNumber="80" namedport="//@interimmodels.0/@designmodel/@component.3/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15561" node="//@interimmodels.0/@designmodel/@host.2/@node.0" namedport="//@interimmodels.0/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15562" node="//@interimmodels.0/@designmodel/@host.2/@node.0" namedport="//@interimmodels.0/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15563" node="//@interimmodels.0/@designmodel/@host.2/@node.0" namedport="//@interimmodels.0/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15564" node="//@interimmodels.0/@designmodel/@host.2/@node.0" namedport="//@interimmodels.0/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15566" node="//@interimmodels.0/@designmodel/@host.2/@node.0" namedport="//@interimmodels.0/@designmodel/@component.3/@port.1"/>
          <port name="port" portNumber="81" node="//@interimmodels.0/@designmodel/@host.2/@node.0" namedport="//@interimmodels.0/@designmodel/@component.3/@port.1"/>
        </node>
        <node name="MySQL1" component="//@interimmodels.0/@designmodel/@component.4">
          <port name="port" portNumber="3306" node="//@interimmodels.0/@designmodel/@host.2/@node.1" namedport="//@interimmodels.0/@designmodel/@component.4/@port.0 //@interimmodels.0/@designmodel/@component.4/@port.1"/>
        </node>
      </host>
      <host name="BackOfficeServer">
        <node name="JEEContainer4" component="//@interimmodels.0/@designmodel/@component.7 //@interimmodels.0/@designmodel/@component.8">
          <port name="port" portNumber="80" node="//@interimmodels.0/@designmodel/@host.3/@node.0" namedport="//@interimmodels.0/@designmodel/@component.7/@port.0" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15571" node="//@interimmodels.0/@designmodel/@host.3/@node.0" namedport="//@interimmodels.0/@designmodel/@component.7/@port.0"/>
          <port name="port" portNumber="15572" node="//@interimmodels.0/@designmodel/@host.3/@node.0" namedport="//@interimmodels.0/@designmodel/@component.7/@port.0"/>
        </node>
        <node name="MySQL2" component="//@interimmodels.0/@designmodel/@component.9">
          <port name="port" portNumber="3306" node="//@interimmodels.0/@designmodel/@host.3/@node.1" namedport="//@interimmodels.0/@designmodel/@component.9/@port.0 //@interimmodels.0/@designmodel/@component.9/@port.1"/>
        </node>
      </host>
      <link name="link2" linkType="HTTPS" networkType="INTERNET" source="//@interimmodels.0/@designmodel/@host.0/@node.0/@port.1" target="//@interimmodels.0/@designmodel/@host.2/@node.0/@port.0"/>
      <link name="link3" source="//@interimmodels.0/@designmodel/@host.2/@node.0/@port.1"/>
      <link name="link4" source="//@interimmodels.0/@designmodel/@host.2/@node.0/@port.2"/>
      <link name="link5" target="//@interimmodels.0/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link7" networkType="INTERNET" source="//@interimmodels.0/@designmodel/@host.0/@node.0/@port.3"/>
      <link name="link9" source="//@interimmodels.0/@designmodel/@host.0/@node.0/@port.4" target="//@interimmodels.0/@designmodel/@host.0/@node.1/@port.0"/>
      <link name="link11" source="//@interimmodels.0/@designmodel/@host.3/@node.0/@port.1"/>
      <link name="link12" source="//@interimmodels.0/@designmodel/@host.3/@node.0/@port.2"/>
      <link name="link13" target="//@interimmodels.0/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link14" target="//@interimmodels.0/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link16" source="//@interimmodels.0/@designmodel/@host.2/@node.0/@port.5" target="//@interimmodels.0/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link15" networkType="INTERNET" source="//@interimmodels.0/@designmodel/@host.0/@node.0/@port.2" target="//@interimmodels.0/@designmodel/@host.2/@node.0/@port.6"/>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="1" description="setup database: orderwirelog" nextModel="//@interimmodels.2" isStable="true" name="setup-database">
    <designmodel name="inter1">
      <component name="ShopFrontend" type="client,broadcaster" deploymentnode="//@interimmodels.1/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface,LeastPriviledge">
        <port name="auth" role="//@interimmodels.1/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="checked"/>
        </port>
        <port name="browse" role="//@interimmodels.1/@designmodel/@connector.1/@role.0" type="request,OutboundPort">
          <events name="read"/>
        </port>
        <port name="order" role="//@interimmodels.1/@designmodel/@connector.9/@role.0" type="broadcast,OutboundPort">
          <events name="purchased"/>
        </port>
        <port name="shop" role="//@interimmodels.1/@designmodel/@connector.3/@role.0" type="request,OutboundPort">
          <events name="itemadded"/>
        </port>
      </component>
      <component name="CateloqueService" type="server" deploymentnode="//@interimmodels.1/@designmodel/@host.0/@node.1" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
        <port name="list" role="//@interimmodels.1/@designmodel/@connector.1/@role.1" type="response,InboundPort">
          <events name="query"/>
        </port>
      </component>
      <component name="UserService" type="server" deploymentnode="//@interimmodels.1/@designmodel/@host.1/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DefenseInDepth,DenialOfService">
        <port name="login" role="//@interimmodels.1/@designmodel/@connector.0/@role.1" type="response,InboundPort">
          <events name="signedon"/>
        </port>
      </component>
      <component name="OrdersService" type="client,server,listener,eventconsumer,readendpoint,datawriter,datareader" deploymentnode="//@interimmodels.1/@designmodel/@host.2/@node.0" criticalLevel="Low" securityCharacters="AttackSurface,LeastPriviledge,Compartmentalization,DenialOfService,DataTampering">
        <port name="postorder" role="//@interimmodels.1/@designmodel/@connector.4/@role.0 //@interimmodels.1/@designmodel/@connector.7/@role.0 //@interimmodels.1/@designmodel/@connector.9/@role.1 //@interimmodels.1/@designmodel/@connector.10/@role.0" type="request,listen,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="check" next="//@interimmodels.1/@designmodel/@component.3/@port.0/@events.1"/>
          <events name="save"/>
        </port>
        <port name="get" role="//@interimmodels.1/@designmodel/@connector.2/@role.1 //@interimmodels.1/@designmodel/@connector.8/@role.0" type="response,read,OutboundPort,InboundPort,EventProcessorPort">
          <events name="ack"/>
        </port>
      </component>
      <component name="OrdersDB" type="repository,datastore" deploymentnode="//@interimmodels.1/@designmodel/@host.2/@node.1">
        <port name="writeorder" role="//@interimmodels.1/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="orderwritten"/>
        </port>
        <port name="queryorder" role="//@interimmodels.1/@designmodel/@connector.8/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="orderreaded"/>
        </port>
      </component>
      <component name="CartsService" type="server" deploymentnode="//@interimmodels.1/@designmodel/@host.2/@node.0" securityCharacters="AttackSurface,DenialOfService,DataTampering">
        <port name="manage" role="//@interimmodels.1/@designmodel/@connector.3/@role.1" type="response,InboundPort">
          <events name="saveitem"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,datastore" deploymentnode="//@interimmodels.1/@designmodel/@host.1/@node.1" criticalLevel="High" securityCharacters="DefenseInDepth,Compartmentalization">
        <port name="pay" role="//@interimmodels.1/@designmodel/@connector.10/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="paid"/>
        </port>
      </component>
      <component name="ShippingService" type="server,datawriter" deploymentnode="//@interimmodels.1/@designmodel/@host.3/@node.0" securityCharacters="Compartmentalization">
        <port name="postshipping" role="//@interimmodels.1/@designmodel/@connector.4/@role.1 //@interimmodels.1/@designmodel/@connector.6/@role.0" type="response,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="posted"/>
        </port>
      </component>
      <component name="ShippingWorker" type="readendpoint,datareader" deploymentnode="//@interimmodels.1/@designmodel/@host.3/@node.0">
        <port name="listqueue" role="//@interimmodels.1/@designmodel/@connector.5/@role.0" type="read,OutboundPort,EventProcessorPort">
          <events name="renderqueue"/>
        </port>
      </component>
      <component name="QueueDB" type="repository,datastore" deploymentnode="//@interimmodels.1/@designmodel/@host.3/@node.1">
        <port name="writequeue" role="//@interimmodels.1/@designmodel/@connector.6/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="queuewritten"/>
        </port>
        <port name="readqueue" role="//@interimmodels.1/@designmodel/@connector.5/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="queuereaded"/>
        </port>
      </component>
      <component name="ShopBackend" type="client" deploymentnode="//@interimmodels.1/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface">
        <port name="listorder" role="//@interimmodels.1/@designmodel/@connector.2/@role.0" type="request,OutboundPort">
          <events name="renderlist"/>
        </port>
      </component>
      <component name="ShippinglogwireCommandLog" type="commanddb,datastore">
        <port name="logshippinglogwire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.3/@node.2"/>
      </component>
      <component name="OrderwireLog" type="eventlogger,datastore">
        <port name="logorderwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <connector name="userwire" type="CSConnector" connectortype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.1/@designmodel/@connector.0"/>
      </connector>
      <connector name="cateloquewire" type="CSConnector" connectortype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.1"/>
        <role name="responder" roletype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.1/@designmodel/@connector.1"/>
      </connector>
      <connector name="orderquerywire" type="CSConnector" connectortype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.2"/>
        <role name="responder" roletype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.1/@designmodel/@connector.8/@role.0" connector="//@interimmodels.1/@designmodel/@connector.2"/>
      </connector>
      <connector name="cartwire" type="CSConnector" connectortype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.3"/>
        <role name="responder" roletype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.1/@designmodel/@connector.3"/>
      </connector>
      <connector name="shippingwire" type="CSConnector" connectortype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.1/@designmodel/@connector.6/@role.0" connector="//@interimmodels.1/@designmodel/@connector.4"/>
      </connector>
      <connector name="queuereadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.5"/>
        <role name="readstorage" roletype="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.1/@designmodel/@connector.5"/>
      </connector>
      <connector name="shippinglogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.6"/>
        <role name="writestorage" roletype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.1/@designmodel/@connector.6"/>
      </connector>
      <connector name="orderlogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.1/@designmodel/@connector.10/@role.0" connector="//@interimmodels.1/@designmodel/@connector.7"/>
        <role name="writestorage" roletype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.1/@designmodel/@connector.7"/>
      </connector>
      <connector name="orderreadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.8"/>
        <role name="readstorage" roletype="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.1/@designmodel/@connector.8"/>
      </connector>
      <connector name="orderwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.9"/>
        <role name="subscriber" roletype="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.1/@designmodel/@connector.7/@role.0" connector="//@interimmodels.1/@designmodel/@connector.9"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="writer" nextRoleExpr="//@interimmodels.1/@designmodel/@connector.4/@role.0" connector="//@interimmodels.1/@designmodel/@connector.10"/>
        <role name="writestorage" roletype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="writestorage" connector="//@interimmodels.1/@designmodel/@connector.10"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.1/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.1/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.1/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.1/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.1/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.1/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.1/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.4" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
            <event name="Skip"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.1/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.1/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.1/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.1/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.1/@designmodel/@archstyle.4/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.1/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.1/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.1/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.1/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.1/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.1/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.1/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.1/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.1/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.1/@designmodel" counterExample="" visitedStates="15" verifyTime="0.0046164" testport="//@interimmodels.1/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!30 -> cartwire_req?30 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!30 -> cartwire_res?30" exprText="[]  (ShopFrontend.shop.itemadded -> &lt;> CartsService.manage.saveitem)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.1/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.0/@port.3/@events.0" nextExpr="//@interimmodels.1/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.1/@designmodel" counterExample="" visitedStates="65" verifyTime="0.005764" testport="//@interimmodels.1/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_publisher_process -> orderwire_pub!99 -> orderwire_pub?99 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!99 -> orderlogwire_req?99 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!99 -> orderlogwire_res?99 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_writer_request -> paywire_req!99 -> paywire_req?99 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!99 -> paywire_res?99 -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!99 -> shippingwire_req?99 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!99 -> shippinglogwire_req?99 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!99 -> shippinglogwire_res?99 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!99 -> shippingwire_res?99 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_subscriber_process" exprText="[]  (Payment.pay.paid -> &lt;> ShippingService.postshipping.posted)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.1/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.6/@port.0/@events.0" nextExpr="//@interimmodels.1/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.1/@designmodel" visitedStates="10" verifyTime="0.0051122" testport="//@interimmodels.1/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!64 -> cartwire_req?64 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!64 -> cartwire_res?64" exprText="[]  (OrdersService.postorder.save -> &lt;> Payment.pay.paid)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.1/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.3/@port.0/@events.1" nextExpr="//@interimmodels.1/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.1/@designmodel" counterExample="" visitedStates="15" verifyTime="0.0077516" testport="//@interimmodels.1/@designmodel/@component.0/@port.0" traceExample="init -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!25 -> userwire_req?25 -> UserService_userwire_responder_invoke -> UserService_login_signedon -> UserService_userwire_responder_process -> userwire_res!25 -> userwire_res?25" exprText="[]  (ShopFrontend.auth.checked -> &lt;> UserService.login.signedon)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.1/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.1/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.1/@designmodel" counterExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!62 -> cateloquewire_req?62 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!62 -> cateloquewire_res?62" visitedStates="24" verifyTime="0.006689499999999999" testport="//@interimmodels.1/@designmodel/@component.0/@port.1" traceExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!45 -> cateloquewire_req?45 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!45 -> cateloquewire_res?45" exprText="[]  (&lt;> ShopFrontend.browse.read -> &lt;> CateloqueService.list.query)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.1/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.1/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.0/@port.1/@events.0" operator="EVENTUALLY" nextExpr="//@interimmodels.1/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop6" model="//@interimmodels.1/@designmodel" counterExample="" visitedStates="29" verifyTime="0.0058251" testport="//@interimmodels.1/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!52 -> orderquerywire_req?52 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_reader_process -> orderreadwire_req!52 -> orderreadwire_req?52 -> OrdersDB_orderreadwire_readstorage_invoke -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstorage_process -> orderreadwire_res!52 -> orderreadwire_res?52 -> OrdersService_orderreadwire_reader_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!52 -> orderquerywire_res?52" exprText="[]  (ShopBackend.listorder.renderlist -> &lt;> OrdersDB.queryorder.orderreaded)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.1/@designmodel/@verifyProperty.5">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.10/@port.0/@events.0" nextExpr="//@interimmodels.1/@designmodel/@verifyProperty.5/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop7" model="//@interimmodels.1/@designmodel" counterExample="" visitedStates="60" verifyTime="0.0057531" testport="//@interimmodels.1/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_publisher_process -> orderwire_pub!79 -> orderwire_pub?79 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!79 -> orderlogwire_req?79 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!79 -> orderlogwire_res?79 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_writer_request -> paywire_req!79 -> paywire_req?79 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!79 -> paywire_res?79 -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!79 -> shippingwire_req?79 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!79 -> shippinglogwire_req?79 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!79 -> shippinglogwire_res?79 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!79 -> shippingwire_res?79 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_subscriber_process" exprText="[]  (ShopFrontend.order.purchased -> &lt;> OrdersService.postorder.save)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.1/@designmodel/@verifyProperty.6">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.3/@port.0/@events.1" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.1/@designmodel/@verifyProperty.6/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="CLOUD_PLATFORM">
        <node name="NodeJSContainer1" component="//@interimmodels.1/@designmodel/@component.0 //@interimmodels.1/@designmodel/@component.10">
          <port name="port" portNumber="15551" node="//@interimmodels.1/@designmodel/@host.0/@node.0" namedport="//@interimmodels.1/@designmodel/@component.0/@port.0"/>
          <port name="port" portNumber="15552" node="//@interimmodels.1/@designmodel/@host.0/@node.0" namedport="//@interimmodels.1/@designmodel/@component.0/@port.2"/>
          <port name="port" portNumber="15553" node="//@interimmodels.1/@designmodel/@host.0/@node.0" namedport="//@interimmodels.1/@designmodel/@component.10/@port.0"/>
          <port name="port" portNumber="15554" node="//@interimmodels.1/@designmodel/@host.0/@node.0" namedport="//@interimmodels.1/@designmodel/@component.0/@port.3"/>
          <port name="port" portNumber="15555" node="//@interimmodels.1/@designmodel/@host.0/@node.0" namedport="//@interimmodels.1/@designmodel/@component.0/@port.1"/>
        </node>
        <node name="GoContainer3" component="//@interimmodels.1/@designmodel/@component.1">
          <port name="port" portNumber="80" node="//@interimmodels.1/@designmodel/@host.0/@node.1" namedport="//@interimmodels.1/@designmodel/@component.1/@port.0" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="SecureServer">
        <node name="GoContainer1" component="//@interimmodels.1/@designmodel/@component.2">
          <port name="port" portNumber="80" node="//@interimmodels.1/@designmodel/@host.1/@node.0" namedport="//@interimmodels.1/@designmodel/@component.2/@port.0" hasFirewall="true"/>
        </node>
        <node name="GoContainer2" component="//@interimmodels.1/@designmodel/@component.6">
          <port name="port" portNumber="80" node="//@interimmodels.1/@designmodel/@host.1/@node.1" namedport="//@interimmodels.1/@designmodel/@component.6/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="LocalServer">
        <node name="JEEContainer1" component="//@interimmodels.1/@designmodel/@component.3 //@interimmodels.1/@designmodel/@component.5">
          <port name="port" portNumber="80" namedport="//@interimmodels.1/@designmodel/@component.3/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15561" node="//@interimmodels.1/@designmodel/@host.2/@node.0" namedport="//@interimmodels.1/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15562" node="//@interimmodels.1/@designmodel/@host.2/@node.0" namedport="//@interimmodels.1/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15563" node="//@interimmodels.1/@designmodel/@host.2/@node.0" namedport="//@interimmodels.1/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15564" node="//@interimmodels.1/@designmodel/@host.2/@node.0" namedport="//@interimmodels.1/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15566" node="//@interimmodels.1/@designmodel/@host.2/@node.0" namedport="//@interimmodels.1/@designmodel/@component.3/@port.1"/>
          <port name="port" portNumber="81" node="//@interimmodels.1/@designmodel/@host.2/@node.0" namedport="//@interimmodels.1/@designmodel/@component.3/@port.1"/>
        </node>
        <node name="MySQL1" component="//@interimmodels.1/@designmodel/@component.4">
          <port name="port" portNumber="3306" node="//@interimmodels.1/@designmodel/@host.2/@node.1" namedport="//@interimmodels.1/@designmodel/@component.4/@port.0 //@interimmodels.1/@designmodel/@component.4/@port.1"/>
        </node>
      </host>
      <host name="BackOfficeServer">
        <node name="JEEContainer4" component="//@interimmodels.1/@designmodel/@component.7 //@interimmodels.1/@designmodel/@component.8">
          <port name="port" portNumber="80" node="//@interimmodels.1/@designmodel/@host.3/@node.0" namedport="//@interimmodels.1/@designmodel/@component.7/@port.0" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15571" node="//@interimmodels.1/@designmodel/@host.3/@node.0" namedport="//@interimmodels.1/@designmodel/@component.7/@port.0"/>
          <port name="port" portNumber="15572" node="//@interimmodels.1/@designmodel/@host.3/@node.0" namedport="//@interimmodels.1/@designmodel/@component.7/@port.0"/>
        </node>
        <node name="MySQL2" component="//@interimmodels.1/@designmodel/@component.9">
          <port name="port" portNumber="3306" node="//@interimmodels.1/@designmodel/@host.3/@node.1" namedport="//@interimmodels.1/@designmodel/@component.9/@port.0 //@interimmodels.1/@designmodel/@component.9/@port.1"/>
        </node>
      </host>
      <link name="link2" linkType="HTTPS" networkType="INTERNET" source="//@interimmodels.1/@designmodel/@host.0/@node.0/@port.1" target="//@interimmodels.1/@designmodel/@host.2/@node.0/@port.0"/>
      <link name="link3" source="//@interimmodels.1/@designmodel/@host.2/@node.0/@port.1"/>
      <link name="link4" source="//@interimmodels.1/@designmodel/@host.2/@node.0/@port.2"/>
      <link name="link5" target="//@interimmodels.1/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link7" networkType="INTERNET" source="//@interimmodels.1/@designmodel/@host.0/@node.0/@port.3"/>
      <link name="link9" source="//@interimmodels.1/@designmodel/@host.0/@node.0/@port.4" target="//@interimmodels.1/@designmodel/@host.0/@node.1/@port.0"/>
      <link name="link11" source="//@interimmodels.1/@designmodel/@host.3/@node.0/@port.1"/>
      <link name="link12" source="//@interimmodels.1/@designmodel/@host.3/@node.0/@port.2"/>
      <link name="link13" target="//@interimmodels.1/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link14" target="//@interimmodels.1/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link16" source="//@interimmodels.1/@designmodel/@host.2/@node.0/@port.5" target="//@interimmodels.1/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link15" networkType="INTERNET" source="//@interimmodels.1/@designmodel/@host.0/@node.0/@port.2" target="//@interimmodels.1/@designmodel/@host.2/@node.0/@port.6"/>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="2" description="setup database: paymentblockchain" nextModel="//@interimmodels.3" isStable="true" name="setup-database">
    <designmodel name="inter2">
      <component name="ShopFrontend" type="client,broadcaster" deploymentnode="//@interimmodels.2/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface,LeastPriviledge">
        <port name="auth" role="//@interimmodels.2/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="checked"/>
        </port>
        <port name="browse" role="//@interimmodels.2/@designmodel/@connector.1/@role.0" type="request,OutboundPort">
          <events name="read"/>
        </port>
        <port name="order" role="//@interimmodels.2/@designmodel/@connector.9/@role.0" type="broadcast,OutboundPort">
          <events name="purchased"/>
        </port>
        <port name="shop" role="//@interimmodels.2/@designmodel/@connector.3/@role.0" type="request,OutboundPort">
          <events name="itemadded"/>
        </port>
      </component>
      <component name="CateloqueService" type="server" deploymentnode="//@interimmodels.2/@designmodel/@host.0/@node.1" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
        <port name="list" role="//@interimmodels.2/@designmodel/@connector.1/@role.1" type="response,InboundPort">
          <events name="query"/>
        </port>
      </component>
      <component name="UserService" type="server" deploymentnode="//@interimmodels.2/@designmodel/@host.1/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DefenseInDepth,DenialOfService">
        <port name="login" role="//@interimmodels.2/@designmodel/@connector.0/@role.1" type="response,InboundPort">
          <events name="signedon"/>
        </port>
      </component>
      <component name="OrdersService" type="client,server,listener,eventconsumer,readendpoint,datawriter,datareader" deploymentnode="//@interimmodels.2/@designmodel/@host.2/@node.0" criticalLevel="Low" securityCharacters="AttackSurface,LeastPriviledge,Compartmentalization,DenialOfService,DataTampering">
        <port name="postorder" role="//@interimmodels.2/@designmodel/@connector.4/@role.0 //@interimmodels.2/@designmodel/@connector.7/@role.0 //@interimmodels.2/@designmodel/@connector.9/@role.1 //@interimmodels.2/@designmodel/@connector.10/@role.0" type="request,listen,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="check" next="//@interimmodels.2/@designmodel/@component.3/@port.0/@events.1"/>
          <events name="save"/>
        </port>
        <port name="get" role="//@interimmodels.2/@designmodel/@connector.2/@role.1 //@interimmodels.2/@designmodel/@connector.8/@role.0" type="response,read,OutboundPort,InboundPort,EventProcessorPort">
          <events name="ack"/>
        </port>
      </component>
      <component name="OrdersDB" type="repository,datastore" deploymentnode="//@interimmodels.2/@designmodel/@host.2/@node.1">
        <port name="writeorder" role="//@interimmodels.2/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="orderwritten"/>
        </port>
        <port name="queryorder" role="//@interimmodels.2/@designmodel/@connector.8/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="orderreaded"/>
        </port>
      </component>
      <component name="CartsService" type="server" deploymentnode="//@interimmodels.2/@designmodel/@host.2/@node.0" securityCharacters="AttackSurface,DenialOfService,DataTampering">
        <port name="manage" role="//@interimmodels.2/@designmodel/@connector.3/@role.1" type="response,InboundPort">
          <events name="saveitem"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,datastore" deploymentnode="//@interimmodels.2/@designmodel/@host.1/@node.1" criticalLevel="High" securityCharacters="DefenseInDepth,Compartmentalization">
        <port name="pay" role="//@interimmodels.2/@designmodel/@connector.10/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="paid"/>
        </port>
      </component>
      <component name="ShippingService" type="server,datawriter" deploymentnode="//@interimmodels.2/@designmodel/@host.3/@node.0" securityCharacters="Compartmentalization">
        <port name="postshipping" role="//@interimmodels.2/@designmodel/@connector.4/@role.1 //@interimmodels.2/@designmodel/@connector.6/@role.0" type="response,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="posted"/>
        </port>
      </component>
      <component name="ShippingWorker" type="readendpoint,datareader" deploymentnode="//@interimmodels.2/@designmodel/@host.3/@node.0">
        <port name="listqueue" role="//@interimmodels.2/@designmodel/@connector.5/@role.0" type="read,OutboundPort,EventProcessorPort">
          <events name="renderqueue"/>
        </port>
      </component>
      <component name="QueueDB" type="repository,datastore" deploymentnode="//@interimmodels.2/@designmodel/@host.3/@node.1">
        <port name="writequeue" role="//@interimmodels.2/@designmodel/@connector.6/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="queuewritten"/>
        </port>
        <port name="readqueue" role="//@interimmodels.2/@designmodel/@connector.5/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="queuereaded"/>
        </port>
      </component>
      <component name="ShopBackend" type="client" deploymentnode="//@interimmodels.2/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface">
        <port name="listorder" role="//@interimmodels.2/@designmodel/@connector.2/@role.0" type="request,OutboundPort">
          <events name="renderlist"/>
        </port>
      </component>
      <component name="ShippinglogwireCommandLog" type="commanddb,datastore">
        <port name="logshippinglogwire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.3/@node.2"/>
      </component>
      <component name="OrderwireLog" type="eventlogger,datastore">
        <port name="logorderwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="append" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <deploymentnode href="target.arch#//@host.4/@node.0"/>
      </component>
      <connector name="userwire" type="CSConnector" connectortype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.2/@designmodel/@connector.0"/>
      </connector>
      <connector name="cateloquewire" type="CSConnector" connectortype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.1"/>
        <role name="responder" roletype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.2/@designmodel/@connector.1"/>
      </connector>
      <connector name="orderquerywire" type="CSConnector" connectortype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.2"/>
        <role name="responder" roletype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.2/@designmodel/@connector.8/@role.0" connector="//@interimmodels.2/@designmodel/@connector.2"/>
      </connector>
      <connector name="cartwire" type="CSConnector" connectortype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.3"/>
        <role name="responder" roletype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.2/@designmodel/@connector.3"/>
      </connector>
      <connector name="shippingwire" type="CSConnector" connectortype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.2/@designmodel/@connector.6/@role.0" connector="//@interimmodels.2/@designmodel/@connector.4"/>
      </connector>
      <connector name="queuereadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.5"/>
        <role name="readstorage" roletype="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.2/@designmodel/@connector.5"/>
      </connector>
      <connector name="shippinglogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.6"/>
        <role name="writestorage" roletype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.2/@designmodel/@connector.6"/>
      </connector>
      <connector name="orderlogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.2/@designmodel/@connector.10/@role.0" connector="//@interimmodels.2/@designmodel/@connector.7"/>
        <role name="writestorage" roletype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.2/@designmodel/@connector.7"/>
      </connector>
      <connector name="orderreadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.8"/>
        <role name="readstorage" roletype="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.2/@designmodel/@connector.8"/>
      </connector>
      <connector name="orderwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.9"/>
        <role name="subscriber" roletype="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.2/@designmodel/@connector.7/@role.0" connector="//@interimmodels.2/@designmodel/@connector.9"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="writer" nextRoleExpr="//@interimmodels.2/@designmodel/@connector.4/@role.0" connector="//@interimmodels.2/@designmodel/@connector.10"/>
        <role name="writestorage" roletype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="writestorage" connector="//@interimmodels.2/@designmodel/@connector.10"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.2/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.2/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.2/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.2/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.2/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.2/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.2/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.4" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
            <event name="Skip"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.2/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.2/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.2/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.2/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.2/@designmodel/@archstyle.4/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.2/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.2/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.2/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.2/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.2/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.2/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.2/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.2/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.2/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.2/@designmodel" counterExample="" visitedStates="15" verifyTime="0.0051987" testport="//@interimmodels.2/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!78 -> cartwire_req?78 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!78 -> cartwire_res?78" exprText="[]  (ShopFrontend.shop.itemadded -> &lt;> CartsService.manage.saveitem)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.2/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.0/@port.3/@events.0" nextExpr="//@interimmodels.2/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.2/@designmodel" counterExample="" visitedStates="65" verifyTime="0.0084713" testport="//@interimmodels.2/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_publisher_process -> orderwire_pub!11 -> orderwire_pub?11 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!11 -> orderlogwire_req?11 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!11 -> orderlogwire_res?11 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_writer_request -> paywire_req!11 -> paywire_req?11 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!11 -> paywire_res?11 -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!11 -> shippingwire_req?11 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!11 -> shippinglogwire_req?11 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!11 -> shippinglogwire_res?11 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!11 -> shippingwire_res?11 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_subscriber_process" exprText="[]  (Payment.pay.paid -> &lt;> ShippingService.postshipping.posted)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.2/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.6/@port.0/@events.0" nextExpr="//@interimmodels.2/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.2/@designmodel" visitedStates="10" verifyTime="0.0068629" testport="//@interimmodels.2/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!47 -> cartwire_req?47 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!47 -> cartwire_res?47" exprText="[]  (OrdersService.postorder.save -> &lt;> Payment.pay.paid)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.2/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.3/@port.0/@events.1" nextExpr="//@interimmodels.2/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.2/@designmodel" counterExample="" visitedStates="15" verifyTime="0.0065362" testport="//@interimmodels.2/@designmodel/@component.0/@port.0" traceExample="init -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!76 -> userwire_req?76 -> UserService_userwire_responder_invoke -> UserService_login_signedon -> UserService_userwire_responder_process -> userwire_res!76 -> userwire_res?76" exprText="[]  (ShopFrontend.auth.checked -> &lt;> UserService.login.signedon)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.2/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.2/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.2/@designmodel" counterExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!62 -> cateloquewire_req?62 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!62 -> cateloquewire_res?62" visitedStates="24" verifyTime="0.0057965" testport="//@interimmodels.2/@designmodel/@component.0/@port.1" traceExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!16 -> cateloquewire_req?16 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!16 -> cateloquewire_res?16" exprText="[]  (&lt;> ShopFrontend.browse.read -> &lt;> CateloqueService.list.query)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.2/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.1/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.0/@port.1/@events.0" operator="EVENTUALLY" nextExpr="//@interimmodels.2/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop6" model="//@interimmodels.2/@designmodel" counterExample="" visitedStates="29" verifyTime="0.0055444" testport="//@interimmodels.2/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!88 -> orderquerywire_req?88 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_reader_process -> orderreadwire_req!88 -> orderreadwire_req?88 -> OrdersDB_orderreadwire_readstorage_invoke -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstorage_process -> orderreadwire_res!88 -> orderreadwire_res?88 -> OrdersService_orderreadwire_reader_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!88 -> orderquerywire_res?88" exprText="[]  (ShopBackend.listorder.renderlist -> &lt;> OrdersDB.queryorder.orderreaded)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.2/@designmodel/@verifyProperty.5">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.10/@port.0/@events.0" nextExpr="//@interimmodels.2/@designmodel/@verifyProperty.5/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop7" model="//@interimmodels.2/@designmodel" counterExample="" visitedStates="60" verifyTime="0.009068399999999999" testport="//@interimmodels.2/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_publisher_process -> orderwire_pub!40 -> orderwire_pub?40 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!40 -> orderlogwire_req?40 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!40 -> orderlogwire_res?40 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_writer_request -> paywire_req!40 -> paywire_req?40 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!40 -> paywire_res?40 -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!40 -> shippingwire_req?40 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!40 -> shippinglogwire_req?40 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!40 -> shippinglogwire_res?40 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!40 -> shippingwire_res?40 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_subscriber_process" exprText="[]  (ShopFrontend.order.purchased -> &lt;> OrdersService.postorder.save)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.2/@designmodel/@verifyProperty.6">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.3/@port.0/@events.1" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.2/@designmodel/@verifyProperty.6/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="CLOUD_PLATFORM">
        <node name="NodeJSContainer1" component="//@interimmodels.2/@designmodel/@component.0 //@interimmodels.2/@designmodel/@component.10">
          <port name="port" portNumber="15551" node="//@interimmodels.2/@designmodel/@host.0/@node.0" namedport="//@interimmodels.2/@designmodel/@component.0/@port.0"/>
          <port name="port" portNumber="15552" node="//@interimmodels.2/@designmodel/@host.0/@node.0" namedport="//@interimmodels.2/@designmodel/@component.0/@port.2"/>
          <port name="port" portNumber="15553" node="//@interimmodels.2/@designmodel/@host.0/@node.0" namedport="//@interimmodels.2/@designmodel/@component.10/@port.0"/>
          <port name="port" portNumber="15554" node="//@interimmodels.2/@designmodel/@host.0/@node.0" namedport="//@interimmodels.2/@designmodel/@component.0/@port.3"/>
          <port name="port" portNumber="15555" node="//@interimmodels.2/@designmodel/@host.0/@node.0" namedport="//@interimmodels.2/@designmodel/@component.0/@port.1"/>
        </node>
        <node name="GoContainer3" component="//@interimmodels.2/@designmodel/@component.1">
          <port name="port" portNumber="80" node="//@interimmodels.2/@designmodel/@host.0/@node.1" namedport="//@interimmodels.2/@designmodel/@component.1/@port.0" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="SecureServer">
        <node name="GoContainer1" component="//@interimmodels.2/@designmodel/@component.2">
          <port name="port" portNumber="80" node="//@interimmodels.2/@designmodel/@host.1/@node.0" namedport="//@interimmodels.2/@designmodel/@component.2/@port.0" hasFirewall="true"/>
        </node>
        <node name="GoContainer2" component="//@interimmodels.2/@designmodel/@component.6">
          <port name="port" portNumber="80" node="//@interimmodels.2/@designmodel/@host.1/@node.1" namedport="//@interimmodels.2/@designmodel/@component.6/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="LocalServer">
        <node name="JEEContainer1" component="//@interimmodels.2/@designmodel/@component.3 //@interimmodels.2/@designmodel/@component.5">
          <port name="port" portNumber="80" namedport="//@interimmodels.2/@designmodel/@component.3/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15561" node="//@interimmodels.2/@designmodel/@host.2/@node.0" namedport="//@interimmodels.2/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15562" node="//@interimmodels.2/@designmodel/@host.2/@node.0" namedport="//@interimmodels.2/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15563" node="//@interimmodels.2/@designmodel/@host.2/@node.0" namedport="//@interimmodels.2/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15564" node="//@interimmodels.2/@designmodel/@host.2/@node.0" namedport="//@interimmodels.2/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15566" node="//@interimmodels.2/@designmodel/@host.2/@node.0" namedport="//@interimmodels.2/@designmodel/@component.3/@port.1"/>
          <port name="port" portNumber="81" node="//@interimmodels.2/@designmodel/@host.2/@node.0" namedport="//@interimmodels.2/@designmodel/@component.3/@port.1"/>
        </node>
        <node name="MySQL1" component="//@interimmodels.2/@designmodel/@component.4">
          <port name="port" portNumber="3306" node="//@interimmodels.2/@designmodel/@host.2/@node.1" namedport="//@interimmodels.2/@designmodel/@component.4/@port.0 //@interimmodels.2/@designmodel/@component.4/@port.1"/>
        </node>
      </host>
      <host name="BackOfficeServer">
        <node name="JEEContainer4" component="//@interimmodels.2/@designmodel/@component.7 //@interimmodels.2/@designmodel/@component.8">
          <port name="port" portNumber="80" node="//@interimmodels.2/@designmodel/@host.3/@node.0" namedport="//@interimmodels.2/@designmodel/@component.7/@port.0" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15571" node="//@interimmodels.2/@designmodel/@host.3/@node.0" namedport="//@interimmodels.2/@designmodel/@component.7/@port.0"/>
          <port name="port" portNumber="15572" node="//@interimmodels.2/@designmodel/@host.3/@node.0" namedport="//@interimmodels.2/@designmodel/@component.7/@port.0"/>
        </node>
        <node name="MySQL2" component="//@interimmodels.2/@designmodel/@component.9">
          <port name="port" portNumber="3306" node="//@interimmodels.2/@designmodel/@host.3/@node.1" namedport="//@interimmodels.2/@designmodel/@component.9/@port.0 //@interimmodels.2/@designmodel/@component.9/@port.1"/>
        </node>
      </host>
      <link name="link2" linkType="HTTPS" networkType="INTERNET" source="//@interimmodels.2/@designmodel/@host.0/@node.0/@port.1" target="//@interimmodels.2/@designmodel/@host.2/@node.0/@port.0"/>
      <link name="link3" source="//@interimmodels.2/@designmodel/@host.2/@node.0/@port.1"/>
      <link name="link4" source="//@interimmodels.2/@designmodel/@host.2/@node.0/@port.2"/>
      <link name="link5" target="//@interimmodels.2/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link7" networkType="INTERNET" source="//@interimmodels.2/@designmodel/@host.0/@node.0/@port.3"/>
      <link name="link9" source="//@interimmodels.2/@designmodel/@host.0/@node.0/@port.4" target="//@interimmodels.2/@designmodel/@host.0/@node.1/@port.0"/>
      <link name="link11" source="//@interimmodels.2/@designmodel/@host.3/@node.0/@port.1"/>
      <link name="link12" source="//@interimmodels.2/@designmodel/@host.3/@node.0/@port.2"/>
      <link name="link13" target="//@interimmodels.2/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link14" target="//@interimmodels.2/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link16" source="//@interimmodels.2/@designmodel/@host.2/@node.0/@port.5" target="//@interimmodels.2/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link15" networkType="INTERNET" source="//@interimmodels.2/@designmodel/@host.0/@node.0/@port.2" target="//@interimmodels.2/@designmodel/@host.2/@node.0/@port.6"/>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="3" description="setup database: orderlogwirecommandlog" nextModel="//@interimmodels.4" isStable="true" name="setup-database">
    <designmodel name="inter3">
      <component name="ShopFrontend" type="client,broadcaster" deploymentnode="//@interimmodels.3/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface,LeastPriviledge">
        <port name="auth" role="//@interimmodels.3/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="checked"/>
        </port>
        <port name="browse" role="//@interimmodels.3/@designmodel/@connector.1/@role.0" type="request,OutboundPort">
          <events name="read"/>
        </port>
        <port name="order" role="//@interimmodels.3/@designmodel/@connector.9/@role.0" type="broadcast,OutboundPort">
          <events name="purchased"/>
        </port>
        <port name="shop" role="//@interimmodels.3/@designmodel/@connector.3/@role.0" type="request,OutboundPort">
          <events name="itemadded"/>
        </port>
      </component>
      <component name="CateloqueService" type="server" deploymentnode="//@interimmodels.3/@designmodel/@host.0/@node.1" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
        <port name="list" role="//@interimmodels.3/@designmodel/@connector.1/@role.1" type="response,InboundPort">
          <events name="query"/>
        </port>
      </component>
      <component name="UserService" type="server" deploymentnode="//@interimmodels.3/@designmodel/@host.1/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DefenseInDepth,DenialOfService">
        <port name="login" role="//@interimmodels.3/@designmodel/@connector.0/@role.1" type="response,InboundPort">
          <events name="signedon"/>
        </port>
      </component>
      <component name="OrdersService" type="client,server,listener,eventconsumer,readendpoint,datawriter,datareader" deploymentnode="//@interimmodels.3/@designmodel/@host.2/@node.0" criticalLevel="Low" securityCharacters="AttackSurface,LeastPriviledge,Compartmentalization,DenialOfService,DataTampering">
        <port name="postorder" role="//@interimmodels.3/@designmodel/@connector.4/@role.0 //@interimmodels.3/@designmodel/@connector.7/@role.0 //@interimmodels.3/@designmodel/@connector.9/@role.1 //@interimmodels.3/@designmodel/@connector.10/@role.0" type="request,listen,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="check" next="//@interimmodels.3/@designmodel/@component.3/@port.0/@events.1"/>
          <events name="save"/>
        </port>
        <port name="get" role="//@interimmodels.3/@designmodel/@connector.2/@role.1 //@interimmodels.3/@designmodel/@connector.8/@role.0" type="response,read,OutboundPort,InboundPort,EventProcessorPort">
          <events name="ack"/>
        </port>
      </component>
      <component name="OrdersDB" type="repository,datastore" deploymentnode="//@interimmodels.3/@designmodel/@host.2/@node.1">
        <port name="writeorder" role="//@interimmodels.3/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="orderwritten"/>
        </port>
        <port name="queryorder" role="//@interimmodels.3/@designmodel/@connector.8/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="orderreaded"/>
        </port>
      </component>
      <component name="CartsService" type="server" deploymentnode="//@interimmodels.3/@designmodel/@host.2/@node.0" securityCharacters="AttackSurface,DenialOfService,DataTampering">
        <port name="manage" role="//@interimmodels.3/@designmodel/@connector.3/@role.1" type="response,InboundPort">
          <events name="saveitem"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,datastore" deploymentnode="//@interimmodels.3/@designmodel/@host.1/@node.1" criticalLevel="High" securityCharacters="DefenseInDepth,Compartmentalization">
        <port name="pay" role="//@interimmodels.3/@designmodel/@connector.10/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="paid"/>
        </port>
      </component>
      <component name="ShippingService" type="server,datawriter" deploymentnode="//@interimmodels.3/@designmodel/@host.3/@node.0" securityCharacters="Compartmentalization">
        <port name="postshipping" role="//@interimmodels.3/@designmodel/@connector.4/@role.1 //@interimmodels.3/@designmodel/@connector.6/@role.0" type="response,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="posted"/>
        </port>
      </component>
      <component name="ShippingWorker" type="readendpoint,datareader" deploymentnode="//@interimmodels.3/@designmodel/@host.3/@node.0">
        <port name="listqueue" role="//@interimmodels.3/@designmodel/@connector.5/@role.0" type="read,OutboundPort,EventProcessorPort">
          <events name="renderqueue"/>
        </port>
      </component>
      <component name="QueueDB" type="repository,datastore" deploymentnode="//@interimmodels.3/@designmodel/@host.3/@node.1">
        <port name="writequeue" role="//@interimmodels.3/@designmodel/@connector.6/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="queuewritten"/>
        </port>
        <port name="readqueue" role="//@interimmodels.3/@designmodel/@connector.5/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="queuereaded"/>
        </port>
      </component>
      <component name="ShopBackend" type="client" deploymentnode="//@interimmodels.3/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface">
        <port name="listorder" role="//@interimmodels.3/@designmodel/@connector.2/@role.0" type="request,OutboundPort">
          <events name="renderlist"/>
        </port>
      </component>
      <component name="ShippinglogwireCommandLog" type="commanddb,datastore">
        <port name="logshippinglogwire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.3/@node.2"/>
      </component>
      <component name="OrderwireLog" type="eventlogger,datastore">
        <port name="logorderwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="append" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <deploymentnode href="target.arch#//@host.4/@node.0"/>
      </component>
      <component name="OrderlogwireCommandLog" type="commanddb,datastore">
        <port name="logorderlogwire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <connector name="userwire" type="CSConnector" connectortype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.3/@designmodel/@connector.0"/>
      </connector>
      <connector name="cateloquewire" type="CSConnector" connectortype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.1"/>
        <role name="responder" roletype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.3/@designmodel/@connector.1"/>
      </connector>
      <connector name="orderquerywire" type="CSConnector" connectortype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.2"/>
        <role name="responder" roletype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.3/@designmodel/@connector.8/@role.0" connector="//@interimmodels.3/@designmodel/@connector.2"/>
      </connector>
      <connector name="cartwire" type="CSConnector" connectortype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.3"/>
        <role name="responder" roletype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.3/@designmodel/@connector.3"/>
      </connector>
      <connector name="shippingwire" type="CSConnector" connectortype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.3/@designmodel/@connector.6/@role.0" connector="//@interimmodels.3/@designmodel/@connector.4"/>
      </connector>
      <connector name="queuereadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.5"/>
        <role name="readstorage" roletype="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.3/@designmodel/@connector.5"/>
      </connector>
      <connector name="shippinglogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.6"/>
        <role name="writestorage" roletype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.3/@designmodel/@connector.6"/>
      </connector>
      <connector name="orderlogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.3/@designmodel/@connector.10/@role.0" connector="//@interimmodels.3/@designmodel/@connector.7"/>
        <role name="writestorage" roletype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.3/@designmodel/@connector.7"/>
      </connector>
      <connector name="orderreadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.8"/>
        <role name="readstorage" roletype="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.3/@designmodel/@connector.8"/>
      </connector>
      <connector name="orderwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.9"/>
        <role name="subscriber" roletype="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.3/@designmodel/@connector.7/@role.0" connector="//@interimmodels.3/@designmodel/@connector.9"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="writer" nextRoleExpr="//@interimmodels.3/@designmodel/@connector.4/@role.0" connector="//@interimmodels.3/@designmodel/@connector.10"/>
        <role name="writestorage" roletype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="writestorage" connector="//@interimmodels.3/@designmodel/@connector.10"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.3/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.3/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.3/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.3/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.3/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.3/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.3/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.4" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
            <event name="Skip"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.3/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.3/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.3/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.3/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.3/@designmodel/@archstyle.4/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.3/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.3/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.3/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.3/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.3/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.3/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.3/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.3/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.3/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.3/@designmodel" counterExample="" visitedStates="15" verifyTime="0.0061867" testport="//@interimmodels.3/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!54 -> cartwire_req?54 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!54 -> cartwire_res?54" exprText="[]  (ShopFrontend.shop.itemadded -> &lt;> CartsService.manage.saveitem)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.3/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.0/@port.3/@events.0" nextExpr="//@interimmodels.3/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.3/@designmodel" counterExample="" visitedStates="65" verifyTime="0.0061389999999999995" testport="//@interimmodels.3/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_publisher_process -> orderwire_pub!86 -> orderwire_pub?86 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!86 -> orderlogwire_req?86 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!86 -> orderlogwire_res?86 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_writer_request -> paywire_req!86 -> paywire_req?86 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!86 -> paywire_res?86 -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!86 -> shippingwire_req?86 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!86 -> shippinglogwire_req?86 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!86 -> shippinglogwire_res?86 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!86 -> shippingwire_res?86 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_subscriber_process" exprText="[]  (Payment.pay.paid -> &lt;> ShippingService.postshipping.posted)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.3/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.6/@port.0/@events.0" nextExpr="//@interimmodels.3/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.3/@designmodel" visitedStates="10" verifyTime="0.005192" testport="//@interimmodels.3/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!51 -> cartwire_req?51 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!51 -> cartwire_res?51" exprText="[]  (OrdersService.postorder.save -> &lt;> Payment.pay.paid)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.3/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.3/@port.0/@events.1" nextExpr="//@interimmodels.3/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.3/@designmodel" counterExample="" visitedStates="15" verifyTime="0.008634" testport="//@interimmodels.3/@designmodel/@component.0/@port.0" traceExample="init -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!69 -> userwire_req?69 -> UserService_userwire_responder_invoke -> UserService_login_signedon -> UserService_userwire_responder_process -> userwire_res!69 -> userwire_res?69" exprText="[]  (ShopFrontend.auth.checked -> &lt;> UserService.login.signedon)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.3/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.3/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.3/@designmodel" counterExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!62 -> cateloquewire_req?62 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!62 -> cateloquewire_res?62" visitedStates="24" verifyTime="0.0057767" testport="//@interimmodels.3/@designmodel/@component.0/@port.1" traceExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!51 -> cateloquewire_req?51 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!51 -> cateloquewire_res?51" exprText="[]  (&lt;> ShopFrontend.browse.read -> &lt;> CateloqueService.list.query)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.3/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.1/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.0/@port.1/@events.0" operator="EVENTUALLY" nextExpr="//@interimmodels.3/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop6" model="//@interimmodels.3/@designmodel" counterExample="" visitedStates="29" verifyTime="0.0065217999999999995" testport="//@interimmodels.3/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!94 -> orderquerywire_req?94 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_reader_process -> orderreadwire_req!94 -> orderreadwire_req?94 -> OrdersDB_orderreadwire_readstorage_invoke -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstorage_process -> orderreadwire_res!94 -> orderreadwire_res?94 -> OrdersService_orderreadwire_reader_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!94 -> orderquerywire_res?94" exprText="[]  (ShopBackend.listorder.renderlist -> &lt;> OrdersDB.queryorder.orderreaded)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.3/@designmodel/@verifyProperty.5">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.10/@port.0/@events.0" nextExpr="//@interimmodels.3/@designmodel/@verifyProperty.5/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop7" model="//@interimmodels.3/@designmodel" counterExample="" visitedStates="60" verifyTime="0.0060761999999999995" testport="//@interimmodels.3/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_publisher_process -> orderwire_pub!66 -> orderwire_pub?66 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!66 -> orderlogwire_req?66 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!66 -> orderlogwire_res?66 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_writer_request -> paywire_req!66 -> paywire_req?66 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!66 -> paywire_res?66 -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!66 -> shippingwire_req?66 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!66 -> shippinglogwire_req?66 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!66 -> shippinglogwire_res?66 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!66 -> shippingwire_res?66 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_subscriber_process" exprText="[]  (ShopFrontend.order.purchased -> &lt;> OrdersService.postorder.save)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.3/@designmodel/@verifyProperty.6">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.3/@port.0/@events.1" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.3/@designmodel/@verifyProperty.6/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="CLOUD_PLATFORM">
        <node name="NodeJSContainer1" component="//@interimmodels.3/@designmodel/@component.0 //@interimmodels.3/@designmodel/@component.10">
          <port name="port" portNumber="15551" node="//@interimmodels.3/@designmodel/@host.0/@node.0" namedport="//@interimmodels.3/@designmodel/@component.0/@port.0"/>
          <port name="port" portNumber="15552" node="//@interimmodels.3/@designmodel/@host.0/@node.0" namedport="//@interimmodels.3/@designmodel/@component.0/@port.2"/>
          <port name="port" portNumber="15553" node="//@interimmodels.3/@designmodel/@host.0/@node.0" namedport="//@interimmodels.3/@designmodel/@component.10/@port.0"/>
          <port name="port" portNumber="15554" node="//@interimmodels.3/@designmodel/@host.0/@node.0" namedport="//@interimmodels.3/@designmodel/@component.0/@port.3"/>
          <port name="port" portNumber="15555" node="//@interimmodels.3/@designmodel/@host.0/@node.0" namedport="//@interimmodels.3/@designmodel/@component.0/@port.1"/>
        </node>
        <node name="GoContainer3" component="//@interimmodels.3/@designmodel/@component.1">
          <port name="port" portNumber="80" node="//@interimmodels.3/@designmodel/@host.0/@node.1" namedport="//@interimmodels.3/@designmodel/@component.1/@port.0" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="SecureServer">
        <node name="GoContainer1" component="//@interimmodels.3/@designmodel/@component.2">
          <port name="port" portNumber="80" node="//@interimmodels.3/@designmodel/@host.1/@node.0" namedport="//@interimmodels.3/@designmodel/@component.2/@port.0" hasFirewall="true"/>
        </node>
        <node name="GoContainer2" component="//@interimmodels.3/@designmodel/@component.6">
          <port name="port" portNumber="80" node="//@interimmodels.3/@designmodel/@host.1/@node.1" namedport="//@interimmodels.3/@designmodel/@component.6/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="LocalServer">
        <node name="JEEContainer1" component="//@interimmodels.3/@designmodel/@component.3 //@interimmodels.3/@designmodel/@component.5">
          <port name="port" portNumber="80" namedport="//@interimmodels.3/@designmodel/@component.3/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15561" node="//@interimmodels.3/@designmodel/@host.2/@node.0" namedport="//@interimmodels.3/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15562" node="//@interimmodels.3/@designmodel/@host.2/@node.0" namedport="//@interimmodels.3/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15563" node="//@interimmodels.3/@designmodel/@host.2/@node.0" namedport="//@interimmodels.3/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15564" node="//@interimmodels.3/@designmodel/@host.2/@node.0" namedport="//@interimmodels.3/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15566" node="//@interimmodels.3/@designmodel/@host.2/@node.0" namedport="//@interimmodels.3/@designmodel/@component.3/@port.1"/>
          <port name="port" portNumber="81" node="//@interimmodels.3/@designmodel/@host.2/@node.0" namedport="//@interimmodels.3/@designmodel/@component.3/@port.1"/>
        </node>
        <node name="MySQL1" component="//@interimmodels.3/@designmodel/@component.4">
          <port name="port" portNumber="3306" node="//@interimmodels.3/@designmodel/@host.2/@node.1" namedport="//@interimmodels.3/@designmodel/@component.4/@port.0 //@interimmodels.3/@designmodel/@component.4/@port.1"/>
        </node>
      </host>
      <host name="BackOfficeServer">
        <node name="JEEContainer4" component="//@interimmodels.3/@designmodel/@component.7 //@interimmodels.3/@designmodel/@component.8">
          <port name="port" portNumber="80" node="//@interimmodels.3/@designmodel/@host.3/@node.0" namedport="//@interimmodels.3/@designmodel/@component.7/@port.0" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15571" node="//@interimmodels.3/@designmodel/@host.3/@node.0" namedport="//@interimmodels.3/@designmodel/@component.7/@port.0"/>
          <port name="port" portNumber="15572" node="//@interimmodels.3/@designmodel/@host.3/@node.0" namedport="//@interimmodels.3/@designmodel/@component.7/@port.0"/>
        </node>
        <node name="MySQL2" component="//@interimmodels.3/@designmodel/@component.9">
          <port name="port" portNumber="3306" node="//@interimmodels.3/@designmodel/@host.3/@node.1" namedport="//@interimmodels.3/@designmodel/@component.9/@port.0 //@interimmodels.3/@designmodel/@component.9/@port.1"/>
        </node>
      </host>
      <link name="link2" linkType="HTTPS" networkType="INTERNET" source="//@interimmodels.3/@designmodel/@host.0/@node.0/@port.1" target="//@interimmodels.3/@designmodel/@host.2/@node.0/@port.0"/>
      <link name="link3" source="//@interimmodels.3/@designmodel/@host.2/@node.0/@port.1"/>
      <link name="link4" source="//@interimmodels.3/@designmodel/@host.2/@node.0/@port.2"/>
      <link name="link5" target="//@interimmodels.3/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link7" networkType="INTERNET" source="//@interimmodels.3/@designmodel/@host.0/@node.0/@port.3"/>
      <link name="link9" source="//@interimmodels.3/@designmodel/@host.0/@node.0/@port.4" target="//@interimmodels.3/@designmodel/@host.0/@node.1/@port.0"/>
      <link name="link11" source="//@interimmodels.3/@designmodel/@host.3/@node.0/@port.1"/>
      <link name="link12" source="//@interimmodels.3/@designmodel/@host.3/@node.0/@port.2"/>
      <link name="link13" target="//@interimmodels.3/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link14" target="//@interimmodels.3/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link16" source="//@interimmodels.3/@designmodel/@host.2/@node.0/@port.5" target="//@interimmodels.3/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link15" networkType="INTERNET" source="//@interimmodels.3/@designmodel/@host.0/@node.0/@port.2" target="//@interimmodels.3/@designmodel/@host.2/@node.0/@port.6"/>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="4" description="network route for connector:orderwire between: shopfrontend orderwirelog " nextModel="//@interimmodels.5" name="network-route">
    <designmodel name="inter4">
      <component name="ShopFrontend" type="client,broadcaster" deploymentnode="//@interimmodels.4/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface,LeastPriviledge">
        <port name="auth" role="//@interimmodels.4/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="checked"/>
        </port>
        <port name="browse" role="//@interimmodels.4/@designmodel/@connector.1/@role.0" type="request,OutboundPort">
          <events name="read"/>
        </port>
        <port name="order" role="//@interimmodels.4/@designmodel/@connector.9/@role.0" type="broadcast,OutboundPort">
          <events name="purchased"/>
        </port>
        <port name="shop" role="//@interimmodels.4/@designmodel/@connector.3/@role.0" type="request,OutboundPort">
          <events name="itemadded"/>
        </port>
      </component>
      <component name="CateloqueService" type="server" deploymentnode="//@interimmodels.4/@designmodel/@host.0/@node.1" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
        <port name="list" role="//@interimmodels.4/@designmodel/@connector.1/@role.1" type="response,InboundPort">
          <events name="query"/>
        </port>
      </component>
      <component name="UserService" type="server" deploymentnode="//@interimmodels.4/@designmodel/@host.1/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DefenseInDepth,DenialOfService">
        <port name="login" role="//@interimmodels.4/@designmodel/@connector.0/@role.1" type="response,InboundPort">
          <events name="signedon"/>
        </port>
      </component>
      <component name="OrdersService" type="client,server,listener,eventconsumer,readendpoint,datawriter,datareader" deploymentnode="//@interimmodels.4/@designmodel/@host.2/@node.0" criticalLevel="Low" securityCharacters="AttackSurface,LeastPriviledge,Compartmentalization,DenialOfService,DataTampering">
        <port name="postorder" role="//@interimmodels.4/@designmodel/@connector.4/@role.0 //@interimmodels.4/@designmodel/@connector.7/@role.0 //@interimmodels.4/@designmodel/@connector.10/@role.0" type="request,listen,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="check" next="//@interimmodels.4/@designmodel/@component.3/@port.0/@events.1"/>
          <events name="save"/>
        </port>
        <port name="get" role="//@interimmodels.4/@designmodel/@connector.2/@role.1 //@interimmodels.4/@designmodel/@connector.8/@role.0" type="response,read,OutboundPort,InboundPort,EventProcessorPort">
          <events name="ack"/>
        </port>
      </component>
      <component name="OrdersDB" type="repository,datastore" deploymentnode="//@interimmodels.4/@designmodel/@host.2/@node.1">
        <port name="writeorder" role="//@interimmodels.4/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="orderwritten"/>
        </port>
        <port name="queryorder" role="//@interimmodels.4/@designmodel/@connector.8/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="orderreaded"/>
        </port>
      </component>
      <component name="CartsService" type="server" deploymentnode="//@interimmodels.4/@designmodel/@host.2/@node.0" securityCharacters="AttackSurface,DenialOfService,DataTampering">
        <port name="manage" role="//@interimmodels.4/@designmodel/@connector.3/@role.1" type="response,InboundPort">
          <events name="saveitem"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,datastore" deploymentnode="//@interimmodels.4/@designmodel/@host.1/@node.1" criticalLevel="High" securityCharacters="DefenseInDepth,Compartmentalization">
        <port name="pay" role="//@interimmodels.4/@designmodel/@connector.10/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="paid"/>
        </port>
      </component>
      <component name="ShippingService" type="server,datawriter" deploymentnode="//@interimmodels.4/@designmodel/@host.3/@node.0" securityCharacters="Compartmentalization">
        <port name="postshipping" role="//@interimmodels.4/@designmodel/@connector.4/@role.1 //@interimmodels.4/@designmodel/@connector.6/@role.0" type="response,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="posted"/>
        </port>
      </component>
      <component name="ShippingWorker" type="readendpoint,datareader" deploymentnode="//@interimmodels.4/@designmodel/@host.3/@node.0">
        <port name="listqueue" role="//@interimmodels.4/@designmodel/@connector.5/@role.0" type="read,OutboundPort,EventProcessorPort">
          <events name="renderqueue"/>
        </port>
      </component>
      <component name="QueueDB" type="repository,datastore" deploymentnode="//@interimmodels.4/@designmodel/@host.3/@node.1">
        <port name="writequeue" role="//@interimmodels.4/@designmodel/@connector.6/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="queuewritten"/>
        </port>
        <port name="readqueue" role="//@interimmodels.4/@designmodel/@connector.5/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="queuereaded"/>
        </port>
      </component>
      <component name="ShopBackend" type="client" deploymentnode="//@interimmodels.4/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface">
        <port name="listorder" role="//@interimmodels.4/@designmodel/@connector.2/@role.0" type="request,OutboundPort">
          <events name="renderlist"/>
        </port>
      </component>
      <component name="ShippinglogwireCommandLog" type="commanddb,datastore">
        <port name="logshippinglogwire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.3/@node.2"/>
      </component>
      <component name="OrderwireLog" type="eventlogger,datastore">
        <port name="logorderwire" role="//@interimmodels.4/@designmodel/@connector.9/@role.2" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="append" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <deploymentnode href="target.arch#//@host.4/@node.0"/>
      </component>
      <component name="OrderlogwireCommandLog" type="commanddb,datastore">
        <port name="logorderlogwire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <connector name="userwire" type="CSConnector" connectortype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.4/@designmodel/@connector.0"/>
      </connector>
      <connector name="cateloquewire" type="CSConnector" connectortype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.1"/>
        <role name="responder" roletype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.4/@designmodel/@connector.1"/>
      </connector>
      <connector name="orderquerywire" type="CSConnector" connectortype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.2"/>
        <role name="responder" roletype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.4/@designmodel/@connector.8/@role.0" connector="//@interimmodels.4/@designmodel/@connector.2"/>
      </connector>
      <connector name="cartwire" type="CSConnector" connectortype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.3"/>
        <role name="responder" roletype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.4/@designmodel/@connector.3"/>
      </connector>
      <connector name="shippingwire" type="CSConnector" connectortype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.4/@designmodel/@connector.6/@role.0" connector="//@interimmodels.4/@designmodel/@connector.4"/>
      </connector>
      <connector name="queuereadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.5"/>
        <role name="readstorage" roletype="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.4/@designmodel/@connector.5"/>
      </connector>
      <connector name="shippinglogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.6"/>
        <role name="writestorage" roletype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.4/@designmodel/@connector.6"/>
      </connector>
      <connector name="orderlogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.4/@designmodel/@connector.10/@role.0" connector="//@interimmodels.4/@designmodel/@connector.7"/>
        <role name="writestorage" roletype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.4/@designmodel/@connector.7"/>
      </connector>
      <connector name="orderreadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.8"/>
        <role name="readstorage" roletype="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.4/@designmodel/@connector.8"/>
      </connector>
      <connector name="orderwire" type="ESConnector" connectortype="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.4/@designmodel/@archstyle.1/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.9"/>
        <role name="eventsubscriber" roletype="//@interimmodels.4/@designmodel/@archstyle.1/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.4/@designmodel/@connector.7/@role.0" connector="//@interimmodels.4/@designmodel/@connector.9"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.9"/>
        </role>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="writer" nextRoleExpr="//@interimmodels.4/@designmodel/@connector.4/@role.0" connector="//@interimmodels.4/@designmodel/@connector.10"/>
        <role name="writestorage" roletype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="writestorage" connector="//@interimmodels.4/@designmodel/@connector.10"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.4/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.4/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.4/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.4/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.4/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.4/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.4/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.4/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.4/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.4" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
            <event name="Skip"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.4/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.4/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.4/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.4/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.4/@designmodel/@archstyle.4/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.4/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.4/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.4/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.4/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.4/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.4/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.4/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.4/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.4/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.4/@designmodel" counterExample="" visitedStates="1175" verifyTime="0.0324795" testport="//@interimmodels.4/@designmodel/@component.0/@port.3" traceExample="init -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!33 -> orderlogwire_req?33 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!33 -> orderlogwire_res?33 -> OrdersService_paywire_writer_request -> paywire_req!33 -> paywire_req?33 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!33 -> paywire_res?33 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!33 -> shippingwire_req?33 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!33 -> shippinglogwire_req?33 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!33 -> shippinglogwire_res?33 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!33 -> shippingwire_res?33 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_writer_process -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!15 -> cartwire_req?15 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!15 -> cartwire_res?15" exprText="[]  (ShopFrontend.shop.itemadded -> &lt;> CartsService.manage.saveitem)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.4/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.0/@port.3/@events.0" nextExpr="//@interimmodels.4/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.4/@designmodel" counterExample="" visitedStates="1938" verifyTime="0.0505831" testport="//@interimmodels.4/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!69 -> orderlogwire_req?69 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!69 -> orderlogwire_res?69 -> OrdersService_paywire_writer_request -> paywire_req!69 -> paywire_req?69 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!69 -> paywire_res?69 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!69 -> shippingwire_req?69 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!69 -> shippinglogwire_req?69 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!69 -> shippinglogwire_res?69 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!69 -> shippingwire_res?69 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_writer_process -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!30 -> orderwire_pevt?30 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!30 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?30 -> orderwire_bevt!30 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (Payment.pay.paid -> &lt;> ShippingService.postshipping.posted)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.4/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.6/@port.0/@events.0" nextExpr="//@interimmodels.4/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.4/@designmodel" valid="false" counterExample="init -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!98 -> orderlogwire_req?98 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!98 -> orderlogwire_res?98 -> OrdersService_paywire_writer_request -> paywire_req!98 -> paywire_req?98 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!98 -> paywire_res?98 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!98 -> shippingwire_req?98 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!98 -> shippinglogwire_req?98 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!98 -> shippinglogwire_res?98 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!98 -> shippingwire_res?98 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_writer_process -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!28 -> cartwire_req?28 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!28 -> cartwire_res?28" visitedStates="518" verifyTime="0.019197799999999998" testport="//@interimmodels.4/@designmodel/@component.0/@port.3" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter4() |= ![](OrdersService_postorder_save->&lt;" exprText="[]  (OrdersService.postorder.save -> &lt;> Payment.pay.paid)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.4/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.3/@port.0/@events.1" nextExpr="//@interimmodels.4/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.4/@designmodel" counterExample="" visitedStates="1175" verifyTime="0.034028499999999996" testport="//@interimmodels.4/@designmodel/@component.0/@port.0" traceExample="init -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!86 -> orderlogwire_req?86 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!86 -> orderlogwire_res?86 -> OrdersService_paywire_writer_request -> paywire_req!86 -> paywire_req?86 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!86 -> paywire_res?86 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!86 -> shippingwire_req?86 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!86 -> shippinglogwire_req?86 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!86 -> shippinglogwire_res?86 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!86 -> shippingwire_res?86 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_writer_process -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!76 -> userwire_req?76 -> UserService_userwire_responder_invoke -> UserService_login_signedon -> UserService_userwire_responder_process -> userwire_res!76 -> userwire_res?76" exprText="[]  (ShopFrontend.auth.checked -> &lt;> UserService.login.signedon)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.4/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.4/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.4/@designmodel" counterExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!62 -> cateloquewire_req?62 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!62 -> cateloquewire_res?62" visitedStates="1904" verifyTime="0.0482028" testport="//@interimmodels.4/@designmodel/@component.0/@port.1" traceExample="init -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!17 -> orderlogwire_req?17 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!17 -> orderlogwire_res?17 -> OrdersService_paywire_writer_request -> paywire_req!17 -> paywire_req?17 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!17 -> paywire_res?17 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!17 -> shippingwire_req?17 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!17 -> shippinglogwire_req?17 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!17 -> shippinglogwire_res?17 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!17 -> shippingwire_res?17 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_writer_process -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!72 -> cateloquewire_req?72 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!72 -> cateloquewire_res?72" exprText="[]  (&lt;> ShopFrontend.browse.read -> &lt;> CateloqueService.list.query)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.4/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.1/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.0/@port.1/@events.0" operator="EVENTUALLY" nextExpr="//@interimmodels.4/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop6" model="//@interimmodels.4/@designmodel" counterExample="" visitedStates="2309" verifyTime="0.0545262" testport="//@interimmodels.4/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!28 -> orderquerywire_req?28 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_reader_process -> orderreadwire_req!28 -> orderreadwire_req?28 -> OrdersDB_orderreadwire_readstorage_invoke -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstorage_process -> orderreadwire_res!28 -> orderreadwire_res?28 -> OrdersService_orderreadwire_reader_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!28 -> orderquerywire_res?28 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!90 -> orderlogwire_req?90 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!90 -> orderlogwire_res?90 -> OrdersService_paywire_writer_request -> paywire_req!90 -> paywire_req?90 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!90 -> paywire_res?90 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!90 -> shippingwire_req?90 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!90 -> shippinglogwire_req?90 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!90 -> shippinglogwire_res?90 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!90 -> shippingwire_res?90 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_writer_process" exprText="[]  (ShopBackend.listorder.renderlist -> &lt;> OrdersDB.queryorder.orderreaded)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.4/@designmodel/@verifyProperty.5">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.10/@port.0/@events.0" nextExpr="//@interimmodels.4/@designmodel/@verifyProperty.5/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop7" model="//@interimmodels.4/@designmodel" valid="false" counterExample="init -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!50 -> orderlogwire_req?50 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!50 -> orderlogwire_res?50 -> OrdersService_paywire_writer_request -> paywire_req!50 -> paywire_req?50 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!50 -> paywire_res?50 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!50 -> shippingwire_req?50 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!50 -> shippinglogwire_req?50 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!50 -> shippinglogwire_res?50 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!50 -> shippingwire_res?50 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_writer_process -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!65 -> orderwire_pevt?65 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!65 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?65 -> orderwire_bevt!65 -> ShopFrontend_orderwire_eventpublisher_broadcast" visitedStates="150" verifyTime="0.012783" testport="//@interimmodels.4/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!50 -> orderlogwire_req?50 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!50 -> orderlogwire_res?50 -> OrdersService_paywire_writer_request -> paywire_req!50 -> paywire_req?50 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!50 -> paywire_res?50 -> OrdersService_postorder_check -> ShopFrontend_order_purchased -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!50 -> shippingwire_req?50 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!50 -> shippinglogwire_req?50 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!50 -> shippinglogwire_res?50 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!50 -> shippingwire_res?50 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_writer_process -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!65 -> orderwire_pevt?65 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!65 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?65 -> orderwire_bevt!65 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (ShopFrontend.order.purchased -> &lt;> OrdersService.postorder.save)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.4/@designmodel/@verifyProperty.6">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.3/@port.0/@events.1" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.4/@designmodel/@verifyProperty.6/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-orderwire" visitedStates="2108" verifyTime="0.051718" testport="//@interimmodels.4/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!30 -> orderlogwire_req?30 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!30 -> orderlogwire_res?30 -> OrdersService_paywire_writer_request -> paywire_req!30 -> paywire_req?30 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!30 -> paywire_res?30 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!30 -> shippingwire_req?30 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!30 -> shippinglogwire_req?30 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!30 -> shippinglogwire_res?30 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!30 -> shippingwire_res?30 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_writer_process -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!81 -> orderwire_pevt?81 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!81 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?81 -> orderwire_bevt!81 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (ShopFrontend.order.purchased-> &lt;> OrderwireLog.orderwire.eventstore.persist)">
        <connector href="target.arch#//@connector.9"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="CLOUD_PLATFORM">
        <node name="NodeJSContainer1" component="//@interimmodels.4/@designmodel/@component.0 //@interimmodels.4/@designmodel/@component.10">
          <port name="port" portNumber="15551" node="//@interimmodels.4/@designmodel/@host.0/@node.0" namedport="//@interimmodels.4/@designmodel/@component.0/@port.0"/>
          <port name="port" portNumber="15552" node="//@interimmodels.4/@designmodel/@host.0/@node.0" namedport="//@interimmodels.4/@designmodel/@component.0/@port.2"/>
          <port name="port" portNumber="15553" node="//@interimmodels.4/@designmodel/@host.0/@node.0" namedport="//@interimmodels.4/@designmodel/@component.10/@port.0"/>
          <port name="port" portNumber="15554" node="//@interimmodels.4/@designmodel/@host.0/@node.0" namedport="//@interimmodels.4/@designmodel/@component.0/@port.3"/>
          <port name="port" portNumber="15555" node="//@interimmodels.4/@designmodel/@host.0/@node.0" namedport="//@interimmodels.4/@designmodel/@component.0/@port.1"/>
        </node>
        <node name="GoContainer3" component="//@interimmodels.4/@designmodel/@component.1">
          <port name="port" portNumber="80" node="//@interimmodels.4/@designmodel/@host.0/@node.1" namedport="//@interimmodels.4/@designmodel/@component.1/@port.0" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="SecureServer">
        <node name="GoContainer1" component="//@interimmodels.4/@designmodel/@component.2">
          <port name="port" portNumber="80" node="//@interimmodels.4/@designmodel/@host.1/@node.0" namedport="//@interimmodels.4/@designmodel/@component.2/@port.0" hasFirewall="true"/>
        </node>
        <node name="GoContainer2" component="//@interimmodels.4/@designmodel/@component.6">
          <port name="port" portNumber="80" node="//@interimmodels.4/@designmodel/@host.1/@node.1" namedport="//@interimmodels.4/@designmodel/@component.6/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="LocalServer">
        <node name="JEEContainer1" component="//@interimmodels.4/@designmodel/@component.3 //@interimmodels.4/@designmodel/@component.5">
          <port name="port" portNumber="80" namedport="//@interimmodels.4/@designmodel/@component.3/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15561" node="//@interimmodels.4/@designmodel/@host.2/@node.0" namedport="//@interimmodels.4/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15562" node="//@interimmodels.4/@designmodel/@host.2/@node.0" namedport="//@interimmodels.4/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15563" node="//@interimmodels.4/@designmodel/@host.2/@node.0" namedport="//@interimmodels.4/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15564" node="//@interimmodels.4/@designmodel/@host.2/@node.0" namedport="//@interimmodels.4/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15566" node="//@interimmodels.4/@designmodel/@host.2/@node.0" namedport="//@interimmodels.4/@designmodel/@component.3/@port.1"/>
          <port name="port" portNumber="81" node="//@interimmodels.4/@designmodel/@host.2/@node.0" namedport="//@interimmodels.4/@designmodel/@component.3/@port.1"/>
        </node>
        <node name="MySQL1" component="//@interimmodels.4/@designmodel/@component.4">
          <port name="port" portNumber="3306" node="//@interimmodels.4/@designmodel/@host.2/@node.1" namedport="//@interimmodels.4/@designmodel/@component.4/@port.0 //@interimmodels.4/@designmodel/@component.4/@port.1"/>
        </node>
      </host>
      <host name="BackOfficeServer">
        <node name="JEEContainer4" component="//@interimmodels.4/@designmodel/@component.7 //@interimmodels.4/@designmodel/@component.8">
          <port name="port" portNumber="80" node="//@interimmodels.4/@designmodel/@host.3/@node.0" namedport="//@interimmodels.4/@designmodel/@component.7/@port.0" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15571" node="//@interimmodels.4/@designmodel/@host.3/@node.0" namedport="//@interimmodels.4/@designmodel/@component.7/@port.0"/>
          <port name="port" portNumber="15572" node="//@interimmodels.4/@designmodel/@host.3/@node.0" namedport="//@interimmodels.4/@designmodel/@component.7/@port.0"/>
        </node>
        <node name="MySQL2" component="//@interimmodels.4/@designmodel/@component.9">
          <port name="port" portNumber="3306" node="//@interimmodels.4/@designmodel/@host.3/@node.1" namedport="//@interimmodels.4/@designmodel/@component.9/@port.0 //@interimmodels.4/@designmodel/@component.9/@port.1"/>
        </node>
      </host>
      <link name="link2" linkType="HTTPS" networkType="INTERNET" source="//@interimmodels.4/@designmodel/@host.0/@node.0/@port.1" target="//@interimmodels.4/@designmodel/@host.2/@node.0/@port.0"/>
      <link name="link3" source="//@interimmodels.4/@designmodel/@host.2/@node.0/@port.1"/>
      <link name="link4" source="//@interimmodels.4/@designmodel/@host.2/@node.0/@port.2"/>
      <link name="link5" target="//@interimmodels.4/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link7" networkType="INTERNET" source="//@interimmodels.4/@designmodel/@host.0/@node.0/@port.3"/>
      <link name="link9" source="//@interimmodels.4/@designmodel/@host.0/@node.0/@port.4" target="//@interimmodels.4/@designmodel/@host.0/@node.1/@port.0"/>
      <link name="link11" source="//@interimmodels.4/@designmodel/@host.3/@node.0/@port.1"/>
      <link name="link12" source="//@interimmodels.4/@designmodel/@host.3/@node.0/@port.2"/>
      <link name="link13" target="//@interimmodels.4/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link14" target="//@interimmodels.4/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link16" source="//@interimmodels.4/@designmodel/@host.2/@node.0/@port.5" target="//@interimmodels.4/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link15" networkType="INTERNET" source="//@interimmodels.4/@designmodel/@host.0/@node.0/@port.2" target="//@interimmodels.4/@designmodel/@host.2/@node.0/@port.6"/>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="5" description="network route for connector:oraclepaywire between: payment paymentblockchain " nextModel="//@interimmodels.6" name="network-route">
    <designmodel name="inter5">
      <component name="ShopFrontend" type="client,broadcaster" deploymentnode="//@interimmodels.5/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface,LeastPriviledge">
        <port name="auth" role="//@interimmodels.5/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="checked"/>
        </port>
        <port name="browse" role="//@interimmodels.5/@designmodel/@connector.1/@role.0" type="request,OutboundPort">
          <events name="read"/>
        </port>
        <port name="order" role="//@interimmodels.5/@designmodel/@connector.9/@role.0" type="broadcast,OutboundPort">
          <events name="purchased"/>
        </port>
        <port name="shop" role="//@interimmodels.5/@designmodel/@connector.3/@role.0" type="request,OutboundPort">
          <events name="itemadded"/>
        </port>
      </component>
      <component name="CateloqueService" type="server" deploymentnode="//@interimmodels.5/@designmodel/@host.0/@node.1" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
        <port name="list" role="//@interimmodels.5/@designmodel/@connector.1/@role.1" type="response,InboundPort">
          <events name="query"/>
        </port>
      </component>
      <component name="UserService" type="server" deploymentnode="//@interimmodels.5/@designmodel/@host.1/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DefenseInDepth,DenialOfService">
        <port name="login" role="//@interimmodels.5/@designmodel/@connector.0/@role.1" type="response,InboundPort">
          <events name="signedon"/>
        </port>
      </component>
      <component name="OrdersService" type="client,server,listener,eventconsumer,readendpoint,datawriter,datareader" deploymentnode="//@interimmodels.5/@designmodel/@host.2/@node.0" criticalLevel="Low" securityCharacters="AttackSurface,LeastPriviledge,Compartmentalization,DenialOfService,DataTampering">
        <port name="postorder" role="//@interimmodels.5/@designmodel/@connector.4/@role.0 //@interimmodels.5/@designmodel/@connector.7/@role.0 //@interimmodels.5/@designmodel/@connector.10/@role.0" type="request,listen,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="check" next="//@interimmodels.5/@designmodel/@component.3/@port.0/@events.1"/>
          <events name="save"/>
        </port>
        <port name="get" role="//@interimmodels.5/@designmodel/@connector.2/@role.1 //@interimmodels.5/@designmodel/@connector.8/@role.0" type="response,read,OutboundPort,InboundPort,EventProcessorPort">
          <events name="ack"/>
        </port>
      </component>
      <component name="OrdersDB" type="repository,datastore" deploymentnode="//@interimmodels.5/@designmodel/@host.2/@node.1">
        <port name="writeorder" role="//@interimmodels.5/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="orderwritten"/>
        </port>
        <port name="queryorder" role="//@interimmodels.5/@designmodel/@connector.8/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="orderreaded"/>
        </port>
      </component>
      <component name="CartsService" type="server" deploymentnode="//@interimmodels.5/@designmodel/@host.2/@node.0" securityCharacters="AttackSurface,DenialOfService,DataTampering">
        <port name="manage" role="//@interimmodels.5/@designmodel/@connector.3/@role.1" type="response,InboundPort">
          <events name="saveitem"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,datastore" deploymentnode="//@interimmodels.5/@designmodel/@host.1/@node.1" criticalLevel="High" securityCharacters="DefenseInDepth,Compartmentalization">
        <port name="pay" role="//@interimmodels.5/@designmodel/@connector.10/@role.1 //@interimmodels.5/@designmodel/@connector.11/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="paid"/>
        </port>
      </component>
      <component name="ShippingService" type="server,datawriter" deploymentnode="//@interimmodels.5/@designmodel/@host.3/@node.0" securityCharacters="Compartmentalization">
        <port name="postshipping" role="//@interimmodels.5/@designmodel/@connector.4/@role.1 //@interimmodels.5/@designmodel/@connector.6/@role.0" type="response,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="posted"/>
        </port>
      </component>
      <component name="ShippingWorker" type="readendpoint,datareader" deploymentnode="//@interimmodels.5/@designmodel/@host.3/@node.0">
        <port name="listqueue" role="//@interimmodels.5/@designmodel/@connector.5/@role.0" type="read,OutboundPort,EventProcessorPort">
          <events name="renderqueue"/>
        </port>
      </component>
      <component name="QueueDB" type="repository,datastore" deploymentnode="//@interimmodels.5/@designmodel/@host.3/@node.1">
        <port name="writequeue" role="//@interimmodels.5/@designmodel/@connector.6/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="queuewritten"/>
        </port>
        <port name="readqueue" role="//@interimmodels.5/@designmodel/@connector.5/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="queuereaded"/>
        </port>
      </component>
      <component name="ShopBackend" type="client" deploymentnode="//@interimmodels.5/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface">
        <port name="listorder" role="//@interimmodels.5/@designmodel/@connector.2/@role.0" type="request,OutboundPort">
          <events name="renderlist"/>
        </port>
      </component>
      <component name="ShippinglogwireCommandLog" type="commanddb,datastore">
        <port name="logshippinglogwire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.3/@node.2"/>
      </component>
      <component name="OrderwireLog" type="eventlogger,datastore">
        <port name="logorderwire" role="//@interimmodels.5/@designmodel/@connector.9/@role.2" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="append" role="//@interimmodels.5/@designmodel/@connector.11/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <deploymentnode href="target.arch#//@host.4/@node.0"/>
      </component>
      <component name="OrderlogwireCommandLog" type="commanddb,datastore">
        <port name="logorderlogwire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <connector name="userwire" type="CSConnector" connectortype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.5/@designmodel/@connector.0"/>
      </connector>
      <connector name="cateloquewire" type="CSConnector" connectortype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.1"/>
        <role name="responder" roletype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.5/@designmodel/@connector.1"/>
      </connector>
      <connector name="orderquerywire" type="CSConnector" connectortype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.2"/>
        <role name="responder" roletype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.5/@designmodel/@connector.8/@role.0" connector="//@interimmodels.5/@designmodel/@connector.2"/>
      </connector>
      <connector name="cartwire" type="CSConnector" connectortype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.3"/>
        <role name="responder" roletype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.5/@designmodel/@connector.3"/>
      </connector>
      <connector name="shippingwire" type="CSConnector" connectortype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.5/@designmodel/@connector.6/@role.0" connector="//@interimmodels.5/@designmodel/@connector.4"/>
      </connector>
      <connector name="queuereadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.5"/>
        <role name="readstorage" roletype="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.5/@designmodel/@connector.5"/>
      </connector>
      <connector name="shippinglogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.6"/>
        <role name="writestorage" roletype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.5/@designmodel/@connector.6"/>
      </connector>
      <connector name="orderlogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.5/@designmodel/@connector.10/@role.0" connector="//@interimmodels.5/@designmodel/@connector.7"/>
        <role name="writestorage" roletype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.5/@designmodel/@connector.7"/>
      </connector>
      <connector name="orderreadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.8"/>
        <role name="readstorage" roletype="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.5/@designmodel/@connector.8"/>
      </connector>
      <connector name="orderwire" type="ESConnector" connectortype="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.5/@designmodel/@archstyle.1/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.9"/>
        <role name="eventsubscriber" roletype="//@interimmodels.5/@designmodel/@archstyle.1/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.5/@designmodel/@connector.7/@role.0" connector="//@interimmodels.5/@designmodel/@connector.9"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.9"/>
        </role>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="writer" nextRoleExpr="//@interimmodels.5/@designmodel/@connector.4/@role.0" connector="//@interimmodels.5/@designmodel/@connector.10"/>
        <role name="writestorage" roletype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="writestorage" connector="//@interimmodels.5/@designmodel/@connector.10"/>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.5/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.5/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.5/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.5/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.5/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.5/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.5/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.5/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.5/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.5/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.5/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.4" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
            <event name="Skip"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.5/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.5/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.5/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.5/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.5/@designmodel/@archstyle.4/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.5/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.5/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.5/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.5/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.5/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.5/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.5/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.5/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.5/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.5/@designmodel" counterExample="" visitedStates="1175" verifyTime="0.047464099999999995" testport="//@interimmodels.5/@designmodel/@component.0/@port.3" traceExample="init -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!54 -> orderlogwire_req?54 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!54 -> orderlogwire_res?54 -> OrdersService_paywire_writer_request -> paywire_req!54 -> paywire_req?54 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!54 -> paywire_res?54 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!54 -> shippingwire_req?54 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!54 -> shippinglogwire_req?54 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!54 -> shippinglogwire_res?54 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!54 -> shippingwire_res?54 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_writer_process -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!59 -> cartwire_req?59 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!59 -> cartwire_res?59" exprText="[]  (ShopFrontend.shop.itemadded -> &lt;> CartsService.manage.saveitem)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.5/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.0/@port.3/@events.0" nextExpr="//@interimmodels.5/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.5/@designmodel" counterExample="" visitedStates="1938" verifyTime="0.060808999999999995" testport="//@interimmodels.5/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!98 -> orderlogwire_req?98 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!98 -> orderlogwire_res?98 -> OrdersService_paywire_writer_request -> paywire_req!98 -> paywire_req?98 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!98 -> paywire_res?98 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!98 -> shippingwire_req?98 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!98 -> shippinglogwire_req?98 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!98 -> shippinglogwire_res?98 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!98 -> shippingwire_res?98 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_writer_process -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!91 -> orderwire_pevt?91 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!91 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?91 -> orderwire_bevt!91 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (Payment.pay.paid -> &lt;> ShippingService.postshipping.posted)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.5/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.6/@port.0/@events.0" nextExpr="//@interimmodels.5/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.5/@designmodel" valid="false" counterExample="init -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!55 -> orderlogwire_req?55 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!55 -> orderlogwire_res?55 -> OrdersService_paywire_writer_request -> paywire_req!55 -> paywire_req?55 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!55 -> paywire_res?55 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!55 -> shippingwire_req?55 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!55 -> shippinglogwire_req?55 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!55 -> shippinglogwire_res?55 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!55 -> shippingwire_res?55 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_writer_process -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!43 -> cartwire_req?43 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!43 -> cartwire_res?43" visitedStates="518" verifyTime="0.025240099999999998" testport="//@interimmodels.5/@designmodel/@component.0/@port.3" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter5() |= ![](OrdersService_postorder_save->&lt;" exprText="[]  (OrdersService.postorder.save -> &lt;> Payment.pay.paid)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.5/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.3/@port.0/@events.1" nextExpr="//@interimmodels.5/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.5/@designmodel" counterExample="" visitedStates="1175" verifyTime="0.0415563" testport="//@interimmodels.5/@designmodel/@component.0/@port.0" traceExample="init -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!38 -> orderlogwire_req?38 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!38 -> orderlogwire_res?38 -> OrdersService_paywire_writer_request -> paywire_req!38 -> paywire_req?38 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!38 -> paywire_res?38 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!38 -> shippingwire_req?38 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!38 -> shippinglogwire_req?38 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!38 -> shippinglogwire_res?38 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!38 -> shippingwire_res?38 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_writer_process -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!85 -> userwire_req?85 -> UserService_userwire_responder_invoke -> UserService_login_signedon -> UserService_userwire_responder_process -> userwire_res!85 -> userwire_res?85" exprText="[]  (ShopFrontend.auth.checked -> &lt;> UserService.login.signedon)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.5/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.5/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.5/@designmodel" counterExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!62 -> cateloquewire_req?62 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!62 -> cateloquewire_res?62" visitedStates="1904" verifyTime="0.0545707" testport="//@interimmodels.5/@designmodel/@component.0/@port.1" traceExample="init -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!27 -> orderlogwire_req?27 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!27 -> orderlogwire_res?27 -> OrdersService_paywire_writer_request -> paywire_req!27 -> paywire_req?27 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!27 -> paywire_res?27 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!27 -> shippingwire_req?27 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!27 -> shippinglogwire_req?27 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!27 -> shippinglogwire_res?27 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!27 -> shippingwire_res?27 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_writer_process -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!48 -> cateloquewire_req?48 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!48 -> cateloquewire_res?48" exprText="[]  (&lt;> ShopFrontend.browse.read -> &lt;> CateloqueService.list.query)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.5/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.1/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.0/@port.1/@events.0" operator="EVENTUALLY" nextExpr="//@interimmodels.5/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop6" model="//@interimmodels.5/@designmodel" counterExample="" visitedStates="2309" verifyTime="0.062488699999999994" testport="//@interimmodels.5/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!92 -> orderquerywire_req?92 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_reader_process -> orderreadwire_req!92 -> orderreadwire_req?92 -> OrdersDB_orderreadwire_readstorage_invoke -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstorage_process -> orderreadwire_res!92 -> orderreadwire_res?92 -> OrdersService_orderreadwire_reader_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!92 -> orderquerywire_res?92 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!66 -> orderlogwire_req?66 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!66 -> orderlogwire_res?66 -> OrdersService_paywire_writer_request -> paywire_req!66 -> paywire_req?66 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!66 -> paywire_res?66 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!66 -> shippingwire_req?66 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!66 -> shippinglogwire_req?66 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!66 -> shippinglogwire_res?66 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!66 -> shippingwire_res?66 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_writer_process" exprText="[]  (ShopBackend.listorder.renderlist -> &lt;> OrdersDB.queryorder.orderreaded)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.5/@designmodel/@verifyProperty.5">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.10/@port.0/@events.0" nextExpr="//@interimmodels.5/@designmodel/@verifyProperty.5/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop7" model="//@interimmodels.5/@designmodel" valid="false" counterExample="init -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!36 -> orderlogwire_req?36 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!36 -> orderlogwire_res?36 -> OrdersService_paywire_writer_request -> paywire_req!36 -> paywire_req?36 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!36 -> paywire_res?36 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!36 -> shippingwire_req?36 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!36 -> shippinglogwire_req?36 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!36 -> shippinglogwire_res?36 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!36 -> shippingwire_res?36 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_writer_process -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!99 -> orderwire_pevt?99 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!99 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?99 -> orderwire_bevt!99 -> ShopFrontend_orderwire_eventpublisher_broadcast" visitedStates="150" verifyTime="0.015016" testport="//@interimmodels.5/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!36 -> orderlogwire_req?36 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!36 -> orderlogwire_res?36 -> OrdersService_paywire_writer_request -> paywire_req!36 -> paywire_req?36 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!36 -> paywire_res?36 -> OrdersService_postorder_check -> ShopFrontend_order_purchased -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!36 -> shippingwire_req?36 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!36 -> shippinglogwire_req?36 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!36 -> shippinglogwire_res?36 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!36 -> shippingwire_res?36 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_writer_process -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!99 -> orderwire_pevt?99 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!99 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?99 -> orderwire_bevt!99 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (ShopFrontend.order.purchased -> &lt;> OrdersService.postorder.save)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.5/@designmodel/@verifyProperty.6">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.3/@port.0/@events.1" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.5/@designmodel/@verifyProperty.6/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-orderwire" visitedStates="2108" verifyTime="0.0612044" testport="//@interimmodels.5/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!60 -> orderlogwire_req?60 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!60 -> orderlogwire_res?60 -> OrdersService_paywire_writer_request -> paywire_req!60 -> paywire_req?60 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!60 -> paywire_res?60 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!60 -> shippingwire_req?60 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!60 -> shippinglogwire_req?60 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!60 -> shippinglogwire_res?60 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!60 -> shippingwire_res?60 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_writer_process -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!23 -> orderwire_pevt?23 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!23 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?23 -> orderwire_bevt!23 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (ShopFrontend.order.purchased-> &lt;> OrderwireLog.orderwire.eventstore.persist)">
        <connector href="target.arch#//@connector.9"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" valid="false" counterExample="init -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!59 -> orderlogwire_req?59 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!59 -> orderlogwire_res?59 -> OrdersService_paywire_writer_request -> paywire_req!59 -> paywire_req?59 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!59 -> paywire_res?59 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!59 -> shippingwire_req?59 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!59 -> shippinglogwire_req?59 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!59 -> shippinglogwire_res?59 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!59 -> shippingwire_res?59 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_writer_process -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!49 -> orderwire_pevt?49 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!49 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?49 -> orderwire_bevt!49 -> ShopFrontend_orderwire_eventpublisher_broadcast" visitedStates="975" verifyTime="0.036751" testport="//@interimmodels.5/@designmodel/@component.0/@port.2" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter5() |= ![](Payment_pay_paid->&lt;" exprText="[] (Payment.pay.paid-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.11"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="CLOUD_PLATFORM">
        <node name="NodeJSContainer1" component="//@interimmodels.5/@designmodel/@component.0 //@interimmodels.5/@designmodel/@component.10">
          <port name="port" portNumber="15551" node="//@interimmodels.5/@designmodel/@host.0/@node.0" namedport="//@interimmodels.5/@designmodel/@component.0/@port.0"/>
          <port name="port" portNumber="15552" node="//@interimmodels.5/@designmodel/@host.0/@node.0" namedport="//@interimmodels.5/@designmodel/@component.0/@port.2"/>
          <port name="port" portNumber="15553" node="//@interimmodels.5/@designmodel/@host.0/@node.0" namedport="//@interimmodels.5/@designmodel/@component.10/@port.0"/>
          <port name="port" portNumber="15554" node="//@interimmodels.5/@designmodel/@host.0/@node.0" namedport="//@interimmodels.5/@designmodel/@component.0/@port.3"/>
          <port name="port" portNumber="15555" node="//@interimmodels.5/@designmodel/@host.0/@node.0" namedport="//@interimmodels.5/@designmodel/@component.0/@port.1"/>
        </node>
        <node name="GoContainer3" component="//@interimmodels.5/@designmodel/@component.1">
          <port name="port" portNumber="80" node="//@interimmodels.5/@designmodel/@host.0/@node.1" namedport="//@interimmodels.5/@designmodel/@component.1/@port.0" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="SecureServer">
        <node name="GoContainer1" component="//@interimmodels.5/@designmodel/@component.2">
          <port name="port" portNumber="80" node="//@interimmodels.5/@designmodel/@host.1/@node.0" namedport="//@interimmodels.5/@designmodel/@component.2/@port.0" hasFirewall="true"/>
        </node>
        <node name="GoContainer2" component="//@interimmodels.5/@designmodel/@component.6">
          <port name="port" portNumber="80" node="//@interimmodels.5/@designmodel/@host.1/@node.1" namedport="//@interimmodels.5/@designmodel/@component.6/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="LocalServer">
        <node name="JEEContainer1" component="//@interimmodels.5/@designmodel/@component.3 //@interimmodels.5/@designmodel/@component.5">
          <port name="port" portNumber="80" namedport="//@interimmodels.5/@designmodel/@component.3/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15561" node="//@interimmodels.5/@designmodel/@host.2/@node.0" namedport="//@interimmodels.5/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15562" node="//@interimmodels.5/@designmodel/@host.2/@node.0" namedport="//@interimmodels.5/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15563" node="//@interimmodels.5/@designmodel/@host.2/@node.0" namedport="//@interimmodels.5/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15564" node="//@interimmodels.5/@designmodel/@host.2/@node.0" namedport="//@interimmodels.5/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15566" node="//@interimmodels.5/@designmodel/@host.2/@node.0" namedport="//@interimmodels.5/@designmodel/@component.3/@port.1"/>
          <port name="port" portNumber="81" node="//@interimmodels.5/@designmodel/@host.2/@node.0" namedport="//@interimmodels.5/@designmodel/@component.3/@port.1"/>
        </node>
        <node name="MySQL1" component="//@interimmodels.5/@designmodel/@component.4">
          <port name="port" portNumber="3306" node="//@interimmodels.5/@designmodel/@host.2/@node.1" namedport="//@interimmodels.5/@designmodel/@component.4/@port.0 //@interimmodels.5/@designmodel/@component.4/@port.1"/>
        </node>
      </host>
      <host name="BackOfficeServer">
        <node name="JEEContainer4" component="//@interimmodels.5/@designmodel/@component.7 //@interimmodels.5/@designmodel/@component.8">
          <port name="port" portNumber="80" node="//@interimmodels.5/@designmodel/@host.3/@node.0" namedport="//@interimmodels.5/@designmodel/@component.7/@port.0" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15571" node="//@interimmodels.5/@designmodel/@host.3/@node.0" namedport="//@interimmodels.5/@designmodel/@component.7/@port.0"/>
          <port name="port" portNumber="15572" node="//@interimmodels.5/@designmodel/@host.3/@node.0" namedport="//@interimmodels.5/@designmodel/@component.7/@port.0"/>
        </node>
        <node name="MySQL2" component="//@interimmodels.5/@designmodel/@component.9">
          <port name="port" portNumber="3306" node="//@interimmodels.5/@designmodel/@host.3/@node.1" namedport="//@interimmodels.5/@designmodel/@component.9/@port.0 //@interimmodels.5/@designmodel/@component.9/@port.1"/>
        </node>
      </host>
      <link name="link2" linkType="HTTPS" networkType="INTERNET" source="//@interimmodels.5/@designmodel/@host.0/@node.0/@port.1" target="//@interimmodels.5/@designmodel/@host.2/@node.0/@port.0"/>
      <link name="link3" source="//@interimmodels.5/@designmodel/@host.2/@node.0/@port.1"/>
      <link name="link4" source="//@interimmodels.5/@designmodel/@host.2/@node.0/@port.2"/>
      <link name="link5" target="//@interimmodels.5/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link7" networkType="INTERNET" source="//@interimmodels.5/@designmodel/@host.0/@node.0/@port.3"/>
      <link name="link9" source="//@interimmodels.5/@designmodel/@host.0/@node.0/@port.4" target="//@interimmodels.5/@designmodel/@host.0/@node.1/@port.0"/>
      <link name="link11" source="//@interimmodels.5/@designmodel/@host.3/@node.0/@port.1"/>
      <link name="link12" source="//@interimmodels.5/@designmodel/@host.3/@node.0/@port.2"/>
      <link name="link13" target="//@interimmodels.5/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link14" target="//@interimmodels.5/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link16" source="//@interimmodels.5/@designmodel/@host.2/@node.0/@port.5" target="//@interimmodels.5/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link15" networkType="INTERNET" source="//@interimmodels.5/@designmodel/@host.0/@node.0/@port.2" target="//@interimmodels.5/@designmodel/@host.2/@node.0/@port.6"/>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="6" description="network route for connector:orderlogwire between: ordersservice orderlogwirecommandlog " nextModel="//@interimmodels.7" name="network-route">
    <designmodel name="inter6">
      <component name="ShopFrontend" type="client,broadcaster" deploymentnode="//@interimmodels.6/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface,LeastPriviledge">
        <port name="auth" role="//@interimmodels.6/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="checked"/>
        </port>
        <port name="browse" role="//@interimmodels.6/@designmodel/@connector.1/@role.0" type="request,OutboundPort">
          <events name="read"/>
        </port>
        <port name="order" role="//@interimmodels.6/@designmodel/@connector.9/@role.0" type="broadcast,OutboundPort">
          <events name="purchased"/>
        </port>
        <port name="shop" role="//@interimmodels.6/@designmodel/@connector.3/@role.0" type="request,OutboundPort">
          <events name="itemadded"/>
        </port>
      </component>
      <component name="CateloqueService" type="server" deploymentnode="//@interimmodels.6/@designmodel/@host.0/@node.1" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
        <port name="list" role="//@interimmodels.6/@designmodel/@connector.1/@role.1" type="response,InboundPort">
          <events name="query"/>
        </port>
      </component>
      <component name="UserService" type="server" deploymentnode="//@interimmodels.6/@designmodel/@host.1/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DefenseInDepth,DenialOfService">
        <port name="login" role="//@interimmodels.6/@designmodel/@connector.0/@role.1" type="response,InboundPort">
          <events name="signedon"/>
        </port>
      </component>
      <component name="OrdersService" type="client,server,listener,eventconsumer,readendpoint,datawriter,datareader" deploymentnode="//@interimmodels.6/@designmodel/@host.2/@node.0" criticalLevel="Low" securityCharacters="AttackSurface,LeastPriviledge,Compartmentalization,DenialOfService,DataTampering">
        <port name="postorder" role="//@interimmodels.6/@designmodel/@connector.4/@role.0 //@interimmodels.6/@designmodel/@connector.10/@role.0 //@interimmodels.6/@designmodel/@connector.7/@role.0" type="request,listen,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="check" next="//@interimmodels.6/@designmodel/@component.3/@port.0/@events.1"/>
          <events name="save"/>
        </port>
        <port name="get" role="//@interimmodels.6/@designmodel/@connector.2/@role.1 //@interimmodels.6/@designmodel/@connector.8/@role.0" type="response,read,OutboundPort,InboundPort,EventProcessorPort">
          <events name="ack"/>
        </port>
      </component>
      <component name="OrdersDB" type="repository,datastore" deploymentnode="//@interimmodels.6/@designmodel/@host.2/@node.1">
        <port name="writeorder" type="store,InboundPort,EventProcessorPort">
          <events name="orderwritten"/>
        </port>
        <port name="queryorder" role="//@interimmodels.6/@designmodel/@connector.8/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="orderreaded"/>
        </port>
      </component>
      <component name="CartsService" type="server" deploymentnode="//@interimmodels.6/@designmodel/@host.2/@node.0" securityCharacters="AttackSurface,DenialOfService,DataTampering">
        <port name="manage" role="//@interimmodels.6/@designmodel/@connector.3/@role.1" type="response,InboundPort">
          <events name="saveitem"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,datastore" deploymentnode="//@interimmodels.6/@designmodel/@host.1/@node.1" criticalLevel="High" securityCharacters="DefenseInDepth,Compartmentalization">
        <port name="pay" role="//@interimmodels.6/@designmodel/@connector.10/@role.1 //@interimmodels.6/@designmodel/@connector.11/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="paid"/>
        </port>
      </component>
      <component name="ShippingService" type="server,datawriter" deploymentnode="//@interimmodels.6/@designmodel/@host.3/@node.0" securityCharacters="Compartmentalization">
        <port name="postshipping" role="//@interimmodels.6/@designmodel/@connector.4/@role.1 //@interimmodels.6/@designmodel/@connector.6/@role.0" type="response,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="posted"/>
        </port>
      </component>
      <component name="ShippingWorker" type="readendpoint,datareader" deploymentnode="//@interimmodels.6/@designmodel/@host.3/@node.0">
        <port name="listqueue" role="//@interimmodels.6/@designmodel/@connector.5/@role.0" type="read,OutboundPort,EventProcessorPort">
          <events name="renderqueue"/>
        </port>
      </component>
      <component name="QueueDB" type="repository,datastore" deploymentnode="//@interimmodels.6/@designmodel/@host.3/@node.1">
        <port name="writequeue" role="//@interimmodels.6/@designmodel/@connector.6/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="queuewritten"/>
        </port>
        <port name="readqueue" role="//@interimmodels.6/@designmodel/@connector.5/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="queuereaded"/>
        </port>
      </component>
      <component name="ShopBackend" type="client" deploymentnode="//@interimmodels.6/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface">
        <port name="listorder" role="//@interimmodels.6/@designmodel/@connector.2/@role.0" type="request,OutboundPort">
          <events name="renderlist"/>
        </port>
      </component>
      <component name="ShippinglogwireCommandLog" type="commanddb,datastore">
        <port name="logshippinglogwire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.3/@node.2"/>
      </component>
      <component name="OrderwireLog" type="eventlogger,datastore">
        <port name="logorderwire" role="//@interimmodels.6/@designmodel/@connector.9/@role.2" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="append" role="//@interimmodels.6/@designmodel/@connector.11/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <deploymentnode href="target.arch#//@host.4/@node.0"/>
      </component>
      <component name="OrderlogwireCommandLog" type="commanddb,datastore">
        <port name="logorderlogwire" role="//@interimmodels.6/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <connector name="userwire" type="CSConnector" connectortype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.6/@designmodel/@connector.0"/>
      </connector>
      <connector name="cateloquewire" type="CSConnector" connectortype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.1"/>
        <role name="responder" roletype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.6/@designmodel/@connector.1"/>
      </connector>
      <connector name="orderquerywire" type="CSConnector" connectortype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.2"/>
        <role name="responder" roletype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.6/@designmodel/@connector.8/@role.0" connector="//@interimmodels.6/@designmodel/@connector.2"/>
      </connector>
      <connector name="cartwire" type="CSConnector" connectortype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.3"/>
        <role name="responder" roletype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.6/@designmodel/@connector.3"/>
      </connector>
      <connector name="shippingwire" type="CSConnector" connectortype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.6/@designmodel/@connector.6/@role.0" connector="//@interimmodels.6/@designmodel/@connector.4"/>
      </connector>
      <connector name="queuereadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.5"/>
        <role name="readstorage" roletype="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.6/@designmodel/@connector.5"/>
      </connector>
      <connector name="shippinglogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.6"/>
        <role name="writestorage" roletype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.6/@designmodel/@connector.6"/>
      </connector>
      <connector name="orderlogwire" type="CRConnector" connectortype="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.6/@designmodel/@connector.10/@role.0" connector="//@interimmodels.6/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.6/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.4/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="orderreadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.8"/>
        <role name="readstorage" roletype="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.6/@designmodel/@connector.8"/>
      </connector>
      <connector name="orderwire" type="ESConnector" connectortype="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.6/@designmodel/@archstyle.1/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.9"/>
        <role name="eventsubscriber" roletype="//@interimmodels.6/@designmodel/@archstyle.1/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.6/@designmodel/@connector.7/@role.0" connector="//@interimmodels.6/@designmodel/@connector.9"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.9"/>
        </role>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="writer" nextRoleExpr="//@interimmodels.6/@designmodel/@connector.4/@role.0" connector="//@interimmodels.6/@designmodel/@connector.10"/>
        <role name="writestorage" roletype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="writestorage" connector="//@interimmodels.6/@designmodel/@connector.10"/>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.6/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.6/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.6/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.6/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.6/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.6/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.6/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.6/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.6/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.6/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.6/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.4" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
            <event name="Skip"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.6/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.6/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.6/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.6/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.6/@designmodel/@archstyle.4/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.6/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.6/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.6/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.6/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.6/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.6/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.6/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.6/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.6/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.6/@designmodel" counterExample="" visitedStates="1117" verifyTime="0.046139599999999996" testport="//@interimmodels.6/@designmodel/@component.0/@port.3" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!63 -> paywire_req?63 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!63 -> paywire_res?63 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!63 -> shippingwire_req?63 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!63 -> shippinglogwire_req?63 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!63 -> shippinglogwire_res?63 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!63 -> shippingwire_res?63 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!63 -> orderlogwire_cmmd!63 -> orderlogwire_cmmd?63 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!79 -> cartwire_req?79 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!79 -> cartwire_res?79" exprText="[]  (ShopFrontend.shop.itemadded -> &lt;> CartsService.manage.saveitem)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.6/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.0/@port.3/@events.0" nextExpr="//@interimmodels.6/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.6/@designmodel" counterExample="" visitedStates="1874" verifyTime="0.054340799999999995" testport="//@interimmodels.6/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!18 -> paywire_req?18 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!18 -> paywire_res?18 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!18 -> shippingwire_req?18 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!18 -> shippinglogwire_req?18 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!18 -> shippinglogwire_res?18 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!18 -> shippingwire_res?18 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!18 -> orderlogwire_cmmd!18 -> orderlogwire_cmmd?18 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!77 -> orderwire_pevt?77 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!77 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?77 -> orderwire_bevt!77 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (Payment.pay.paid -> &lt;> ShippingService.postshipping.posted)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.6/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.6/@port.0/@events.0" nextExpr="//@interimmodels.6/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.6/@designmodel" valid="false" counterExample="init -> OrdersService_paywire_writer_request -> paywire_req!31 -> paywire_req?31 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!31 -> paywire_res?31 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!31 -> shippingwire_req?31 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!31 -> shippinglogwire_req?31 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!31 -> shippinglogwire_res?31 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!31 -> shippingwire_res?31 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!31 -> orderlogwire_cmmd!31 -> orderlogwire_cmmd?31 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!58 -> cartwire_req?58 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!58 -> cartwire_res?58" visitedStates="628" verifyTime="0.0285025" testport="//@interimmodels.6/@designmodel/@component.0/@port.3" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter6() |= ![](OrdersService_postorder_save->&lt;" exprText="[]  (OrdersService.postorder.save -> &lt;> Payment.pay.paid)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.6/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.3/@port.0/@events.1" nextExpr="//@interimmodels.6/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.6/@designmodel" counterExample="" visitedStates="1117" verifyTime="0.0368283" testport="//@interimmodels.6/@designmodel/@component.0/@port.0" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!60 -> paywire_req?60 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!60 -> paywire_res?60 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!60 -> shippingwire_req?60 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!60 -> shippinglogwire_req?60 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!60 -> shippinglogwire_res?60 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!60 -> shippingwire_res?60 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!60 -> orderlogwire_cmmd!60 -> orderlogwire_cmmd?60 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!60 -> userwire_req?60 -> UserService_userwire_responder_invoke -> UserService_login_signedon -> UserService_userwire_responder_process -> userwire_res!60 -> userwire_res?60" exprText="[]  (ShopFrontend.auth.checked -> &lt;> UserService.login.signedon)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.6/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.6/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.6/@designmodel" counterExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!62 -> cateloquewire_req?62 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!62 -> cateloquewire_res?62" visitedStates="1810" verifyTime="0.0543701" testport="//@interimmodels.6/@designmodel/@component.0/@port.1" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!20 -> paywire_req?20 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!20 -> paywire_res?20 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!20 -> shippingwire_req?20 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!20 -> shippinglogwire_req?20 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!20 -> shippinglogwire_res?20 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!20 -> shippingwire_res?20 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!20 -> orderlogwire_cmmd!20 -> orderlogwire_cmmd?20 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!68 -> cateloquewire_req?68 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!68 -> cateloquewire_res?68" exprText="[]  (&lt;> ShopFrontend.browse.read -> &lt;> CateloqueService.list.query)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.6/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.1/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.0/@port.1/@events.0" operator="EVENTUALLY" nextExpr="//@interimmodels.6/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop6" model="//@interimmodels.6/@designmodel" counterExample="" visitedStates="2195" verifyTime="0.0644272" testport="//@interimmodels.6/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!18 -> orderquerywire_req?18 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_reader_process -> orderreadwire_req!18 -> orderreadwire_req?18 -> OrdersDB_orderreadwire_readstorage_invoke -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstorage_process -> orderreadwire_res!18 -> orderreadwire_res?18 -> OrdersService_orderreadwire_reader_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!18 -> orderquerywire_res?18 -> OrdersService_paywire_writer_request -> paywire_req!47 -> paywire_req?47 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!47 -> paywire_res?47 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!47 -> shippingwire_req?47 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!47 -> shippinglogwire_req?47 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!47 -> shippinglogwire_res?47 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!47 -> shippingwire_res?47 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!47 -> orderlogwire_cmmd!47 -> orderlogwire_cmmd?47 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist" exprText="[]  (ShopBackend.listorder.renderlist -> &lt;> OrdersDB.queryorder.orderreaded)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.6/@designmodel/@verifyProperty.5">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.10/@port.0/@events.0" nextExpr="//@interimmodels.6/@designmodel/@verifyProperty.5/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop7" model="//@interimmodels.6/@designmodel" valid="false" counterExample="init -> OrdersService_paywire_writer_request -> paywire_req!87 -> paywire_req?87 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!87 -> paywire_res?87 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!87 -> shippingwire_req?87 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!87 -> shippinglogwire_req?87 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!87 -> shippinglogwire_res?87 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!87 -> shippingwire_res?87 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!87 -> orderlogwire_cmmd!87 -> orderlogwire_cmmd?87 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!73 -> orderwire_pevt?73 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!73 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?73 -> orderwire_bevt!73 -> ShopFrontend_orderwire_eventpublisher_broadcast" visitedStates="144" verifyTime="0.016135399999999998" testport="//@interimmodels.6/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!87 -> paywire_req?87 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!87 -> paywire_res?87 -> OrdersService_postorder_check -> ShopFrontend_order_purchased -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!87 -> shippingwire_req?87 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!87 -> shippinglogwire_req?87 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!87 -> shippinglogwire_res?87 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!87 -> shippingwire_res?87 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!87 -> orderlogwire_cmmd!87 -> orderlogwire_cmmd?87 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!73 -> orderwire_pevt?73 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!73 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?73 -> orderwire_bevt!73 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (ShopFrontend.order.purchased -> &lt;> OrdersService.postorder.save)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.6/@designmodel/@verifyProperty.6">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.3/@port.0/@events.1" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.6/@designmodel/@verifyProperty.6/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-orderwire" visitedStates="2004" verifyTime="0.0601031" testport="//@interimmodels.6/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!84 -> paywire_req?84 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!84 -> paywire_res?84 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!84 -> shippingwire_req?84 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!84 -> shippinglogwire_req?84 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!84 -> shippinglogwire_res?84 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!84 -> shippingwire_res?84 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!84 -> orderlogwire_cmmd!84 -> orderlogwire_cmmd?84 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!50 -> orderwire_pevt?50 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!50 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?50 -> orderwire_bevt!50 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (ShopFrontend.order.purchased-> &lt;> OrderwireLog.orderwire.eventstore.persist)">
        <connector href="target.arch#//@connector.9"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" valid="false" counterExample="init -> OrdersService_paywire_writer_request -> paywire_req!65 -> paywire_req?65 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!65 -> paywire_res?65 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!65 -> shippingwire_req?65 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!65 -> shippinglogwire_req?65 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!65 -> shippinglogwire_res?65 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!65 -> shippingwire_res?65 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!65 -> orderlogwire_cmmd!65 -> orderlogwire_cmmd?65 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!31 -> orderwire_pevt?31 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!31 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?31 -> orderwire_bevt!31 -> ShopFrontend_orderwire_eventpublisher_broadcast" visitedStates="1163" verifyTime="0.0399992" testport="//@interimmodels.6/@designmodel/@component.0/@port.2" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter6() |= ![](Payment_pay_paid->&lt;" exprText="[] (Payment.pay.paid-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.11"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-orderlogwire" visitedStates="2162" verifyTime="0.0607232" testport="//@interimmodels.6/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!21 -> paywire_req?21 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!21 -> paywire_res?21 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!21 -> shippingwire_req?21 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!21 -> shippinglogwire_req?21 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!21 -> shippinglogwire_res?21 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!21 -> shippingwire_res?21 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!21 -> orderlogwire_cmmd!21 -> orderlogwire_cmmd?21 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!66 -> orderwire_pevt?66 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!66 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?66 -> orderwire_bevt!66 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (OrdersService.postorder.check-> &lt;> OrderlogwireCommandLog.orderlogwire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="CLOUD_PLATFORM">
        <node name="NodeJSContainer1" component="//@interimmodels.6/@designmodel/@component.0 //@interimmodels.6/@designmodel/@component.10">
          <port name="port" portNumber="15551" node="//@interimmodels.6/@designmodel/@host.0/@node.0" namedport="//@interimmodels.6/@designmodel/@component.0/@port.0"/>
          <port name="port" portNumber="15552" node="//@interimmodels.6/@designmodel/@host.0/@node.0" namedport="//@interimmodels.6/@designmodel/@component.0/@port.2"/>
          <port name="port" portNumber="15553" node="//@interimmodels.6/@designmodel/@host.0/@node.0" namedport="//@interimmodels.6/@designmodel/@component.10/@port.0"/>
          <port name="port" portNumber="15554" node="//@interimmodels.6/@designmodel/@host.0/@node.0" namedport="//@interimmodels.6/@designmodel/@component.0/@port.3"/>
          <port name="port" portNumber="15555" node="//@interimmodels.6/@designmodel/@host.0/@node.0" namedport="//@interimmodels.6/@designmodel/@component.0/@port.1"/>
        </node>
        <node name="GoContainer3" component="//@interimmodels.6/@designmodel/@component.1">
          <port name="port" portNumber="80" node="//@interimmodels.6/@designmodel/@host.0/@node.1" namedport="//@interimmodels.6/@designmodel/@component.1/@port.0" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="SecureServer">
        <node name="GoContainer1" component="//@interimmodels.6/@designmodel/@component.2">
          <port name="port" portNumber="80" node="//@interimmodels.6/@designmodel/@host.1/@node.0" namedport="//@interimmodels.6/@designmodel/@component.2/@port.0" hasFirewall="true"/>
        </node>
        <node name="GoContainer2" component="//@interimmodels.6/@designmodel/@component.6">
          <port name="port" portNumber="80" node="//@interimmodels.6/@designmodel/@host.1/@node.1" namedport="//@interimmodels.6/@designmodel/@component.6/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="LocalServer">
        <node name="JEEContainer1" component="//@interimmodels.6/@designmodel/@component.3 //@interimmodels.6/@designmodel/@component.5">
          <port name="port" portNumber="80" namedport="//@interimmodels.6/@designmodel/@component.3/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15561" node="//@interimmodels.6/@designmodel/@host.2/@node.0" namedport="//@interimmodels.6/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15562" node="//@interimmodels.6/@designmodel/@host.2/@node.0" namedport="//@interimmodels.6/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15563" node="//@interimmodels.6/@designmodel/@host.2/@node.0" namedport="//@interimmodels.6/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15564" node="//@interimmodels.6/@designmodel/@host.2/@node.0" namedport="//@interimmodels.6/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15566" node="//@interimmodels.6/@designmodel/@host.2/@node.0" namedport="//@interimmodels.6/@designmodel/@component.3/@port.1"/>
          <port name="port" portNumber="81" node="//@interimmodels.6/@designmodel/@host.2/@node.0" namedport="//@interimmodels.6/@designmodel/@component.3/@port.1"/>
        </node>
        <node name="MySQL1" component="//@interimmodels.6/@designmodel/@component.4">
          <port name="port" portNumber="3306" node="//@interimmodels.6/@designmodel/@host.2/@node.1" namedport="//@interimmodels.6/@designmodel/@component.4/@port.0 //@interimmodels.6/@designmodel/@component.4/@port.1"/>
        </node>
      </host>
      <host name="BackOfficeServer">
        <node name="JEEContainer4" component="//@interimmodels.6/@designmodel/@component.7 //@interimmodels.6/@designmodel/@component.8">
          <port name="port" portNumber="80" node="//@interimmodels.6/@designmodel/@host.3/@node.0" namedport="//@interimmodels.6/@designmodel/@component.7/@port.0" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15571" node="//@interimmodels.6/@designmodel/@host.3/@node.0" namedport="//@interimmodels.6/@designmodel/@component.7/@port.0"/>
          <port name="port" portNumber="15572" node="//@interimmodels.6/@designmodel/@host.3/@node.0" namedport="//@interimmodels.6/@designmodel/@component.7/@port.0"/>
        </node>
        <node name="MySQL2" component="//@interimmodels.6/@designmodel/@component.9">
          <port name="port" portNumber="3306" node="//@interimmodels.6/@designmodel/@host.3/@node.1" namedport="//@interimmodels.6/@designmodel/@component.9/@port.0 //@interimmodels.6/@designmodel/@component.9/@port.1"/>
        </node>
      </host>
      <link name="link2" linkType="HTTPS" networkType="INTERNET" source="//@interimmodels.6/@designmodel/@host.0/@node.0/@port.1" target="//@interimmodels.6/@designmodel/@host.2/@node.0/@port.0"/>
      <link name="link3" source="//@interimmodels.6/@designmodel/@host.2/@node.0/@port.1"/>
      <link name="link4" source="//@interimmodels.6/@designmodel/@host.2/@node.0/@port.2"/>
      <link name="link5" target="//@interimmodels.6/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link7" networkType="INTERNET" source="//@interimmodels.6/@designmodel/@host.0/@node.0/@port.3"/>
      <link name="link9" source="//@interimmodels.6/@designmodel/@host.0/@node.0/@port.4" target="//@interimmodels.6/@designmodel/@host.0/@node.1/@port.0"/>
      <link name="link11" source="//@interimmodels.6/@designmodel/@host.3/@node.0/@port.1"/>
      <link name="link12" source="//@interimmodels.6/@designmodel/@host.3/@node.0/@port.2"/>
      <link name="link13" target="//@interimmodels.6/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link14" target="//@interimmodels.6/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link16" source="//@interimmodels.6/@designmodel/@host.2/@node.0/@port.5" target="//@interimmodels.6/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link15" networkType="INTERNET" source="//@interimmodels.6/@designmodel/@host.0/@node.0/@port.2" target="//@interimmodels.6/@designmodel/@host.2/@node.0/@port.6"/>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="8" description="deploy service: shippingservice" nextModel="//@interimmodels.8" name="deploy-service">
    <designmodel name="inter8">
      <component name="ShopFrontend" type="client,broadcaster" deploymentnode="//@interimmodels.7/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface,LeastPriviledge">
        <port name="auth" role="//@interimmodels.7/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="checked"/>
        </port>
        <port name="browse" role="//@interimmodels.7/@designmodel/@connector.1/@role.0" type="request,OutboundPort">
          <events name="read"/>
        </port>
        <port name="order" role="//@interimmodels.7/@designmodel/@connector.9/@role.0" type="broadcast,OutboundPort">
          <events name="purchased"/>
        </port>
        <port name="shop" role="//@interimmodels.7/@designmodel/@connector.3/@role.0" type="request,OutboundPort">
          <events name="itemadded"/>
        </port>
      </component>
      <component name="CateloqueService" type="server" deploymentnode="//@interimmodels.7/@designmodel/@host.0/@node.1" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
        <port name="list" role="//@interimmodels.7/@designmodel/@connector.1/@role.1" type="response,InboundPort">
          <events name="query"/>
        </port>
      </component>
      <component name="UserService" type="server" deploymentnode="//@interimmodels.7/@designmodel/@host.1/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DefenseInDepth,DenialOfService">
        <port name="login" role="//@interimmodels.7/@designmodel/@connector.0/@role.1" type="response,InboundPort">
          <events name="signedon"/>
        </port>
      </component>
      <component name="OrdersService" type="client,server,listener,eventconsumer,readendpoint,datawriter,datareader" deploymentnode="//@interimmodels.7/@designmodel/@host.2/@node.0" criticalLevel="Low" securityCharacters="AttackSurface,LeastPriviledge,Compartmentalization,DenialOfService,DataTampering">
        <port name="postorder" role="//@interimmodels.7/@designmodel/@connector.4/@role.0 //@interimmodels.7/@designmodel/@connector.10/@role.0 //@interimmodels.7/@designmodel/@connector.7/@role.0" type="request,listen,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="check" next="//@interimmodels.7/@designmodel/@component.3/@port.0/@events.1"/>
          <events name="save"/>
        </port>
        <port name="get" role="//@interimmodels.7/@designmodel/@connector.2/@role.1 //@interimmodels.7/@designmodel/@connector.8/@role.0" type="response,read,OutboundPort,InboundPort,EventProcessorPort">
          <events name="ack"/>
        </port>
      </component>
      <component name="OrdersDB" type="repository,datastore" deploymentnode="//@interimmodels.7/@designmodel/@host.2/@node.1">
        <port name="writeorder" type="store,InboundPort,EventProcessorPort">
          <events name="orderwritten"/>
        </port>
        <port name="queryorder" role="//@interimmodels.7/@designmodel/@connector.8/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="orderreaded"/>
        </port>
      </component>
      <component name="CartsService" type="server" deploymentnode="//@interimmodels.7/@designmodel/@host.2/@node.0" securityCharacters="AttackSurface,DenialOfService,DataTampering">
        <port name="manage" role="//@interimmodels.7/@designmodel/@connector.3/@role.1" type="response,InboundPort">
          <events name="saveitem"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,datastore" deploymentnode="//@interimmodels.7/@designmodel/@host.1/@node.1" criticalLevel="High" securityCharacters="DefenseInDepth,Compartmentalization">
        <port name="pay" role="//@interimmodels.7/@designmodel/@connector.10/@role.1 //@interimmodels.7/@designmodel/@connector.11/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="paid"/>
        </port>
      </component>
      <component name="ShippingService" type="server,datawriter" deploymentnode="//@interimmodels.7/@designmodel/@host.3/@node.0" securityCharacters="Compartmentalization">
        <port name="postshipping" role="//@interimmodels.7/@designmodel/@connector.4/@role.1 //@interimmodels.7/@designmodel/@connector.6/@role.0" type="response,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="posted"/>
        </port>
      </component>
      <component name="ShippingWorker" type="readendpoint,datareader" deploymentnode="//@interimmodels.7/@designmodel/@host.3/@node.0">
        <port name="listqueue" role="//@interimmodels.7/@designmodel/@connector.5/@role.0" type="read,OutboundPort,EventProcessorPort">
          <events name="renderqueue"/>
        </port>
      </component>
      <component name="QueueDB" type="repository,datastore" deploymentnode="//@interimmodels.7/@designmodel/@host.3/@node.1">
        <port name="writequeue" role="//@interimmodels.7/@designmodel/@connector.6/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="queuewritten"/>
        </port>
        <port name="readqueue" role="//@interimmodels.7/@designmodel/@connector.5/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="queuereaded"/>
        </port>
      </component>
      <component name="ShopBackend" type="client" deploymentnode="//@interimmodels.7/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface">
        <port name="listorder" role="//@interimmodels.7/@designmodel/@connector.2/@role.0" type="request,OutboundPort">
          <events name="renderlist"/>
        </port>
      </component>
      <component name="ShippinglogwireCommandLog" type="commanddb,datastore">
        <port name="logshippinglogwire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.3/@node.2"/>
      </component>
      <component name="OrderwireLog" type="eventlogger,datastore">
        <port name="logorderwire" role="//@interimmodels.7/@designmodel/@connector.9/@role.2" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="append" role="//@interimmodels.7/@designmodel/@connector.11/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <deploymentnode href="target.arch#//@host.4/@node.0"/>
      </component>
      <component name="OrderlogwireCommandLog" type="commanddb,datastore">
        <port name="logorderlogwire" role="//@interimmodels.7/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <connector name="userwire" type="CSConnector" connectortype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.7/@designmodel/@connector.0"/>
      </connector>
      <connector name="cateloquewire" type="CSConnector" connectortype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.1"/>
        <role name="responder" roletype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.7/@designmodel/@connector.1"/>
      </connector>
      <connector name="orderquerywire" type="CSConnector" connectortype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.2"/>
        <role name="responder" roletype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.7/@designmodel/@connector.8/@role.0" connector="//@interimmodels.7/@designmodel/@connector.2"/>
      </connector>
      <connector name="cartwire" type="CSConnector" connectortype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.3"/>
        <role name="responder" roletype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.7/@designmodel/@connector.3"/>
      </connector>
      <connector name="shippingwire" type="CSConnector" connectortype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.7/@designmodel/@connector.6/@role.0" connector="//@interimmodels.7/@designmodel/@connector.4"/>
      </connector>
      <connector name="queuereadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.5"/>
        <role name="readstorage" roletype="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.7/@designmodel/@connector.5"/>
      </connector>
      <connector name="shippinglogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.6"/>
        <role name="writestorage" roletype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.7/@designmodel/@connector.6"/>
      </connector>
      <connector name="orderlogwire" type="CRConnector" connectortype="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.7/@designmodel/@connector.10/@role.0" connector="//@interimmodels.7/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.7/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.4/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="orderreadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.8"/>
        <role name="readstorage" roletype="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.7/@designmodel/@connector.8"/>
      </connector>
      <connector name="orderwire" type="ESConnector" connectortype="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.7/@designmodel/@archstyle.1/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.9"/>
        <role name="eventsubscriber" roletype="//@interimmodels.7/@designmodel/@archstyle.1/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.7/@designmodel/@connector.7/@role.0" connector="//@interimmodels.7/@designmodel/@connector.9"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.9"/>
        </role>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="writer" nextRoleExpr="//@interimmodels.7/@designmodel/@connector.4/@role.0" connector="//@interimmodels.7/@designmodel/@connector.10"/>
        <role name="writestorage" roletype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="writestorage" connector="//@interimmodels.7/@designmodel/@connector.10"/>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.7/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.7/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.7/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.7/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.7/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.7/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.7/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.7/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.7/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.7/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.7/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.4" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
            <event name="Skip"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.7/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.7/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.7/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.7/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.7/@designmodel/@archstyle.4/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.7/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.7/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.7/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.7/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.7/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.7/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.7/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.7/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.7/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.7/@designmodel" valid="false" counterExample="init -> OrdersService_paywire_writer_request -> paywire_req!61 -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!23 -> cartwire_req?23 -> CartsService_cartwire_responder_invoke -> Payment_pay_paid -> (Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!26 -> oraclepaywire_token?26 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_pay_paid)*" visitedStates="764" verifyTime="0.0283693" testport="//@interimmodels.7/@designmodel/@component.0/@port.3" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!61 -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!23 -> cartwire_req?23 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!23 -> cartwire_res?23 -> Payment_pay_paid -> (Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!26 -> oraclepaywire_token?26 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_pay_paid)*" exprText="[]  (ShopFrontend.shop.itemadded -> &lt;> CartsService.manage.saveitem)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.7/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.0/@port.3/@events.0" nextExpr="//@interimmodels.7/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.7/@designmodel" valid="false" counterExample="init -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!52 -> oraclepaywire_token?52 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> OrdersService_paywire_writer_request -> paywire_req!89 -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!27 -> orderwire_pevt?27 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!27 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?27 -> orderwire_bevt!27 -> ShopFrontend_orderwire_eventpublisher_broadcast -> Payment_pay_paid -> (Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!52 -> oraclepaywire_token?52 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_pay_paid)*" visitedStates="236" verifyTime="0.017578899999999998" testport="//@interimmodels.7/@designmodel/@component.0/@port.2" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter8() |= ![](Payment_pay_paid->&lt;" exprText="[]  (Payment.pay.paid -> &lt;> ShippingService.postshipping.posted)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.7/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.6/@port.0/@events.0" nextExpr="//@interimmodels.7/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.7/@designmodel" visitedStates="2359" verifyTime="0.07714069999999999" testport="//@interimmodels.7/@designmodel/@component.0/@port.3" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!87 -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!44 -> cartwire_req?44 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!44 -> cartwire_res?44 -> Payment_pay_paid -> (Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!67 -> Payment_pay_paid -> oraclepaywire_token?67 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!67 -> Payment_pay_paid)*" exprText="[]  (OrdersService.postorder.save -> &lt;> Payment.pay.paid)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.7/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.3/@port.0/@events.1" nextExpr="//@interimmodels.7/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.7/@designmodel" valid="false" counterExample="init -> OrdersService_paywire_writer_request -> paywire_req!83 -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!56 -> userwire_req?56 -> UserService_userwire_responder_invoke -> Payment_pay_paid -> (Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!33 -> oraclepaywire_token?33 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_pay_paid)*" visitedStates="764" verifyTime="0.0304421" testport="//@interimmodels.7/@designmodel/@component.0/@port.0" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!83 -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!56 -> userwire_req?56 -> UserService_userwire_responder_invoke -> UserService_login_signedon -> UserService_userwire_responder_process -> userwire_res!56 -> userwire_res?56 -> Payment_pay_paid -> (Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!33 -> oraclepaywire_token?33 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_pay_paid)*" exprText="[]  (ShopFrontend.auth.checked -> &lt;> UserService.login.signedon)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.7/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.7/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.7/@designmodel" valid="false" counterExample="init -> OrdersService_paywire_writer_request -> paywire_req!24 -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!22 -> cateloquewire_req?22 -> CateloqueService_cateloquewire_responder_invoke -> Payment_pay_paid -> (Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!82 -> oraclepaywire_token?82 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_pay_paid)*" visitedStates="505" verifyTime="0.0247352" testport="//@interimmodels.7/@designmodel/@component.0/@port.1" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!24 -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!22 -> cateloquewire_req?22 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!22 -> cateloquewire_res?22 -> Payment_pay_paid -> (Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!82 -> oraclepaywire_token?82 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_pay_paid)*" exprText="[]  (&lt;> ShopFrontend.browse.read -> &lt;> CateloqueService.list.query)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.7/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.1/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.0/@port.1/@events.0" operator="EVENTUALLY" nextExpr="//@interimmodels.7/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop6" model="//@interimmodels.7/@designmodel" valid="false" counterExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!76 -> orderquerywire_req?76 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_reader_process -> orderreadwire_req!76 -> orderreadwire_req?76 -> OrdersDB_orderreadwire_readstorage_invoke -> OrdersService_paywire_writer_request -> paywire_req!71 -> Payment_pay_paid -> (Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!74 -> oraclepaywire_token?74 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_pay_paid)*" visitedStates="4565" verifyTime="0.13015279999999999" testport="//@interimmodels.7/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!76 -> orderquerywire_req?76 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_reader_process -> orderreadwire_req!76 -> orderreadwire_req?76 -> OrdersDB_orderreadwire_readstorage_invoke -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstorage_process -> orderreadwire_res!76 -> orderreadwire_res?76 -> OrdersService_orderreadwire_reader_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!76 -> orderquerywire_res?76 -> OrdersService_paywire_writer_request -> paywire_req!71 -> Payment_pay_paid -> (Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!74 -> oraclepaywire_token?74 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_pay_paid)*" exprText="[]  (ShopBackend.listorder.renderlist -> &lt;> OrdersDB.queryorder.orderreaded)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.7/@designmodel/@verifyProperty.5">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.10/@port.0/@events.0" nextExpr="//@interimmodels.7/@designmodel/@verifyProperty.5/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop7" model="//@interimmodels.7/@designmodel" valid="false" counterExample="init -> OrdersService_paywire_writer_request -> paywire_req!59 -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!13 -> orderwire_pevt?13 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!13 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?13 -> orderwire_bevt!13 -> ShopFrontend_orderwire_eventpublisher_broadcast -> Payment_pay_paid -> (Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!98 -> oraclepaywire_token?98 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_pay_paid)*" visitedStates="1190" verifyTime="0.0395355" testport="//@interimmodels.7/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!59 -> Payment_pay_paid -> (Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!98 -> oraclepaywire_token?98 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_pay_paid)*" exprText="[]  (ShopFrontend.order.purchased -> &lt;> OrdersService.postorder.save)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.7/@designmodel/@verifyProperty.6">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.3/@port.0/@events.1" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.7/@designmodel/@verifyProperty.6/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-orderwire" valid="false" counterExample="init -> OrdersService_paywire_writer_request -> paywire_req!18 -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!97 -> orderwire_pevt?97 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!97 -> orderwire_sevt?97 -> orderwire_bevt!97 -> ShopFrontend_orderwire_eventpublisher_broadcast -> Payment_pay_paid -> (Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!45 -> oraclepaywire_token?45 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_pay_paid)*" visitedStates="1187" verifyTime="0.0386549" testport="//@interimmodels.7/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!18 -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!97 -> orderwire_pevt?97 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!97 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?97 -> orderwire_bevt!97 -> ShopFrontend_orderwire_eventpublisher_broadcast -> Payment_pay_paid -> (Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!45 -> oraclepaywire_token?45 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_pay_paid)*" exprText="[] (ShopFrontend.order.purchased-> &lt;> OrderwireLog.orderwire.eventstore.persist)">
        <connector href="target.arch#//@connector.9"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" visitedStates="7228" verifyTime="0.20587519999999998" testport="//@interimmodels.7/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!53 -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!92 -> orderwire_pevt?92 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!92 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?92 -> orderwire_bevt!92 -> ShopFrontend_orderwire_eventpublisher_broadcast -> Payment_pay_paid -> (Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!12 -> oraclepaywire_token?12 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!12 -> oraclepaywire_token?12 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored)*" exprText="[] (Payment.pay.paid-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.11"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-orderlogwire" visitedStates="3790" verifyTime="0.11956929999999999" testport="//@interimmodels.7/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!29 -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!82 -> orderwire_pevt?82 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!82 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?82 -> orderwire_bevt!82 -> ShopFrontend_orderwire_eventpublisher_broadcast -> Payment_pay_paid -> (Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!46 -> oraclepaywire_token?46 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_pay_paid)*" exprText="[] (OrdersService.postorder.check-> &lt;> OrderlogwireCommandLog.orderlogwire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="CLOUD_PLATFORM">
        <node name="NodeJSContainer1" component="//@interimmodels.7/@designmodel/@component.0 //@interimmodels.7/@designmodel/@component.10">
          <port name="port" portNumber="15551" node="//@interimmodels.7/@designmodel/@host.0/@node.0" namedport="//@interimmodels.7/@designmodel/@component.0/@port.0"/>
          <port name="port" portNumber="15552" node="//@interimmodels.7/@designmodel/@host.0/@node.0" namedport="//@interimmodels.7/@designmodel/@component.0/@port.2"/>
          <port name="port" portNumber="15553" node="//@interimmodels.7/@designmodel/@host.0/@node.0" namedport="//@interimmodels.7/@designmodel/@component.10/@port.0"/>
          <port name="port" portNumber="15554" node="//@interimmodels.7/@designmodel/@host.0/@node.0" namedport="//@interimmodels.7/@designmodel/@component.0/@port.3"/>
          <port name="port" portNumber="15555" node="//@interimmodels.7/@designmodel/@host.0/@node.0" namedport="//@interimmodels.7/@designmodel/@component.0/@port.1"/>
        </node>
        <node name="GoContainer3" component="//@interimmodels.7/@designmodel/@component.1">
          <port name="port" portNumber="80" node="//@interimmodels.7/@designmodel/@host.0/@node.1" namedport="//@interimmodels.7/@designmodel/@component.1/@port.0" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="SecureServer">
        <node name="GoContainer1" component="//@interimmodels.7/@designmodel/@component.2">
          <port name="port" portNumber="80" node="//@interimmodels.7/@designmodel/@host.1/@node.0" namedport="//@interimmodels.7/@designmodel/@component.2/@port.0" hasFirewall="true"/>
        </node>
        <node name="GoContainer2" component="//@interimmodels.7/@designmodel/@component.6">
          <port name="port" portNumber="80" node="//@interimmodels.7/@designmodel/@host.1/@node.1" namedport="//@interimmodels.7/@designmodel/@component.6/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="LocalServer">
        <node name="JEEContainer1" component="//@interimmodels.7/@designmodel/@component.3 //@interimmodels.7/@designmodel/@component.5">
          <port name="port" portNumber="80" namedport="//@interimmodels.7/@designmodel/@component.3/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15561" node="//@interimmodels.7/@designmodel/@host.2/@node.0" namedport="//@interimmodels.7/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15562" node="//@interimmodels.7/@designmodel/@host.2/@node.0" namedport="//@interimmodels.7/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15563" node="//@interimmodels.7/@designmodel/@host.2/@node.0" namedport="//@interimmodels.7/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15564" node="//@interimmodels.7/@designmodel/@host.2/@node.0" namedport="//@interimmodels.7/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15566" node="//@interimmodels.7/@designmodel/@host.2/@node.0" namedport="//@interimmodels.7/@designmodel/@component.3/@port.1"/>
          <port name="port" portNumber="81" node="//@interimmodels.7/@designmodel/@host.2/@node.0" namedport="//@interimmodels.7/@designmodel/@component.3/@port.1"/>
        </node>
        <node name="MySQL1" component="//@interimmodels.7/@designmodel/@component.4">
          <port name="port" portNumber="3306" node="//@interimmodels.7/@designmodel/@host.2/@node.1" namedport="//@interimmodels.7/@designmodel/@component.4/@port.0 //@interimmodels.7/@designmodel/@component.4/@port.1"/>
        </node>
      </host>
      <host name="BackOfficeServer">
        <node name="JEEContainer4" component="//@interimmodels.7/@designmodel/@component.7 //@interimmodels.7/@designmodel/@component.8">
          <port name="port" portNumber="80" node="//@interimmodels.7/@designmodel/@host.3/@node.0" namedport="//@interimmodels.7/@designmodel/@component.7/@port.0" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15571" node="//@interimmodels.7/@designmodel/@host.3/@node.0" namedport="//@interimmodels.7/@designmodel/@component.7/@port.0"/>
          <port name="port" portNumber="15572" node="//@interimmodels.7/@designmodel/@host.3/@node.0" namedport="//@interimmodels.7/@designmodel/@component.7/@port.0"/>
        </node>
        <node name="MySQL2" component="//@interimmodels.7/@designmodel/@component.9">
          <port name="port" portNumber="3306" node="//@interimmodels.7/@designmodel/@host.3/@node.1" namedport="//@interimmodels.7/@designmodel/@component.9/@port.0 //@interimmodels.7/@designmodel/@component.9/@port.1"/>
        </node>
      </host>
      <link name="link2" linkType="HTTPS" networkType="INTERNET" source="//@interimmodels.7/@designmodel/@host.0/@node.0/@port.1" target="//@interimmodels.7/@designmodel/@host.2/@node.0/@port.0"/>
      <link name="link3" source="//@interimmodels.7/@designmodel/@host.2/@node.0/@port.1"/>
      <link name="link4" source="//@interimmodels.7/@designmodel/@host.2/@node.0/@port.2"/>
      <link name="link5" target="//@interimmodels.7/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link7" networkType="INTERNET" source="//@interimmodels.7/@designmodel/@host.0/@node.0/@port.3"/>
      <link name="link9" source="//@interimmodels.7/@designmodel/@host.0/@node.0/@port.4" target="//@interimmodels.7/@designmodel/@host.0/@node.1/@port.0"/>
      <link name="link11" source="//@interimmodels.7/@designmodel/@host.3/@node.0/@port.1"/>
      <link name="link12" source="//@interimmodels.7/@designmodel/@host.3/@node.0/@port.2"/>
      <link name="link13" target="//@interimmodels.7/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link14" target="//@interimmodels.7/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link16" source="//@interimmodels.7/@designmodel/@host.2/@node.0/@port.5" target="//@interimmodels.7/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link15" networkType="INTERNET" source="//@interimmodels.7/@designmodel/@host.0/@node.0/@port.2" target="//@interimmodels.7/@designmodel/@host.2/@node.0/@port.6"/>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="9" description="network route for connector:orderreadwire between: ordersservice ordersdb " nextModel="//@interimmodels.9" name="network-route">
    <designmodel name="inter9">
      <component name="ShopFrontend" type="client,broadcaster" deploymentnode="//@interimmodels.8/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface,LeastPriviledge">
        <port name="auth" role="//@interimmodels.8/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="checked"/>
        </port>
        <port name="browse" role="//@interimmodels.8/@designmodel/@connector.1/@role.0" type="request,OutboundPort">
          <events name="read"/>
        </port>
        <port name="order" role="//@interimmodels.8/@designmodel/@connector.9/@role.0" type="broadcast,OutboundPort">
          <events name="purchased"/>
        </port>
        <port name="shop" role="//@interimmodels.8/@designmodel/@connector.3/@role.0" type="request,OutboundPort">
          <events name="itemadded"/>
        </port>
      </component>
      <component name="CateloqueService" type="server" deploymentnode="//@interimmodels.8/@designmodel/@host.0/@node.1" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
        <port name="list" role="//@interimmodels.8/@designmodel/@connector.1/@role.1" type="response,InboundPort">
          <events name="query"/>
        </port>
      </component>
      <component name="UserService" type="server" deploymentnode="//@interimmodels.8/@designmodel/@host.1/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DefenseInDepth,DenialOfService">
        <port name="login" role="//@interimmodels.8/@designmodel/@connector.0/@role.1" type="response,InboundPort">
          <events name="signedon"/>
        </port>
      </component>
      <component name="OrdersService" type="client,server,listener,eventconsumer,readendpoint,datawriter,datareader" deploymentnode="//@interimmodels.8/@designmodel/@host.2/@node.0" criticalLevel="Low" securityCharacters="AttackSurface,LeastPriviledge,Compartmentalization,DenialOfService,DataTampering">
        <port name="postorder" role="//@interimmodels.8/@designmodel/@connector.4/@role.0 //@interimmodels.8/@designmodel/@connector.10/@role.0 //@interimmodels.8/@designmodel/@connector.7/@role.0" type="request,listen,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="check" next="//@interimmodels.8/@designmodel/@component.3/@port.0/@events.1"/>
          <events name="save"/>
        </port>
        <port name="get" role="//@interimmodels.8/@designmodel/@connector.2/@role.1 //@interimmodels.8/@designmodel/@connector.8/@role.0" type="response,read,OutboundPort,InboundPort,EventProcessorPort">
          <events name="ack"/>
        </port>
      </component>
      <component name="OrdersDB" type="repository,datastore" deploymentnode="//@interimmodels.8/@designmodel/@host.2/@node.1">
        <port name="writeorder" type="store,InboundPort,EventProcessorPort">
          <events name="orderwritten"/>
        </port>
        <port name="queryorder" role="//@interimmodels.8/@designmodel/@connector.8/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="orderreaded"/>
        </port>
      </component>
      <component name="CartsService" type="server" deploymentnode="//@interimmodels.8/@designmodel/@host.2/@node.0" securityCharacters="AttackSurface,DenialOfService,DataTampering">
        <port name="manage" role="//@interimmodels.8/@designmodel/@connector.3/@role.1" type="response,InboundPort">
          <events name="saveitem"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,datastore" deploymentnode="//@interimmodels.8/@designmodel/@host.1/@node.1" criticalLevel="High" securityCharacters="DefenseInDepth,Compartmentalization">
        <port name="pay" role="//@interimmodels.8/@designmodel/@connector.10/@role.1 //@interimmodels.8/@designmodel/@connector.11/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="paid"/>
        </port>
      </component>
      <component name="ShippingService" type="server,datawriter" deploymentnode="//@interimmodels.8/@designmodel/@host.3/@node.0" securityCharacters="Compartmentalization">
        <port name="postshipping" role="//@interimmodels.8/@designmodel/@connector.4/@role.1 //@interimmodels.8/@designmodel/@connector.6/@role.0" type="response,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="posted"/>
        </port>
      </component>
      <component name="ShippingWorker" type="readendpoint,datareader" deploymentnode="//@interimmodels.8/@designmodel/@host.3/@node.0">
        <port name="listqueue" role="//@interimmodels.8/@designmodel/@connector.5/@role.0" type="read,OutboundPort,EventProcessorPort">
          <events name="renderqueue"/>
        </port>
      </component>
      <component name="QueueDB" type="repository,datastore" deploymentnode="//@interimmodels.8/@designmodel/@host.3/@node.1">
        <port name="writequeue" role="//@interimmodels.8/@designmodel/@connector.6/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="queuewritten"/>
        </port>
        <port name="readqueue" role="//@interimmodels.8/@designmodel/@connector.5/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="queuereaded"/>
        </port>
      </component>
      <component name="ShopBackend" type="client" deploymentnode="//@interimmodels.8/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface">
        <port name="listorder" role="//@interimmodels.8/@designmodel/@connector.2/@role.0" type="request,OutboundPort">
          <events name="renderlist"/>
        </port>
      </component>
      <component name="ShippinglogwireCommandLog" type="commanddb,datastore">
        <port name="logshippinglogwire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.3/@node.2"/>
      </component>
      <component name="OrderwireLog" type="eventlogger,datastore">
        <port name="logorderwire" role="//@interimmodels.8/@designmodel/@connector.9/@role.2" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="append" role="//@interimmodels.8/@designmodel/@connector.11/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <deploymentnode href="target.arch#//@host.4/@node.0"/>
      </component>
      <component name="OrderlogwireCommandLog" type="commanddb,datastore">
        <port name="logorderlogwire" role="//@interimmodels.8/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <connector name="userwire" type="CSConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.8/@designmodel/@connector.0"/>
      </connector>
      <connector name="cateloquewire" type="CSConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.1"/>
        <role name="responder" roletype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.8/@designmodel/@connector.1"/>
      </connector>
      <connector name="orderquerywire" type="CSConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.2"/>
        <role name="responder" roletype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.8/@designmodel/@connector.8/@role.0" connector="//@interimmodels.8/@designmodel/@connector.2"/>
      </connector>
      <connector name="cartwire" type="CSConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.3"/>
        <role name="responder" roletype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.8/@designmodel/@connector.3"/>
      </connector>
      <connector name="shippingwire" type="CSConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.8/@designmodel/@connector.6/@role.0" connector="//@interimmodels.8/@designmodel/@connector.4"/>
      </connector>
      <connector name="queuereadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.5"/>
        <role name="readstorage" roletype="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.8/@designmodel/@connector.5"/>
      </connector>
      <connector name="shippinglogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.6"/>
        <role name="writestorage" roletype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.8/@designmodel/@connector.6"/>
      </connector>
      <connector name="orderlogwire" type="CRConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.8/@designmodel/@connector.10/@role.0" connector="//@interimmodels.8/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.8/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.4/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="orderreadwire" type="QRConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0">
        <role name="querier" roletype="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.8"/>
        <role name="readstore" roletype="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.8/@designmodel/@connector.8"/>
      </connector>
      <connector name="orderwire" type="ESConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.8/@designmodel/@archstyle.1/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.9"/>
        <role name="eventsubscriber" roletype="//@interimmodels.8/@designmodel/@archstyle.1/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.8/@designmodel/@connector.7/@role.0" connector="//@interimmodels.8/@designmodel/@connector.9"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.9"/>
        </role>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="writer" nextRoleExpr="//@interimmodels.8/@designmodel/@connector.4/@role.0" connector="//@interimmodels.8/@designmodel/@connector.10"/>
        <role name="writestorage" roletype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="writestorage" connector="//@interimmodels.8/@designmodel/@connector.10"/>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.8/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.8/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.8/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.8/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.8/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.8/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.8/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.8/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.8/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.8/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.8/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.4" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
            <event name="Skip"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.8/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.8/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.8/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.8/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.8/@designmodel/@archstyle.4/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.8/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.8/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.8/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.8/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.8/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.8/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.8/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.8/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.8/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.8/@designmodel" counterExample="" visitedStates="1117" verifyTime="0.037318" testport="//@interimmodels.8/@designmodel/@component.0/@port.3" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!79 -> paywire_req?79 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!79 -> paywire_res?79 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!79 -> shippingwire_req?79 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!79 -> shippinglogwire_req?79 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!79 -> shippinglogwire_res?79 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!79 -> shippingwire_res?79 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!79 -> orderlogwire_cmmd!79 -> orderlogwire_cmmd?79 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!87 -> cartwire_req?87 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!87 -> cartwire_res?87" exprText="[]  (ShopFrontend.shop.itemadded -> &lt;> CartsService.manage.saveitem)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.8/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.0/@port.3/@events.0" nextExpr="//@interimmodels.8/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.8/@designmodel" counterExample="" visitedStates="1874" verifyTime="0.0531064" testport="//@interimmodels.8/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!55 -> paywire_req?55 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!55 -> paywire_res?55 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!55 -> shippingwire_req?55 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!55 -> shippinglogwire_req?55 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!55 -> shippinglogwire_res?55 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!55 -> shippingwire_res?55 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!55 -> orderlogwire_cmmd!55 -> orderlogwire_cmmd?55 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!67 -> orderwire_pevt?67 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!67 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?67 -> orderwire_bevt!67 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (Payment.pay.paid -> &lt;> ShippingService.postshipping.posted)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.8/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.6/@port.0/@events.0" nextExpr="//@interimmodels.8/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.8/@designmodel" valid="false" counterExample="init -> OrdersService_paywire_writer_request -> paywire_req!40 -> paywire_req?40 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!40 -> paywire_res?40 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!40 -> shippingwire_req?40 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!40 -> shippinglogwire_req?40 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!40 -> shippinglogwire_res?40 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!40 -> shippingwire_res?40 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!40 -> orderlogwire_cmmd!40 -> orderlogwire_cmmd?40 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!89 -> cartwire_req?89 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!89 -> cartwire_res?89" visitedStates="628" verifyTime="0.0265484" testport="//@interimmodels.8/@designmodel/@component.0/@port.3" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter9() |= ![](OrdersService_postorder_save->&lt;" exprText="[]  (OrdersService.postorder.save -> &lt;> Payment.pay.paid)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.8/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.3/@port.0/@events.1" nextExpr="//@interimmodels.8/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.8/@designmodel" counterExample="" visitedStates="1117" verifyTime="0.1104878" testport="//@interimmodels.8/@designmodel/@component.0/@port.0" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!89 -> paywire_req?89 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!89 -> paywire_res?89 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!89 -> shippingwire_req?89 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!89 -> shippinglogwire_req?89 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!89 -> shippinglogwire_res?89 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!89 -> shippingwire_res?89 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!89 -> orderlogwire_cmmd!89 -> orderlogwire_cmmd?89 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!96 -> userwire_req?96 -> UserService_userwire_responder_invoke -> UserService_login_signedon -> UserService_userwire_responder_process -> userwire_res!96 -> userwire_res?96" exprText="[]  (ShopFrontend.auth.checked -> &lt;> UserService.login.signedon)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.8/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.8/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.8/@designmodel" counterExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!62 -> cateloquewire_req?62 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!62 -> cateloquewire_res?62" visitedStates="1810" verifyTime="0.060533899999999995" testport="//@interimmodels.8/@designmodel/@component.0/@port.1" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!34 -> paywire_req?34 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!34 -> paywire_res?34 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!34 -> shippingwire_req?34 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!34 -> shippinglogwire_req?34 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!34 -> shippinglogwire_res?34 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!34 -> shippingwire_res?34 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!34 -> orderlogwire_cmmd!34 -> orderlogwire_cmmd?34 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!12 -> cateloquewire_req?12 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!12 -> cateloquewire_res?12" exprText="[]  (&lt;> ShopFrontend.browse.read -> &lt;> CateloqueService.list.query)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.8/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.1/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.0/@port.1/@events.0" operator="EVENTUALLY" nextExpr="//@interimmodels.8/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop6" model="//@interimmodels.8/@designmodel" counterExample="" visitedStates="2041" verifyTime="0.058485199999999994" testport="//@interimmodels.8/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!52 -> orderquerywire_req?52 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_querier_process -> orderreadwire_stmt!52 -> orderreadwire_stmt?52 -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstore_process -> orderreadwire_res!52 -> orderreadwire_res?52 -> OrdersService_orderreadwire_querier_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!52 -> orderquerywire_res?52 -> OrdersService_paywire_writer_request -> paywire_req!62 -> paywire_req?62 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!62 -> paywire_res?62 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!62 -> shippingwire_req?62 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!62 -> shippinglogwire_req?62 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!62 -> shippinglogwire_res?62 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!62 -> shippingwire_res?62 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!62 -> orderlogwire_cmmd!62 -> orderlogwire_cmmd?62 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist" exprText="[]  (ShopBackend.listorder.renderlist -> &lt;> OrdersDB.queryorder.orderreaded)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.8/@designmodel/@verifyProperty.5">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.10/@port.0/@events.0" nextExpr="//@interimmodels.8/@designmodel/@verifyProperty.5/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop7" model="//@interimmodels.8/@designmodel" valid="false" counterExample="init -> OrdersService_paywire_writer_request -> paywire_req!78 -> paywire_req?78 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!78 -> paywire_res?78 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!78 -> shippingwire_req?78 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!78 -> shippinglogwire_req?78 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!78 -> shippinglogwire_res?78 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!78 -> shippingwire_res?78 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!78 -> orderlogwire_cmmd!78 -> orderlogwire_cmmd?78 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!20 -> orderwire_pevt?20 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!20 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?20 -> orderwire_bevt!20 -> ShopFrontend_orderwire_eventpublisher_broadcast" visitedStates="144" verifyTime="0.0181541" testport="//@interimmodels.8/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!78 -> paywire_req?78 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!78 -> paywire_res?78 -> OrdersService_postorder_check -> ShopFrontend_order_purchased -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!78 -> shippingwire_req?78 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!78 -> shippinglogwire_req?78 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!78 -> shippinglogwire_res?78 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!78 -> shippingwire_res?78 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!78 -> orderlogwire_cmmd!78 -> orderlogwire_cmmd?78 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!20 -> orderwire_pevt?20 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!20 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?20 -> orderwire_bevt!20 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (ShopFrontend.order.purchased -> &lt;> OrdersService.postorder.save)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.8/@designmodel/@verifyProperty.6">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.3/@port.0/@events.1" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.8/@designmodel/@verifyProperty.6/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-orderwire" visitedStates="2004" verifyTime="0.061465399999999996" testport="//@interimmodels.8/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!22 -> paywire_req?22 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!22 -> paywire_res?22 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!22 -> shippingwire_req?22 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!22 -> shippinglogwire_req?22 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!22 -> shippinglogwire_res?22 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!22 -> shippingwire_res?22 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!22 -> orderlogwire_cmmd!22 -> orderlogwire_cmmd?22 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!17 -> orderwire_pevt?17 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!17 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?17 -> orderwire_bevt!17 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (ShopFrontend.order.purchased-> &lt;> OrderwireLog.orderwire.eventstore.persist)">
        <connector href="target.arch#//@connector.9"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" valid="false" counterExample="init -> OrdersService_paywire_writer_request -> paywire_req!64 -> paywire_req?64 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!64 -> paywire_res?64 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!64 -> shippingwire_req?64 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!64 -> shippinglogwire_req?64 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!64 -> shippinglogwire_res?64 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!64 -> shippingwire_res?64 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!64 -> orderlogwire_cmmd!64 -> orderlogwire_cmmd?64 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!78 -> orderwire_pevt?78 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!78 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?78 -> orderwire_bevt!78 -> ShopFrontend_orderwire_eventpublisher_broadcast" visitedStates="1163" verifyTime="0.0464401" testport="//@interimmodels.8/@designmodel/@component.0/@port.2" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter9() |= ![](Payment_pay_paid->&lt;" exprText="[] (Payment.pay.paid-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.11"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-orderlogwire" visitedStates="2162" verifyTime="0.0610791" testport="//@interimmodels.8/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!45 -> paywire_req?45 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!45 -> paywire_res?45 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!45 -> shippingwire_req?45 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!45 -> shippinglogwire_req?45 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!45 -> shippinglogwire_res?45 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!45 -> shippingwire_res?45 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!45 -> orderlogwire_cmmd!45 -> orderlogwire_cmmd?45 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!20 -> orderwire_pevt?20 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!20 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?20 -> orderwire_bevt!20 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (OrdersService.postorder.check-> &lt;> OrderlogwireCommandLog.orderlogwire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-query-orderreadwire" visitedStates="1733" verifyTime="0.0574178" testport="//@interimmodels.8/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!71 -> orderquerywire_req?71 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_querier_process -> orderreadwire_stmt!71 -> orderreadwire_stmt?71 -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstore_process -> orderreadwire_res!71 -> orderreadwire_res?71 -> OrdersService_orderreadwire_querier_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!71 -> orderquerywire_res?71 -> OrdersService_paywire_writer_request -> paywire_req!63 -> paywire_req?63 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!63 -> paywire_res?63 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!63 -> shippingwire_req?63 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!63 -> shippinglogwire_req?63 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!63 -> shippinglogwire_res?63 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!63 -> shippingwire_res?63 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!63 -> orderlogwire_cmmd!63 -> orderlogwire_cmmd?63 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist" exprText="[] (OrdersService.get.ack-> &lt;> OrdersDB.orderreadwire.readstore.process)">
        <connector href="target.arch#//@connector.8"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="CLOUD_PLATFORM">
        <node name="NodeJSContainer1" component="//@interimmodels.8/@designmodel/@component.0 //@interimmodels.8/@designmodel/@component.10">
          <port name="port" portNumber="15551" node="//@interimmodels.8/@designmodel/@host.0/@node.0" namedport="//@interimmodels.8/@designmodel/@component.0/@port.0"/>
          <port name="port" portNumber="15552" node="//@interimmodels.8/@designmodel/@host.0/@node.0" namedport="//@interimmodels.8/@designmodel/@component.0/@port.2"/>
          <port name="port" portNumber="15553" node="//@interimmodels.8/@designmodel/@host.0/@node.0" namedport="//@interimmodels.8/@designmodel/@component.10/@port.0"/>
          <port name="port" portNumber="15554" node="//@interimmodels.8/@designmodel/@host.0/@node.0" namedport="//@interimmodels.8/@designmodel/@component.0/@port.3"/>
          <port name="port" portNumber="15555" node="//@interimmodels.8/@designmodel/@host.0/@node.0" namedport="//@interimmodels.8/@designmodel/@component.0/@port.1"/>
        </node>
        <node name="GoContainer3" component="//@interimmodels.8/@designmodel/@component.1">
          <port name="port" portNumber="80" node="//@interimmodels.8/@designmodel/@host.0/@node.1" namedport="//@interimmodels.8/@designmodel/@component.1/@port.0" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="SecureServer">
        <node name="GoContainer1" component="//@interimmodels.8/@designmodel/@component.2">
          <port name="port" portNumber="80" node="//@interimmodels.8/@designmodel/@host.1/@node.0" namedport="//@interimmodels.8/@designmodel/@component.2/@port.0" hasFirewall="true"/>
        </node>
        <node name="GoContainer2" component="//@interimmodels.8/@designmodel/@component.6">
          <port name="port" portNumber="80" node="//@interimmodels.8/@designmodel/@host.1/@node.1" namedport="//@interimmodels.8/@designmodel/@component.6/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="LocalServer">
        <node name="JEEContainer1" component="//@interimmodels.8/@designmodel/@component.3 //@interimmodels.8/@designmodel/@component.5">
          <port name="port" portNumber="80" namedport="//@interimmodels.8/@designmodel/@component.3/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15561" node="//@interimmodels.8/@designmodel/@host.2/@node.0" namedport="//@interimmodels.8/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15562" node="//@interimmodels.8/@designmodel/@host.2/@node.0" namedport="//@interimmodels.8/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15563" node="//@interimmodels.8/@designmodel/@host.2/@node.0" namedport="//@interimmodels.8/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15564" node="//@interimmodels.8/@designmodel/@host.2/@node.0" namedport="//@interimmodels.8/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15566" node="//@interimmodels.8/@designmodel/@host.2/@node.0" namedport="//@interimmodels.8/@designmodel/@component.3/@port.1"/>
          <port name="port" portNumber="81" node="//@interimmodels.8/@designmodel/@host.2/@node.0" namedport="//@interimmodels.8/@designmodel/@component.3/@port.1"/>
        </node>
        <node name="MySQL1" component="//@interimmodels.8/@designmodel/@component.4">
          <port name="port" portNumber="3306" node="//@interimmodels.8/@designmodel/@host.2/@node.1" namedport="//@interimmodels.8/@designmodel/@component.4/@port.0 //@interimmodels.8/@designmodel/@component.4/@port.1"/>
        </node>
      </host>
      <host name="BackOfficeServer">
        <node name="JEEContainer4" component="//@interimmodels.8/@designmodel/@component.7 //@interimmodels.8/@designmodel/@component.8">
          <port name="port" portNumber="80" node="//@interimmodels.8/@designmodel/@host.3/@node.0" namedport="//@interimmodels.8/@designmodel/@component.7/@port.0" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15571" node="//@interimmodels.8/@designmodel/@host.3/@node.0" namedport="//@interimmodels.8/@designmodel/@component.7/@port.0"/>
          <port name="port" portNumber="15572" node="//@interimmodels.8/@designmodel/@host.3/@node.0" namedport="//@interimmodels.8/@designmodel/@component.7/@port.0"/>
        </node>
        <node name="MySQL2" component="//@interimmodels.8/@designmodel/@component.9">
          <port name="port" portNumber="3306" node="//@interimmodels.8/@designmodel/@host.3/@node.1" namedport="//@interimmodels.8/@designmodel/@component.9/@port.0 //@interimmodels.8/@designmodel/@component.9/@port.1"/>
        </node>
      </host>
      <link name="link2" linkType="HTTPS" networkType="INTERNET" source="//@interimmodels.8/@designmodel/@host.0/@node.0/@port.1" target="//@interimmodels.8/@designmodel/@host.2/@node.0/@port.0"/>
      <link name="link3" source="//@interimmodels.8/@designmodel/@host.2/@node.0/@port.1"/>
      <link name="link4" source="//@interimmodels.8/@designmodel/@host.2/@node.0/@port.2"/>
      <link name="link5" target="//@interimmodels.8/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link7" networkType="INTERNET" source="//@interimmodels.8/@designmodel/@host.0/@node.0/@port.3"/>
      <link name="link9" source="//@interimmodels.8/@designmodel/@host.0/@node.0/@port.4" target="//@interimmodels.8/@designmodel/@host.0/@node.1/@port.0"/>
      <link name="link11" source="//@interimmodels.8/@designmodel/@host.3/@node.0/@port.1"/>
      <link name="link12" source="//@interimmodels.8/@designmodel/@host.3/@node.0/@port.2"/>
      <link name="link13" target="//@interimmodels.8/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link14" target="//@interimmodels.8/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link16" source="//@interimmodels.8/@designmodel/@host.2/@node.0/@port.5" target="//@interimmodels.8/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link15" networkType="INTERNET" source="//@interimmodels.8/@designmodel/@host.0/@node.0/@port.2" target="//@interimmodels.8/@designmodel/@host.2/@node.0/@port.6"/>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="10" description="network route for connector:shippinglogwire between: shippingservice shippinglogwirecommandlog " nextModel="//@interimmodels.10" name="network-route">
    <designmodel name="inter10">
      <component name="ShopFrontend" type="client,broadcaster" deploymentnode="//@interimmodels.9/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface,LeastPriviledge">
        <port name="auth" role="//@interimmodels.9/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="checked"/>
        </port>
        <port name="browse" role="//@interimmodels.9/@designmodel/@connector.1/@role.0" type="request,OutboundPort">
          <events name="read"/>
        </port>
        <port name="order" role="//@interimmodels.9/@designmodel/@connector.9/@role.0" type="broadcast,OutboundPort">
          <events name="purchased"/>
        </port>
        <port name="shop" role="//@interimmodels.9/@designmodel/@connector.3/@role.0" type="request,OutboundPort">
          <events name="itemadded"/>
        </port>
      </component>
      <component name="CateloqueService" type="server" deploymentnode="//@interimmodels.9/@designmodel/@host.0/@node.1" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
        <port name="list" role="//@interimmodels.9/@designmodel/@connector.1/@role.1" type="response,InboundPort">
          <events name="query"/>
        </port>
      </component>
      <component name="UserService" type="server" deploymentnode="//@interimmodels.9/@designmodel/@host.1/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DefenseInDepth,DenialOfService">
        <port name="login" role="//@interimmodels.9/@designmodel/@connector.0/@role.1" type="response,InboundPort">
          <events name="signedon"/>
        </port>
      </component>
      <component name="OrdersService" type="client,server,listener,eventconsumer,readendpoint,datawriter,datareader" deploymentnode="//@interimmodels.9/@designmodel/@host.2/@node.0" criticalLevel="Low" securityCharacters="AttackSurface,LeastPriviledge,Compartmentalization,DenialOfService,DataTampering">
        <port name="postorder" role="//@interimmodels.9/@designmodel/@connector.4/@role.0 //@interimmodels.9/@designmodel/@connector.10/@role.0 //@interimmodels.9/@designmodel/@connector.7/@role.0" type="request,listen,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="check" next="//@interimmodels.9/@designmodel/@component.3/@port.0/@events.1"/>
          <events name="save"/>
        </port>
        <port name="get" role="//@interimmodels.9/@designmodel/@connector.2/@role.1 //@interimmodels.9/@designmodel/@connector.8/@role.0" type="response,read,OutboundPort,InboundPort,EventProcessorPort">
          <events name="ack"/>
        </port>
      </component>
      <component name="OrdersDB" type="repository,datastore" deploymentnode="//@interimmodels.9/@designmodel/@host.2/@node.1">
        <port name="writeorder" type="store,InboundPort,EventProcessorPort">
          <events name="orderwritten"/>
        </port>
        <port name="queryorder" role="//@interimmodels.9/@designmodel/@connector.8/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="orderreaded"/>
        </port>
      </component>
      <component name="CartsService" type="server" deploymentnode="//@interimmodels.9/@designmodel/@host.2/@node.0" securityCharacters="AttackSurface,DenialOfService,DataTampering">
        <port name="manage" role="//@interimmodels.9/@designmodel/@connector.3/@role.1" type="response,InboundPort">
          <events name="saveitem"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,datastore" deploymentnode="//@interimmodels.9/@designmodel/@host.1/@node.1" criticalLevel="High" securityCharacters="DefenseInDepth,Compartmentalization">
        <port name="pay" role="//@interimmodels.9/@designmodel/@connector.10/@role.1 //@interimmodels.9/@designmodel/@connector.11/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="paid"/>
        </port>
      </component>
      <component name="ShippingService" type="server,datawriter" deploymentnode="//@interimmodels.9/@designmodel/@host.3/@node.0" securityCharacters="Compartmentalization">
        <port name="postshipping" role="//@interimmodels.9/@designmodel/@connector.4/@role.1 //@interimmodels.9/@designmodel/@connector.6/@role.0" type="response,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="posted"/>
        </port>
      </component>
      <component name="ShippingWorker" type="readendpoint,datareader" deploymentnode="//@interimmodels.9/@designmodel/@host.3/@node.0">
        <port name="listqueue" role="//@interimmodels.9/@designmodel/@connector.5/@role.0" type="read,OutboundPort,EventProcessorPort">
          <events name="renderqueue"/>
        </port>
      </component>
      <component name="QueueDB" type="repository,datastore" deploymentnode="//@interimmodels.9/@designmodel/@host.3/@node.1">
        <port name="writequeue" type="store,InboundPort,EventProcessorPort">
          <events name="queuewritten"/>
        </port>
        <port name="readqueue" role="//@interimmodels.9/@designmodel/@connector.5/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="queuereaded"/>
        </port>
      </component>
      <component name="ShopBackend" type="client" deploymentnode="//@interimmodels.9/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface">
        <port name="listorder" role="//@interimmodels.9/@designmodel/@connector.2/@role.0" type="request,OutboundPort">
          <events name="renderlist"/>
        </port>
      </component>
      <component name="ShippinglogwireCommandLog" type="commanddb,datastore">
        <port name="logshippinglogwire" role="//@interimmodels.9/@designmodel/@connector.6/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.3/@node.2"/>
      </component>
      <component name="OrderwireLog" type="eventlogger,datastore">
        <port name="logorderwire" role="//@interimmodels.9/@designmodel/@connector.9/@role.2" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="append" role="//@interimmodels.9/@designmodel/@connector.11/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <deploymentnode href="target.arch#//@host.4/@node.0"/>
      </component>
      <component name="OrderlogwireCommandLog" type="commanddb,datastore">
        <port name="logorderlogwire" role="//@interimmodels.9/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <connector name="userwire" type="CSConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.9/@designmodel/@connector.0"/>
      </connector>
      <connector name="cateloquewire" type="CSConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.1"/>
        <role name="responder" roletype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.9/@designmodel/@connector.1"/>
      </connector>
      <connector name="orderquerywire" type="CSConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.2"/>
        <role name="responder" roletype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.9/@designmodel/@connector.8/@role.0" connector="//@interimmodels.9/@designmodel/@connector.2"/>
      </connector>
      <connector name="cartwire" type="CSConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.3"/>
        <role name="responder" roletype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.9/@designmodel/@connector.3"/>
      </connector>
      <connector name="shippingwire" type="CSConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.9/@designmodel/@connector.6/@role.0" connector="//@interimmodels.9/@designmodel/@connector.4"/>
      </connector>
      <connector name="queuereadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.5"/>
        <role name="readstorage" roletype="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.9/@designmodel/@connector.5"/>
      </connector>
      <connector name="shippinglogwire" type="CRConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.6"/>
        <role name="readstore" roletype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.9/@designmodel/@connector.6"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.4/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.6"/>
        </role>
      </connector>
      <connector name="orderlogwire" type="CRConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.9/@designmodel/@connector.10/@role.0" connector="//@interimmodels.9/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.9/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.4/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="orderreadwire" type="QRConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0">
        <role name="querier" roletype="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.8"/>
        <role name="readstore" roletype="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.9/@designmodel/@connector.8"/>
      </connector>
      <connector name="orderwire" type="ESConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.9/@designmodel/@archstyle.1/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.9"/>
        <role name="eventsubscriber" roletype="//@interimmodels.9/@designmodel/@archstyle.1/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.9/@designmodel/@connector.7/@role.0" connector="//@interimmodels.9/@designmodel/@connector.9"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.9"/>
        </role>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="writer" nextRoleExpr="//@interimmodels.9/@designmodel/@connector.4/@role.0" connector="//@interimmodels.9/@designmodel/@connector.10"/>
        <role name="writestorage" roletype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="writestorage" connector="//@interimmodels.9/@designmodel/@connector.10"/>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.9/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.9/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.9/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.9/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.9/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.9/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.9/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.9/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.9/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.9/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.9/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.4" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
            <event name="Skip"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.9/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.9/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.9/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.9/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.9/@designmodel/@archstyle.4/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.9/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.9/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.9/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.9/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.9/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.9/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.9/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.9/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.9/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.9/@designmodel" counterExample="" visitedStates="3171" verifyTime="0.0954714" testport="//@interimmodels.9/@designmodel/@component.0/@port.3" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!99 -> paywire_req?99 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!99 -> paywire_res?99 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!99 -> shippingwire_req?99 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!99 -> shippinglogwire_cmmd!99 -> shippinglogwire_cmmd?99 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!99 -> shippingwire_res?99 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!99 -> orderlogwire_cmmd!99 -> orderlogwire_cmmd?99 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!46 -> cartwire_req?46 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!46 -> cartwire_res?46" exprText="[]  (ShopFrontend.shop.itemadded -> &lt;> CartsService.manage.saveitem)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.9/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.0/@port.3/@events.0" nextExpr="//@interimmodels.9/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.9/@designmodel" counterExample="" visitedStates="3810" verifyTime="0.11071099999999999" testport="//@interimmodels.9/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!67 -> paywire_req?67 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!67 -> paywire_res?67 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!67 -> shippingwire_req?67 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!67 -> shippinglogwire_cmmd!67 -> shippinglogwire_cmmd?67 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!67 -> shippingwire_res?67 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!67 -> orderlogwire_cmmd!67 -> orderlogwire_cmmd?67 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!26 -> orderwire_pevt?26 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!26 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?26 -> orderwire_bevt!26 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (Payment.pay.paid -> &lt;> ShippingService.postshipping.posted)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.9/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.6/@port.0/@events.0" nextExpr="//@interimmodels.9/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.9/@designmodel" valid="false" counterExample="init -> OrdersService_paywire_writer_request -> paywire_req!56 -> paywire_req?56 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!56 -> paywire_res?56 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!56 -> shippingwire_req?56 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!56 -> shippinglogwire_cmmd!56 -> shippinglogwire_cmmd?56 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!56 -> shippingwire_res?56 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!56 -> orderlogwire_cmmd!56 -> orderlogwire_cmmd?56 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!60 -> cartwire_req?60 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!60 -> cartwire_res?60" visitedStates="1982" verifyTime="0.062254899999999995" testport="//@interimmodels.9/@designmodel/@component.0/@port.3" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter10() |= ![](OrdersService_postorder_save->&lt;" exprText="[]  (OrdersService.postorder.save -> &lt;> Payment.pay.paid)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.9/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.3/@port.0/@events.1" nextExpr="//@interimmodels.9/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.9/@designmodel" counterExample="" visitedStates="3171" verifyTime="0.0922514" testport="//@interimmodels.9/@designmodel/@component.0/@port.0" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!60 -> paywire_req?60 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!60 -> paywire_res?60 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!60 -> shippingwire_req?60 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!60 -> shippinglogwire_cmmd!60 -> shippinglogwire_cmmd?60 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!60 -> shippingwire_res?60 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!60 -> orderlogwire_cmmd!60 -> orderlogwire_cmmd?60 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!57 -> userwire_req?57 -> UserService_userwire_responder_invoke -> UserService_login_signedon -> UserService_userwire_responder_process -> userwire_res!57 -> userwire_res?57" exprText="[]  (ShopFrontend.auth.checked -> &lt;> UserService.login.signedon)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.9/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.9/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.9/@designmodel" counterExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!62 -> cateloquewire_req?62 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!62 -> cateloquewire_res?62" visitedStates="5172" verifyTime="0.1392498" testport="//@interimmodels.9/@designmodel/@component.0/@port.1" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!97 -> paywire_req?97 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!97 -> paywire_res?97 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!97 -> shippingwire_req?97 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!97 -> shippinglogwire_cmmd!97 -> shippinglogwire_cmmd?97 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!97 -> shippingwire_res?97 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!97 -> orderlogwire_cmmd!97 -> orderlogwire_cmmd?97 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!66 -> cateloquewire_req?66 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!66 -> cateloquewire_res?66" exprText="[]  (&lt;> ShopFrontend.browse.read -> &lt;> CateloqueService.list.query)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.9/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.1/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.0/@port.1/@events.0" operator="EVENTUALLY" nextExpr="//@interimmodels.9/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop6" model="//@interimmodels.9/@designmodel" counterExample="" visitedStates="5775" verifyTime="0.1534337" testport="//@interimmodels.9/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!91 -> orderquerywire_req?91 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_querier_process -> orderreadwire_stmt!91 -> orderreadwire_stmt?91 -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstore_process -> orderreadwire_res!91 -> orderreadwire_res?91 -> OrdersService_orderreadwire_querier_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!91 -> orderquerywire_res?91 -> OrdersService_paywire_writer_request -> paywire_req!71 -> paywire_req?71 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!71 -> paywire_res?71 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!71 -> shippingwire_req?71 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!71 -> shippinglogwire_cmmd!71 -> shippinglogwire_cmmd?71 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!71 -> shippingwire_res?71 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!71 -> orderlogwire_cmmd!71 -> orderlogwire_cmmd?71 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist" exprText="[]  (ShopBackend.listorder.renderlist -> &lt;> OrdersDB.queryorder.orderreaded)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.9/@designmodel/@verifyProperty.5">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.10/@port.0/@events.0" nextExpr="//@interimmodels.9/@designmodel/@verifyProperty.5/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop7" model="//@interimmodels.9/@designmodel" valid="false" counterExample="init -> OrdersService_paywire_writer_request -> paywire_req!54 -> paywire_req?54 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!54 -> paywire_res?54 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!54 -> shippingwire_req?54 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!54 -> shippinglogwire_cmmd!54 -> shippinglogwire_cmmd?54 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!54 -> shippingwire_res?54 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!54 -> orderlogwire_cmmd!54 -> orderlogwire_cmmd?54 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!81 -> orderwire_pevt?81 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!81 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?81 -> orderwire_bevt!81 -> ShopFrontend_orderwire_eventpublisher_broadcast" visitedStates="142" verifyTime="0.0149225" testport="//@interimmodels.9/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!54 -> paywire_req?54 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!54 -> paywire_res?54 -> OrdersService_postorder_check -> ShopFrontend_order_purchased -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!54 -> shippingwire_req?54 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!54 -> shippinglogwire_cmmd!54 -> shippinglogwire_cmmd?54 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!54 -> shippingwire_res?54 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!54 -> orderlogwire_cmmd!54 -> orderlogwire_cmmd?54 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!81 -> orderwire_pevt?81 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!81 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?81 -> orderwire_bevt!81 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (ShopFrontend.order.purchased -> &lt;> OrdersService.postorder.save)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.9/@designmodel/@verifyProperty.6">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.3/@port.0/@events.1" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.9/@designmodel/@verifyProperty.6/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-orderwire" visitedStates="5596" verifyTime="0.15254769999999998" testport="//@interimmodels.9/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!73 -> paywire_req?73 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!73 -> paywire_res?73 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!73 -> shippingwire_req?73 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!73 -> shippinglogwire_cmmd!73 -> shippinglogwire_cmmd?73 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!73 -> shippingwire_res?73 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!73 -> orderlogwire_cmmd!73 -> orderlogwire_cmmd?73 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!41 -> orderwire_pevt?41 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!41 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?41 -> orderwire_bevt!41 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (ShopFrontend.order.purchased-> &lt;> OrderwireLog.orderwire.eventstore.persist)">
        <connector href="target.arch#//@connector.9"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" valid="false" counterExample="init -> OrdersService_paywire_writer_request -> paywire_req!58 -> paywire_req?58 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!58 -> paywire_res?58 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!58 -> shippingwire_req?58 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!58 -> shippinglogwire_cmmd!58 -> shippinglogwire_cmmd?58 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!58 -> shippingwire_res?58 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!58 -> orderlogwire_cmmd!58 -> orderlogwire_cmmd?58 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!16 -> orderwire_pevt?16 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!16 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?16 -> orderwire_bevt!16 -> ShopFrontend_orderwire_eventpublisher_broadcast" visitedStates="3355" verifyTime="0.0959791" testport="//@interimmodels.9/@designmodel/@component.0/@port.2" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter10() |= ![](Payment_pay_paid->&lt;" exprText="[] (Payment.pay.paid-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.11"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-orderlogwire" visitedStates="6358" verifyTime="0.1653096" testport="//@interimmodels.9/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!57 -> paywire_req?57 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!57 -> paywire_res?57 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!57 -> shippingwire_req?57 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!57 -> shippinglogwire_cmmd!57 -> shippinglogwire_cmmd?57 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!57 -> shippingwire_res?57 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!57 -> orderlogwire_cmmd!57 -> orderlogwire_cmmd?57 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!21 -> orderwire_pevt?21 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!21 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?21 -> orderwire_bevt!21 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (OrdersService.postorder.check-> &lt;> OrderlogwireCommandLog.orderlogwire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-query-orderreadwire" visitedStates="4907" verifyTime="0.1308103" testport="//@interimmodels.9/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!81 -> orderquerywire_req?81 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_querier_process -> orderreadwire_stmt!81 -> orderreadwire_stmt?81 -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstore_process -> orderreadwire_res!81 -> orderreadwire_res?81 -> OrdersService_orderreadwire_querier_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!81 -> orderquerywire_res?81 -> OrdersService_paywire_writer_request -> paywire_req!90 -> paywire_req?90 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!90 -> paywire_res?90 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!90 -> shippingwire_req?90 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!90 -> shippinglogwire_cmmd!90 -> shippinglogwire_cmmd?90 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!90 -> shippingwire_res?90 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!90 -> orderlogwire_cmmd!90 -> orderlogwire_cmmd?90 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist" exprText="[] (OrdersService.get.ack-> &lt;> OrdersDB.orderreadwire.readstore.process)">
        <connector href="target.arch#//@connector.8"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-shippinglogwire" visitedStates="5726" verifyTime="0.1628771" testport="//@interimmodels.9/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!17 -> paywire_req?17 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!17 -> paywire_res?17 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!17 -> shippingwire_req?17 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!17 -> shippinglogwire_cmmd!17 -> shippinglogwire_cmmd?17 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!17 -> shippingwire_res?17 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!17 -> orderlogwire_cmmd!17 -> orderlogwire_cmmd?17 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!88 -> orderwire_pevt?88 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!88 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?88 -> orderwire_bevt!88 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (ShippingService.postshipping.posted-> &lt;> ShippinglogwireCommandLog.shippinglogwire.commandstore.persist)">
        <connector href="target.arch#//@connector.6"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="CLOUD_PLATFORM">
        <node name="NodeJSContainer1" component="//@interimmodels.9/@designmodel/@component.0 //@interimmodels.9/@designmodel/@component.10">
          <port name="port" portNumber="15551" node="//@interimmodels.9/@designmodel/@host.0/@node.0" namedport="//@interimmodels.9/@designmodel/@component.0/@port.0"/>
          <port name="port" portNumber="15552" node="//@interimmodels.9/@designmodel/@host.0/@node.0" namedport="//@interimmodels.9/@designmodel/@component.0/@port.2"/>
          <port name="port" portNumber="15553" node="//@interimmodels.9/@designmodel/@host.0/@node.0" namedport="//@interimmodels.9/@designmodel/@component.10/@port.0"/>
          <port name="port" portNumber="15554" node="//@interimmodels.9/@designmodel/@host.0/@node.0" namedport="//@interimmodels.9/@designmodel/@component.0/@port.3"/>
          <port name="port" portNumber="15555" node="//@interimmodels.9/@designmodel/@host.0/@node.0" namedport="//@interimmodels.9/@designmodel/@component.0/@port.1"/>
        </node>
        <node name="GoContainer3" component="//@interimmodels.9/@designmodel/@component.1">
          <port name="port" portNumber="80" node="//@interimmodels.9/@designmodel/@host.0/@node.1" namedport="//@interimmodels.9/@designmodel/@component.1/@port.0" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="SecureServer">
        <node name="GoContainer1" component="//@interimmodels.9/@designmodel/@component.2">
          <port name="port" portNumber="80" node="//@interimmodels.9/@designmodel/@host.1/@node.0" namedport="//@interimmodels.9/@designmodel/@component.2/@port.0" hasFirewall="true"/>
        </node>
        <node name="GoContainer2" component="//@interimmodels.9/@designmodel/@component.6">
          <port name="port" portNumber="80" node="//@interimmodels.9/@designmodel/@host.1/@node.1" namedport="//@interimmodels.9/@designmodel/@component.6/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="LocalServer">
        <node name="JEEContainer1" component="//@interimmodels.9/@designmodel/@component.3 //@interimmodels.9/@designmodel/@component.5">
          <port name="port" portNumber="80" namedport="//@interimmodels.9/@designmodel/@component.3/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15561" node="//@interimmodels.9/@designmodel/@host.2/@node.0" namedport="//@interimmodels.9/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15562" node="//@interimmodels.9/@designmodel/@host.2/@node.0" namedport="//@interimmodels.9/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15563" node="//@interimmodels.9/@designmodel/@host.2/@node.0" namedport="//@interimmodels.9/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15564" node="//@interimmodels.9/@designmodel/@host.2/@node.0" namedport="//@interimmodels.9/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15566" node="//@interimmodels.9/@designmodel/@host.2/@node.0" namedport="//@interimmodels.9/@designmodel/@component.3/@port.1"/>
          <port name="port" portNumber="81" node="//@interimmodels.9/@designmodel/@host.2/@node.0" namedport="//@interimmodels.9/@designmodel/@component.3/@port.1"/>
        </node>
        <node name="MySQL1" component="//@interimmodels.9/@designmodel/@component.4">
          <port name="port" portNumber="3306" node="//@interimmodels.9/@designmodel/@host.2/@node.1" namedport="//@interimmodels.9/@designmodel/@component.4/@port.0 //@interimmodels.9/@designmodel/@component.4/@port.1"/>
        </node>
      </host>
      <host name="BackOfficeServer">
        <node name="JEEContainer4" component="//@interimmodels.9/@designmodel/@component.7 //@interimmodels.9/@designmodel/@component.8">
          <port name="port" portNumber="80" node="//@interimmodels.9/@designmodel/@host.3/@node.0" namedport="//@interimmodels.9/@designmodel/@component.7/@port.0" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15571" node="//@interimmodels.9/@designmodel/@host.3/@node.0" namedport="//@interimmodels.9/@designmodel/@component.7/@port.0"/>
          <port name="port" portNumber="15572" node="//@interimmodels.9/@designmodel/@host.3/@node.0" namedport="//@interimmodels.9/@designmodel/@component.7/@port.0"/>
        </node>
        <node name="MySQL2" component="//@interimmodels.9/@designmodel/@component.9">
          <port name="port" portNumber="3306" node="//@interimmodels.9/@designmodel/@host.3/@node.1" namedport="//@interimmodels.9/@designmodel/@component.9/@port.0 //@interimmodels.9/@designmodel/@component.9/@port.1"/>
        </node>
      </host>
      <link name="link2" linkType="HTTPS" networkType="INTERNET" source="//@interimmodels.9/@designmodel/@host.0/@node.0/@port.1" target="//@interimmodels.9/@designmodel/@host.2/@node.0/@port.0"/>
      <link name="link3" source="//@interimmodels.9/@designmodel/@host.2/@node.0/@port.1"/>
      <link name="link4" source="//@interimmodels.9/@designmodel/@host.2/@node.0/@port.2"/>
      <link name="link5" target="//@interimmodels.9/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link7" networkType="INTERNET" source="//@interimmodels.9/@designmodel/@host.0/@node.0/@port.3"/>
      <link name="link9" source="//@interimmodels.9/@designmodel/@host.0/@node.0/@port.4" target="//@interimmodels.9/@designmodel/@host.0/@node.1/@port.0"/>
      <link name="link11" source="//@interimmodels.9/@designmodel/@host.3/@node.0/@port.1"/>
      <link name="link12" source="//@interimmodels.9/@designmodel/@host.3/@node.0/@port.2"/>
      <link name="link13" target="//@interimmodels.9/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link14" target="//@interimmodels.9/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link16" source="//@interimmodels.9/@designmodel/@host.2/@node.0/@port.5" target="//@interimmodels.9/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link15" networkType="INTERNET" source="//@interimmodels.9/@designmodel/@host.0/@node.0/@port.2" target="//@interimmodels.9/@designmodel/@host.2/@node.0/@port.6"/>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="11" description="network route for connector:shippinglogwire between: shippingservice queuedb " nextModel="//@interimmodels.11" name="network-route">
    <designmodel name="inter11">
      <component name="ShopFrontend" type="client,broadcaster" deploymentnode="//@interimmodels.10/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface,LeastPriviledge">
        <port name="auth" role="//@interimmodels.10/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="checked"/>
        </port>
        <port name="browse" role="//@interimmodels.10/@designmodel/@connector.1/@role.0" type="request,OutboundPort">
          <events name="read"/>
        </port>
        <port name="order" role="//@interimmodels.10/@designmodel/@connector.9/@role.0" type="broadcast,OutboundPort">
          <events name="purchased"/>
        </port>
        <port name="shop" role="//@interimmodels.10/@designmodel/@connector.3/@role.0" type="request,OutboundPort">
          <events name="itemadded"/>
        </port>
      </component>
      <component name="CateloqueService" type="server" deploymentnode="//@interimmodels.10/@designmodel/@host.0/@node.1" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
        <port name="list" role="//@interimmodels.10/@designmodel/@connector.1/@role.1" type="response,InboundPort">
          <events name="query"/>
        </port>
      </component>
      <component name="UserService" type="server" deploymentnode="//@interimmodels.10/@designmodel/@host.1/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DefenseInDepth,DenialOfService">
        <port name="login" role="//@interimmodels.10/@designmodel/@connector.0/@role.1" type="response,InboundPort">
          <events name="signedon"/>
        </port>
      </component>
      <component name="OrdersService" type="client,server,listener,eventconsumer,readendpoint,datawriter,datareader" deploymentnode="//@interimmodels.10/@designmodel/@host.2/@node.0" criticalLevel="Low" securityCharacters="AttackSurface,LeastPriviledge,Compartmentalization,DenialOfService,DataTampering">
        <port name="postorder" role="//@interimmodels.10/@designmodel/@connector.4/@role.0 //@interimmodels.10/@designmodel/@connector.10/@role.0 //@interimmodels.10/@designmodel/@connector.7/@role.0" type="request,listen,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="check" next="//@interimmodels.10/@designmodel/@component.3/@port.0/@events.1"/>
          <events name="save"/>
        </port>
        <port name="get" role="//@interimmodels.10/@designmodel/@connector.2/@role.1 //@interimmodels.10/@designmodel/@connector.8/@role.0" type="response,read,OutboundPort,InboundPort,EventProcessorPort">
          <events name="ack"/>
        </port>
      </component>
      <component name="OrdersDB" type="repository,datastore" deploymentnode="//@interimmodels.10/@designmodel/@host.2/@node.1">
        <port name="writeorder" type="store,InboundPort,EventProcessorPort">
          <events name="orderwritten"/>
        </port>
        <port name="queryorder" role="//@interimmodels.10/@designmodel/@connector.8/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="orderreaded"/>
        </port>
      </component>
      <component name="CartsService" type="server" deploymentnode="//@interimmodels.10/@designmodel/@host.2/@node.0" securityCharacters="AttackSurface,DenialOfService,DataTampering">
        <port name="manage" role="//@interimmodels.10/@designmodel/@connector.3/@role.1" type="response,InboundPort">
          <events name="saveitem"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,datastore" deploymentnode="//@interimmodels.10/@designmodel/@host.1/@node.1" criticalLevel="High" securityCharacters="DefenseInDepth,Compartmentalization">
        <port name="pay" role="//@interimmodels.10/@designmodel/@connector.10/@role.1 //@interimmodels.10/@designmodel/@connector.11/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="paid"/>
        </port>
      </component>
      <component name="ShippingService" type="server,datawriter" deploymentnode="//@interimmodels.10/@designmodel/@host.3/@node.0" securityCharacters="Compartmentalization">
        <port name="postshipping" role="//@interimmodels.10/@designmodel/@connector.4/@role.1 //@interimmodels.10/@designmodel/@connector.6/@role.0" type="response,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="posted"/>
        </port>
      </component>
      <component name="ShippingWorker" type="readendpoint,datareader" deploymentnode="//@interimmodels.10/@designmodel/@host.3/@node.0">
        <port name="listqueue" role="//@interimmodels.10/@designmodel/@connector.5/@role.0" type="read,OutboundPort,EventProcessorPort">
          <events name="renderqueue"/>
        </port>
      </component>
      <component name="QueueDB" type="repository,datastore" deploymentnode="//@interimmodels.10/@designmodel/@host.3/@node.1">
        <port name="writequeue" role="//@interimmodels.10/@designmodel/@connector.6/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="queuewritten"/>
        </port>
        <port name="readqueue" role="//@interimmodels.10/@designmodel/@connector.5/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="queuereaded"/>
        </port>
      </component>
      <component name="ShopBackend" type="client" deploymentnode="//@interimmodels.10/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface">
        <port name="listorder" role="//@interimmodels.10/@designmodel/@connector.2/@role.0" type="request,OutboundPort">
          <events name="renderlist"/>
        </port>
      </component>
      <component name="ShippinglogwireCommandLog" type="commanddb,datastore">
        <port name="logshippinglogwire" role="//@interimmodels.10/@designmodel/@connector.6/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.3/@node.2"/>
      </component>
      <component name="OrderwireLog" type="eventlogger,datastore">
        <port name="logorderwire" role="//@interimmodels.10/@designmodel/@connector.9/@role.2" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="append" role="//@interimmodels.10/@designmodel/@connector.11/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <deploymentnode href="target.arch#//@host.4/@node.0"/>
      </component>
      <component name="OrderlogwireCommandLog" type="commanddb,datastore">
        <port name="logorderlogwire" role="//@interimmodels.10/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <connector name="userwire" type="CSConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.10/@designmodel/@connector.0"/>
      </connector>
      <connector name="cateloquewire" type="CSConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.1"/>
        <role name="responder" roletype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.10/@designmodel/@connector.1"/>
      </connector>
      <connector name="orderquerywire" type="CSConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.2"/>
        <role name="responder" roletype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.10/@designmodel/@connector.8/@role.0" connector="//@interimmodels.10/@designmodel/@connector.2"/>
      </connector>
      <connector name="cartwire" type="CSConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.3"/>
        <role name="responder" roletype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.10/@designmodel/@connector.3"/>
      </connector>
      <connector name="shippingwire" type="CSConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.10/@designmodel/@connector.6/@role.0" connector="//@interimmodels.10/@designmodel/@connector.4"/>
      </connector>
      <connector name="queuereadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.5"/>
        <role name="readstorage" roletype="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.10/@designmodel/@connector.5"/>
      </connector>
      <connector name="shippinglogwire" type="CRConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.6"/>
        <role name="readstore" roletype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.10/@designmodel/@connector.6"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.4/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.6"/>
        </role>
      </connector>
      <connector name="orderlogwire" type="CRConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.10/@designmodel/@connector.10/@role.0" connector="//@interimmodels.10/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.10/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.4/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="orderreadwire" type="QRConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0">
        <role name="querier" roletype="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.8"/>
        <role name="readstore" roletype="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.10/@designmodel/@connector.8"/>
      </connector>
      <connector name="orderwire" type="ESConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.10/@designmodel/@archstyle.1/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.9"/>
        <role name="eventsubscriber" roletype="//@interimmodels.10/@designmodel/@archstyle.1/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.10/@designmodel/@connector.7/@role.0" connector="//@interimmodels.10/@designmodel/@connector.9"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.9"/>
        </role>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="writer" nextRoleExpr="//@interimmodels.10/@designmodel/@connector.4/@role.0" connector="//@interimmodels.10/@designmodel/@connector.10"/>
        <role name="writestorage" roletype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="writestorage" connector="//@interimmodels.10/@designmodel/@connector.10"/>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.10/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.10/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.10/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.10/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.10/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.10/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.10/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.10/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.10/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.10/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.10/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.4" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
            <event name="Skip"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.10/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.10/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.10/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.10/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.10/@designmodel/@archstyle.4/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.10/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.10/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.10/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.10/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.10/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.10/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.10/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.10/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.10/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.10/@designmodel" counterExample="" visitedStates="17607" verifyTime="0.5101317" testport="//@interimmodels.10/@designmodel/@component.0/@port.3" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!64 -> paywire_req?64 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!64 -> paywire_res?64 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!64 -> shippingwire_req?64 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!64 -> shippinglogwire_stmt?64 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!64 -> shippinglogwire_cmmd?64 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!64 -> shippingwire_res?64 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!64 -> orderlogwire_cmmd!64 -> orderlogwire_cmmd?64 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!95 -> cartwire_req?95 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!95 -> cartwire_res?95" exprText="[]  (ShopFrontend.shop.itemadded -> &lt;> CartsService.manage.saveitem)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.10/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.0/@port.3/@events.0" nextExpr="//@interimmodels.10/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.10/@designmodel" counterExample="" visitedStates="19038" verifyTime="0.5761702" testport="//@interimmodels.10/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!29 -> paywire_req?29 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!29 -> paywire_res?29 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!29 -> shippingwire_req?29 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!29 -> shippinglogwire_stmt?29 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!29 -> shippinglogwire_cmmd?29 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!29 -> shippingwire_res?29 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!29 -> orderlogwire_cmmd!29 -> orderlogwire_cmmd?29 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!22 -> orderwire_pevt?22 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!22 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?22 -> orderwire_bevt!22 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (Payment.pay.paid -> &lt;> ShippingService.postshipping.posted)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.10/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.6/@port.0/@events.0" nextExpr="//@interimmodels.10/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.10/@designmodel" valid="false" counterExample="init -> OrdersService_paywire_writer_request -> paywire_req!39 -> paywire_req?39 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!39 -> paywire_res?39 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!39 -> shippingwire_req?39 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!39 -> shippinglogwire_stmt?39 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!39 -> shippinglogwire_cmmd?39 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!39 -> shippingwire_res?39 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!39 -> orderlogwire_cmmd!39 -> orderlogwire_cmmd?39 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!63 -> cartwire_req?63 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!63 -> cartwire_res?63" visitedStates="11530" verifyTime="0.3793856" testport="//@interimmodels.10/@designmodel/@component.0/@port.3" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter11() |= ![](OrdersService_postorder_save->&lt;" exprText="[]  (OrdersService.postorder.save -> &lt;> Payment.pay.paid)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.10/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.3/@port.0/@events.1" nextExpr="//@interimmodels.10/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.10/@designmodel" counterExample="" visitedStates="17607" verifyTime="0.5176227999999999" testport="//@interimmodels.10/@designmodel/@component.0/@port.0" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!70 -> paywire_req?70 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!70 -> paywire_res?70 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!70 -> shippingwire_req?70 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!70 -> shippinglogwire_stmt?70 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!70 -> shippinglogwire_cmmd?70 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!70 -> shippingwire_res?70 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!70 -> orderlogwire_cmmd!70 -> orderlogwire_cmmd?70 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!96 -> userwire_req?96 -> UserService_userwire_responder_invoke -> UserService_login_signedon -> UserService_userwire_responder_process -> userwire_res!96 -> userwire_res?96" exprText="[]  (ShopFrontend.auth.checked -> &lt;> UserService.login.signedon)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.10/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.10/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.10/@designmodel" counterExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!62 -> cateloquewire_req?62 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!62 -> cateloquewire_res?62" visitedStates="28880" verifyTime="0.8750967" testport="//@interimmodels.10/@designmodel/@component.0/@port.1" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!67 -> paywire_req?67 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!67 -> paywire_res?67 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!67 -> shippingwire_req?67 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!67 -> shippinglogwire_stmt?67 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!67 -> shippinglogwire_cmmd?67 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!67 -> shippingwire_res?67 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!67 -> orderlogwire_cmmd!67 -> orderlogwire_cmmd?67 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!19 -> cateloquewire_req?19 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!19 -> cateloquewire_res?19" exprText="[]  (&lt;> ShopFrontend.browse.read -> &lt;> CateloqueService.list.query)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.10/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.1/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.0/@port.1/@events.0" operator="EVENTUALLY" nextExpr="//@interimmodels.10/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop6" model="//@interimmodels.10/@designmodel" counterExample="" visitedStates="31971" verifyTime="0.9166000999999999" testport="//@interimmodels.10/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!65 -> orderquerywire_req?65 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_querier_process -> orderreadwire_stmt!65 -> orderreadwire_stmt?65 -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstore_process -> orderreadwire_res!65 -> orderreadwire_res?65 -> OrdersService_orderreadwire_querier_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!65 -> orderquerywire_res?65 -> OrdersService_paywire_writer_request -> paywire_req!85 -> paywire_req?85 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!85 -> paywire_res?85 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!85 -> shippingwire_req?85 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!85 -> shippinglogwire_stmt?85 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!85 -> shippinglogwire_cmmd?85 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!85 -> shippingwire_res?85 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!85 -> orderlogwire_cmmd!85 -> orderlogwire_cmmd?85 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist" exprText="[]  (ShopBackend.listorder.renderlist -> &lt;> OrdersDB.queryorder.orderreaded)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.10/@designmodel/@verifyProperty.5">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.10/@port.0/@events.0" nextExpr="//@interimmodels.10/@designmodel/@verifyProperty.5/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop7" model="//@interimmodels.10/@designmodel" valid="false" counterExample="init -> OrdersService_paywire_writer_request -> paywire_req!80 -> paywire_req?80 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!80 -> paywire_res?80 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!80 -> shippingwire_req?80 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!80 -> shippinglogwire_stmt?80 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!80 -> shippinglogwire_cmmd?80 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!80 -> shippingwire_res?80 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!80 -> orderlogwire_cmmd!80 -> orderlogwire_cmmd?80 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!82 -> orderwire_pevt?82 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!82 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?82 -> orderwire_bevt!82 -> ShopFrontend_orderwire_eventpublisher_broadcast" visitedStates="158" verifyTime="0.026493" testport="//@interimmodels.10/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!80 -> paywire_req?80 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!80 -> paywire_res?80 -> OrdersService_postorder_check -> ShopFrontend_order_purchased -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!80 -> shippingwire_req?80 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!80 -> shippinglogwire_stmt?80 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!80 -> shippinglogwire_cmmd?80 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!80 -> shippingwire_res?80 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!80 -> orderlogwire_cmmd!80 -> orderlogwire_cmmd?80 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!82 -> orderwire_pevt?82 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!82 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?82 -> orderwire_bevt!82 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (ShopFrontend.order.purchased -> &lt;> OrdersService.postorder.save)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.10/@designmodel/@verifyProperty.6">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.3/@port.0/@events.1" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.10/@designmodel/@verifyProperty.6/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-orderwire" visitedStates="30624" verifyTime="0.9021047999999999" testport="//@interimmodels.10/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!60 -> paywire_req?60 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!60 -> paywire_res?60 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!60 -> shippingwire_req?60 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!60 -> shippinglogwire_stmt?60 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!60 -> shippinglogwire_cmmd?60 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!60 -> shippingwire_res?60 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!60 -> orderlogwire_cmmd!60 -> orderlogwire_cmmd?60 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!36 -> orderwire_pevt?36 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!36 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?36 -> orderwire_bevt!36 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (ShopFrontend.order.purchased-> &lt;> OrderwireLog.orderwire.eventstore.persist)">
        <connector href="target.arch#//@connector.9"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" valid="false" counterExample="init -> OrdersService_paywire_writer_request -> paywire_req!40 -> paywire_req?40 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!40 -> paywire_res?40 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!40 -> shippingwire_req?40 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!40 -> shippinglogwire_stmt?40 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!40 -> shippinglogwire_cmmd?40 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!40 -> shippingwire_res?40 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!40 -> orderlogwire_cmmd!40 -> orderlogwire_cmmd?40 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!56 -> orderwire_pevt?56 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!56 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?56 -> orderwire_bevt!56 -> ShopFrontend_orderwire_eventpublisher_broadcast" visitedStates="18595" verifyTime="0.5823423999999999" testport="//@interimmodels.10/@designmodel/@component.0/@port.2" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter11() |= ![](Payment_pay_paid->&lt;" exprText="[] (Payment.pay.paid-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.11"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-orderlogwire" visitedStates="35634" verifyTime="1.0411107" testport="//@interimmodels.10/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!85 -> paywire_req?85 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!85 -> paywire_res?85 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!85 -> shippingwire_req?85 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!85 -> shippinglogwire_stmt?85 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!85 -> shippinglogwire_cmmd?85 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!85 -> shippingwire_res?85 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!85 -> orderlogwire_cmmd!85 -> orderlogwire_cmmd?85 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!88 -> orderwire_pevt?88 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!88 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?88 -> orderwire_bevt!88 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (OrdersService.postorder.check-> &lt;> OrderlogwireCommandLog.orderlogwire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-query-orderreadwire" visitedStates="27183" verifyTime="0.7776991" testport="//@interimmodels.10/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!91 -> orderquerywire_req?91 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_querier_process -> orderreadwire_stmt!91 -> orderreadwire_stmt?91 -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstore_process -> orderreadwire_res!91 -> orderreadwire_res?91 -> OrdersService_orderreadwire_querier_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!91 -> orderquerywire_res?91 -> OrdersService_paywire_writer_request -> paywire_req!37 -> paywire_req?37 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!37 -> paywire_res?37 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!37 -> shippingwire_req?37 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!37 -> shippinglogwire_stmt?37 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!37 -> shippinglogwire_cmmd?37 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!37 -> shippingwire_res?37 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!37 -> orderlogwire_cmmd!37 -> orderlogwire_cmmd?37 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist" exprText="[] (OrdersService.get.ack-> &lt;> OrdersDB.orderreadwire.readstore.process)">
        <connector href="target.arch#//@connector.8"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-shippinglogwire" visitedStates="33018" verifyTime="0.9584467" testport="//@interimmodels.10/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!22 -> paywire_req?22 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!22 -> paywire_res?22 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!22 -> shippingwire_req?22 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!22 -> shippinglogwire_stmt?22 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!22 -> shippinglogwire_cmmd?22 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!22 -> shippingwire_res?22 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!22 -> orderlogwire_cmmd!22 -> orderlogwire_cmmd?22 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!97 -> orderwire_pevt?97 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!97 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?97 -> orderwire_bevt!97 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (ShippingService.postshipping.posted-> &lt;> ShippinglogwireCommandLog.shippinglogwire.commandstore.persist)">
        <connector href="target.arch#//@connector.6"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="CLOUD_PLATFORM">
        <node name="NodeJSContainer1" component="//@interimmodels.10/@designmodel/@component.0 //@interimmodels.10/@designmodel/@component.10">
          <port name="port" portNumber="15551" node="//@interimmodels.10/@designmodel/@host.0/@node.0" namedport="//@interimmodels.10/@designmodel/@component.0/@port.0"/>
          <port name="port" portNumber="15552" node="//@interimmodels.10/@designmodel/@host.0/@node.0" namedport="//@interimmodels.10/@designmodel/@component.0/@port.2"/>
          <port name="port" portNumber="15553" node="//@interimmodels.10/@designmodel/@host.0/@node.0" namedport="//@interimmodels.10/@designmodel/@component.10/@port.0"/>
          <port name="port" portNumber="15554" node="//@interimmodels.10/@designmodel/@host.0/@node.0" namedport="//@interimmodels.10/@designmodel/@component.0/@port.3"/>
          <port name="port" portNumber="15555" node="//@interimmodels.10/@designmodel/@host.0/@node.0" namedport="//@interimmodels.10/@designmodel/@component.0/@port.1"/>
        </node>
        <node name="GoContainer3" component="//@interimmodels.10/@designmodel/@component.1">
          <port name="port" portNumber="80" node="//@interimmodels.10/@designmodel/@host.0/@node.1" namedport="//@interimmodels.10/@designmodel/@component.1/@port.0" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="SecureServer">
        <node name="GoContainer1" component="//@interimmodels.10/@designmodel/@component.2">
          <port name="port" portNumber="80" node="//@interimmodels.10/@designmodel/@host.1/@node.0" namedport="//@interimmodels.10/@designmodel/@component.2/@port.0" hasFirewall="true"/>
        </node>
        <node name="GoContainer2" component="//@interimmodels.10/@designmodel/@component.6">
          <port name="port" portNumber="80" node="//@interimmodels.10/@designmodel/@host.1/@node.1" namedport="//@interimmodels.10/@designmodel/@component.6/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="LocalServer">
        <node name="JEEContainer1" component="//@interimmodels.10/@designmodel/@component.3 //@interimmodels.10/@designmodel/@component.5">
          <port name="port" portNumber="80" namedport="//@interimmodels.10/@designmodel/@component.3/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15561" node="//@interimmodels.10/@designmodel/@host.2/@node.0" namedport="//@interimmodels.10/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15562" node="//@interimmodels.10/@designmodel/@host.2/@node.0" namedport="//@interimmodels.10/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15563" node="//@interimmodels.10/@designmodel/@host.2/@node.0" namedport="//@interimmodels.10/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15564" node="//@interimmodels.10/@designmodel/@host.2/@node.0" namedport="//@interimmodels.10/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15566" node="//@interimmodels.10/@designmodel/@host.2/@node.0" namedport="//@interimmodels.10/@designmodel/@component.3/@port.1"/>
          <port name="port" portNumber="81" node="//@interimmodels.10/@designmodel/@host.2/@node.0" namedport="//@interimmodels.10/@designmodel/@component.3/@port.1"/>
        </node>
        <node name="MySQL1" component="//@interimmodels.10/@designmodel/@component.4">
          <port name="port" portNumber="3306" node="//@interimmodels.10/@designmodel/@host.2/@node.1" namedport="//@interimmodels.10/@designmodel/@component.4/@port.0 //@interimmodels.10/@designmodel/@component.4/@port.1"/>
        </node>
      </host>
      <host name="BackOfficeServer">
        <node name="JEEContainer4" component="//@interimmodels.10/@designmodel/@component.7 //@interimmodels.10/@designmodel/@component.8">
          <port name="port" portNumber="80" node="//@interimmodels.10/@designmodel/@host.3/@node.0" namedport="//@interimmodels.10/@designmodel/@component.7/@port.0" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15571" node="//@interimmodels.10/@designmodel/@host.3/@node.0" namedport="//@interimmodels.10/@designmodel/@component.7/@port.0"/>
          <port name="port" portNumber="15572" node="//@interimmodels.10/@designmodel/@host.3/@node.0" namedport="//@interimmodels.10/@designmodel/@component.7/@port.0"/>
        </node>
        <node name="MySQL2" component="//@interimmodels.10/@designmodel/@component.9">
          <port name="port" portNumber="3306" node="//@interimmodels.10/@designmodel/@host.3/@node.1" namedport="//@interimmodels.10/@designmodel/@component.9/@port.0 //@interimmodels.10/@designmodel/@component.9/@port.1"/>
        </node>
      </host>
      <link name="link2" linkType="HTTPS" networkType="INTERNET" source="//@interimmodels.10/@designmodel/@host.0/@node.0/@port.1" target="//@interimmodels.10/@designmodel/@host.2/@node.0/@port.0"/>
      <link name="link3" source="//@interimmodels.10/@designmodel/@host.2/@node.0/@port.1"/>
      <link name="link4" source="//@interimmodels.10/@designmodel/@host.2/@node.0/@port.2"/>
      <link name="link5" target="//@interimmodels.10/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link7" networkType="INTERNET" source="//@interimmodels.10/@designmodel/@host.0/@node.0/@port.3"/>
      <link name="link9" source="//@interimmodels.10/@designmodel/@host.0/@node.0/@port.4" target="//@interimmodels.10/@designmodel/@host.0/@node.1/@port.0"/>
      <link name="link11" source="//@interimmodels.10/@designmodel/@host.3/@node.0/@port.1"/>
      <link name="link12" source="//@interimmodels.10/@designmodel/@host.3/@node.0/@port.2"/>
      <link name="link13" target="//@interimmodels.10/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link14" target="//@interimmodels.10/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link16" source="//@interimmodels.10/@designmodel/@host.2/@node.0/@port.5" target="//@interimmodels.10/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link15" networkType="INTERNET" source="//@interimmodels.10/@designmodel/@host.0/@node.0/@port.2" target="//@interimmodels.10/@designmodel/@host.2/@node.0/@port.6"/>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="12" description="network route for connector:orderwire between: shopfrontend ordersservice " nextModel="//@interimmodels.12" name="network-route">
    <designmodel name="inter12">
      <component name="ShopFrontend" type="client,broadcaster" deploymentnode="//@interimmodels.11/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface,LeastPriviledge">
        <port name="auth" role="//@interimmodels.11/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="checked"/>
        </port>
        <port name="browse" role="//@interimmodels.11/@designmodel/@connector.1/@role.0" type="request,OutboundPort">
          <events name="read"/>
        </port>
        <port name="order" role="//@interimmodels.11/@designmodel/@connector.9/@role.0" type="broadcast,OutboundPort">
          <events name="purchased"/>
        </port>
        <port name="shop" role="//@interimmodels.11/@designmodel/@connector.3/@role.0" type="request,OutboundPort">
          <events name="itemadded"/>
        </port>
      </component>
      <component name="CateloqueService" type="server" deploymentnode="//@interimmodels.11/@designmodel/@host.0/@node.1" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
        <port name="list" role="//@interimmodels.11/@designmodel/@connector.1/@role.1" type="response,InboundPort">
          <events name="query"/>
        </port>
      </component>
      <component name="UserService" type="server" deploymentnode="//@interimmodels.11/@designmodel/@host.1/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DefenseInDepth,DenialOfService">
        <port name="login" role="//@interimmodels.11/@designmodel/@connector.0/@role.1" type="response,InboundPort">
          <events name="signedon"/>
        </port>
      </component>
      <component name="OrdersService" type="client,server,listener,eventconsumer,readendpoint,datawriter,datareader" deploymentnode="//@interimmodels.11/@designmodel/@host.2/@node.0" criticalLevel="Low" securityCharacters="AttackSurface,LeastPriviledge,Compartmentalization,DenialOfService,DataTampering">
        <port name="postorder" role="//@interimmodels.11/@designmodel/@connector.4/@role.0 //@interimmodels.11/@designmodel/@connector.10/@role.0 //@interimmodels.11/@designmodel/@connector.7/@role.0 //@interimmodels.11/@designmodel/@connector.9/@role.1" type="request,listen,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="check" next="//@interimmodels.11/@designmodel/@component.3/@port.0/@events.1"/>
          <events name="save"/>
        </port>
        <port name="get" role="//@interimmodels.11/@designmodel/@connector.2/@role.1 //@interimmodels.11/@designmodel/@connector.8/@role.0" type="response,read,OutboundPort,InboundPort,EventProcessorPort">
          <events name="ack"/>
        </port>
      </component>
      <component name="OrdersDB" type="repository,datastore" deploymentnode="//@interimmodels.11/@designmodel/@host.2/@node.1">
        <port name="writeorder" type="store,InboundPort,EventProcessorPort">
          <events name="orderwritten"/>
        </port>
        <port name="queryorder" role="//@interimmodels.11/@designmodel/@connector.8/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="orderreaded"/>
        </port>
      </component>
      <component name="CartsService" type="server" deploymentnode="//@interimmodels.11/@designmodel/@host.2/@node.0" securityCharacters="AttackSurface,DenialOfService,DataTampering">
        <port name="manage" role="//@interimmodels.11/@designmodel/@connector.3/@role.1" type="response,InboundPort">
          <events name="saveitem"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,datastore" deploymentnode="//@interimmodels.11/@designmodel/@host.1/@node.1" criticalLevel="High" securityCharacters="DefenseInDepth,Compartmentalization">
        <port name="pay" role="//@interimmodels.11/@designmodel/@connector.10/@role.1 //@interimmodels.11/@designmodel/@connector.11/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="paid"/>
        </port>
      </component>
      <component name="ShippingService" type="server,datawriter" deploymentnode="//@interimmodels.11/@designmodel/@host.3/@node.0" securityCharacters="Compartmentalization">
        <port name="postshipping" role="//@interimmodels.11/@designmodel/@connector.4/@role.1 //@interimmodels.11/@designmodel/@connector.6/@role.0" type="response,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="posted"/>
        </port>
      </component>
      <component name="ShippingWorker" type="readendpoint,datareader" deploymentnode="//@interimmodels.11/@designmodel/@host.3/@node.0">
        <port name="listqueue" role="//@interimmodels.11/@designmodel/@connector.5/@role.0" type="read,OutboundPort,EventProcessorPort">
          <events name="renderqueue"/>
        </port>
      </component>
      <component name="QueueDB" type="repository,datastore" deploymentnode="//@interimmodels.11/@designmodel/@host.3/@node.1">
        <port name="writequeue" role="//@interimmodels.11/@designmodel/@connector.6/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="queuewritten"/>
        </port>
        <port name="readqueue" role="//@interimmodels.11/@designmodel/@connector.5/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="queuereaded"/>
        </port>
      </component>
      <component name="ShopBackend" type="client" deploymentnode="//@interimmodels.11/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface">
        <port name="listorder" role="//@interimmodels.11/@designmodel/@connector.2/@role.0" type="request,OutboundPort">
          <events name="renderlist"/>
        </port>
      </component>
      <component name="ShippinglogwireCommandLog" type="commanddb,datastore">
        <port name="logshippinglogwire" role="//@interimmodels.11/@designmodel/@connector.6/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.3/@node.2"/>
      </component>
      <component name="OrderwireLog" type="eventlogger,datastore">
        <port name="logorderwire" role="//@interimmodels.11/@designmodel/@connector.9/@role.2" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="append" role="//@interimmodels.11/@designmodel/@connector.11/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <deploymentnode href="target.arch#//@host.4/@node.0"/>
      </component>
      <component name="OrderlogwireCommandLog" type="commanddb,datastore">
        <port name="logorderlogwire" role="//@interimmodels.11/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <connector name="userwire" type="CSConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.11/@designmodel/@connector.0"/>
      </connector>
      <connector name="cateloquewire" type="CSConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.1"/>
        <role name="responder" roletype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.11/@designmodel/@connector.1"/>
      </connector>
      <connector name="orderquerywire" type="CSConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.2"/>
        <role name="responder" roletype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.11/@designmodel/@connector.8/@role.0" connector="//@interimmodels.11/@designmodel/@connector.2"/>
      </connector>
      <connector name="cartwire" type="CSConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.3"/>
        <role name="responder" roletype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.11/@designmodel/@connector.3"/>
      </connector>
      <connector name="shippingwire" type="CSConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.11/@designmodel/@connector.6/@role.0" connector="//@interimmodels.11/@designmodel/@connector.4"/>
      </connector>
      <connector name="queuereadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.5"/>
        <role name="readstorage" roletype="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.11/@designmodel/@connector.5"/>
      </connector>
      <connector name="shippinglogwire" type="CRConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.6"/>
        <role name="readstore" roletype="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.11/@designmodel/@connector.6"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.4/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.6"/>
        </role>
      </connector>
      <connector name="orderlogwire" type="CRConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.11/@designmodel/@connector.10/@role.0" connector="//@interimmodels.11/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.11/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.4/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="orderreadwire" type="QRConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0">
        <role name="querier" roletype="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.8"/>
        <role name="readstore" roletype="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.11/@designmodel/@connector.8"/>
      </connector>
      <connector name="orderwire" type="ESConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.11/@designmodel/@archstyle.1/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.9"/>
        <role name="eventsubscriber" roletype="//@interimmodels.11/@designmodel/@archstyle.1/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.11/@designmodel/@connector.7/@role.0" connector="//@interimmodels.11/@designmodel/@connector.9"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.9"/>
        </role>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="writer" nextRoleExpr="//@interimmodels.11/@designmodel/@connector.4/@role.0" connector="//@interimmodels.11/@designmodel/@connector.10"/>
        <role name="writestorage" roletype="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="writestorage" connector="//@interimmodels.11/@designmodel/@connector.10"/>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.11/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.11/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.11/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.11/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.11/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.11/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.11/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.11/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.11/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.11/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.11/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.4" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
            <event name="Skip"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.11/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.11/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.11/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.11/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.11/@designmodel/@archstyle.4/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.11/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.11/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.11/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.11/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.11/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.11/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.11/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.11/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.11/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.11/@designmodel" counterExample="" visitedStates="15" verifyTime="0.0837434" testport="//@interimmodels.11/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!72 -> cartwire_req?72 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!72 -> cartwire_res?72" exprText="[]  (ShopFrontend.shop.itemadded -> &lt;> CartsService.manage.saveitem)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.11/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.0/@port.3/@events.0" nextExpr="//@interimmodels.11/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.11/@designmodel" counterExample="" visitedStates="16890" verifyTime="0.6094670999999999" testport="//@interimmodels.11/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!86 -> orderwire_pevt?86 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!86 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?86 -> orderwire_bevt!86 -> orderwire_bevt?86 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!86 -> orderlogwire_cmmd!86 -> orderlogwire_cmmd?86 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_writer_request -> paywire_req!86 -> paywire_req?86 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!86 -> paywire_res?86 -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!86 -> shippingwire_req?86 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!86 -> shippinglogwire_stmt?86 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!86 -> shippinglogwire_cmmd?86 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!86 -> shippingwire_res?86 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (Payment.pay.paid -> &lt;> ShippingService.postshipping.posted)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.11/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.6/@port.0/@events.0" nextExpr="//@interimmodels.11/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.11/@designmodel" visitedStates="10" verifyTime="0.0269827" testport="//@interimmodels.11/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!25 -> cartwire_req?25 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!25 -> cartwire_res?25" exprText="[]  (OrdersService.postorder.save -> &lt;> Payment.pay.paid)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.11/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.3/@port.0/@events.1" nextExpr="//@interimmodels.11/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.11/@designmodel" counterExample="" visitedStates="15" verifyTime="0.0231413" testport="//@interimmodels.11/@designmodel/@component.0/@port.0" traceExample="init -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!43 -> userwire_req?43 -> UserService_userwire_responder_invoke -> UserService_login_signedon -> UserService_userwire_responder_process -> userwire_res!43 -> userwire_res?43" exprText="[]  (ShopFrontend.auth.checked -> &lt;> UserService.login.signedon)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.11/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.11/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.11/@designmodel" counterExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!62 -> cateloquewire_req?62 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!62 -> cateloquewire_res?62" visitedStates="24" verifyTime="0.0242338" testport="//@interimmodels.11/@designmodel/@component.0/@port.1" traceExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!34 -> cateloquewire_req?34 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!34 -> cateloquewire_res?34" exprText="[]  (&lt;> ShopFrontend.browse.read -> &lt;> CateloqueService.list.query)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.11/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.1/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.0/@port.1/@events.0" operator="EVENTUALLY" nextExpr="//@interimmodels.11/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop6" model="//@interimmodels.11/@designmodel" counterExample="" visitedStates="27" verifyTime="0.025852399999999998" testport="//@interimmodels.11/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!91 -> orderquerywire_req?91 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_querier_process -> orderreadwire_stmt!91 -> orderreadwire_stmt?91 -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstore_process -> orderreadwire_res!91 -> orderreadwire_res?91 -> OrdersService_orderreadwire_querier_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!91 -> orderquerywire_res?91" exprText="[]  (ShopBackend.listorder.renderlist -> &lt;> OrdersDB.queryorder.orderreaded)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.11/@designmodel/@verifyProperty.5">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.10/@port.0/@events.0" nextExpr="//@interimmodels.11/@designmodel/@verifyProperty.5/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop7" model="//@interimmodels.11/@designmodel" counterExample="" visitedStates="16363" verifyTime="0.4783634" testport="//@interimmodels.11/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!88 -> orderwire_pevt?88 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!88 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?88 -> orderwire_bevt!88 -> orderwire_bevt?88 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!88 -> orderlogwire_cmmd!88 -> orderlogwire_cmmd?88 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_writer_request -> paywire_req!88 -> paywire_req?88 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!88 -> paywire_res?88 -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!88 -> shippingwire_req?88 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!88 -> shippinglogwire_stmt?88 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!88 -> shippinglogwire_cmmd?88 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!88 -> shippingwire_res?88 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (ShopFrontend.order.purchased -> &lt;> OrdersService.postorder.save)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.11/@designmodel/@verifyProperty.6">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.3/@port.0/@events.1" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.11/@designmodel/@verifyProperty.6/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-orderwire" visitedStates="23501" verifyTime="0.6879373" testport="//@interimmodels.11/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!97 -> orderwire_pevt?97 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!97 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?97 -> orderwire_bevt!97 -> orderwire_bevt?97 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!97 -> orderlogwire_cmmd!97 -> orderlogwire_cmmd?97 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_writer_request -> paywire_req!97 -> paywire_req?97 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!97 -> paywire_res?97 -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!97 -> shippingwire_req?97 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!97 -> shippinglogwire_stmt?97 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!97 -> shippinglogwire_cmmd?97 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!97 -> shippingwire_res?97 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (ShopFrontend.order.purchased-> &lt;> OrderwireLog.orderwire.eventstore.persist)">
        <connector href="target.arch#//@connector.9"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" valid="false" counterExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!12 -> orderwire_pevt?12 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!12 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?12 -> orderwire_bevt!12 -> orderwire_bevt?12 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!12 -> orderlogwire_cmmd!12 -> orderlogwire_cmmd?12 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_writer_request -> paywire_req!12 -> paywire_req?12 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!12 -> paywire_res?12 -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!12 -> shippingwire_req?12 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!12 -> shippinglogwire_stmt?12 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!12 -> shippinglogwire_cmmd?12 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!12 -> shippingwire_res?12 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" visitedStates="1206" verifyTime="0.052472899999999996" testport="//@interimmodels.11/@designmodel/@component.0/@port.2" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter12() |= ![](Payment_pay_paid->&lt;" exprText="[] (Payment.pay.paid-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.11"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-orderlogwire" visitedStates="29222" verifyTime="0.8794847" testport="//@interimmodels.11/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!60 -> orderwire_pevt?60 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!60 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?60 -> orderwire_bevt!60 -> orderwire_bevt?60 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!60 -> orderlogwire_cmmd!60 -> orderlogwire_cmmd?60 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_writer_request -> paywire_req!60 -> paywire_req?60 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!60 -> paywire_res?60 -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!60 -> shippingwire_req?60 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!60 -> shippinglogwire_stmt?60 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!60 -> shippinglogwire_cmmd?60 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!60 -> shippingwire_res?60 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (OrdersService.postorder.check-> &lt;> OrderlogwireCommandLog.orderlogwire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-query-orderreadwire" visitedStates="23" verifyTime="0.025431199999999998" testport="//@interimmodels.11/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!84 -> orderquerywire_req?84 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_querier_process -> orderreadwire_stmt!84 -> orderreadwire_stmt?84 -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstore_process -> orderreadwire_res!84 -> orderreadwire_res?84 -> OrdersService_orderreadwire_querier_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!84 -> orderquerywire_res?84" exprText="[] (OrdersService.get.ack-> &lt;> OrdersDB.orderreadwire.readstore.process)">
        <connector href="target.arch#//@connector.8"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-shippinglogwire" visitedStates="28602" verifyTime="0.8557342" testport="//@interimmodels.11/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!30 -> orderwire_pevt?30 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!30 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?30 -> orderwire_bevt!30 -> orderwire_bevt?30 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!30 -> orderlogwire_cmmd!30 -> orderlogwire_cmmd?30 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_writer_request -> paywire_req!30 -> paywire_req?30 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!30 -> paywire_res?30 -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!30 -> shippingwire_req?30 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!30 -> shippinglogwire_stmt?30 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!30 -> shippinglogwire_cmmd?30 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!30 -> shippingwire_res?30 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (ShippingService.postshipping.posted-> &lt;> ShippinglogwireCommandLog.shippinglogwire.commandstore.persist)">
        <connector href="target.arch#//@connector.6"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="CLOUD_PLATFORM">
        <node name="NodeJSContainer1" component="//@interimmodels.11/@designmodel/@component.0 //@interimmodels.11/@designmodel/@component.10">
          <port name="port" portNumber="15551" node="//@interimmodels.11/@designmodel/@host.0/@node.0" namedport="//@interimmodels.11/@designmodel/@component.0/@port.0"/>
          <port name="port" portNumber="15552" node="//@interimmodels.11/@designmodel/@host.0/@node.0" namedport="//@interimmodels.11/@designmodel/@component.0/@port.2"/>
          <port name="port" portNumber="15553" node="//@interimmodels.11/@designmodel/@host.0/@node.0" namedport="//@interimmodels.11/@designmodel/@component.10/@port.0"/>
          <port name="port" portNumber="15554" node="//@interimmodels.11/@designmodel/@host.0/@node.0" namedport="//@interimmodels.11/@designmodel/@component.0/@port.3"/>
          <port name="port" portNumber="15555" node="//@interimmodels.11/@designmodel/@host.0/@node.0" namedport="//@interimmodels.11/@designmodel/@component.0/@port.1"/>
        </node>
        <node name="GoContainer3" component="//@interimmodels.11/@designmodel/@component.1">
          <port name="port" portNumber="80" node="//@interimmodels.11/@designmodel/@host.0/@node.1" namedport="//@interimmodels.11/@designmodel/@component.1/@port.0" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="SecureServer">
        <node name="GoContainer1" component="//@interimmodels.11/@designmodel/@component.2">
          <port name="port" portNumber="80" node="//@interimmodels.11/@designmodel/@host.1/@node.0" namedport="//@interimmodels.11/@designmodel/@component.2/@port.0" hasFirewall="true"/>
        </node>
        <node name="GoContainer2" component="//@interimmodels.11/@designmodel/@component.6">
          <port name="port" portNumber="80" node="//@interimmodels.11/@designmodel/@host.1/@node.1" namedport="//@interimmodels.11/@designmodel/@component.6/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="LocalServer">
        <node name="JEEContainer1" component="//@interimmodels.11/@designmodel/@component.3 //@interimmodels.11/@designmodel/@component.5">
          <port name="port" portNumber="80" namedport="//@interimmodels.11/@designmodel/@component.3/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15561" node="//@interimmodels.11/@designmodel/@host.2/@node.0" namedport="//@interimmodels.11/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15562" node="//@interimmodels.11/@designmodel/@host.2/@node.0" namedport="//@interimmodels.11/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15563" node="//@interimmodels.11/@designmodel/@host.2/@node.0" namedport="//@interimmodels.11/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15564" node="//@interimmodels.11/@designmodel/@host.2/@node.0" namedport="//@interimmodels.11/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15566" node="//@interimmodels.11/@designmodel/@host.2/@node.0" namedport="//@interimmodels.11/@designmodel/@component.3/@port.1"/>
          <port name="port" portNumber="81" node="//@interimmodels.11/@designmodel/@host.2/@node.0" namedport="//@interimmodels.11/@designmodel/@component.3/@port.1"/>
        </node>
        <node name="MySQL1" component="//@interimmodels.11/@designmodel/@component.4">
          <port name="port" portNumber="3306" node="//@interimmodels.11/@designmodel/@host.2/@node.1" namedport="//@interimmodels.11/@designmodel/@component.4/@port.0 //@interimmodels.11/@designmodel/@component.4/@port.1"/>
        </node>
      </host>
      <host name="BackOfficeServer">
        <node name="JEEContainer4" component="//@interimmodels.11/@designmodel/@component.7 //@interimmodels.11/@designmodel/@component.8">
          <port name="port" portNumber="80" node="//@interimmodels.11/@designmodel/@host.3/@node.0" namedport="//@interimmodels.11/@designmodel/@component.7/@port.0" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15571" node="//@interimmodels.11/@designmodel/@host.3/@node.0" namedport="//@interimmodels.11/@designmodel/@component.7/@port.0"/>
          <port name="port" portNumber="15572" node="//@interimmodels.11/@designmodel/@host.3/@node.0" namedport="//@interimmodels.11/@designmodel/@component.7/@port.0"/>
        </node>
        <node name="MySQL2" component="//@interimmodels.11/@designmodel/@component.9">
          <port name="port" portNumber="3306" node="//@interimmodels.11/@designmodel/@host.3/@node.1" namedport="//@interimmodels.11/@designmodel/@component.9/@port.0 //@interimmodels.11/@designmodel/@component.9/@port.1"/>
        </node>
      </host>
      <link name="link2" linkType="HTTPS" networkType="INTERNET" source="//@interimmodels.11/@designmodel/@host.0/@node.0/@port.1" target="//@interimmodels.11/@designmodel/@host.2/@node.0/@port.0"/>
      <link name="link3" source="//@interimmodels.11/@designmodel/@host.2/@node.0/@port.1"/>
      <link name="link4" source="//@interimmodels.11/@designmodel/@host.2/@node.0/@port.2"/>
      <link name="link5" target="//@interimmodels.11/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link7" networkType="INTERNET" source="//@interimmodels.11/@designmodel/@host.0/@node.0/@port.3"/>
      <link name="link9" source="//@interimmodels.11/@designmodel/@host.0/@node.0/@port.4" target="//@interimmodels.11/@designmodel/@host.0/@node.1/@port.0"/>
      <link name="link11" source="//@interimmodels.11/@designmodel/@host.3/@node.0/@port.1"/>
      <link name="link12" source="//@interimmodels.11/@designmodel/@host.3/@node.0/@port.2"/>
      <link name="link13" target="//@interimmodels.11/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link14" target="//@interimmodels.11/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link16" source="//@interimmodels.11/@designmodel/@host.2/@node.0/@port.5" target="//@interimmodels.11/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link15" networkType="INTERNET" source="//@interimmodels.11/@designmodel/@host.0/@node.0/@port.2" target="//@interimmodels.11/@designmodel/@host.2/@node.0/@port.6"/>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="13" description="network route for connector:paywire between: ordersservice payment " nextModel="//@interimmodels.13" isStable="true" name="network-route">
    <designmodel name="inter13">
      <component name="ShopFrontend" type="client,broadcaster" deploymentnode="//@interimmodels.12/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface,LeastPriviledge">
        <port name="auth" role="//@interimmodels.12/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="checked"/>
        </port>
        <port name="browse" role="//@interimmodels.12/@designmodel/@connector.1/@role.0" type="request,OutboundPort">
          <events name="read"/>
        </port>
        <port name="order" role="//@interimmodels.12/@designmodel/@connector.9/@role.0" type="broadcast,OutboundPort">
          <events name="purchased"/>
        </port>
        <port name="shop" role="//@interimmodels.12/@designmodel/@connector.3/@role.0" type="request,OutboundPort">
          <events name="itemadded"/>
        </port>
      </component>
      <component name="CateloqueService" type="server" deploymentnode="//@interimmodels.12/@designmodel/@host.0/@node.1" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
        <port name="list" role="//@interimmodels.12/@designmodel/@connector.1/@role.1" type="response,InboundPort">
          <events name="query"/>
        </port>
      </component>
      <component name="UserService" type="server" deploymentnode="//@interimmodels.12/@designmodel/@host.1/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DefenseInDepth,DenialOfService">
        <port name="login" role="//@interimmodels.12/@designmodel/@connector.0/@role.1" type="response,InboundPort">
          <events name="signedon"/>
        </port>
      </component>
      <component name="OrdersService" type="client,server,listener,eventconsumer,readendpoint,datawriter,datareader" deploymentnode="//@interimmodels.12/@designmodel/@host.2/@node.0" criticalLevel="Low" securityCharacters="AttackSurface,LeastPriviledge,Compartmentalization,DenialOfService,DataTampering">
        <port name="postorder" role="//@interimmodels.12/@designmodel/@connector.4/@role.0 //@interimmodels.12/@designmodel/@connector.7/@role.0 //@interimmodels.12/@designmodel/@connector.9/@role.1 //@interimmodels.12/@designmodel/@connector.10/@role.0" type="request,listen,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="check" next="//@interimmodels.12/@designmodel/@component.3/@port.0/@events.1"/>
          <events name="save"/>
        </port>
        <port name="get" role="//@interimmodels.12/@designmodel/@connector.2/@role.1 //@interimmodels.12/@designmodel/@connector.8/@role.0" type="response,read,OutboundPort,InboundPort,EventProcessorPort">
          <events name="ack"/>
        </port>
      </component>
      <component name="OrdersDB" type="repository,datastore" deploymentnode="//@interimmodels.12/@designmodel/@host.2/@node.1">
        <port name="writeorder" type="store,InboundPort,EventProcessorPort">
          <events name="orderwritten"/>
        </port>
        <port name="queryorder" role="//@interimmodels.12/@designmodel/@connector.8/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="orderreaded"/>
        </port>
      </component>
      <component name="CartsService" type="server" deploymentnode="//@interimmodels.12/@designmodel/@host.2/@node.0" securityCharacters="AttackSurface,DenialOfService,DataTampering">
        <port name="manage" role="//@interimmodels.12/@designmodel/@connector.3/@role.1" type="response,InboundPort">
          <events name="saveitem"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,datastore" deploymentnode="//@interimmodels.12/@designmodel/@host.1/@node.1" criticalLevel="High" securityCharacters="DefenseInDepth,Compartmentalization">
        <port name="pay" role="//@interimmodels.12/@designmodel/@connector.11/@role.1 //@interimmodels.12/@designmodel/@connector.10/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="paid"/>
        </port>
      </component>
      <component name="ShippingService" type="server,datawriter" deploymentnode="//@interimmodels.12/@designmodel/@host.3/@node.0" securityCharacters="Compartmentalization">
        <port name="postshipping" role="//@interimmodels.12/@designmodel/@connector.4/@role.1 //@interimmodels.12/@designmodel/@connector.6/@role.0" type="response,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="posted"/>
        </port>
      </component>
      <component name="ShippingWorker" type="readendpoint,datareader" deploymentnode="//@interimmodels.12/@designmodel/@host.3/@node.0">
        <port name="listqueue" role="//@interimmodels.12/@designmodel/@connector.5/@role.0" type="read,OutboundPort,EventProcessorPort">
          <events name="renderqueue"/>
        </port>
      </component>
      <component name="QueueDB" type="repository,datastore" deploymentnode="//@interimmodels.12/@designmodel/@host.3/@node.1">
        <port name="writequeue" role="//@interimmodels.12/@designmodel/@connector.6/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="queuewritten"/>
        </port>
        <port name="readqueue" role="//@interimmodels.12/@designmodel/@connector.5/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="queuereaded"/>
        </port>
      </component>
      <component name="ShopBackend" type="client" deploymentnode="//@interimmodels.12/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface">
        <port name="listorder" role="//@interimmodels.12/@designmodel/@connector.2/@role.0" type="request,OutboundPort">
          <events name="renderlist"/>
        </port>
      </component>
      <component name="ShippinglogwireCommandLog" type="commanddb,datastore">
        <port name="logshippinglogwire" role="//@interimmodels.12/@designmodel/@connector.6/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.3/@node.2"/>
      </component>
      <component name="OrderwireLog" type="eventlogger,datastore">
        <port name="logorderwire" role="//@interimmodels.12/@designmodel/@connector.9/@role.2" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="append" role="//@interimmodels.12/@designmodel/@connector.11/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <deploymentnode href="target.arch#//@host.4/@node.0"/>
      </component>
      <component name="OrderlogwireCommandLog" type="commanddb,datastore">
        <port name="logorderlogwire" role="//@interimmodels.12/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <connector name="userwire" type="CSConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.12/@designmodel/@connector.0"/>
      </connector>
      <connector name="cateloquewire" type="CSConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.1"/>
        <role name="responder" roletype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.12/@designmodel/@connector.1"/>
      </connector>
      <connector name="orderquerywire" type="CSConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.2"/>
        <role name="responder" roletype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.12/@designmodel/@connector.8/@role.0" connector="//@interimmodels.12/@designmodel/@connector.2"/>
      </connector>
      <connector name="cartwire" type="CSConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.3"/>
        <role name="responder" roletype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.12/@designmodel/@connector.3"/>
      </connector>
      <connector name="shippingwire" type="CSConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.12/@designmodel/@connector.6/@role.0" connector="//@interimmodels.12/@designmodel/@connector.4"/>
      </connector>
      <connector name="queuereadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.5"/>
        <role name="readstorage" roletype="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.12/@designmodel/@connector.5"/>
      </connector>
      <connector name="shippinglogwire" type="CRConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.6"/>
        <role name="readstore" roletype="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.12/@designmodel/@connector.6"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.4/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.6"/>
        </role>
      </connector>
      <connector name="orderlogwire" type="CRConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.12/@designmodel/@connector.10/@role.0" connector="//@interimmodels.12/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.12/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.4/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="orderreadwire" type="QRConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0">
        <role name="querier" roletype="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.8"/>
        <role name="readstore" roletype="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.12/@designmodel/@connector.8"/>
      </connector>
      <connector name="orderwire" type="ESConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.12/@designmodel/@archstyle.1/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.9"/>
        <role name="eventsubscriber" roletype="//@interimmodels.12/@designmodel/@archstyle.1/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.12/@designmodel/@connector.7/@role.0" connector="//@interimmodels.12/@designmodel/@connector.9"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.9"/>
        </role>
      </connector>
      <connector name="paywire" type="CSConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="writer" nextRoleExpr="//@interimmodels.12/@designmodel/@connector.4/@role.0" connector="//@interimmodels.12/@designmodel/@connector.10"/>
        <role name="responder" roletype="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="writestorage" nextRoleExpr="//@interimmodels.12/@designmodel/@connector.11/@role.1" connector="//@interimmodels.12/@designmodel/@connector.10"/>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.12/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.12/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.12/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.12/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.12/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.12/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.12/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.12/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.12/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.12/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.12/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.4" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
            <event name="Skip"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.12/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.12/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.12/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.12/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.12/@designmodel/@archstyle.4/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.12/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.12/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.12/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.12/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.12/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.12/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.12/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.12/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.12/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.12/@designmodel" counterExample="" visitedStates="15" verifyTime="0.0239142" testport="//@interimmodels.12/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!19 -> cartwire_req?19 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!19 -> cartwire_res?19" exprText="[]  (ShopFrontend.shop.itemadded -> &lt;> CartsService.manage.saveitem)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.12/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.0/@port.3/@events.0" nextExpr="//@interimmodels.12/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.12/@designmodel" counterExample="" visitedStates="98442" verifyTime="3.1958587" testport="//@interimmodels.12/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!37 -> orderwire_pevt?37 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!37 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?37 -> orderwire_bevt!37 -> orderwire_bevt?37 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!37 -> orderlogwire_cmmd!37 -> orderlogwire_cmmd?37 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_requester_process -> paywire_req!37 -> paywire_req?37 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!37 -> oraclepaywire_token?37 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!37 -> paywire_res?37 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!37 -> shippingwire_req?37 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!37 -> shippinglogwire_stmt?37 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!37 -> shippinglogwire_cmmd?37 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!37 -> shippingwire_res?37 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (Payment.pay.paid -> &lt;> ShippingService.postshipping.posted)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.12/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.6/@port.0/@events.0" nextExpr="//@interimmodels.12/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.12/@designmodel" visitedStates="10" verifyTime="0.025654" testport="//@interimmodels.12/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!34 -> cartwire_req?34 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!34 -> cartwire_res?34" exprText="[]  (OrdersService.postorder.save -> &lt;> Payment.pay.paid)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.12/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.3/@port.0/@events.1" nextExpr="//@interimmodels.12/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.12/@designmodel" counterExample="" visitedStates="15" verifyTime="0.0238938" testport="//@interimmodels.12/@designmodel/@component.0/@port.0" traceExample="init -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!98 -> userwire_req?98 -> UserService_userwire_responder_invoke -> UserService_login_signedon -> UserService_userwire_responder_process -> userwire_res!98 -> userwire_res?98" exprText="[]  (ShopFrontend.auth.checked -> &lt;> UserService.login.signedon)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.12/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.12/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.12/@designmodel" counterExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!62 -> cateloquewire_req?62 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!62 -> cateloquewire_res?62" visitedStates="24" verifyTime="0.0236992" testport="//@interimmodels.12/@designmodel/@component.0/@port.1" traceExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!61 -> cateloquewire_req?61 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!61 -> cateloquewire_res?61" exprText="[]  (&lt;> ShopFrontend.browse.read -> &lt;> CateloqueService.list.query)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.12/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.1/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.0/@port.1/@events.0" operator="EVENTUALLY" nextExpr="//@interimmodels.12/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop6" model="//@interimmodels.12/@designmodel" counterExample="" visitedStates="27" verifyTime="0.0271741" testport="//@interimmodels.12/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!55 -> orderquerywire_req?55 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_querier_process -> orderreadwire_stmt!55 -> orderreadwire_stmt?55 -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstore_process -> orderreadwire_res!55 -> orderreadwire_res?55 -> OrdersService_orderreadwire_querier_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!55 -> orderquerywire_res?55" exprText="[]  (ShopBackend.listorder.renderlist -> &lt;> OrdersDB.queryorder.orderreaded)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.12/@designmodel/@verifyProperty.5">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.10/@port.0/@events.0" nextExpr="//@interimmodels.12/@designmodel/@verifyProperty.5/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop7" model="//@interimmodels.12/@designmodel" counterExample="" visitedStates="95203" verifyTime="3.0831942999999997" testport="//@interimmodels.12/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!61 -> orderwire_pevt?61 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!61 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?61 -> orderwire_bevt!61 -> orderwire_bevt?61 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!61 -> orderlogwire_cmmd!61 -> orderlogwire_cmmd?61 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_requester_process -> paywire_req!61 -> paywire_req?61 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!61 -> oraclepaywire_token?61 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!61 -> paywire_res?61 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!61 -> shippingwire_req?61 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!61 -> shippinglogwire_stmt?61 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!61 -> shippinglogwire_cmmd?61 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!61 -> shippingwire_res?61 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (ShopFrontend.order.purchased -> &lt;> OrdersService.postorder.save)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.12/@designmodel/@verifyProperty.6">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.3/@port.0/@events.1" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.12/@designmodel/@verifyProperty.6/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-orderwire" visitedStates="137936" verifyTime="4.4170526" testport="//@interimmodels.12/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!18 -> orderwire_pevt?18 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!18 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?18 -> orderwire_bevt!18 -> orderwire_bevt?18 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!18 -> orderlogwire_cmmd!18 -> orderlogwire_cmmd?18 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_requester_process -> paywire_req!18 -> paywire_req?18 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!18 -> oraclepaywire_token?18 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!18 -> paywire_res?18 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!18 -> shippingwire_req?18 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!18 -> shippinglogwire_stmt?18 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!18 -> shippinglogwire_cmmd?18 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!18 -> shippingwire_res?18 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (ShopFrontend.order.purchased-> &lt;> OrderwireLog.orderwire.eventstore.persist)">
        <connector href="target.arch#//@connector.9"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" visitedStates="170266" verifyTime="5.5892873" testport="//@interimmodels.12/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!65 -> orderwire_pevt?65 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!65 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?65 -> orderwire_bevt!65 -> orderwire_bevt?65 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!65 -> orderlogwire_cmmd!65 -> orderlogwire_cmmd?65 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_requester_process -> paywire_req!65 -> paywire_req?65 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!65 -> oraclepaywire_token?65 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!65 -> paywire_res?65 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!65 -> shippingwire_req?65 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!65 -> shippinglogwire_stmt?65 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!65 -> shippinglogwire_cmmd?65 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!65 -> shippingwire_res?65 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (Payment.pay.paid-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.11"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-orderlogwire" visitedStates="170522" verifyTime="5.6827692999999995" testport="//@interimmodels.12/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!11 -> orderwire_pevt?11 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!11 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?11 -> orderwire_bevt!11 -> orderwire_bevt?11 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!11 -> orderlogwire_cmmd!11 -> orderlogwire_cmmd?11 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_requester_process -> paywire_req!11 -> paywire_req?11 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!11 -> oraclepaywire_token?11 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!11 -> paywire_res?11 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!11 -> shippingwire_req?11 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!11 -> shippinglogwire_stmt?11 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!11 -> shippinglogwire_cmmd?11 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!11 -> shippingwire_res?11 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (OrdersService.postorder.check-> &lt;> OrderlogwireCommandLog.orderlogwire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-query-orderreadwire" visitedStates="23" verifyTime="0.024499999999999997" testport="//@interimmodels.12/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!17 -> orderquerywire_req?17 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_querier_process -> orderreadwire_stmt!17 -> orderreadwire_stmt?17 -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstore_process -> orderreadwire_res!17 -> orderreadwire_res?17 -> OrdersService_orderreadwire_querier_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!17 -> orderquerywire_res?17" exprText="[] (OrdersService.get.ack-> &lt;> OrdersDB.orderreadwire.readstore.process)">
        <connector href="target.arch#//@connector.8"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-shippinglogwire" visitedStates="168290" verifyTime="5.518204" testport="//@interimmodels.12/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!44 -> orderwire_pevt?44 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!44 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?44 -> orderwire_bevt!44 -> orderwire_bevt?44 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!44 -> orderlogwire_cmmd!44 -> orderlogwire_cmmd?44 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_requester_process -> paywire_req!44 -> paywire_req?44 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!44 -> oraclepaywire_token?44 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!44 -> paywire_res?44 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!44 -> shippingwire_req?44 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!44 -> shippinglogwire_stmt?44 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!44 -> shippinglogwire_cmmd?44 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!44 -> shippingwire_res?44 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (ShippingService.postshipping.posted-> &lt;> ShippinglogwireCommandLog.shippinglogwire.commandstore.persist)">
        <connector href="target.arch#//@connector.6"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="CLOUD_PLATFORM">
        <node name="NodeJSContainer1" component="//@interimmodels.12/@designmodel/@component.0 //@interimmodels.12/@designmodel/@component.10">
          <port name="port" portNumber="15551" node="//@interimmodels.12/@designmodel/@host.0/@node.0" namedport="//@interimmodels.12/@designmodel/@component.0/@port.0"/>
          <port name="port" portNumber="15552" node="//@interimmodels.12/@designmodel/@host.0/@node.0" namedport="//@interimmodels.12/@designmodel/@component.0/@port.2"/>
          <port name="port" portNumber="15553" node="//@interimmodels.12/@designmodel/@host.0/@node.0" namedport="//@interimmodels.12/@designmodel/@component.10/@port.0"/>
          <port name="port" portNumber="15554" node="//@interimmodels.12/@designmodel/@host.0/@node.0" namedport="//@interimmodels.12/@designmodel/@component.0/@port.3"/>
          <port name="port" portNumber="15555" node="//@interimmodels.12/@designmodel/@host.0/@node.0" namedport="//@interimmodels.12/@designmodel/@component.0/@port.1"/>
        </node>
        <node name="GoContainer3" component="//@interimmodels.12/@designmodel/@component.1">
          <port name="port" portNumber="80" node="//@interimmodels.12/@designmodel/@host.0/@node.1" namedport="//@interimmodels.12/@designmodel/@component.1/@port.0" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="SecureServer">
        <node name="GoContainer1" component="//@interimmodels.12/@designmodel/@component.2">
          <port name="port" portNumber="80" node="//@interimmodels.12/@designmodel/@host.1/@node.0" namedport="//@interimmodels.12/@designmodel/@component.2/@port.0" hasFirewall="true"/>
        </node>
        <node name="GoContainer2" component="//@interimmodels.12/@designmodel/@component.6">
          <port name="port" portNumber="80" node="//@interimmodels.12/@designmodel/@host.1/@node.1" namedport="//@interimmodels.12/@designmodel/@component.6/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="LocalServer">
        <node name="JEEContainer1" component="//@interimmodels.12/@designmodel/@component.3 //@interimmodels.12/@designmodel/@component.5">
          <port name="port" portNumber="80" namedport="//@interimmodels.12/@designmodel/@component.3/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15561" node="//@interimmodels.12/@designmodel/@host.2/@node.0" namedport="//@interimmodels.12/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15562" node="//@interimmodels.12/@designmodel/@host.2/@node.0" namedport="//@interimmodels.12/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15563" node="//@interimmodels.12/@designmodel/@host.2/@node.0" namedport="//@interimmodels.12/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15564" node="//@interimmodels.12/@designmodel/@host.2/@node.0" namedport="//@interimmodels.12/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15566" node="//@interimmodels.12/@designmodel/@host.2/@node.0" namedport="//@interimmodels.12/@designmodel/@component.3/@port.1"/>
          <port name="port" portNumber="81" node="//@interimmodels.12/@designmodel/@host.2/@node.0" namedport="//@interimmodels.12/@designmodel/@component.3/@port.1"/>
        </node>
        <node name="MySQL1" component="//@interimmodels.12/@designmodel/@component.4">
          <port name="port" portNumber="3306" node="//@interimmodels.12/@designmodel/@host.2/@node.1" namedport="//@interimmodels.12/@designmodel/@component.4/@port.0 //@interimmodels.12/@designmodel/@component.4/@port.1"/>
        </node>
      </host>
      <host name="BackOfficeServer">
        <node name="JEEContainer4" component="//@interimmodels.12/@designmodel/@component.7 //@interimmodels.12/@designmodel/@component.8">
          <port name="port" portNumber="80" node="//@interimmodels.12/@designmodel/@host.3/@node.0" namedport="//@interimmodels.12/@designmodel/@component.7/@port.0" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15571" node="//@interimmodels.12/@designmodel/@host.3/@node.0" namedport="//@interimmodels.12/@designmodel/@component.7/@port.0"/>
          <port name="port" portNumber="15572" node="//@interimmodels.12/@designmodel/@host.3/@node.0" namedport="//@interimmodels.12/@designmodel/@component.7/@port.0"/>
        </node>
        <node name="MySQL2" component="//@interimmodels.12/@designmodel/@component.9">
          <port name="port" portNumber="3306" node="//@interimmodels.12/@designmodel/@host.3/@node.1" namedport="//@interimmodels.12/@designmodel/@component.9/@port.0 //@interimmodels.12/@designmodel/@component.9/@port.1"/>
        </node>
      </host>
      <link name="link2" linkType="HTTPS" networkType="INTERNET" source="//@interimmodels.12/@designmodel/@host.0/@node.0/@port.1" target="//@interimmodels.12/@designmodel/@host.2/@node.0/@port.0"/>
      <link name="link3" source="//@interimmodels.12/@designmodel/@host.2/@node.0/@port.1"/>
      <link name="link4" source="//@interimmodels.12/@designmodel/@host.2/@node.0/@port.2"/>
      <link name="link5" target="//@interimmodels.12/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link7" networkType="INTERNET" source="//@interimmodels.12/@designmodel/@host.0/@node.0/@port.3"/>
      <link name="link9" source="//@interimmodels.12/@designmodel/@host.0/@node.0/@port.4" target="//@interimmodels.12/@designmodel/@host.0/@node.1/@port.0"/>
      <link name="link11" source="//@interimmodels.12/@designmodel/@host.3/@node.0/@port.1"/>
      <link name="link12" source="//@interimmodels.12/@designmodel/@host.3/@node.0/@port.2"/>
      <link name="link13" target="//@interimmodels.12/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link14" target="//@interimmodels.12/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link16" source="//@interimmodels.12/@designmodel/@host.2/@node.0/@port.5" target="//@interimmodels.12/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link15" networkType="INTERNET" source="//@interimmodels.12/@designmodel/@host.0/@node.0/@port.2" target="//@interimmodels.12/@designmodel/@host.2/@node.0/@port.6"/>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="14" description="network route for connector:queuereadwire between: shippingworker queuedb " isStable="true" name="network-route">
    <designmodel name="inter14">
      <component name="ShopFrontend" type="client,broadcaster" deploymentnode="//@interimmodels.13/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface,LeastPriviledge">
        <port name="auth" role="//@interimmodels.13/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="checked"/>
        </port>
        <port name="browse" role="//@interimmodels.13/@designmodel/@connector.1/@role.0" type="request,OutboundPort">
          <events name="read"/>
        </port>
        <port name="order" role="//@interimmodels.13/@designmodel/@connector.9/@role.0" type="broadcast,OutboundPort">
          <events name="purchased"/>
        </port>
        <port name="shop" role="//@interimmodels.13/@designmodel/@connector.3/@role.0" type="request,OutboundPort">
          <events name="itemadded"/>
        </port>
      </component>
      <component name="CateloqueService" type="server" deploymentnode="//@interimmodels.13/@designmodel/@host.0/@node.1" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
        <port name="list" role="//@interimmodels.13/@designmodel/@connector.1/@role.1" type="response,InboundPort">
          <events name="query"/>
        </port>
      </component>
      <component name="UserService" type="server" deploymentnode="//@interimmodels.13/@designmodel/@host.1/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DefenseInDepth,DenialOfService">
        <port name="login" role="//@interimmodels.13/@designmodel/@connector.0/@role.1" type="response,InboundPort">
          <events name="signedon"/>
        </port>
      </component>
      <component name="OrdersService" type="client,server,listener,eventconsumer,readendpoint,datawriter,datareader" deploymentnode="//@interimmodels.13/@designmodel/@host.2/@node.0" criticalLevel="Low" securityCharacters="AttackSurface,LeastPriviledge,Compartmentalization,DenialOfService,DataTampering">
        <port name="postorder" role="//@interimmodels.13/@designmodel/@connector.4/@role.0 //@interimmodels.13/@designmodel/@connector.7/@role.0 //@interimmodels.13/@designmodel/@connector.9/@role.1 //@interimmodels.13/@designmodel/@connector.10/@role.0" type="request,listen,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="check" next="//@interimmodels.13/@designmodel/@component.3/@port.0/@events.1"/>
          <events name="save"/>
        </port>
        <port name="get" role="//@interimmodels.13/@designmodel/@connector.2/@role.1 //@interimmodels.13/@designmodel/@connector.8/@role.0" type="response,read,OutboundPort,InboundPort,EventProcessorPort">
          <events name="ack"/>
        </port>
      </component>
      <component name="OrdersDB" type="repository,datastore" deploymentnode="//@interimmodels.13/@designmodel/@host.2/@node.1">
        <port name="writeorder" type="store,InboundPort,EventProcessorPort">
          <events name="orderwritten"/>
        </port>
        <port name="queryorder" role="//@interimmodels.13/@designmodel/@connector.8/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="orderreaded"/>
        </port>
      </component>
      <component name="CartsService" type="server" deploymentnode="//@interimmodels.13/@designmodel/@host.2/@node.0" securityCharacters="AttackSurface,DenialOfService,DataTampering">
        <port name="manage" role="//@interimmodels.13/@designmodel/@connector.3/@role.1" type="response,InboundPort">
          <events name="saveitem"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,datastore" deploymentnode="//@interimmodels.13/@designmodel/@host.1/@node.1" criticalLevel="High" securityCharacters="DefenseInDepth,Compartmentalization">
        <port name="pay" role="//@interimmodels.13/@designmodel/@connector.11/@role.1 //@interimmodels.13/@designmodel/@connector.10/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="paid"/>
        </port>
      </component>
      <component name="ShippingService" type="server,datawriter" deploymentnode="//@interimmodels.13/@designmodel/@host.3/@node.0" securityCharacters="Compartmentalization">
        <port name="postshipping" role="//@interimmodels.13/@designmodel/@connector.4/@role.1 //@interimmodels.13/@designmodel/@connector.6/@role.0" type="response,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="posted"/>
        </port>
      </component>
      <component name="ShippingWorker" type="readendpoint,datareader" deploymentnode="//@interimmodels.13/@designmodel/@host.3/@node.0">
        <port name="listqueue" role="//@interimmodels.13/@designmodel/@connector.5/@role.0" type="read,OutboundPort,EventProcessorPort">
          <events name="renderqueue"/>
        </port>
      </component>
      <component name="QueueDB" type="repository,datastore" deploymentnode="//@interimmodels.13/@designmodel/@host.3/@node.1">
        <port name="writequeue" role="//@interimmodels.13/@designmodel/@connector.6/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="queuewritten"/>
        </port>
        <port name="readqueue" role="//@interimmodels.13/@designmodel/@connector.5/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="queuereaded"/>
        </port>
      </component>
      <component name="ShopBackend" type="client" deploymentnode="//@interimmodels.13/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface">
        <port name="listorder" role="//@interimmodels.13/@designmodel/@connector.2/@role.0" type="request,OutboundPort">
          <events name="renderlist"/>
        </port>
      </component>
      <component name="ShippinglogwireCommandLog" type="commanddb,datastore">
        <port name="logshippinglogwire" role="//@interimmodels.13/@designmodel/@connector.6/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.3/@node.2"/>
      </component>
      <component name="OrderwireLog" type="eventlogger,datastore">
        <port name="logorderwire" role="//@interimmodels.13/@designmodel/@connector.9/@role.2" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="append" role="//@interimmodels.13/@designmodel/@connector.11/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <deploymentnode href="target.arch#//@host.4/@node.0"/>
      </component>
      <component name="OrderlogwireCommandLog" type="commanddb,datastore">
        <port name="logorderlogwire" role="//@interimmodels.13/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <connector name="userwire" type="CSConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.13/@designmodel/@connector.0"/>
      </connector>
      <connector name="cateloquewire" type="CSConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.1"/>
        <role name="responder" roletype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.13/@designmodel/@connector.1"/>
      </connector>
      <connector name="orderquerywire" type="CSConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.2"/>
        <role name="responder" roletype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.13/@designmodel/@connector.8/@role.0" connector="//@interimmodels.13/@designmodel/@connector.2"/>
      </connector>
      <connector name="cartwire" type="CSConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.3"/>
        <role name="responder" roletype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.13/@designmodel/@connector.3"/>
      </connector>
      <connector name="shippingwire" type="CSConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.13/@designmodel/@connector.6/@role.0" connector="//@interimmodels.13/@designmodel/@connector.4"/>
      </connector>
      <connector name="queuereadwire" type="QRConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0">
        <role name="querier" roletype="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.5"/>
        <role name="readstore" roletype="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.13/@designmodel/@connector.5"/>
      </connector>
      <connector name="shippinglogwire" type="CRConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.6"/>
        <role name="readstore" roletype="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.13/@designmodel/@connector.6"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.4/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.6"/>
        </role>
      </connector>
      <connector name="orderlogwire" type="CRConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.13/@designmodel/@connector.10/@role.0" connector="//@interimmodels.13/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.13/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.4/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="orderreadwire" type="QRConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0">
        <role name="querier" roletype="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.8"/>
        <role name="readstore" roletype="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.13/@designmodel/@connector.8"/>
      </connector>
      <connector name="orderwire" type="ESConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.13/@designmodel/@archstyle.1/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.9"/>
        <role name="eventsubscriber" roletype="//@interimmodels.13/@designmodel/@archstyle.1/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.13/@designmodel/@connector.7/@role.0" connector="//@interimmodels.13/@designmodel/@connector.9"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.9"/>
        </role>
      </connector>
      <connector name="paywire" type="CSConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="writer" nextRoleExpr="//@interimmodels.13/@designmodel/@connector.4/@role.0" connector="//@interimmodels.13/@designmodel/@connector.10"/>
        <role name="responder" roletype="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="writestorage" nextRoleExpr="//@interimmodels.13/@designmodel/@connector.11/@role.1" connector="//@interimmodels.13/@designmodel/@connector.10"/>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.13/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.13/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.13/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.13/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.13/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.13/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.13/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.13/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.13/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.13/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.13/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.4" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
            <event name="Skip"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.13/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.13/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.13/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.13/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.13/@designmodel/@archstyle.4/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.13/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.13/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.13/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.13/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.13/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.13/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.13/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.13/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.13/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.13/@designmodel" counterExample="" visitedStates="15" verifyTime="0.024815399999999998" testport="//@interimmodels.13/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!30 -> cartwire_req?30 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!30 -> cartwire_res?30" exprText="[]  (ShopFrontend.shop.itemadded -> &lt;> CartsService.manage.saveitem)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.13/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.0/@port.3/@events.0" nextExpr="//@interimmodels.13/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.13/@designmodel" counterExample="" visitedStates="98442" verifyTime="3.0787229999999997" testport="//@interimmodels.13/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!66 -> orderwire_pevt?66 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!66 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?66 -> orderwire_bevt!66 -> orderwire_bevt?66 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!66 -> orderlogwire_cmmd!66 -> orderlogwire_cmmd?66 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_requester_process -> paywire_req!66 -> paywire_req?66 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!66 -> oraclepaywire_token?66 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!66 -> paywire_res?66 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!66 -> shippingwire_req?66 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!66 -> shippinglogwire_stmt?66 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!66 -> shippinglogwire_cmmd?66 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!66 -> shippingwire_res?66 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (Payment.pay.paid -> &lt;> ShippingService.postshipping.posted)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.13/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.6/@port.0/@events.0" nextExpr="//@interimmodels.13/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.13/@designmodel" visitedStates="10" verifyTime="0.023218299999999997" testport="//@interimmodels.13/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!31 -> cartwire_req?31 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!31 -> cartwire_res?31" exprText="[]  (OrdersService.postorder.save -> &lt;> Payment.pay.paid)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.13/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.3/@port.0/@events.1" nextExpr="//@interimmodels.13/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.13/@designmodel" counterExample="" visitedStates="15" verifyTime="0.023788899999999998" testport="//@interimmodels.13/@designmodel/@component.0/@port.0" traceExample="init -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!43 -> userwire_req?43 -> UserService_userwire_responder_invoke -> UserService_login_signedon -> UserService_userwire_responder_process -> userwire_res!43 -> userwire_res?43" exprText="[]  (ShopFrontend.auth.checked -> &lt;> UserService.login.signedon)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.13/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.13/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.13/@designmodel" counterExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!62 -> cateloquewire_req?62 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!62 -> cateloquewire_res?62" visitedStates="24" verifyTime="0.024898299999999998" testport="//@interimmodels.13/@designmodel/@component.0/@port.1" traceExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!88 -> cateloquewire_req?88 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!88 -> cateloquewire_res?88" exprText="[]  (&lt;> ShopFrontend.browse.read -> &lt;> CateloqueService.list.query)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.13/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.1/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.0/@port.1/@events.0" operator="EVENTUALLY" nextExpr="//@interimmodels.13/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop6" model="//@interimmodels.13/@designmodel" counterExample="" visitedStates="27" verifyTime="0.027085099999999997" testport="//@interimmodels.13/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!58 -> orderquerywire_req?58 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_querier_process -> orderreadwire_stmt!58 -> orderreadwire_stmt?58 -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstore_process -> orderreadwire_res!58 -> orderreadwire_res?58 -> OrdersService_orderreadwire_querier_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!58 -> orderquerywire_res?58" exprText="[]  (ShopBackend.listorder.renderlist -> &lt;> OrdersDB.queryorder.orderreaded)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.13/@designmodel/@verifyProperty.5">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.10/@port.0/@events.0" nextExpr="//@interimmodels.13/@designmodel/@verifyProperty.5/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop7" model="//@interimmodels.13/@designmodel" counterExample="" visitedStates="95203" verifyTime="3.0964677999999997" testport="//@interimmodels.13/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!75 -> orderwire_pevt?75 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!75 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?75 -> orderwire_bevt!75 -> orderwire_bevt?75 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!75 -> orderlogwire_cmmd!75 -> orderlogwire_cmmd?75 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_requester_process -> paywire_req!75 -> paywire_req?75 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!75 -> oraclepaywire_token?75 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!75 -> paywire_res?75 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!75 -> shippingwire_req?75 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!75 -> shippinglogwire_stmt?75 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!75 -> shippinglogwire_cmmd?75 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!75 -> shippingwire_res?75 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (ShopFrontend.order.purchased -> &lt;> OrdersService.postorder.save)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.13/@designmodel/@verifyProperty.6">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.3/@port.0/@events.1" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.13/@designmodel/@verifyProperty.6/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-orderwire" visitedStates="137936" verifyTime="4.5646287" testport="//@interimmodels.13/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!45 -> orderwire_pevt?45 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!45 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?45 -> orderwire_bevt!45 -> orderwire_bevt?45 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!45 -> orderlogwire_cmmd!45 -> orderlogwire_cmmd?45 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_requester_process -> paywire_req!45 -> paywire_req?45 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!45 -> oraclepaywire_token?45 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!45 -> paywire_res?45 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!45 -> shippingwire_req?45 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!45 -> shippinglogwire_stmt?45 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!45 -> shippinglogwire_cmmd?45 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!45 -> shippingwire_res?45 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (ShopFrontend.order.purchased-> &lt;> OrderwireLog.orderwire.eventstore.persist)">
        <connector href="target.arch#//@connector.9"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" visitedStates="170266" verifyTime="5.4890726" testport="//@interimmodels.13/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!21 -> orderwire_pevt?21 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!21 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?21 -> orderwire_bevt!21 -> orderwire_bevt?21 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!21 -> orderlogwire_cmmd!21 -> orderlogwire_cmmd?21 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_requester_process -> paywire_req!21 -> paywire_req?21 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!21 -> oraclepaywire_token?21 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!21 -> paywire_res?21 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!21 -> shippingwire_req?21 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!21 -> shippinglogwire_stmt?21 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!21 -> shippinglogwire_cmmd?21 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!21 -> shippingwire_res?21 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (Payment.pay.paid-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.11"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-orderlogwire" visitedStates="170522" verifyTime="5.5432467999999995" testport="//@interimmodels.13/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!92 -> orderwire_pevt?92 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!92 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?92 -> orderwire_bevt!92 -> orderwire_bevt?92 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!92 -> orderlogwire_cmmd!92 -> orderlogwire_cmmd?92 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_requester_process -> paywire_req!92 -> paywire_req?92 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!92 -> oraclepaywire_token?92 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!92 -> paywire_res?92 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!92 -> shippingwire_req?92 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!92 -> shippinglogwire_stmt?92 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!92 -> shippinglogwire_cmmd?92 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!92 -> shippingwire_res?92 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (OrdersService.postorder.check-> &lt;> OrderlogwireCommandLog.orderlogwire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-query-orderreadwire" visitedStates="23" verifyTime="0.0249283" testport="//@interimmodels.13/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!73 -> orderquerywire_req?73 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_querier_process -> orderreadwire_stmt!73 -> orderreadwire_stmt?73 -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstore_process -> orderreadwire_res!73 -> orderreadwire_res?73 -> OrdersService_orderreadwire_querier_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!73 -> orderquerywire_res?73" exprText="[] (OrdersService.get.ack-> &lt;> OrdersDB.orderreadwire.readstore.process)">
        <connector href="target.arch#//@connector.8"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-shippinglogwire" visitedStates="168290" verifyTime="5.4514116999999995" testport="//@interimmodels.13/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!66 -> orderwire_pevt?66 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!66 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?66 -> orderwire_bevt!66 -> orderwire_bevt?66 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!66 -> orderlogwire_cmmd!66 -> orderlogwire_cmmd?66 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_requester_process -> paywire_req!66 -> paywire_req?66 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!66 -> oraclepaywire_token?66 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!66 -> paywire_res?66 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!66 -> shippingwire_req?66 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!66 -> shippinglogwire_stmt?66 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!66 -> shippinglogwire_cmmd?66 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!66 -> shippingwire_res?66 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (ShippingService.postshipping.posted-> &lt;> ShippinglogwireCommandLog.shippinglogwire.commandstore.persist)">
        <connector href="target.arch#//@connector.6"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-query-queuereadwire" visitedStates="14" verifyTime="0.0257878" testport="//@interimmodels.13/@designmodel/@component.8/@port.0" traceExample="init -> ShippingWorker_listqueue_renderqueue -> ShippingWorker_queuereadwire_querier_process -> queuereadwire_stmt!61 -> queuereadwire_stmt?61 -> QueueDB_readqueue_queuereaded -> QueueDB_queuereadwire_readstore_process -> queuereadwire_res!61 -> queuereadwire_res?61" exprText="[] (ShippingWorker.listqueue.renderqueue-> &lt;> QueueDB.queuereadwire.readstore.process)">
        <connector href="target.arch#//@connector.5"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="CLOUD_PLATFORM">
        <node name="NodeJSContainer1" component="//@interimmodels.13/@designmodel/@component.0 //@interimmodels.13/@designmodel/@component.10">
          <port name="port" portNumber="15551" node="//@interimmodels.13/@designmodel/@host.0/@node.0" namedport="//@interimmodels.13/@designmodel/@component.0/@port.0"/>
          <port name="port" portNumber="15552" node="//@interimmodels.13/@designmodel/@host.0/@node.0" namedport="//@interimmodels.13/@designmodel/@component.0/@port.2"/>
          <port name="port" portNumber="15553" node="//@interimmodels.13/@designmodel/@host.0/@node.0" namedport="//@interimmodels.13/@designmodel/@component.10/@port.0"/>
          <port name="port" portNumber="15554" node="//@interimmodels.13/@designmodel/@host.0/@node.0" namedport="//@interimmodels.13/@designmodel/@component.0/@port.3"/>
          <port name="port" portNumber="15555" node="//@interimmodels.13/@designmodel/@host.0/@node.0" namedport="//@interimmodels.13/@designmodel/@component.0/@port.1"/>
        </node>
        <node name="GoContainer3" component="//@interimmodels.13/@designmodel/@component.1">
          <port name="port" portNumber="80" node="//@interimmodels.13/@designmodel/@host.0/@node.1" namedport="//@interimmodels.13/@designmodel/@component.1/@port.0" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="SecureServer">
        <node name="GoContainer1" component="//@interimmodels.13/@designmodel/@component.2">
          <port name="port" portNumber="80" node="//@interimmodels.13/@designmodel/@host.1/@node.0" namedport="//@interimmodels.13/@designmodel/@component.2/@port.0" hasFirewall="true"/>
        </node>
        <node name="GoContainer2" component="//@interimmodels.13/@designmodel/@component.6">
          <port name="port" portNumber="80" node="//@interimmodels.13/@designmodel/@host.1/@node.1" namedport="//@interimmodels.13/@designmodel/@component.6/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="LocalServer">
        <node name="JEEContainer1" component="//@interimmodels.13/@designmodel/@component.3 //@interimmodels.13/@designmodel/@component.5">
          <port name="port" portNumber="80" namedport="//@interimmodels.13/@designmodel/@component.3/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15561" node="//@interimmodels.13/@designmodel/@host.2/@node.0" namedport="//@interimmodels.13/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15562" node="//@interimmodels.13/@designmodel/@host.2/@node.0" namedport="//@interimmodels.13/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15563" node="//@interimmodels.13/@designmodel/@host.2/@node.0" namedport="//@interimmodels.13/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15564" node="//@interimmodels.13/@designmodel/@host.2/@node.0" namedport="//@interimmodels.13/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15566" node="//@interimmodels.13/@designmodel/@host.2/@node.0" namedport="//@interimmodels.13/@designmodel/@component.3/@port.1"/>
          <port name="port" portNumber="81" node="//@interimmodels.13/@designmodel/@host.2/@node.0" namedport="//@interimmodels.13/@designmodel/@component.3/@port.1"/>
        </node>
        <node name="MySQL1" component="//@interimmodels.13/@designmodel/@component.4">
          <port name="port" portNumber="3306" node="//@interimmodels.13/@designmodel/@host.2/@node.1" namedport="//@interimmodels.13/@designmodel/@component.4/@port.0 //@interimmodels.13/@designmodel/@component.4/@port.1"/>
        </node>
      </host>
      <host name="BackOfficeServer">
        <node name="JEEContainer4" component="//@interimmodels.13/@designmodel/@component.7 //@interimmodels.13/@designmodel/@component.8">
          <port name="port" portNumber="80" node="//@interimmodels.13/@designmodel/@host.3/@node.0" namedport="//@interimmodels.13/@designmodel/@component.7/@port.0" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15571" node="//@interimmodels.13/@designmodel/@host.3/@node.0" namedport="//@interimmodels.13/@designmodel/@component.7/@port.0"/>
          <port name="port" portNumber="15572" node="//@interimmodels.13/@designmodel/@host.3/@node.0" namedport="//@interimmodels.13/@designmodel/@component.7/@port.0"/>
        </node>
        <node name="MySQL2" component="//@interimmodels.13/@designmodel/@component.9">
          <port name="port" portNumber="3306" node="//@interimmodels.13/@designmodel/@host.3/@node.1" namedport="//@interimmodels.13/@designmodel/@component.9/@port.0 //@interimmodels.13/@designmodel/@component.9/@port.1"/>
        </node>
      </host>
      <link name="link2" linkType="HTTPS" networkType="INTERNET" source="//@interimmodels.13/@designmodel/@host.0/@node.0/@port.1" target="//@interimmodels.13/@designmodel/@host.2/@node.0/@port.0"/>
      <link name="link3" source="//@interimmodels.13/@designmodel/@host.2/@node.0/@port.1"/>
      <link name="link4" source="//@interimmodels.13/@designmodel/@host.2/@node.0/@port.2"/>
      <link name="link5" target="//@interimmodels.13/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link7" networkType="INTERNET" source="//@interimmodels.13/@designmodel/@host.0/@node.0/@port.3"/>
      <link name="link9" source="//@interimmodels.13/@designmodel/@host.0/@node.0/@port.4" target="//@interimmodels.13/@designmodel/@host.0/@node.1/@port.0"/>
      <link name="link11" source="//@interimmodels.13/@designmodel/@host.3/@node.0/@port.1"/>
      <link name="link12" source="//@interimmodels.13/@designmodel/@host.3/@node.0/@port.2"/>
      <link name="link13" target="//@interimmodels.13/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link14" target="//@interimmodels.13/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link16" source="//@interimmodels.13/@designmodel/@host.2/@node.0/@port.5" target="//@interimmodels.13/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link15" networkType="INTERNET" source="//@interimmodels.13/@designmodel/@host.0/@node.0/@port.2" target="//@interimmodels.13/@designmodel/@host.2/@node.0/@port.6"/>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb"/>
    </designmodel>
  </interimmodels>
</arch:MigrationModel>
