<?xml version="1.0" encoding="UTF-8"?>
<arch:MigrationModel xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arch="http://www.example.org/arch">
  <source href="sample.arch#/"/>
  <target href="target.arch#/"/>
  <interimmodels description="setup database: paymentblockchain" nextModel="//@interimmodels.1" isStable="true" name="setup-database">
    <designmodel name="inter0">
      <component name="ShopFrontend" type="client,broadcaster" deploymentnode="//@interimmodels.0/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface,LeastPriviledge">
        <port name="auth" role="//@interimmodels.0/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="checked"/>
        </port>
        <port name="browse" role="//@interimmodels.0/@designmodel/@connector.1/@role.0" type="request,OutboundPort">
          <events name="read"/>
        </port>
        <port name="order" role="//@interimmodels.0/@designmodel/@connector.9/@role.0" type="broadcast,OutboundPort">
          <events name="purchased"/>
        </port>
        <port name="shop" role="//@interimmodels.0/@designmodel/@connector.3/@role.0" type="request,OutboundPort">
          <events name="itemadded"/>
        </port>
      </component>
      <component name="CateloqueService" type="server" deploymentnode="//@interimmodels.0/@designmodel/@host.0/@node.1" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
        <port name="list" role="//@interimmodels.0/@designmodel/@connector.1/@role.1" type="response,InboundPort">
          <events name="query"/>
        </port>
      </component>
      <component name="UserService" type="server" deploymentnode="//@interimmodels.0/@designmodel/@host.1/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DefenseInDepth,DenialOfService">
        <port name="login" role="//@interimmodels.0/@designmodel/@connector.0/@role.1" type="response,InboundPort">
          <events name="signedon"/>
        </port>
      </component>
      <component name="OrdersService" type="client,server,listener,eventconsumer,readendpoint,datawriter,datareader" deploymentnode="//@interimmodels.0/@designmodel/@host.2/@node.0" criticalLevel="Low" securityCharacters="AttackSurface,LeastPriviledge,Compartmentalization,DenialOfService,DataTampering">
        <port name="postorder" role="//@interimmodels.0/@designmodel/@connector.4/@role.0 //@interimmodels.0/@designmodel/@connector.7/@role.0 //@interimmodels.0/@designmodel/@connector.9/@role.1 //@interimmodels.0/@designmodel/@connector.10/@role.0" type="request,listen,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="check" next="//@interimmodels.0/@designmodel/@component.3/@port.0/@events.1"/>
          <events name="save"/>
        </port>
        <port name="get" role="//@interimmodels.0/@designmodel/@connector.2/@role.1 //@interimmodels.0/@designmodel/@connector.8/@role.0" type="response,read,OutboundPort,InboundPort,EventProcessorPort">
          <events name="ack"/>
        </port>
      </component>
      <component name="OrdersDB" type="repository,datastore" deploymentnode="//@interimmodels.0/@designmodel/@host.2/@node.1">
        <port name="writeorder" role="//@interimmodels.0/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="orderwritten"/>
        </port>
        <port name="queryorder" role="//@interimmodels.0/@designmodel/@connector.8/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="orderreaded"/>
        </port>
      </component>
      <component name="CartsService" type="server" deploymentnode="//@interimmodels.0/@designmodel/@host.2/@node.0" securityCharacters="AttackSurface,DenialOfService,DataTampering">
        <port name="manage" role="//@interimmodels.0/@designmodel/@connector.3/@role.1" type="response,InboundPort">
          <events name="saveitem"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,datastore" deploymentnode="//@interimmodels.0/@designmodel/@host.1/@node.1" criticalLevel="High" securityCharacters="DefenseInDepth,Compartmentalization">
        <port name="pay" role="//@interimmodels.0/@designmodel/@connector.10/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="paid"/>
        </port>
      </component>
      <component name="ShippingService" type="server,datawriter" deploymentnode="//@interimmodels.0/@designmodel/@host.3/@node.0" securityCharacters="Compartmentalization">
        <port name="postshipping" role="//@interimmodels.0/@designmodel/@connector.4/@role.1 //@interimmodels.0/@designmodel/@connector.6/@role.0" type="response,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="posted"/>
        </port>
      </component>
      <component name="ShippingWorker" type="readendpoint,datareader" deploymentnode="//@interimmodels.0/@designmodel/@host.3/@node.0">
        <port name="listqueue" role="//@interimmodels.0/@designmodel/@connector.5/@role.0" type="read,OutboundPort,EventProcessorPort">
          <events name="renderqueue"/>
        </port>
      </component>
      <component name="QueueDB" type="repository,datastore" deploymentnode="//@interimmodels.0/@designmodel/@host.3/@node.1">
        <port name="writequeue" role="//@interimmodels.0/@designmodel/@connector.6/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="queuewritten"/>
        </port>
        <port name="readqueue" role="//@interimmodels.0/@designmodel/@connector.5/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="queuereaded"/>
        </port>
      </component>
      <component name="ShopBackend" type="client" deploymentnode="//@interimmodels.0/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface">
        <port name="listorder" role="//@interimmodels.0/@designmodel/@connector.2/@role.0" type="request,OutboundPort">
          <events name="renderlist"/>
        </port>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="append" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <deploymentnode href="target.arch#//@host.4/@node.0"/>
      </component>
      <connector name="userwire" type="CSConnector" connectortype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.0/@designmodel/@connector.0"/>
      </connector>
      <connector name="cateloquewire" type="CSConnector" connectortype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.1"/>
        <role name="responder" roletype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.0/@designmodel/@connector.1"/>
      </connector>
      <connector name="orderquerywire" type="CSConnector" connectortype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.2"/>
        <role name="responder" roletype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.0/@designmodel/@connector.8/@role.0" connector="//@interimmodels.0/@designmodel/@connector.2"/>
      </connector>
      <connector name="cartwire" type="CSConnector" connectortype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.3"/>
        <role name="responder" roletype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.0/@designmodel/@connector.3"/>
      </connector>
      <connector name="shippingwire" type="CSConnector" connectortype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.0/@designmodel/@connector.6/@role.0" connector="//@interimmodels.0/@designmodel/@connector.4"/>
      </connector>
      <connector name="queuereadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.5"/>
        <role name="readstorage" roletype="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.0/@designmodel/@connector.5"/>
      </connector>
      <connector name="shippinglogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.6"/>
        <role name="writestorage" roletype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.0/@designmodel/@connector.6"/>
      </connector>
      <connector name="orderlogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.0/@designmodel/@connector.10/@role.0" connector="//@interimmodels.0/@designmodel/@connector.7"/>
        <role name="writestorage" roletype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.0/@designmodel/@connector.7"/>
      </connector>
      <connector name="orderreadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.8"/>
        <role name="readstorage" roletype="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.0/@designmodel/@connector.8"/>
      </connector>
      <connector name="orderwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.9"/>
        <role name="subscriber" roletype="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.0/@designmodel/@connector.7/@role.0" connector="//@interimmodels.0/@designmodel/@connector.9"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="writer" nextRoleExpr="//@interimmodels.0/@designmodel/@connector.4/@role.0" connector="//@interimmodels.0/@designmodel/@connector.10"/>
        <role name="writestorage" roletype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="writestorage" connector="//@interimmodels.0/@designmodel/@connector.10"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.0/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.0/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.0/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.0/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.0/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.0/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.0/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.4" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
            <event name="Skip"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.0/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.0/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.0/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.0/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.0/@designmodel/@archstyle.4/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.0/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.0/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.0/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.0/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.0/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.0/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.0/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.0/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.0/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.0/@designmodel" counterExample="" visitedStates="15" verifyTime="0.006562" testport="//@interimmodels.0/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!53 -> cartwire_req?53 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!53 -> cartwire_res?53" exprText="[]  (ShopFrontend.shop.itemadded -> &lt;> CartsService.manage.saveitem)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.0/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.0/@port.3/@events.0" nextExpr="//@interimmodels.0/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.0/@designmodel" counterExample="" visitedStates="65" verifyTime="0.0117025" testport="//@interimmodels.0/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_publisher_process -> orderwire_pub!31 -> orderwire_pub?31 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!31 -> orderlogwire_req?31 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!31 -> orderlogwire_res?31 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_writer_request -> paywire_req!31 -> paywire_req?31 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!31 -> paywire_res?31 -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!31 -> shippingwire_req?31 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!31 -> shippinglogwire_req?31 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!31 -> shippinglogwire_res?31 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!31 -> shippingwire_res?31 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_subscriber_process" exprText="[]  (Payment.pay.paid -> &lt;> ShippingService.postshipping.posted)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.0/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.6/@port.0/@events.0" nextExpr="//@interimmodels.0/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.0/@designmodel" visitedStates="10" verifyTime="0.005389" testport="//@interimmodels.0/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!31 -> cartwire_req?31 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!31 -> cartwire_res?31" exprText="[]  (OrdersService.postorder.save -> &lt;> Payment.pay.paid)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.0/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.3/@port.0/@events.1" nextExpr="//@interimmodels.0/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.0/@designmodel" counterExample="" visitedStates="15" verifyTime="0.0065822" testport="//@interimmodels.0/@designmodel/@component.0/@port.0" traceExample="init -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!84 -> userwire_req?84 -> UserService_userwire_responder_invoke -> UserService_login_signedon -> UserService_userwire_responder_process -> userwire_res!84 -> userwire_res?84" exprText="[]  (ShopFrontend.auth.checked -> &lt;> UserService.login.signedon)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.0/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.0/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.0/@designmodel" counterExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!62 -> cateloquewire_req?62 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!62 -> cateloquewire_res?62" visitedStates="24" verifyTime="0.0056467999999999996" testport="//@interimmodels.0/@designmodel/@component.0/@port.1" traceExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!51 -> cateloquewire_req?51 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!51 -> cateloquewire_res?51" exprText="[]  (&lt;> ShopFrontend.browse.read -> &lt;> CateloqueService.list.query)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.0/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.1/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.0/@port.1/@events.0" operator="EVENTUALLY" nextExpr="//@interimmodels.0/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop6" model="//@interimmodels.0/@designmodel" counterExample="" visitedStates="29" verifyTime="0.0051256" testport="//@interimmodels.0/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!84 -> orderquerywire_req?84 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_reader_process -> orderreadwire_req!84 -> orderreadwire_req?84 -> OrdersDB_orderreadwire_readstorage_invoke -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstorage_process -> orderreadwire_res!84 -> orderreadwire_res?84 -> OrdersService_orderreadwire_reader_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!84 -> orderquerywire_res?84" exprText="[]  (ShopBackend.listorder.renderlist -> &lt;> OrdersDB.queryorder.orderreaded)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.0/@designmodel/@verifyProperty.5">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.10/@port.0/@events.0" nextExpr="//@interimmodels.0/@designmodel/@verifyProperty.5/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop7" model="//@interimmodels.0/@designmodel" counterExample="" visitedStates="60" verifyTime="0.0063078" testport="//@interimmodels.0/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_publisher_process -> orderwire_pub!57 -> orderwire_pub?57 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!57 -> orderlogwire_req?57 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!57 -> orderlogwire_res?57 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_writer_request -> paywire_req!57 -> paywire_req?57 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!57 -> paywire_res?57 -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!57 -> shippingwire_req?57 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!57 -> shippinglogwire_req?57 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!57 -> shippinglogwire_res?57 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!57 -> shippingwire_res?57 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_subscriber_process" exprText="[]  (ShopFrontend.order.purchased -> &lt;> OrdersService.postorder.save)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.0/@designmodel/@verifyProperty.6">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.3/@port.0/@events.1" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.0/@designmodel/@verifyProperty.6/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="CLOUD_PLATFORM">
        <node name="NodeJSContainer1" component="//@interimmodels.0/@designmodel/@component.0 //@interimmodels.0/@designmodel/@component.10">
          <port name="port" portNumber="15551" node="//@interimmodels.0/@designmodel/@host.0/@node.0" namedport="//@interimmodels.0/@designmodel/@component.0/@port.0"/>
          <port name="port" portNumber="15552" node="//@interimmodels.0/@designmodel/@host.0/@node.0" namedport="//@interimmodels.0/@designmodel/@component.0/@port.2"/>
          <port name="port" portNumber="15553" node="//@interimmodels.0/@designmodel/@host.0/@node.0" namedport="//@interimmodels.0/@designmodel/@component.10/@port.0"/>
          <port name="port" portNumber="15554" node="//@interimmodels.0/@designmodel/@host.0/@node.0" namedport="//@interimmodels.0/@designmodel/@component.0/@port.3"/>
          <port name="port" portNumber="15555" node="//@interimmodels.0/@designmodel/@host.0/@node.0" namedport="//@interimmodels.0/@designmodel/@component.0/@port.1"/>
        </node>
        <node name="GoContainer3" component="//@interimmodels.0/@designmodel/@component.1">
          <port name="port" portNumber="80" node="//@interimmodels.0/@designmodel/@host.0/@node.1" namedport="//@interimmodels.0/@designmodel/@component.1/@port.0" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="SecureServer">
        <node name="GoContainer1" component="//@interimmodels.0/@designmodel/@component.2">
          <port name="port" portNumber="80" node="//@interimmodels.0/@designmodel/@host.1/@node.0" namedport="//@interimmodels.0/@designmodel/@component.2/@port.0" hasFirewall="true"/>
        </node>
        <node name="GoContainer2" component="//@interimmodels.0/@designmodel/@component.6">
          <port name="port" portNumber="80" node="//@interimmodels.0/@designmodel/@host.1/@node.1" namedport="//@interimmodels.0/@designmodel/@component.6/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="LocalServer">
        <node name="JEEContainer1" component="//@interimmodels.0/@designmodel/@component.3 //@interimmodels.0/@designmodel/@component.5">
          <port name="port" portNumber="80" namedport="//@interimmodels.0/@designmodel/@component.3/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15561" node="//@interimmodels.0/@designmodel/@host.2/@node.0" namedport="//@interimmodels.0/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15562" node="//@interimmodels.0/@designmodel/@host.2/@node.0" namedport="//@interimmodels.0/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15563" node="//@interimmodels.0/@designmodel/@host.2/@node.0" namedport="//@interimmodels.0/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15564" node="//@interimmodels.0/@designmodel/@host.2/@node.0" namedport="//@interimmodels.0/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15566" node="//@interimmodels.0/@designmodel/@host.2/@node.0" namedport="//@interimmodels.0/@designmodel/@component.3/@port.1"/>
          <port name="port" portNumber="81" node="//@interimmodels.0/@designmodel/@host.2/@node.0" namedport="//@interimmodels.0/@designmodel/@component.3/@port.1"/>
        </node>
        <node name="MySQL1" component="//@interimmodels.0/@designmodel/@component.4">
          <port name="port" portNumber="3306" node="//@interimmodels.0/@designmodel/@host.2/@node.1" namedport="//@interimmodels.0/@designmodel/@component.4/@port.0 //@interimmodels.0/@designmodel/@component.4/@port.1"/>
        </node>
      </host>
      <host name="BackOfficeServer">
        <node name="JEEContainer4" component="//@interimmodels.0/@designmodel/@component.7 //@interimmodels.0/@designmodel/@component.8">
          <port name="port" portNumber="80" node="//@interimmodels.0/@designmodel/@host.3/@node.0" namedport="//@interimmodels.0/@designmodel/@component.7/@port.0" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15571" node="//@interimmodels.0/@designmodel/@host.3/@node.0" namedport="//@interimmodels.0/@designmodel/@component.7/@port.0"/>
          <port name="port" portNumber="15572" node="//@interimmodels.0/@designmodel/@host.3/@node.0" namedport="//@interimmodels.0/@designmodel/@component.7/@port.0"/>
        </node>
        <node name="MySQL2" component="//@interimmodels.0/@designmodel/@component.9">
          <port name="port" portNumber="3306" node="//@interimmodels.0/@designmodel/@host.3/@node.1" namedport="//@interimmodels.0/@designmodel/@component.9/@port.0 //@interimmodels.0/@designmodel/@component.9/@port.1"/>
        </node>
      </host>
      <link name="link2" linkType="HTTPS" networkType="INTERNET" source="//@interimmodels.0/@designmodel/@host.0/@node.0/@port.1" target="//@interimmodels.0/@designmodel/@host.2/@node.0/@port.0"/>
      <link name="link3" source="//@interimmodels.0/@designmodel/@host.2/@node.0/@port.1"/>
      <link name="link4" source="//@interimmodels.0/@designmodel/@host.2/@node.0/@port.2"/>
      <link name="link5" target="//@interimmodels.0/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link7" networkType="INTERNET" source="//@interimmodels.0/@designmodel/@host.0/@node.0/@port.3"/>
      <link name="link9" source="//@interimmodels.0/@designmodel/@host.0/@node.0/@port.4" target="//@interimmodels.0/@designmodel/@host.0/@node.1/@port.0"/>
      <link name="link11" source="//@interimmodels.0/@designmodel/@host.3/@node.0/@port.1"/>
      <link name="link12" source="//@interimmodels.0/@designmodel/@host.3/@node.0/@port.2"/>
      <link name="link13" target="//@interimmodels.0/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link14" target="//@interimmodels.0/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link16" source="//@interimmodels.0/@designmodel/@host.2/@node.0/@port.5" target="//@interimmodels.0/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link15" networkType="INTERNET" source="//@interimmodels.0/@designmodel/@host.0/@node.0/@port.2" target="//@interimmodels.0/@designmodel/@host.2/@node.0/@port.6"/>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="1" description="setup database: orderwirelog" nextModel="//@interimmodels.2" isStable="true" name="setup-database">
    <designmodel name="inter1">
      <component name="ShopFrontend" type="client,broadcaster" deploymentnode="//@interimmodels.1/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface,LeastPriviledge">
        <port name="auth" role="//@interimmodels.1/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="checked"/>
        </port>
        <port name="browse" role="//@interimmodels.1/@designmodel/@connector.1/@role.0" type="request,OutboundPort">
          <events name="read"/>
        </port>
        <port name="order" role="//@interimmodels.1/@designmodel/@connector.9/@role.0" type="broadcast,OutboundPort">
          <events name="purchased"/>
        </port>
        <port name="shop" role="//@interimmodels.1/@designmodel/@connector.3/@role.0" type="request,OutboundPort">
          <events name="itemadded"/>
        </port>
      </component>
      <component name="CateloqueService" type="server" deploymentnode="//@interimmodels.1/@designmodel/@host.0/@node.1" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
        <port name="list" role="//@interimmodels.1/@designmodel/@connector.1/@role.1" type="response,InboundPort">
          <events name="query"/>
        </port>
      </component>
      <component name="UserService" type="server" deploymentnode="//@interimmodels.1/@designmodel/@host.1/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DefenseInDepth,DenialOfService">
        <port name="login" role="//@interimmodels.1/@designmodel/@connector.0/@role.1" type="response,InboundPort">
          <events name="signedon"/>
        </port>
      </component>
      <component name="OrdersService" type="client,server,listener,eventconsumer,readendpoint,datawriter,datareader" deploymentnode="//@interimmodels.1/@designmodel/@host.2/@node.0" criticalLevel="Low" securityCharacters="AttackSurface,LeastPriviledge,Compartmentalization,DenialOfService,DataTampering">
        <port name="postorder" role="//@interimmodels.1/@designmodel/@connector.4/@role.0 //@interimmodels.1/@designmodel/@connector.7/@role.0 //@interimmodels.1/@designmodel/@connector.9/@role.1 //@interimmodels.1/@designmodel/@connector.10/@role.0" type="request,listen,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="check" next="//@interimmodels.1/@designmodel/@component.3/@port.0/@events.1"/>
          <events name="save"/>
        </port>
        <port name="get" role="//@interimmodels.1/@designmodel/@connector.2/@role.1 //@interimmodels.1/@designmodel/@connector.8/@role.0" type="response,read,OutboundPort,InboundPort,EventProcessorPort">
          <events name="ack"/>
        </port>
      </component>
      <component name="OrdersDB" type="repository,datastore" deploymentnode="//@interimmodels.1/@designmodel/@host.2/@node.1">
        <port name="writeorder" role="//@interimmodels.1/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="orderwritten"/>
        </port>
        <port name="queryorder" role="//@interimmodels.1/@designmodel/@connector.8/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="orderreaded"/>
        </port>
      </component>
      <component name="CartsService" type="server" deploymentnode="//@interimmodels.1/@designmodel/@host.2/@node.0" securityCharacters="AttackSurface,DenialOfService,DataTampering">
        <port name="manage" role="//@interimmodels.1/@designmodel/@connector.3/@role.1" type="response,InboundPort">
          <events name="saveitem"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,datastore" deploymentnode="//@interimmodels.1/@designmodel/@host.1/@node.1" criticalLevel="High" securityCharacters="DefenseInDepth,Compartmentalization">
        <port name="pay" role="//@interimmodels.1/@designmodel/@connector.10/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="paid"/>
        </port>
      </component>
      <component name="ShippingService" type="server,datawriter" deploymentnode="//@interimmodels.1/@designmodel/@host.3/@node.0" securityCharacters="Compartmentalization">
        <port name="postshipping" role="//@interimmodels.1/@designmodel/@connector.4/@role.1 //@interimmodels.1/@designmodel/@connector.6/@role.0" type="response,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="posted"/>
        </port>
      </component>
      <component name="ShippingWorker" type="readendpoint,datareader" deploymentnode="//@interimmodels.1/@designmodel/@host.3/@node.0">
        <port name="listqueue" role="//@interimmodels.1/@designmodel/@connector.5/@role.0" type="read,OutboundPort,EventProcessorPort">
          <events name="renderqueue"/>
        </port>
      </component>
      <component name="QueueDB" type="repository,datastore" deploymentnode="//@interimmodels.1/@designmodel/@host.3/@node.1">
        <port name="writequeue" role="//@interimmodels.1/@designmodel/@connector.6/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="queuewritten"/>
        </port>
        <port name="readqueue" role="//@interimmodels.1/@designmodel/@connector.5/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="queuereaded"/>
        </port>
      </component>
      <component name="ShopBackend" type="client" deploymentnode="//@interimmodels.1/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface">
        <port name="listorder" role="//@interimmodels.1/@designmodel/@connector.2/@role.0" type="request,OutboundPort">
          <events name="renderlist"/>
        </port>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="append" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <deploymentnode href="target.arch#//@host.4/@node.0"/>
      </component>
      <component name="OrderwireLog" type="eventlogger,datastore">
        <port name="logorderwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <connector name="userwire" type="CSConnector" connectortype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.1/@designmodel/@connector.0"/>
      </connector>
      <connector name="cateloquewire" type="CSConnector" connectortype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.1"/>
        <role name="responder" roletype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.1/@designmodel/@connector.1"/>
      </connector>
      <connector name="orderquerywire" type="CSConnector" connectortype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.2"/>
        <role name="responder" roletype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.1/@designmodel/@connector.8/@role.0" connector="//@interimmodels.1/@designmodel/@connector.2"/>
      </connector>
      <connector name="cartwire" type="CSConnector" connectortype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.3"/>
        <role name="responder" roletype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.1/@designmodel/@connector.3"/>
      </connector>
      <connector name="shippingwire" type="CSConnector" connectortype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.1/@designmodel/@connector.6/@role.0" connector="//@interimmodels.1/@designmodel/@connector.4"/>
      </connector>
      <connector name="queuereadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.5"/>
        <role name="readstorage" roletype="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.1/@designmodel/@connector.5"/>
      </connector>
      <connector name="shippinglogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.6"/>
        <role name="writestorage" roletype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.1/@designmodel/@connector.6"/>
      </connector>
      <connector name="orderlogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.1/@designmodel/@connector.10/@role.0" connector="//@interimmodels.1/@designmodel/@connector.7"/>
        <role name="writestorage" roletype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.1/@designmodel/@connector.7"/>
      </connector>
      <connector name="orderreadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.8"/>
        <role name="readstorage" roletype="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.1/@designmodel/@connector.8"/>
      </connector>
      <connector name="orderwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.9"/>
        <role name="subscriber" roletype="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.1/@designmodel/@connector.7/@role.0" connector="//@interimmodels.1/@designmodel/@connector.9"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="writer" nextRoleExpr="//@interimmodels.1/@designmodel/@connector.4/@role.0" connector="//@interimmodels.1/@designmodel/@connector.10"/>
        <role name="writestorage" roletype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="writestorage" connector="//@interimmodels.1/@designmodel/@connector.10"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.1/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.1/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.1/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.1/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.1/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.1/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.1/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.4" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
            <event name="Skip"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.1/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.1/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.1/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.1/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.1/@designmodel/@archstyle.4/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.1/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.1/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.1/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.1/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.1/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.1/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.1/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.1/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.1/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.1/@designmodel" counterExample="" visitedStates="15" verifyTime="0.0052216" testport="//@interimmodels.1/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!61 -> cartwire_req?61 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!61 -> cartwire_res?61" exprText="[]  (ShopFrontend.shop.itemadded -> &lt;> CartsService.manage.saveitem)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.1/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.0/@port.3/@events.0" nextExpr="//@interimmodels.1/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.1/@designmodel" counterExample="" visitedStates="65" verifyTime="0.0071676" testport="//@interimmodels.1/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_publisher_process -> orderwire_pub!23 -> orderwire_pub?23 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!23 -> orderlogwire_req?23 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!23 -> orderlogwire_res?23 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_writer_request -> paywire_req!23 -> paywire_req?23 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!23 -> paywire_res?23 -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!23 -> shippingwire_req?23 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!23 -> shippinglogwire_req?23 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!23 -> shippinglogwire_res?23 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!23 -> shippingwire_res?23 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_subscriber_process" exprText="[]  (Payment.pay.paid -> &lt;> ShippingService.postshipping.posted)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.1/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.6/@port.0/@events.0" nextExpr="//@interimmodels.1/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.1/@designmodel" visitedStates="10" verifyTime="0.0054515" testport="//@interimmodels.1/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!34 -> cartwire_req?34 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!34 -> cartwire_res?34" exprText="[]  (OrdersService.postorder.save -> &lt;> Payment.pay.paid)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.1/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.3/@port.0/@events.1" nextExpr="//@interimmodels.1/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.1/@designmodel" counterExample="" visitedStates="15" verifyTime="0.0055677" testport="//@interimmodels.1/@designmodel/@component.0/@port.0" traceExample="init -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!39 -> userwire_req?39 -> UserService_userwire_responder_invoke -> UserService_login_signedon -> UserService_userwire_responder_process -> userwire_res!39 -> userwire_res?39" exprText="[]  (ShopFrontend.auth.checked -> &lt;> UserService.login.signedon)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.1/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.1/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.1/@designmodel" counterExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!62 -> cateloquewire_req?62 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!62 -> cateloquewire_res?62" visitedStates="24" verifyTime="0.0061997" testport="//@interimmodels.1/@designmodel/@component.0/@port.1" traceExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!23 -> cateloquewire_req?23 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!23 -> cateloquewire_res?23" exprText="[]  (&lt;> ShopFrontend.browse.read -> &lt;> CateloqueService.list.query)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.1/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.1/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.0/@port.1/@events.0" operator="EVENTUALLY" nextExpr="//@interimmodels.1/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop6" model="//@interimmodels.1/@designmodel" counterExample="" visitedStates="29" verifyTime="0.0059074" testport="//@interimmodels.1/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!55 -> orderquerywire_req?55 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_reader_process -> orderreadwire_req!55 -> orderreadwire_req?55 -> OrdersDB_orderreadwire_readstorage_invoke -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstorage_process -> orderreadwire_res!55 -> orderreadwire_res?55 -> OrdersService_orderreadwire_reader_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!55 -> orderquerywire_res?55" exprText="[]  (ShopBackend.listorder.renderlist -> &lt;> OrdersDB.queryorder.orderreaded)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.1/@designmodel/@verifyProperty.5">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.10/@port.0/@events.0" nextExpr="//@interimmodels.1/@designmodel/@verifyProperty.5/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop7" model="//@interimmodels.1/@designmodel" counterExample="" visitedStates="60" verifyTime="0.006281999999999999" testport="//@interimmodels.1/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_publisher_process -> orderwire_pub!74 -> orderwire_pub?74 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!74 -> orderlogwire_req?74 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!74 -> orderlogwire_res?74 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_writer_request -> paywire_req!74 -> paywire_req?74 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!74 -> paywire_res?74 -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!74 -> shippingwire_req?74 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!74 -> shippinglogwire_req?74 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!74 -> shippinglogwire_res?74 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!74 -> shippingwire_res?74 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_subscriber_process" exprText="[]  (ShopFrontend.order.purchased -> &lt;> OrdersService.postorder.save)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.1/@designmodel/@verifyProperty.6">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.3/@port.0/@events.1" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.1/@designmodel/@verifyProperty.6/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="CLOUD_PLATFORM">
        <node name="NodeJSContainer1" component="//@interimmodels.1/@designmodel/@component.0 //@interimmodels.1/@designmodel/@component.10">
          <port name="port" portNumber="15551" node="//@interimmodels.1/@designmodel/@host.0/@node.0" namedport="//@interimmodels.1/@designmodel/@component.0/@port.0"/>
          <port name="port" portNumber="15552" node="//@interimmodels.1/@designmodel/@host.0/@node.0" namedport="//@interimmodels.1/@designmodel/@component.0/@port.2"/>
          <port name="port" portNumber="15553" node="//@interimmodels.1/@designmodel/@host.0/@node.0" namedport="//@interimmodels.1/@designmodel/@component.10/@port.0"/>
          <port name="port" portNumber="15554" node="//@interimmodels.1/@designmodel/@host.0/@node.0" namedport="//@interimmodels.1/@designmodel/@component.0/@port.3"/>
          <port name="port" portNumber="15555" node="//@interimmodels.1/@designmodel/@host.0/@node.0" namedport="//@interimmodels.1/@designmodel/@component.0/@port.1"/>
        </node>
        <node name="GoContainer3" component="//@interimmodels.1/@designmodel/@component.1">
          <port name="port" portNumber="80" node="//@interimmodels.1/@designmodel/@host.0/@node.1" namedport="//@interimmodels.1/@designmodel/@component.1/@port.0" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="SecureServer">
        <node name="GoContainer1" component="//@interimmodels.1/@designmodel/@component.2">
          <port name="port" portNumber="80" node="//@interimmodels.1/@designmodel/@host.1/@node.0" namedport="//@interimmodels.1/@designmodel/@component.2/@port.0" hasFirewall="true"/>
        </node>
        <node name="GoContainer2" component="//@interimmodels.1/@designmodel/@component.6">
          <port name="port" portNumber="80" node="//@interimmodels.1/@designmodel/@host.1/@node.1" namedport="//@interimmodels.1/@designmodel/@component.6/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="LocalServer">
        <node name="JEEContainer1" component="//@interimmodels.1/@designmodel/@component.3 //@interimmodels.1/@designmodel/@component.5">
          <port name="port" portNumber="80" namedport="//@interimmodels.1/@designmodel/@component.3/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15561" node="//@interimmodels.1/@designmodel/@host.2/@node.0" namedport="//@interimmodels.1/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15562" node="//@interimmodels.1/@designmodel/@host.2/@node.0" namedport="//@interimmodels.1/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15563" node="//@interimmodels.1/@designmodel/@host.2/@node.0" namedport="//@interimmodels.1/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15564" node="//@interimmodels.1/@designmodel/@host.2/@node.0" namedport="//@interimmodels.1/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15566" node="//@interimmodels.1/@designmodel/@host.2/@node.0" namedport="//@interimmodels.1/@designmodel/@component.3/@port.1"/>
          <port name="port" portNumber="81" node="//@interimmodels.1/@designmodel/@host.2/@node.0" namedport="//@interimmodels.1/@designmodel/@component.3/@port.1"/>
        </node>
        <node name="MySQL1" component="//@interimmodels.1/@designmodel/@component.4">
          <port name="port" portNumber="3306" node="//@interimmodels.1/@designmodel/@host.2/@node.1" namedport="//@interimmodels.1/@designmodel/@component.4/@port.0 //@interimmodels.1/@designmodel/@component.4/@port.1"/>
        </node>
      </host>
      <host name="BackOfficeServer">
        <node name="JEEContainer4" component="//@interimmodels.1/@designmodel/@component.7 //@interimmodels.1/@designmodel/@component.8">
          <port name="port" portNumber="80" node="//@interimmodels.1/@designmodel/@host.3/@node.0" namedport="//@interimmodels.1/@designmodel/@component.7/@port.0" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15571" node="//@interimmodels.1/@designmodel/@host.3/@node.0" namedport="//@interimmodels.1/@designmodel/@component.7/@port.0"/>
          <port name="port" portNumber="15572" node="//@interimmodels.1/@designmodel/@host.3/@node.0" namedport="//@interimmodels.1/@designmodel/@component.7/@port.0"/>
        </node>
        <node name="MySQL2" component="//@interimmodels.1/@designmodel/@component.9">
          <port name="port" portNumber="3306" node="//@interimmodels.1/@designmodel/@host.3/@node.1" namedport="//@interimmodels.1/@designmodel/@component.9/@port.0 //@interimmodels.1/@designmodel/@component.9/@port.1"/>
        </node>
      </host>
      <link name="link2" linkType="HTTPS" networkType="INTERNET" source="//@interimmodels.1/@designmodel/@host.0/@node.0/@port.1" target="//@interimmodels.1/@designmodel/@host.2/@node.0/@port.0"/>
      <link name="link3" source="//@interimmodels.1/@designmodel/@host.2/@node.0/@port.1"/>
      <link name="link4" source="//@interimmodels.1/@designmodel/@host.2/@node.0/@port.2"/>
      <link name="link5" target="//@interimmodels.1/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link7" networkType="INTERNET" source="//@interimmodels.1/@designmodel/@host.0/@node.0/@port.3"/>
      <link name="link9" source="//@interimmodels.1/@designmodel/@host.0/@node.0/@port.4" target="//@interimmodels.1/@designmodel/@host.0/@node.1/@port.0"/>
      <link name="link11" source="//@interimmodels.1/@designmodel/@host.3/@node.0/@port.1"/>
      <link name="link12" source="//@interimmodels.1/@designmodel/@host.3/@node.0/@port.2"/>
      <link name="link13" target="//@interimmodels.1/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link14" target="//@interimmodels.1/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link16" source="//@interimmodels.1/@designmodel/@host.2/@node.0/@port.5" target="//@interimmodels.1/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link15" networkType="INTERNET" source="//@interimmodels.1/@designmodel/@host.0/@node.0/@port.2" target="//@interimmodels.1/@designmodel/@host.2/@node.0/@port.6"/>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="2" description="setup database: shippinglogwirecommandlog" nextModel="//@interimmodels.3" isStable="true" name="setup-database">
    <designmodel name="inter2">
      <component name="ShopFrontend" type="client,broadcaster" deploymentnode="//@interimmodels.2/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface,LeastPriviledge">
        <port name="auth" role="//@interimmodels.2/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="checked"/>
        </port>
        <port name="browse" role="//@interimmodels.2/@designmodel/@connector.1/@role.0" type="request,OutboundPort">
          <events name="read"/>
        </port>
        <port name="order" role="//@interimmodels.2/@designmodel/@connector.9/@role.0" type="broadcast,OutboundPort">
          <events name="purchased"/>
        </port>
        <port name="shop" role="//@interimmodels.2/@designmodel/@connector.3/@role.0" type="request,OutboundPort">
          <events name="itemadded"/>
        </port>
      </component>
      <component name="CateloqueService" type="server" deploymentnode="//@interimmodels.2/@designmodel/@host.0/@node.1" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
        <port name="list" role="//@interimmodels.2/@designmodel/@connector.1/@role.1" type="response,InboundPort">
          <events name="query"/>
        </port>
      </component>
      <component name="UserService" type="server" deploymentnode="//@interimmodels.2/@designmodel/@host.1/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DefenseInDepth,DenialOfService">
        <port name="login" role="//@interimmodels.2/@designmodel/@connector.0/@role.1" type="response,InboundPort">
          <events name="signedon"/>
        </port>
      </component>
      <component name="OrdersService" type="client,server,listener,eventconsumer,readendpoint,datawriter,datareader" deploymentnode="//@interimmodels.2/@designmodel/@host.2/@node.0" criticalLevel="Low" securityCharacters="AttackSurface,LeastPriviledge,Compartmentalization,DenialOfService,DataTampering">
        <port name="postorder" role="//@interimmodels.2/@designmodel/@connector.4/@role.0 //@interimmodels.2/@designmodel/@connector.7/@role.0 //@interimmodels.2/@designmodel/@connector.9/@role.1 //@interimmodels.2/@designmodel/@connector.10/@role.0" type="request,listen,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="check" next="//@interimmodels.2/@designmodel/@component.3/@port.0/@events.1"/>
          <events name="save"/>
        </port>
        <port name="get" role="//@interimmodels.2/@designmodel/@connector.2/@role.1 //@interimmodels.2/@designmodel/@connector.8/@role.0" type="response,read,OutboundPort,InboundPort,EventProcessorPort">
          <events name="ack"/>
        </port>
      </component>
      <component name="OrdersDB" type="repository,datastore" deploymentnode="//@interimmodels.2/@designmodel/@host.2/@node.1">
        <port name="writeorder" role="//@interimmodels.2/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="orderwritten"/>
        </port>
        <port name="queryorder" role="//@interimmodels.2/@designmodel/@connector.8/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="orderreaded"/>
        </port>
      </component>
      <component name="CartsService" type="server" deploymentnode="//@interimmodels.2/@designmodel/@host.2/@node.0" securityCharacters="AttackSurface,DenialOfService,DataTampering">
        <port name="manage" role="//@interimmodels.2/@designmodel/@connector.3/@role.1" type="response,InboundPort">
          <events name="saveitem"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,datastore" deploymentnode="//@interimmodels.2/@designmodel/@host.1/@node.1" criticalLevel="High" securityCharacters="DefenseInDepth,Compartmentalization">
        <port name="pay" role="//@interimmodels.2/@designmodel/@connector.10/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="paid"/>
        </port>
      </component>
      <component name="ShippingService" type="server,datawriter" deploymentnode="//@interimmodels.2/@designmodel/@host.3/@node.0" securityCharacters="Compartmentalization">
        <port name="postshipping" role="//@interimmodels.2/@designmodel/@connector.4/@role.1 //@interimmodels.2/@designmodel/@connector.6/@role.0" type="response,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="posted"/>
        </port>
      </component>
      <component name="ShippingWorker" type="readendpoint,datareader" deploymentnode="//@interimmodels.2/@designmodel/@host.3/@node.0">
        <port name="listqueue" role="//@interimmodels.2/@designmodel/@connector.5/@role.0" type="read,OutboundPort,EventProcessorPort">
          <events name="renderqueue"/>
        </port>
      </component>
      <component name="QueueDB" type="repository,datastore" deploymentnode="//@interimmodels.2/@designmodel/@host.3/@node.1">
        <port name="writequeue" role="//@interimmodels.2/@designmodel/@connector.6/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="queuewritten"/>
        </port>
        <port name="readqueue" role="//@interimmodels.2/@designmodel/@connector.5/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="queuereaded"/>
        </port>
      </component>
      <component name="ShopBackend" type="client" deploymentnode="//@interimmodels.2/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface">
        <port name="listorder" role="//@interimmodels.2/@designmodel/@connector.2/@role.0" type="request,OutboundPort">
          <events name="renderlist"/>
        </port>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="append" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <deploymentnode href="target.arch#//@host.4/@node.0"/>
      </component>
      <component name="OrderwireLog" type="eventlogger,datastore">
        <port name="logorderwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <component name="ShippinglogwireCommandLog" type="commanddb,datastore">
        <port name="logshippinglogwire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.3/@node.2"/>
      </component>
      <connector name="userwire" type="CSConnector" connectortype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.2/@designmodel/@connector.0"/>
      </connector>
      <connector name="cateloquewire" type="CSConnector" connectortype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.1"/>
        <role name="responder" roletype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.2/@designmodel/@connector.1"/>
      </connector>
      <connector name="orderquerywire" type="CSConnector" connectortype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.2"/>
        <role name="responder" roletype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.2/@designmodel/@connector.8/@role.0" connector="//@interimmodels.2/@designmodel/@connector.2"/>
      </connector>
      <connector name="cartwire" type="CSConnector" connectortype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.3"/>
        <role name="responder" roletype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.2/@designmodel/@connector.3"/>
      </connector>
      <connector name="shippingwire" type="CSConnector" connectortype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.2/@designmodel/@connector.6/@role.0" connector="//@interimmodels.2/@designmodel/@connector.4"/>
      </connector>
      <connector name="queuereadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.5"/>
        <role name="readstorage" roletype="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.2/@designmodel/@connector.5"/>
      </connector>
      <connector name="shippinglogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.6"/>
        <role name="writestorage" roletype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.2/@designmodel/@connector.6"/>
      </connector>
      <connector name="orderlogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.2/@designmodel/@connector.10/@role.0" connector="//@interimmodels.2/@designmodel/@connector.7"/>
        <role name="writestorage" roletype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.2/@designmodel/@connector.7"/>
      </connector>
      <connector name="orderreadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.8"/>
        <role name="readstorage" roletype="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.2/@designmodel/@connector.8"/>
      </connector>
      <connector name="orderwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.9"/>
        <role name="subscriber" roletype="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.2/@designmodel/@connector.7/@role.0" connector="//@interimmodels.2/@designmodel/@connector.9"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="writer" nextRoleExpr="//@interimmodels.2/@designmodel/@connector.4/@role.0" connector="//@interimmodels.2/@designmodel/@connector.10"/>
        <role name="writestorage" roletype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="writestorage" connector="//@interimmodels.2/@designmodel/@connector.10"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.2/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.2/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.2/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.2/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.2/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.2/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.2/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.4" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
            <event name="Skip"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.2/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.2/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.2/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.2/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.2/@designmodel/@archstyle.4/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.2/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.2/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.2/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.2/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.2/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.2/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.2/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.2/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.2/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.2/@designmodel" counterExample="" visitedStates="15" verifyTime="0.0051513999999999996" testport="//@interimmodels.2/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!45 -> cartwire_req?45 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!45 -> cartwire_res?45" exprText="[]  (ShopFrontend.shop.itemadded -> &lt;> CartsService.manage.saveitem)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.2/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.0/@port.3/@events.0" nextExpr="//@interimmodels.2/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.2/@designmodel" counterExample="" visitedStates="65" verifyTime="0.0060348" testport="//@interimmodels.2/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_publisher_process -> orderwire_pub!71 -> orderwire_pub?71 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!71 -> orderlogwire_req?71 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!71 -> orderlogwire_res?71 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_writer_request -> paywire_req!71 -> paywire_req?71 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!71 -> paywire_res?71 -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!71 -> shippingwire_req?71 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!71 -> shippinglogwire_req?71 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!71 -> shippinglogwire_res?71 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!71 -> shippingwire_res?71 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_subscriber_process" exprText="[]  (Payment.pay.paid -> &lt;> ShippingService.postshipping.posted)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.2/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.6/@port.0/@events.0" nextExpr="//@interimmodels.2/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.2/@designmodel" visitedStates="10" verifyTime="0.0051107999999999995" testport="//@interimmodels.2/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!15 -> cartwire_req?15 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!15 -> cartwire_res?15" exprText="[]  (OrdersService.postorder.save -> &lt;> Payment.pay.paid)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.2/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.3/@port.0/@events.1" nextExpr="//@interimmodels.2/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.2/@designmodel" counterExample="" visitedStates="15" verifyTime="0.0053974999999999995" testport="//@interimmodels.2/@designmodel/@component.0/@port.0" traceExample="init -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!94 -> userwire_req?94 -> UserService_userwire_responder_invoke -> UserService_login_signedon -> UserService_userwire_responder_process -> userwire_res!94 -> userwire_res?94" exprText="[]  (ShopFrontend.auth.checked -> &lt;> UserService.login.signedon)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.2/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.2/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.2/@designmodel" counterExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!62 -> cateloquewire_req?62 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!62 -> cateloquewire_res?62" visitedStates="24" verifyTime="0.0054452" testport="//@interimmodels.2/@designmodel/@component.0/@port.1" traceExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!21 -> cateloquewire_req?21 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!21 -> cateloquewire_res?21" exprText="[]  (&lt;> ShopFrontend.browse.read -> &lt;> CateloqueService.list.query)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.2/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.1/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.0/@port.1/@events.0" operator="EVENTUALLY" nextExpr="//@interimmodels.2/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop6" model="//@interimmodels.2/@designmodel" counterExample="" visitedStates="29" verifyTime="0.0078855" testport="//@interimmodels.2/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!81 -> orderquerywire_req?81 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_reader_process -> orderreadwire_req!81 -> orderreadwire_req?81 -> OrdersDB_orderreadwire_readstorage_invoke -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstorage_process -> orderreadwire_res!81 -> orderreadwire_res?81 -> OrdersService_orderreadwire_reader_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!81 -> orderquerywire_res?81" exprText="[]  (ShopBackend.listorder.renderlist -> &lt;> OrdersDB.queryorder.orderreaded)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.2/@designmodel/@verifyProperty.5">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.10/@port.0/@events.0" nextExpr="//@interimmodels.2/@designmodel/@verifyProperty.5/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop7" model="//@interimmodels.2/@designmodel" counterExample="" visitedStates="60" verifyTime="0.0697058" testport="//@interimmodels.2/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_publisher_process -> orderwire_pub!12 -> orderwire_pub?12 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!12 -> orderlogwire_req?12 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!12 -> orderlogwire_res?12 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_writer_request -> paywire_req!12 -> paywire_req?12 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!12 -> paywire_res?12 -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!12 -> shippingwire_req?12 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!12 -> shippinglogwire_req?12 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!12 -> shippinglogwire_res?12 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!12 -> shippingwire_res?12 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_subscriber_process" exprText="[]  (ShopFrontend.order.purchased -> &lt;> OrdersService.postorder.save)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.2/@designmodel/@verifyProperty.6">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.3/@port.0/@events.1" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.2/@designmodel/@verifyProperty.6/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="CLOUD_PLATFORM">
        <node name="NodeJSContainer1" component="//@interimmodels.2/@designmodel/@component.0 //@interimmodels.2/@designmodel/@component.10">
          <port name="port" portNumber="15551" node="//@interimmodels.2/@designmodel/@host.0/@node.0" namedport="//@interimmodels.2/@designmodel/@component.0/@port.0"/>
          <port name="port" portNumber="15552" node="//@interimmodels.2/@designmodel/@host.0/@node.0" namedport="//@interimmodels.2/@designmodel/@component.0/@port.2"/>
          <port name="port" portNumber="15553" node="//@interimmodels.2/@designmodel/@host.0/@node.0" namedport="//@interimmodels.2/@designmodel/@component.10/@port.0"/>
          <port name="port" portNumber="15554" node="//@interimmodels.2/@designmodel/@host.0/@node.0" namedport="//@interimmodels.2/@designmodel/@component.0/@port.3"/>
          <port name="port" portNumber="15555" node="//@interimmodels.2/@designmodel/@host.0/@node.0" namedport="//@interimmodels.2/@designmodel/@component.0/@port.1"/>
        </node>
        <node name="GoContainer3" component="//@interimmodels.2/@designmodel/@component.1">
          <port name="port" portNumber="80" node="//@interimmodels.2/@designmodel/@host.0/@node.1" namedport="//@interimmodels.2/@designmodel/@component.1/@port.0" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="SecureServer">
        <node name="GoContainer1" component="//@interimmodels.2/@designmodel/@component.2">
          <port name="port" portNumber="80" node="//@interimmodels.2/@designmodel/@host.1/@node.0" namedport="//@interimmodels.2/@designmodel/@component.2/@port.0" hasFirewall="true"/>
        </node>
        <node name="GoContainer2" component="//@interimmodels.2/@designmodel/@component.6">
          <port name="port" portNumber="80" node="//@interimmodels.2/@designmodel/@host.1/@node.1" namedport="//@interimmodels.2/@designmodel/@component.6/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="LocalServer">
        <node name="JEEContainer1" component="//@interimmodels.2/@designmodel/@component.3 //@interimmodels.2/@designmodel/@component.5">
          <port name="port" portNumber="80" namedport="//@interimmodels.2/@designmodel/@component.3/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15561" node="//@interimmodels.2/@designmodel/@host.2/@node.0" namedport="//@interimmodels.2/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15562" node="//@interimmodels.2/@designmodel/@host.2/@node.0" namedport="//@interimmodels.2/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15563" node="//@interimmodels.2/@designmodel/@host.2/@node.0" namedport="//@interimmodels.2/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15564" node="//@interimmodels.2/@designmodel/@host.2/@node.0" namedport="//@interimmodels.2/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15566" node="//@interimmodels.2/@designmodel/@host.2/@node.0" namedport="//@interimmodels.2/@designmodel/@component.3/@port.1"/>
          <port name="port" portNumber="81" node="//@interimmodels.2/@designmodel/@host.2/@node.0" namedport="//@interimmodels.2/@designmodel/@component.3/@port.1"/>
        </node>
        <node name="MySQL1" component="//@interimmodels.2/@designmodel/@component.4">
          <port name="port" portNumber="3306" node="//@interimmodels.2/@designmodel/@host.2/@node.1" namedport="//@interimmodels.2/@designmodel/@component.4/@port.0 //@interimmodels.2/@designmodel/@component.4/@port.1"/>
        </node>
      </host>
      <host name="BackOfficeServer">
        <node name="JEEContainer4" component="//@interimmodels.2/@designmodel/@component.7 //@interimmodels.2/@designmodel/@component.8">
          <port name="port" portNumber="80" node="//@interimmodels.2/@designmodel/@host.3/@node.0" namedport="//@interimmodels.2/@designmodel/@component.7/@port.0" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15571" node="//@interimmodels.2/@designmodel/@host.3/@node.0" namedport="//@interimmodels.2/@designmodel/@component.7/@port.0"/>
          <port name="port" portNumber="15572" node="//@interimmodels.2/@designmodel/@host.3/@node.0" namedport="//@interimmodels.2/@designmodel/@component.7/@port.0"/>
        </node>
        <node name="MySQL2" component="//@interimmodels.2/@designmodel/@component.9">
          <port name="port" portNumber="3306" node="//@interimmodels.2/@designmodel/@host.3/@node.1" namedport="//@interimmodels.2/@designmodel/@component.9/@port.0 //@interimmodels.2/@designmodel/@component.9/@port.1"/>
        </node>
      </host>
      <link name="link2" linkType="HTTPS" networkType="INTERNET" source="//@interimmodels.2/@designmodel/@host.0/@node.0/@port.1" target="//@interimmodels.2/@designmodel/@host.2/@node.0/@port.0"/>
      <link name="link3" source="//@interimmodels.2/@designmodel/@host.2/@node.0/@port.1"/>
      <link name="link4" source="//@interimmodels.2/@designmodel/@host.2/@node.0/@port.2"/>
      <link name="link5" target="//@interimmodels.2/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link7" networkType="INTERNET" source="//@interimmodels.2/@designmodel/@host.0/@node.0/@port.3"/>
      <link name="link9" source="//@interimmodels.2/@designmodel/@host.0/@node.0/@port.4" target="//@interimmodels.2/@designmodel/@host.0/@node.1/@port.0"/>
      <link name="link11" source="//@interimmodels.2/@designmodel/@host.3/@node.0/@port.1"/>
      <link name="link12" source="//@interimmodels.2/@designmodel/@host.3/@node.0/@port.2"/>
      <link name="link13" target="//@interimmodels.2/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link14" target="//@interimmodels.2/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link16" source="//@interimmodels.2/@designmodel/@host.2/@node.0/@port.5" target="//@interimmodels.2/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link15" networkType="INTERNET" source="//@interimmodels.2/@designmodel/@host.0/@node.0/@port.2" target="//@interimmodels.2/@designmodel/@host.2/@node.0/@port.6"/>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="3" description="setup database: orderlogwirecommandlog" nextModel="//@interimmodels.4" isStable="true" name="setup-database">
    <designmodel name="inter3">
      <component name="ShopFrontend" type="client,broadcaster" deploymentnode="//@interimmodels.3/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface,LeastPriviledge">
        <port name="auth" role="//@interimmodels.3/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="checked"/>
        </port>
        <port name="browse" role="//@interimmodels.3/@designmodel/@connector.1/@role.0" type="request,OutboundPort">
          <events name="read"/>
        </port>
        <port name="order" role="//@interimmodels.3/@designmodel/@connector.9/@role.0" type="broadcast,OutboundPort">
          <events name="purchased"/>
        </port>
        <port name="shop" role="//@interimmodels.3/@designmodel/@connector.3/@role.0" type="request,OutboundPort">
          <events name="itemadded"/>
        </port>
      </component>
      <component name="CateloqueService" type="server" deploymentnode="//@interimmodels.3/@designmodel/@host.0/@node.1" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
        <port name="list" role="//@interimmodels.3/@designmodel/@connector.1/@role.1" type="response,InboundPort">
          <events name="query"/>
        </port>
      </component>
      <component name="UserService" type="server" deploymentnode="//@interimmodels.3/@designmodel/@host.1/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DefenseInDepth,DenialOfService">
        <port name="login" role="//@interimmodels.3/@designmodel/@connector.0/@role.1" type="response,InboundPort">
          <events name="signedon"/>
        </port>
      </component>
      <component name="OrdersService" type="client,server,listener,eventconsumer,readendpoint,datawriter,datareader" deploymentnode="//@interimmodels.3/@designmodel/@host.2/@node.0" criticalLevel="Low" securityCharacters="AttackSurface,LeastPriviledge,Compartmentalization,DenialOfService,DataTampering">
        <port name="postorder" role="//@interimmodels.3/@designmodel/@connector.4/@role.0 //@interimmodels.3/@designmodel/@connector.7/@role.0 //@interimmodels.3/@designmodel/@connector.9/@role.1 //@interimmodels.3/@designmodel/@connector.10/@role.0" type="request,listen,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="check" next="//@interimmodels.3/@designmodel/@component.3/@port.0/@events.1"/>
          <events name="save"/>
        </port>
        <port name="get" role="//@interimmodels.3/@designmodel/@connector.2/@role.1 //@interimmodels.3/@designmodel/@connector.8/@role.0" type="response,read,OutboundPort,InboundPort,EventProcessorPort">
          <events name="ack"/>
        </port>
      </component>
      <component name="OrdersDB" type="repository,datastore" deploymentnode="//@interimmodels.3/@designmodel/@host.2/@node.1">
        <port name="writeorder" role="//@interimmodels.3/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="orderwritten"/>
        </port>
        <port name="queryorder" role="//@interimmodels.3/@designmodel/@connector.8/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="orderreaded"/>
        </port>
      </component>
      <component name="CartsService" type="server" deploymentnode="//@interimmodels.3/@designmodel/@host.2/@node.0" securityCharacters="AttackSurface,DenialOfService,DataTampering">
        <port name="manage" role="//@interimmodels.3/@designmodel/@connector.3/@role.1" type="response,InboundPort">
          <events name="saveitem"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,datastore" deploymentnode="//@interimmodels.3/@designmodel/@host.1/@node.1" criticalLevel="High" securityCharacters="DefenseInDepth,Compartmentalization">
        <port name="pay" role="//@interimmodels.3/@designmodel/@connector.10/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="paid"/>
        </port>
      </component>
      <component name="ShippingService" type="server,datawriter" deploymentnode="//@interimmodels.3/@designmodel/@host.3/@node.0" securityCharacters="Compartmentalization">
        <port name="postshipping" role="//@interimmodels.3/@designmodel/@connector.4/@role.1 //@interimmodels.3/@designmodel/@connector.6/@role.0" type="response,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="posted"/>
        </port>
      </component>
      <component name="ShippingWorker" type="readendpoint,datareader" deploymentnode="//@interimmodels.3/@designmodel/@host.3/@node.0">
        <port name="listqueue" role="//@interimmodels.3/@designmodel/@connector.5/@role.0" type="read,OutboundPort,EventProcessorPort">
          <events name="renderqueue"/>
        </port>
      </component>
      <component name="QueueDB" type="repository,datastore" deploymentnode="//@interimmodels.3/@designmodel/@host.3/@node.1">
        <port name="writequeue" role="//@interimmodels.3/@designmodel/@connector.6/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="queuewritten"/>
        </port>
        <port name="readqueue" role="//@interimmodels.3/@designmodel/@connector.5/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="queuereaded"/>
        </port>
      </component>
      <component name="ShopBackend" type="client" deploymentnode="//@interimmodels.3/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface">
        <port name="listorder" role="//@interimmodels.3/@designmodel/@connector.2/@role.0" type="request,OutboundPort">
          <events name="renderlist"/>
        </port>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="append" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <deploymentnode href="target.arch#//@host.4/@node.0"/>
      </component>
      <component name="OrderwireLog" type="eventlogger,datastore">
        <port name="logorderwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <component name="ShippinglogwireCommandLog" type="commanddb,datastore">
        <port name="logshippinglogwire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.3/@node.2"/>
      </component>
      <component name="OrderlogwireCommandLog" type="commanddb,datastore">
        <port name="logorderlogwire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <connector name="userwire" type="CSConnector" connectortype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.3/@designmodel/@connector.0"/>
      </connector>
      <connector name="cateloquewire" type="CSConnector" connectortype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.1"/>
        <role name="responder" roletype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.3/@designmodel/@connector.1"/>
      </connector>
      <connector name="orderquerywire" type="CSConnector" connectortype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.2"/>
        <role name="responder" roletype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.3/@designmodel/@connector.8/@role.0" connector="//@interimmodels.3/@designmodel/@connector.2"/>
      </connector>
      <connector name="cartwire" type="CSConnector" connectortype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.3"/>
        <role name="responder" roletype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.3/@designmodel/@connector.3"/>
      </connector>
      <connector name="shippingwire" type="CSConnector" connectortype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.3/@designmodel/@connector.6/@role.0" connector="//@interimmodels.3/@designmodel/@connector.4"/>
      </connector>
      <connector name="queuereadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.5"/>
        <role name="readstorage" roletype="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.3/@designmodel/@connector.5"/>
      </connector>
      <connector name="shippinglogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.6"/>
        <role name="writestorage" roletype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.3/@designmodel/@connector.6"/>
      </connector>
      <connector name="orderlogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.3/@designmodel/@connector.10/@role.0" connector="//@interimmodels.3/@designmodel/@connector.7"/>
        <role name="writestorage" roletype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.3/@designmodel/@connector.7"/>
      </connector>
      <connector name="orderreadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.8"/>
        <role name="readstorage" roletype="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.3/@designmodel/@connector.8"/>
      </connector>
      <connector name="orderwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.9"/>
        <role name="subscriber" roletype="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.3/@designmodel/@connector.7/@role.0" connector="//@interimmodels.3/@designmodel/@connector.9"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="writer" nextRoleExpr="//@interimmodels.3/@designmodel/@connector.4/@role.0" connector="//@interimmodels.3/@designmodel/@connector.10"/>
        <role name="writestorage" roletype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="writestorage" connector="//@interimmodels.3/@designmodel/@connector.10"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.3/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.3/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.3/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.3/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.3/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.3/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.3/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.4" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
            <event name="Skip"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.3/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.3/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.3/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.3/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.3/@designmodel/@archstyle.4/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.3/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.3/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.3/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.3/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.3/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.3/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.3/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.3/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.3/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.3/@designmodel" counterExample="" visitedStates="15" verifyTime="0.0073512" testport="//@interimmodels.3/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!13 -> cartwire_req?13 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!13 -> cartwire_res?13" exprText="[]  (ShopFrontend.shop.itemadded -> &lt;> CartsService.manage.saveitem)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.3/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.0/@port.3/@events.0" nextExpr="//@interimmodels.3/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.3/@designmodel" counterExample="" visitedStates="65" verifyTime="0.0077548" testport="//@interimmodels.3/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_publisher_process -> orderwire_pub!14 -> orderwire_pub?14 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!14 -> orderlogwire_req?14 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!14 -> orderlogwire_res?14 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_writer_request -> paywire_req!14 -> paywire_req?14 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!14 -> paywire_res?14 -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!14 -> shippingwire_req?14 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!14 -> shippinglogwire_req?14 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!14 -> shippinglogwire_res?14 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!14 -> shippingwire_res?14 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_subscriber_process" exprText="[]  (Payment.pay.paid -> &lt;> ShippingService.postshipping.posted)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.3/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.6/@port.0/@events.0" nextExpr="//@interimmodels.3/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.3/@designmodel" visitedStates="10" verifyTime="0.0050861" testport="//@interimmodels.3/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!12 -> cartwire_req?12 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!12 -> cartwire_res?12" exprText="[]  (OrdersService.postorder.save -> &lt;> Payment.pay.paid)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.3/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.3/@port.0/@events.1" nextExpr="//@interimmodels.3/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.3/@designmodel" counterExample="" visitedStates="15" verifyTime="0.0088798" testport="//@interimmodels.3/@designmodel/@component.0/@port.0" traceExample="init -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!75 -> userwire_req?75 -> UserService_userwire_responder_invoke -> UserService_login_signedon -> UserService_userwire_responder_process -> userwire_res!75 -> userwire_res?75" exprText="[]  (ShopFrontend.auth.checked -> &lt;> UserService.login.signedon)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.3/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.3/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.3/@designmodel" counterExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!62 -> cateloquewire_req?62 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!62 -> cateloquewire_res?62" visitedStates="24" verifyTime="0.005405999999999999" testport="//@interimmodels.3/@designmodel/@component.0/@port.1" traceExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!59 -> cateloquewire_req?59 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!59 -> cateloquewire_res?59" exprText="[]  (&lt;> ShopFrontend.browse.read -> &lt;> CateloqueService.list.query)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.3/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.1/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.0/@port.1/@events.0" operator="EVENTUALLY" nextExpr="//@interimmodels.3/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop6" model="//@interimmodels.3/@designmodel" counterExample="" visitedStates="29" verifyTime="0.007154499999999999" testport="//@interimmodels.3/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!66 -> orderquerywire_req?66 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_reader_process -> orderreadwire_req!66 -> orderreadwire_req?66 -> OrdersDB_orderreadwire_readstorage_invoke -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstorage_process -> orderreadwire_res!66 -> orderreadwire_res?66 -> OrdersService_orderreadwire_reader_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!66 -> orderquerywire_res?66" exprText="[]  (ShopBackend.listorder.renderlist -> &lt;> OrdersDB.queryorder.orderreaded)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.3/@designmodel/@verifyProperty.5">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.10/@port.0/@events.0" nextExpr="//@interimmodels.3/@designmodel/@verifyProperty.5/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop7" model="//@interimmodels.3/@designmodel" counterExample="" visitedStates="60" verifyTime="0.010033" testport="//@interimmodels.3/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_publisher_process -> orderwire_pub!34 -> orderwire_pub?34 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!34 -> orderlogwire_req?34 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!34 -> orderlogwire_res?34 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_writer_request -> paywire_req!34 -> paywire_req?34 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!34 -> paywire_res?34 -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!34 -> shippingwire_req?34 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!34 -> shippinglogwire_req?34 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!34 -> shippinglogwire_res?34 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!34 -> shippingwire_res?34 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_subscriber_process" exprText="[]  (ShopFrontend.order.purchased -> &lt;> OrdersService.postorder.save)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.3/@designmodel/@verifyProperty.6">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.3/@port.0/@events.1" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.3/@designmodel/@verifyProperty.6/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="CLOUD_PLATFORM">
        <node name="NodeJSContainer1" component="//@interimmodels.3/@designmodel/@component.0 //@interimmodels.3/@designmodel/@component.10">
          <port name="port" portNumber="15551" node="//@interimmodels.3/@designmodel/@host.0/@node.0" namedport="//@interimmodels.3/@designmodel/@component.0/@port.0"/>
          <port name="port" portNumber="15552" node="//@interimmodels.3/@designmodel/@host.0/@node.0" namedport="//@interimmodels.3/@designmodel/@component.0/@port.2"/>
          <port name="port" portNumber="15553" node="//@interimmodels.3/@designmodel/@host.0/@node.0" namedport="//@interimmodels.3/@designmodel/@component.10/@port.0"/>
          <port name="port" portNumber="15554" node="//@interimmodels.3/@designmodel/@host.0/@node.0" namedport="//@interimmodels.3/@designmodel/@component.0/@port.3"/>
          <port name="port" portNumber="15555" node="//@interimmodels.3/@designmodel/@host.0/@node.0" namedport="//@interimmodels.3/@designmodel/@component.0/@port.1"/>
        </node>
        <node name="GoContainer3" component="//@interimmodels.3/@designmodel/@component.1">
          <port name="port" portNumber="80" node="//@interimmodels.3/@designmodel/@host.0/@node.1" namedport="//@interimmodels.3/@designmodel/@component.1/@port.0" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="SecureServer">
        <node name="GoContainer1" component="//@interimmodels.3/@designmodel/@component.2">
          <port name="port" portNumber="80" node="//@interimmodels.3/@designmodel/@host.1/@node.0" namedport="//@interimmodels.3/@designmodel/@component.2/@port.0" hasFirewall="true"/>
        </node>
        <node name="GoContainer2" component="//@interimmodels.3/@designmodel/@component.6">
          <port name="port" portNumber="80" node="//@interimmodels.3/@designmodel/@host.1/@node.1" namedport="//@interimmodels.3/@designmodel/@component.6/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="LocalServer">
        <node name="JEEContainer1" component="//@interimmodels.3/@designmodel/@component.3 //@interimmodels.3/@designmodel/@component.5">
          <port name="port" portNumber="80" namedport="//@interimmodels.3/@designmodel/@component.3/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15561" node="//@interimmodels.3/@designmodel/@host.2/@node.0" namedport="//@interimmodels.3/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15562" node="//@interimmodels.3/@designmodel/@host.2/@node.0" namedport="//@interimmodels.3/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15563" node="//@interimmodels.3/@designmodel/@host.2/@node.0" namedport="//@interimmodels.3/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15564" node="//@interimmodels.3/@designmodel/@host.2/@node.0" namedport="//@interimmodels.3/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15566" node="//@interimmodels.3/@designmodel/@host.2/@node.0" namedport="//@interimmodels.3/@designmodel/@component.3/@port.1"/>
          <port name="port" portNumber="81" node="//@interimmodels.3/@designmodel/@host.2/@node.0" namedport="//@interimmodels.3/@designmodel/@component.3/@port.1"/>
        </node>
        <node name="MySQL1" component="//@interimmodels.3/@designmodel/@component.4">
          <port name="port" portNumber="3306" node="//@interimmodels.3/@designmodel/@host.2/@node.1" namedport="//@interimmodels.3/@designmodel/@component.4/@port.0 //@interimmodels.3/@designmodel/@component.4/@port.1"/>
        </node>
      </host>
      <host name="BackOfficeServer">
        <node name="JEEContainer4" component="//@interimmodels.3/@designmodel/@component.7 //@interimmodels.3/@designmodel/@component.8">
          <port name="port" portNumber="80" node="//@interimmodels.3/@designmodel/@host.3/@node.0" namedport="//@interimmodels.3/@designmodel/@component.7/@port.0" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15571" node="//@interimmodels.3/@designmodel/@host.3/@node.0" namedport="//@interimmodels.3/@designmodel/@component.7/@port.0"/>
          <port name="port" portNumber="15572" node="//@interimmodels.3/@designmodel/@host.3/@node.0" namedport="//@interimmodels.3/@designmodel/@component.7/@port.0"/>
        </node>
        <node name="MySQL2" component="//@interimmodels.3/@designmodel/@component.9">
          <port name="port" portNumber="3306" node="//@interimmodels.3/@designmodel/@host.3/@node.1" namedport="//@interimmodels.3/@designmodel/@component.9/@port.0 //@interimmodels.3/@designmodel/@component.9/@port.1"/>
        </node>
      </host>
      <link name="link2" linkType="HTTPS" networkType="INTERNET" source="//@interimmodels.3/@designmodel/@host.0/@node.0/@port.1" target="//@interimmodels.3/@designmodel/@host.2/@node.0/@port.0"/>
      <link name="link3" source="//@interimmodels.3/@designmodel/@host.2/@node.0/@port.1"/>
      <link name="link4" source="//@interimmodels.3/@designmodel/@host.2/@node.0/@port.2"/>
      <link name="link5" target="//@interimmodels.3/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link7" networkType="INTERNET" source="//@interimmodels.3/@designmodel/@host.0/@node.0/@port.3"/>
      <link name="link9" source="//@interimmodels.3/@designmodel/@host.0/@node.0/@port.4" target="//@interimmodels.3/@designmodel/@host.0/@node.1/@port.0"/>
      <link name="link11" source="//@interimmodels.3/@designmodel/@host.3/@node.0/@port.1"/>
      <link name="link12" source="//@interimmodels.3/@designmodel/@host.3/@node.0/@port.2"/>
      <link name="link13" target="//@interimmodels.3/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link14" target="//@interimmodels.3/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link16" source="//@interimmodels.3/@designmodel/@host.2/@node.0/@port.5" target="//@interimmodels.3/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link15" networkType="INTERNET" source="//@interimmodels.3/@designmodel/@host.0/@node.0/@port.2" target="//@interimmodels.3/@designmodel/@host.2/@node.0/@port.6"/>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="4" description="network route for connector:oraclepaywire between: payment paymentblockchain " nextModel="//@interimmodels.5" name="network-route">
    <designmodel name="inter4">
      <component name="ShopFrontend" type="client,broadcaster" deploymentnode="//@interimmodels.4/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface,LeastPriviledge">
        <port name="auth" role="//@interimmodels.4/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="checked"/>
        </port>
        <port name="browse" role="//@interimmodels.4/@designmodel/@connector.1/@role.0" type="request,OutboundPort">
          <events name="read"/>
        </port>
        <port name="order" role="//@interimmodels.4/@designmodel/@connector.9/@role.0" type="broadcast,OutboundPort">
          <events name="purchased"/>
        </port>
        <port name="shop" role="//@interimmodels.4/@designmodel/@connector.3/@role.0" type="request,OutboundPort">
          <events name="itemadded"/>
        </port>
      </component>
      <component name="CateloqueService" type="server" deploymentnode="//@interimmodels.4/@designmodel/@host.0/@node.1" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
        <port name="list" role="//@interimmodels.4/@designmodel/@connector.1/@role.1" type="response,InboundPort">
          <events name="query"/>
        </port>
      </component>
      <component name="UserService" type="server" deploymentnode="//@interimmodels.4/@designmodel/@host.1/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DefenseInDepth,DenialOfService">
        <port name="login" role="//@interimmodels.4/@designmodel/@connector.0/@role.1" type="response,InboundPort">
          <events name="signedon"/>
        </port>
      </component>
      <component name="OrdersService" type="client,server,listener,eventconsumer,readendpoint,datawriter,datareader" deploymentnode="//@interimmodels.4/@designmodel/@host.2/@node.0" criticalLevel="Low" securityCharacters="AttackSurface,LeastPriviledge,Compartmentalization,DenialOfService,DataTampering">
        <port name="postorder" role="//@interimmodels.4/@designmodel/@connector.4/@role.0 //@interimmodels.4/@designmodel/@connector.7/@role.0 //@interimmodels.4/@designmodel/@connector.9/@role.1 //@interimmodels.4/@designmodel/@connector.10/@role.0" type="request,listen,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="check" next="//@interimmodels.4/@designmodel/@component.3/@port.0/@events.1"/>
          <events name="save"/>
        </port>
        <port name="get" role="//@interimmodels.4/@designmodel/@connector.2/@role.1 //@interimmodels.4/@designmodel/@connector.8/@role.0" type="response,read,OutboundPort,InboundPort,EventProcessorPort">
          <events name="ack"/>
        </port>
      </component>
      <component name="OrdersDB" type="repository,datastore" deploymentnode="//@interimmodels.4/@designmodel/@host.2/@node.1">
        <port name="writeorder" role="//@interimmodels.4/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="orderwritten"/>
        </port>
        <port name="queryorder" role="//@interimmodels.4/@designmodel/@connector.8/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="orderreaded"/>
        </port>
      </component>
      <component name="CartsService" type="server" deploymentnode="//@interimmodels.4/@designmodel/@host.2/@node.0" securityCharacters="AttackSurface,DenialOfService,DataTampering">
        <port name="manage" role="//@interimmodels.4/@designmodel/@connector.3/@role.1" type="response,InboundPort">
          <events name="saveitem"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,datastore" deploymentnode="//@interimmodels.4/@designmodel/@host.1/@node.1" criticalLevel="High" securityCharacters="DefenseInDepth,Compartmentalization">
        <port name="pay" role="//@interimmodels.4/@designmodel/@connector.10/@role.1 //@interimmodels.4/@designmodel/@connector.11/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="paid"/>
        </port>
      </component>
      <component name="ShippingService" type="server,datawriter" deploymentnode="//@interimmodels.4/@designmodel/@host.3/@node.0" securityCharacters="Compartmentalization">
        <port name="postshipping" role="//@interimmodels.4/@designmodel/@connector.4/@role.1 //@interimmodels.4/@designmodel/@connector.6/@role.0" type="response,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="posted"/>
        </port>
      </component>
      <component name="ShippingWorker" type="readendpoint,datareader" deploymentnode="//@interimmodels.4/@designmodel/@host.3/@node.0">
        <port name="listqueue" role="//@interimmodels.4/@designmodel/@connector.5/@role.0" type="read,OutboundPort,EventProcessorPort">
          <events name="renderqueue"/>
        </port>
      </component>
      <component name="QueueDB" type="repository,datastore" deploymentnode="//@interimmodels.4/@designmodel/@host.3/@node.1">
        <port name="writequeue" role="//@interimmodels.4/@designmodel/@connector.6/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="queuewritten"/>
        </port>
        <port name="readqueue" role="//@interimmodels.4/@designmodel/@connector.5/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="queuereaded"/>
        </port>
      </component>
      <component name="ShopBackend" type="client" deploymentnode="//@interimmodels.4/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface">
        <port name="listorder" role="//@interimmodels.4/@designmodel/@connector.2/@role.0" type="request,OutboundPort">
          <events name="renderlist"/>
        </port>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="append" role="//@interimmodels.4/@designmodel/@connector.11/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <deploymentnode href="target.arch#//@host.4/@node.0"/>
      </component>
      <component name="OrderwireLog" type="eventlogger,datastore">
        <port name="logorderwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <component name="ShippinglogwireCommandLog" type="commanddb,datastore">
        <port name="logshippinglogwire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.3/@node.2"/>
      </component>
      <component name="OrderlogwireCommandLog" type="commanddb,datastore">
        <port name="logorderlogwire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <connector name="userwire" type="CSConnector" connectortype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.4/@designmodel/@connector.0"/>
      </connector>
      <connector name="cateloquewire" type="CSConnector" connectortype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.1"/>
        <role name="responder" roletype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.4/@designmodel/@connector.1"/>
      </connector>
      <connector name="orderquerywire" type="CSConnector" connectortype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.2"/>
        <role name="responder" roletype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.4/@designmodel/@connector.8/@role.0" connector="//@interimmodels.4/@designmodel/@connector.2"/>
      </connector>
      <connector name="cartwire" type="CSConnector" connectortype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.3"/>
        <role name="responder" roletype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.4/@designmodel/@connector.3"/>
      </connector>
      <connector name="shippingwire" type="CSConnector" connectortype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.4/@designmodel/@connector.6/@role.0" connector="//@interimmodels.4/@designmodel/@connector.4"/>
      </connector>
      <connector name="queuereadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.5"/>
        <role name="readstorage" roletype="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.4/@designmodel/@connector.5"/>
      </connector>
      <connector name="shippinglogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.6"/>
        <role name="writestorage" roletype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.4/@designmodel/@connector.6"/>
      </connector>
      <connector name="orderlogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.4/@designmodel/@connector.10/@role.0" connector="//@interimmodels.4/@designmodel/@connector.7"/>
        <role name="writestorage" roletype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.4/@designmodel/@connector.7"/>
      </connector>
      <connector name="orderreadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.8"/>
        <role name="readstorage" roletype="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.4/@designmodel/@connector.8"/>
      </connector>
      <connector name="orderwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.4/@designmodel/@archstyle.1/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.4/@designmodel/@archstyle.1/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.9"/>
        <role name="subscriber" roletype="//@interimmodels.4/@designmodel/@archstyle.1/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.4/@designmodel/@connector.7/@role.0" connector="//@interimmodels.4/@designmodel/@connector.9"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="writer" nextRoleExpr="//@interimmodels.4/@designmodel/@connector.4/@role.0" connector="//@interimmodels.4/@designmodel/@connector.10"/>
        <role name="writestorage" roletype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="writestorage" connector="//@interimmodels.4/@designmodel/@connector.10"/>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.4/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.4/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.4/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.4/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.4/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.4/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.4/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.4/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.4/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.4/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.4/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.4" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
            <event name="Skip"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.4/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.4/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.4/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.4/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.4/@designmodel/@archstyle.4/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.4/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.4/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.4/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.4/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.4/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.4/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.4/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.4/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.4/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.4/@designmodel" counterExample="" visitedStates="15" verifyTime="0.0092036" testport="//@interimmodels.4/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!22 -> cartwire_req?22 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!22 -> cartwire_res?22" exprText="[]  (ShopFrontend.shop.itemadded -> &lt;> CartsService.manage.saveitem)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.4/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.0/@port.3/@events.0" nextExpr="//@interimmodels.4/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.4/@designmodel" counterExample="" visitedStates="65" verifyTime="0.010669699999999999" testport="//@interimmodels.4/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_publisher_process -> orderwire_pub!55 -> orderwire_pub?55 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!55 -> orderlogwire_req?55 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!55 -> orderlogwire_res?55 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_writer_request -> paywire_req!55 -> paywire_req?55 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!55 -> paywire_res?55 -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!55 -> shippingwire_req?55 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!55 -> shippinglogwire_req?55 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!55 -> shippinglogwire_res?55 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!55 -> shippingwire_res?55 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_subscriber_process" exprText="[]  (Payment.pay.paid -> &lt;> ShippingService.postshipping.posted)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.4/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.6/@port.0/@events.0" nextExpr="//@interimmodels.4/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.4/@designmodel" visitedStates="10" verifyTime="0.0075648" testport="//@interimmodels.4/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!12 -> cartwire_req?12 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!12 -> cartwire_res?12" exprText="[]  (OrdersService.postorder.save -> &lt;> Payment.pay.paid)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.4/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.3/@port.0/@events.1" nextExpr="//@interimmodels.4/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.4/@designmodel" counterExample="" visitedStates="15" verifyTime="0.0077586999999999995" testport="//@interimmodels.4/@designmodel/@component.0/@port.0" traceExample="init -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!27 -> userwire_req?27 -> UserService_userwire_responder_invoke -> UserService_login_signedon -> UserService_userwire_responder_process -> userwire_res!27 -> userwire_res?27" exprText="[]  (ShopFrontend.auth.checked -> &lt;> UserService.login.signedon)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.4/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.4/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.4/@designmodel" counterExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!62 -> cateloquewire_req?62 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!62 -> cateloquewire_res?62" visitedStates="24" verifyTime="0.0106333" testport="//@interimmodels.4/@designmodel/@component.0/@port.1" traceExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!86 -> cateloquewire_req?86 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!86 -> cateloquewire_res?86" exprText="[]  (&lt;> ShopFrontend.browse.read -> &lt;> CateloqueService.list.query)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.4/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.1/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.0/@port.1/@events.0" operator="EVENTUALLY" nextExpr="//@interimmodels.4/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop6" model="//@interimmodels.4/@designmodel" counterExample="" visitedStates="29" verifyTime="0.009738499999999999" testport="//@interimmodels.4/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!57 -> orderquerywire_req?57 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_reader_process -> orderreadwire_req!57 -> orderreadwire_req?57 -> OrdersDB_orderreadwire_readstorage_invoke -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstorage_process -> orderreadwire_res!57 -> orderreadwire_res?57 -> OrdersService_orderreadwire_reader_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!57 -> orderquerywire_res?57" exprText="[]  (ShopBackend.listorder.renderlist -> &lt;> OrdersDB.queryorder.orderreaded)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.4/@designmodel/@verifyProperty.5">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.10/@port.0/@events.0" nextExpr="//@interimmodels.4/@designmodel/@verifyProperty.5/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop7" model="//@interimmodels.4/@designmodel" counterExample="" visitedStates="60" verifyTime="0.0092636" testport="//@interimmodels.4/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_publisher_process -> orderwire_pub!23 -> orderwire_pub?23 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!23 -> orderlogwire_req?23 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!23 -> orderlogwire_res?23 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_writer_request -> paywire_req!23 -> paywire_req?23 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!23 -> paywire_res?23 -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!23 -> shippingwire_req?23 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!23 -> shippinglogwire_req?23 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!23 -> shippinglogwire_res?23 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!23 -> shippingwire_res?23 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_subscriber_process" exprText="[]  (ShopFrontend.order.purchased -> &lt;> OrdersService.postorder.save)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.4/@designmodel/@verifyProperty.6">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.3/@port.0/@events.1" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.4/@designmodel/@verifyProperty.6/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" valid="false" counterExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_publisher_process -> orderwire_pub!49 -> orderwire_pub?49 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!49 -> orderlogwire_req?49 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!49 -> orderlogwire_res?49 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_writer_request -> paywire_req!49 -> paywire_req?49 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!49 -> paywire_res?49 -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!49 -> shippingwire_req?49 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!49 -> shippinglogwire_req?49 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!49 -> shippinglogwire_res?49 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!49 -> shippingwire_res?49 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_subscriber_process" visitedStates="73" verifyTime="0.0122622" testport="//@interimmodels.4/@designmodel/@component.0/@port.2" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter4() |= ![](Payment_pay_paid->&lt;" exprText="[] (Payment.pay.paid-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.11"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="CLOUD_PLATFORM">
        <node name="NodeJSContainer1" component="//@interimmodels.4/@designmodel/@component.0 //@interimmodels.4/@designmodel/@component.10">
          <port name="port" portNumber="15551" node="//@interimmodels.4/@designmodel/@host.0/@node.0" namedport="//@interimmodels.4/@designmodel/@component.0/@port.0"/>
          <port name="port" portNumber="15552" node="//@interimmodels.4/@designmodel/@host.0/@node.0" namedport="//@interimmodels.4/@designmodel/@component.0/@port.2"/>
          <port name="port" portNumber="15553" node="//@interimmodels.4/@designmodel/@host.0/@node.0" namedport="//@interimmodels.4/@designmodel/@component.10/@port.0"/>
          <port name="port" portNumber="15554" node="//@interimmodels.4/@designmodel/@host.0/@node.0" namedport="//@interimmodels.4/@designmodel/@component.0/@port.3"/>
          <port name="port" portNumber="15555" node="//@interimmodels.4/@designmodel/@host.0/@node.0" namedport="//@interimmodels.4/@designmodel/@component.0/@port.1"/>
        </node>
        <node name="GoContainer3" component="//@interimmodels.4/@designmodel/@component.1">
          <port name="port" portNumber="80" node="//@interimmodels.4/@designmodel/@host.0/@node.1" namedport="//@interimmodels.4/@designmodel/@component.1/@port.0" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="SecureServer">
        <node name="GoContainer1" component="//@interimmodels.4/@designmodel/@component.2">
          <port name="port" portNumber="80" node="//@interimmodels.4/@designmodel/@host.1/@node.0" namedport="//@interimmodels.4/@designmodel/@component.2/@port.0" hasFirewall="true"/>
        </node>
        <node name="GoContainer2" component="//@interimmodels.4/@designmodel/@component.6">
          <port name="port" portNumber="80" node="//@interimmodels.4/@designmodel/@host.1/@node.1" namedport="//@interimmodels.4/@designmodel/@component.6/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="LocalServer">
        <node name="JEEContainer1" component="//@interimmodels.4/@designmodel/@component.3 //@interimmodels.4/@designmodel/@component.5">
          <port name="port" portNumber="80" namedport="//@interimmodels.4/@designmodel/@component.3/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15561" node="//@interimmodels.4/@designmodel/@host.2/@node.0" namedport="//@interimmodels.4/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15562" node="//@interimmodels.4/@designmodel/@host.2/@node.0" namedport="//@interimmodels.4/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15563" node="//@interimmodels.4/@designmodel/@host.2/@node.0" namedport="//@interimmodels.4/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15564" node="//@interimmodels.4/@designmodel/@host.2/@node.0" namedport="//@interimmodels.4/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15566" node="//@interimmodels.4/@designmodel/@host.2/@node.0" namedport="//@interimmodels.4/@designmodel/@component.3/@port.1"/>
          <port name="port" portNumber="81" node="//@interimmodels.4/@designmodel/@host.2/@node.0" namedport="//@interimmodels.4/@designmodel/@component.3/@port.1"/>
        </node>
        <node name="MySQL1" component="//@interimmodels.4/@designmodel/@component.4">
          <port name="port" portNumber="3306" node="//@interimmodels.4/@designmodel/@host.2/@node.1" namedport="//@interimmodels.4/@designmodel/@component.4/@port.0 //@interimmodels.4/@designmodel/@component.4/@port.1"/>
        </node>
      </host>
      <host name="BackOfficeServer">
        <node name="JEEContainer4" component="//@interimmodels.4/@designmodel/@component.7 //@interimmodels.4/@designmodel/@component.8">
          <port name="port" portNumber="80" node="//@interimmodels.4/@designmodel/@host.3/@node.0" namedport="//@interimmodels.4/@designmodel/@component.7/@port.0" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15571" node="//@interimmodels.4/@designmodel/@host.3/@node.0" namedport="//@interimmodels.4/@designmodel/@component.7/@port.0"/>
          <port name="port" portNumber="15572" node="//@interimmodels.4/@designmodel/@host.3/@node.0" namedport="//@interimmodels.4/@designmodel/@component.7/@port.0"/>
        </node>
        <node name="MySQL2" component="//@interimmodels.4/@designmodel/@component.9">
          <port name="port" portNumber="3306" node="//@interimmodels.4/@designmodel/@host.3/@node.1" namedport="//@interimmodels.4/@designmodel/@component.9/@port.0 //@interimmodels.4/@designmodel/@component.9/@port.1"/>
        </node>
      </host>
      <link name="link2" linkType="HTTPS" networkType="INTERNET" source="//@interimmodels.4/@designmodel/@host.0/@node.0/@port.1" target="//@interimmodels.4/@designmodel/@host.2/@node.0/@port.0"/>
      <link name="link3" source="//@interimmodels.4/@designmodel/@host.2/@node.0/@port.1"/>
      <link name="link4" source="//@interimmodels.4/@designmodel/@host.2/@node.0/@port.2"/>
      <link name="link5" target="//@interimmodels.4/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link7" networkType="INTERNET" source="//@interimmodels.4/@designmodel/@host.0/@node.0/@port.3"/>
      <link name="link9" source="//@interimmodels.4/@designmodel/@host.0/@node.0/@port.4" target="//@interimmodels.4/@designmodel/@host.0/@node.1/@port.0"/>
      <link name="link11" source="//@interimmodels.4/@designmodel/@host.3/@node.0/@port.1"/>
      <link name="link12" source="//@interimmodels.4/@designmodel/@host.3/@node.0/@port.2"/>
      <link name="link13" target="//@interimmodels.4/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link14" target="//@interimmodels.4/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link16" source="//@interimmodels.4/@designmodel/@host.2/@node.0/@port.5" target="//@interimmodels.4/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link15" networkType="INTERNET" source="//@interimmodels.4/@designmodel/@host.0/@node.0/@port.2" target="//@interimmodels.4/@designmodel/@host.2/@node.0/@port.6"/>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="5" description="network route for connector:orderlogwire between: ordersservice orderlogwirecommandlog " nextModel="//@interimmodels.6" name="network-route">
    <designmodel name="inter5">
      <component name="ShopFrontend" type="client,broadcaster" deploymentnode="//@interimmodels.5/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface,LeastPriviledge">
        <port name="auth" role="//@interimmodels.5/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="checked"/>
        </port>
        <port name="browse" role="//@interimmodels.5/@designmodel/@connector.1/@role.0" type="request,OutboundPort">
          <events name="read"/>
        </port>
        <port name="order" role="//@interimmodels.5/@designmodel/@connector.9/@role.0" type="broadcast,OutboundPort">
          <events name="purchased"/>
        </port>
        <port name="shop" role="//@interimmodels.5/@designmodel/@connector.3/@role.0" type="request,OutboundPort">
          <events name="itemadded"/>
        </port>
      </component>
      <component name="CateloqueService" type="server" deploymentnode="//@interimmodels.5/@designmodel/@host.0/@node.1" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
        <port name="list" role="//@interimmodels.5/@designmodel/@connector.1/@role.1" type="response,InboundPort">
          <events name="query"/>
        </port>
      </component>
      <component name="UserService" type="server" deploymentnode="//@interimmodels.5/@designmodel/@host.1/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DefenseInDepth,DenialOfService">
        <port name="login" role="//@interimmodels.5/@designmodel/@connector.0/@role.1" type="response,InboundPort">
          <events name="signedon"/>
        </port>
      </component>
      <component name="OrdersService" type="client,server,listener,eventconsumer,readendpoint,datawriter,datareader" deploymentnode="//@interimmodels.5/@designmodel/@host.2/@node.0" criticalLevel="Low" securityCharacters="AttackSurface,LeastPriviledge,Compartmentalization,DenialOfService,DataTampering">
        <port name="postorder" role="//@interimmodels.5/@designmodel/@connector.4/@role.0 //@interimmodels.5/@designmodel/@connector.9/@role.1 //@interimmodels.5/@designmodel/@connector.10/@role.0 //@interimmodels.5/@designmodel/@connector.7/@role.0" type="request,listen,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="check" next="//@interimmodels.5/@designmodel/@component.3/@port.0/@events.1"/>
          <events name="save"/>
        </port>
        <port name="get" role="//@interimmodels.5/@designmodel/@connector.2/@role.1 //@interimmodels.5/@designmodel/@connector.8/@role.0" type="response,read,OutboundPort,InboundPort,EventProcessorPort">
          <events name="ack"/>
        </port>
      </component>
      <component name="OrdersDB" type="repository,datastore" deploymentnode="//@interimmodels.5/@designmodel/@host.2/@node.1">
        <port name="writeorder" type="store,InboundPort,EventProcessorPort">
          <events name="orderwritten"/>
        </port>
        <port name="queryorder" role="//@interimmodels.5/@designmodel/@connector.8/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="orderreaded"/>
        </port>
      </component>
      <component name="CartsService" type="server" deploymentnode="//@interimmodels.5/@designmodel/@host.2/@node.0" securityCharacters="AttackSurface,DenialOfService,DataTampering">
        <port name="manage" role="//@interimmodels.5/@designmodel/@connector.3/@role.1" type="response,InboundPort">
          <events name="saveitem"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,datastore" deploymentnode="//@interimmodels.5/@designmodel/@host.1/@node.1" criticalLevel="High" securityCharacters="DefenseInDepth,Compartmentalization">
        <port name="pay" role="//@interimmodels.5/@designmodel/@connector.10/@role.1 //@interimmodels.5/@designmodel/@connector.11/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="paid"/>
        </port>
      </component>
      <component name="ShippingService" type="server,datawriter" deploymentnode="//@interimmodels.5/@designmodel/@host.3/@node.0" securityCharacters="Compartmentalization">
        <port name="postshipping" role="//@interimmodels.5/@designmodel/@connector.4/@role.1 //@interimmodels.5/@designmodel/@connector.6/@role.0" type="response,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="posted"/>
        </port>
      </component>
      <component name="ShippingWorker" type="readendpoint,datareader" deploymentnode="//@interimmodels.5/@designmodel/@host.3/@node.0">
        <port name="listqueue" role="//@interimmodels.5/@designmodel/@connector.5/@role.0" type="read,OutboundPort,EventProcessorPort">
          <events name="renderqueue"/>
        </port>
      </component>
      <component name="QueueDB" type="repository,datastore" deploymentnode="//@interimmodels.5/@designmodel/@host.3/@node.1">
        <port name="writequeue" role="//@interimmodels.5/@designmodel/@connector.6/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="queuewritten"/>
        </port>
        <port name="readqueue" role="//@interimmodels.5/@designmodel/@connector.5/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="queuereaded"/>
        </port>
      </component>
      <component name="ShopBackend" type="client" deploymentnode="//@interimmodels.5/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface">
        <port name="listorder" role="//@interimmodels.5/@designmodel/@connector.2/@role.0" type="request,OutboundPort">
          <events name="renderlist"/>
        </port>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="append" role="//@interimmodels.5/@designmodel/@connector.11/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <deploymentnode href="target.arch#//@host.4/@node.0"/>
      </component>
      <component name="OrderwireLog" type="eventlogger,datastore">
        <port name="logorderwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <component name="ShippinglogwireCommandLog" type="commanddb,datastore">
        <port name="logshippinglogwire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.3/@node.2"/>
      </component>
      <component name="OrderlogwireCommandLog" type="commanddb,datastore">
        <port name="logorderlogwire" role="//@interimmodels.5/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <connector name="userwire" type="CSConnector" connectortype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.5/@designmodel/@connector.0"/>
      </connector>
      <connector name="cateloquewire" type="CSConnector" connectortype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.1"/>
        <role name="responder" roletype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.5/@designmodel/@connector.1"/>
      </connector>
      <connector name="orderquerywire" type="CSConnector" connectortype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.2"/>
        <role name="responder" roletype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.5/@designmodel/@connector.8/@role.0" connector="//@interimmodels.5/@designmodel/@connector.2"/>
      </connector>
      <connector name="cartwire" type="CSConnector" connectortype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.3"/>
        <role name="responder" roletype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.5/@designmodel/@connector.3"/>
      </connector>
      <connector name="shippingwire" type="CSConnector" connectortype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.5/@designmodel/@connector.6/@role.0" connector="//@interimmodels.5/@designmodel/@connector.4"/>
      </connector>
      <connector name="queuereadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.5"/>
        <role name="readstorage" roletype="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.5/@designmodel/@connector.5"/>
      </connector>
      <connector name="shippinglogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.6"/>
        <role name="writestorage" roletype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.5/@designmodel/@connector.6"/>
      </connector>
      <connector name="orderlogwire" type="CRConnector" connectortype="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.5/@designmodel/@connector.10/@role.0" connector="//@interimmodels.5/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.5/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.4/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="orderreadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.8"/>
        <role name="readstorage" roletype="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.5/@designmodel/@connector.8"/>
      </connector>
      <connector name="orderwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.5/@designmodel/@archstyle.1/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.5/@designmodel/@archstyle.1/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.9"/>
        <role name="subscriber" roletype="//@interimmodels.5/@designmodel/@archstyle.1/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.5/@designmodel/@connector.7/@role.0" connector="//@interimmodels.5/@designmodel/@connector.9"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="writer" nextRoleExpr="//@interimmodels.5/@designmodel/@connector.4/@role.0" connector="//@interimmodels.5/@designmodel/@connector.10"/>
        <role name="writestorage" roletype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="writestorage" connector="//@interimmodels.5/@designmodel/@connector.10"/>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.5/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.5/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.5/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.5/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.5/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.5/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.5/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.5/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.5/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.5/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.5/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.4" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
            <event name="Skip"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.5/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.5/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.5/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.5/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.5/@designmodel/@archstyle.4/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.5/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.5/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.5/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.5/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.5/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.5/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.5/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.5/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.5/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.5/@designmodel" counterExample="" visitedStates="15" verifyTime="0.009697599999999999" testport="//@interimmodels.5/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!43 -> cartwire_req?43 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!43 -> cartwire_res?43" exprText="[]  (ShopFrontend.shop.itemadded -> &lt;> CartsService.manage.saveitem)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.5/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.0/@port.3/@events.0" nextExpr="//@interimmodels.5/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.5/@designmodel" counterExample="" visitedStates="455" verifyTime="0.024745399999999997" testport="//@interimmodels.5/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_publisher_process -> orderwire_pub!52 -> orderwire_pub?52 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!52 -> orderlogwire_cmmd!52 -> orderlogwire_cmmd?52 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_writer_request -> paywire_req!52 -> paywire_req?52 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!52 -> paywire_res?52 -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!52 -> shippingwire_req?52 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!52 -> shippinglogwire_req?52 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!52 -> shippinglogwire_res?52 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!52 -> shippingwire_res?52 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_subscriber_process" exprText="[]  (Payment.pay.paid -> &lt;> ShippingService.postshipping.posted)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.5/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.6/@port.0/@events.0" nextExpr="//@interimmodels.5/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.5/@designmodel" visitedStates="10" verifyTime="0.011848299999999999" testport="//@interimmodels.5/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!97 -> cartwire_req?97 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!97 -> cartwire_res?97" exprText="[]  (OrdersService.postorder.save -> &lt;> Payment.pay.paid)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.5/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.3/@port.0/@events.1" nextExpr="//@interimmodels.5/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.5/@designmodel" counterExample="" visitedStates="15" verifyTime="0.0076814" testport="//@interimmodels.5/@designmodel/@component.0/@port.0" traceExample="init -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!56 -> userwire_req?56 -> UserService_userwire_responder_invoke -> UserService_login_signedon -> UserService_userwire_responder_process -> userwire_res!56 -> userwire_res?56" exprText="[]  (ShopFrontend.auth.checked -> &lt;> UserService.login.signedon)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.5/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.5/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.5/@designmodel" counterExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!62 -> cateloquewire_req?62 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!62 -> cateloquewire_res?62" visitedStates="24" verifyTime="0.008336699999999999" testport="//@interimmodels.5/@designmodel/@component.0/@port.1" traceExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!65 -> cateloquewire_req?65 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!65 -> cateloquewire_res?65" exprText="[]  (&lt;> ShopFrontend.browse.read -> &lt;> CateloqueService.list.query)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.5/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.1/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.0/@port.1/@events.0" operator="EVENTUALLY" nextExpr="//@interimmodels.5/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop6" model="//@interimmodels.5/@designmodel" counterExample="" visitedStates="29" verifyTime="0.0749949" testport="//@interimmodels.5/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!23 -> orderquerywire_req?23 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_reader_process -> orderreadwire_req!23 -> orderreadwire_req?23 -> OrdersDB_orderreadwire_readstorage_invoke -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstorage_process -> orderreadwire_res!23 -> orderreadwire_res?23 -> OrdersService_orderreadwire_reader_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!23 -> orderquerywire_res?23" exprText="[]  (ShopBackend.listorder.renderlist -> &lt;> OrdersDB.queryorder.orderreaded)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.5/@designmodel/@verifyProperty.5">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.10/@port.0/@events.0" nextExpr="//@interimmodels.5/@designmodel/@verifyProperty.5/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop7" model="//@interimmodels.5/@designmodel" counterExample="" visitedStates="298" verifyTime="0.0191293" testport="//@interimmodels.5/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_publisher_process -> orderwire_pub!50 -> orderwire_pub?50 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!50 -> orderlogwire_cmmd!50 -> orderlogwire_cmmd?50 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_writer_request -> paywire_req!50 -> paywire_req?50 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!50 -> paywire_res?50 -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!50 -> shippingwire_req?50 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!50 -> shippinglogwire_req?50 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!50 -> shippinglogwire_res?50 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!50 -> shippingwire_res?50 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_subscriber_process" exprText="[]  (ShopFrontend.order.purchased -> &lt;> OrdersService.postorder.save)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.5/@designmodel/@verifyProperty.6">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.3/@port.0/@events.1" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.5/@designmodel/@verifyProperty.6/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" valid="false" counterExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_publisher_process -> orderwire_pub!99 -> orderwire_pub?99 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!99 -> orderlogwire_cmmd!99 -> orderlogwire_cmmd?99 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_writer_request -> paywire_req!99 -> paywire_req?99 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!99 -> paywire_res?99 -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!99 -> shippingwire_req?99 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!99 -> shippinglogwire_req?99 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!99 -> shippinglogwire_res?99 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!99 -> shippingwire_res?99 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_subscriber_process" visitedStates="75" verifyTime="0.009697899999999999" testport="//@interimmodels.5/@designmodel/@component.0/@port.2" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter5() |= ![](Payment_pay_paid->&lt;" exprText="[] (Payment.pay.paid-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.11"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-orderlogwire" visitedStates="518" verifyTime="0.0239916" testport="//@interimmodels.5/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_publisher_process -> orderwire_pub!81 -> orderwire_pub?81 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!81 -> orderlogwire_cmmd!81 -> orderlogwire_cmmd?81 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_writer_request -> paywire_req!81 -> paywire_req?81 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!81 -> paywire_res?81 -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!81 -> shippingwire_req?81 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!81 -> shippinglogwire_req?81 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!81 -> shippinglogwire_res?81 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!81 -> shippingwire_res?81 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_subscriber_process" exprText="[] (OrdersService.postorder.check-> &lt;> OrderlogwireCommandLog.orderlogwire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="CLOUD_PLATFORM">
        <node name="NodeJSContainer1" component="//@interimmodels.5/@designmodel/@component.0 //@interimmodels.5/@designmodel/@component.10">
          <port name="port" portNumber="15551" node="//@interimmodels.5/@designmodel/@host.0/@node.0" namedport="//@interimmodels.5/@designmodel/@component.0/@port.0"/>
          <port name="port" portNumber="15552" node="//@interimmodels.5/@designmodel/@host.0/@node.0" namedport="//@interimmodels.5/@designmodel/@component.0/@port.2"/>
          <port name="port" portNumber="15553" node="//@interimmodels.5/@designmodel/@host.0/@node.0" namedport="//@interimmodels.5/@designmodel/@component.10/@port.0"/>
          <port name="port" portNumber="15554" node="//@interimmodels.5/@designmodel/@host.0/@node.0" namedport="//@interimmodels.5/@designmodel/@component.0/@port.3"/>
          <port name="port" portNumber="15555" node="//@interimmodels.5/@designmodel/@host.0/@node.0" namedport="//@interimmodels.5/@designmodel/@component.0/@port.1"/>
        </node>
        <node name="GoContainer3" component="//@interimmodels.5/@designmodel/@component.1">
          <port name="port" portNumber="80" node="//@interimmodels.5/@designmodel/@host.0/@node.1" namedport="//@interimmodels.5/@designmodel/@component.1/@port.0" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="SecureServer">
        <node name="GoContainer1" component="//@interimmodels.5/@designmodel/@component.2">
          <port name="port" portNumber="80" node="//@interimmodels.5/@designmodel/@host.1/@node.0" namedport="//@interimmodels.5/@designmodel/@component.2/@port.0" hasFirewall="true"/>
        </node>
        <node name="GoContainer2" component="//@interimmodels.5/@designmodel/@component.6">
          <port name="port" portNumber="80" node="//@interimmodels.5/@designmodel/@host.1/@node.1" namedport="//@interimmodels.5/@designmodel/@component.6/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="LocalServer">
        <node name="JEEContainer1" component="//@interimmodels.5/@designmodel/@component.3 //@interimmodels.5/@designmodel/@component.5">
          <port name="port" portNumber="80" namedport="//@interimmodels.5/@designmodel/@component.3/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15561" node="//@interimmodels.5/@designmodel/@host.2/@node.0" namedport="//@interimmodels.5/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15562" node="//@interimmodels.5/@designmodel/@host.2/@node.0" namedport="//@interimmodels.5/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15563" node="//@interimmodels.5/@designmodel/@host.2/@node.0" namedport="//@interimmodels.5/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15564" node="//@interimmodels.5/@designmodel/@host.2/@node.0" namedport="//@interimmodels.5/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15566" node="//@interimmodels.5/@designmodel/@host.2/@node.0" namedport="//@interimmodels.5/@designmodel/@component.3/@port.1"/>
          <port name="port" portNumber="81" node="//@interimmodels.5/@designmodel/@host.2/@node.0" namedport="//@interimmodels.5/@designmodel/@component.3/@port.1"/>
        </node>
        <node name="MySQL1" component="//@interimmodels.5/@designmodel/@component.4">
          <port name="port" portNumber="3306" node="//@interimmodels.5/@designmodel/@host.2/@node.1" namedport="//@interimmodels.5/@designmodel/@component.4/@port.0 //@interimmodels.5/@designmodel/@component.4/@port.1"/>
        </node>
      </host>
      <host name="BackOfficeServer">
        <node name="JEEContainer4" component="//@interimmodels.5/@designmodel/@component.7 //@interimmodels.5/@designmodel/@component.8">
          <port name="port" portNumber="80" node="//@interimmodels.5/@designmodel/@host.3/@node.0" namedport="//@interimmodels.5/@designmodel/@component.7/@port.0" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15571" node="//@interimmodels.5/@designmodel/@host.3/@node.0" namedport="//@interimmodels.5/@designmodel/@component.7/@port.0"/>
          <port name="port" portNumber="15572" node="//@interimmodels.5/@designmodel/@host.3/@node.0" namedport="//@interimmodels.5/@designmodel/@component.7/@port.0"/>
        </node>
        <node name="MySQL2" component="//@interimmodels.5/@designmodel/@component.9">
          <port name="port" portNumber="3306" node="//@interimmodels.5/@designmodel/@host.3/@node.1" namedport="//@interimmodels.5/@designmodel/@component.9/@port.0 //@interimmodels.5/@designmodel/@component.9/@port.1"/>
        </node>
      </host>
      <link name="link2" linkType="HTTPS" networkType="INTERNET" source="//@interimmodels.5/@designmodel/@host.0/@node.0/@port.1" target="//@interimmodels.5/@designmodel/@host.2/@node.0/@port.0"/>
      <link name="link3" source="//@interimmodels.5/@designmodel/@host.2/@node.0/@port.1"/>
      <link name="link4" source="//@interimmodels.5/@designmodel/@host.2/@node.0/@port.2"/>
      <link name="link5" target="//@interimmodels.5/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link7" networkType="INTERNET" source="//@interimmodels.5/@designmodel/@host.0/@node.0/@port.3"/>
      <link name="link9" source="//@interimmodels.5/@designmodel/@host.0/@node.0/@port.4" target="//@interimmodels.5/@designmodel/@host.0/@node.1/@port.0"/>
      <link name="link11" source="//@interimmodels.5/@designmodel/@host.3/@node.0/@port.1"/>
      <link name="link12" source="//@interimmodels.5/@designmodel/@host.3/@node.0/@port.2"/>
      <link name="link13" target="//@interimmodels.5/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link14" target="//@interimmodels.5/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link16" source="//@interimmodels.5/@designmodel/@host.2/@node.0/@port.5" target="//@interimmodels.5/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link15" networkType="INTERNET" source="//@interimmodels.5/@designmodel/@host.0/@node.0/@port.2" target="//@interimmodels.5/@designmodel/@host.2/@node.0/@port.6"/>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="6" description="network route for connector:orderwire between: shopfrontend orderwirelog " nextModel="//@interimmodels.7" name="network-route">
    <designmodel name="inter6">
      <component name="ShopFrontend" type="client,broadcaster" deploymentnode="//@interimmodels.6/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface,LeastPriviledge">
        <port name="auth" role="//@interimmodels.6/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="checked"/>
        </port>
        <port name="browse" role="//@interimmodels.6/@designmodel/@connector.1/@role.0" type="request,OutboundPort">
          <events name="read"/>
        </port>
        <port name="order" role="//@interimmodels.6/@designmodel/@connector.9/@role.0" type="broadcast,OutboundPort">
          <events name="purchased"/>
        </port>
        <port name="shop" role="//@interimmodels.6/@designmodel/@connector.3/@role.0" type="request,OutboundPort">
          <events name="itemadded"/>
        </port>
      </component>
      <component name="CateloqueService" type="server" deploymentnode="//@interimmodels.6/@designmodel/@host.0/@node.1" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
        <port name="list" role="//@interimmodels.6/@designmodel/@connector.1/@role.1" type="response,InboundPort">
          <events name="query"/>
        </port>
      </component>
      <component name="UserService" type="server" deploymentnode="//@interimmodels.6/@designmodel/@host.1/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DefenseInDepth,DenialOfService">
        <port name="login" role="//@interimmodels.6/@designmodel/@connector.0/@role.1" type="response,InboundPort">
          <events name="signedon"/>
        </port>
      </component>
      <component name="OrdersService" type="client,server,listener,eventconsumer,readendpoint,datawriter,datareader" deploymentnode="//@interimmodels.6/@designmodel/@host.2/@node.0" criticalLevel="Low" securityCharacters="AttackSurface,LeastPriviledge,Compartmentalization,DenialOfService,DataTampering">
        <port name="postorder" role="//@interimmodels.6/@designmodel/@connector.4/@role.0 //@interimmodels.6/@designmodel/@connector.10/@role.0 //@interimmodels.6/@designmodel/@connector.7/@role.0" type="request,listen,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="check" next="//@interimmodels.6/@designmodel/@component.3/@port.0/@events.1"/>
          <events name="save"/>
        </port>
        <port name="get" role="//@interimmodels.6/@designmodel/@connector.2/@role.1 //@interimmodels.6/@designmodel/@connector.8/@role.0" type="response,read,OutboundPort,InboundPort,EventProcessorPort">
          <events name="ack"/>
        </port>
      </component>
      <component name="OrdersDB" type="repository,datastore" deploymentnode="//@interimmodels.6/@designmodel/@host.2/@node.1">
        <port name="writeorder" type="store,InboundPort,EventProcessorPort">
          <events name="orderwritten"/>
        </port>
        <port name="queryorder" role="//@interimmodels.6/@designmodel/@connector.8/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="orderreaded"/>
        </port>
      </component>
      <component name="CartsService" type="server" deploymentnode="//@interimmodels.6/@designmodel/@host.2/@node.0" securityCharacters="AttackSurface,DenialOfService,DataTampering">
        <port name="manage" role="//@interimmodels.6/@designmodel/@connector.3/@role.1" type="response,InboundPort">
          <events name="saveitem"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,datastore" deploymentnode="//@interimmodels.6/@designmodel/@host.1/@node.1" criticalLevel="High" securityCharacters="DefenseInDepth,Compartmentalization">
        <port name="pay" role="//@interimmodels.6/@designmodel/@connector.10/@role.1 //@interimmodels.6/@designmodel/@connector.11/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="paid"/>
        </port>
      </component>
      <component name="ShippingService" type="server,datawriter" deploymentnode="//@interimmodels.6/@designmodel/@host.3/@node.0" securityCharacters="Compartmentalization">
        <port name="postshipping" role="//@interimmodels.6/@designmodel/@connector.4/@role.1 //@interimmodels.6/@designmodel/@connector.6/@role.0" type="response,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="posted"/>
        </port>
      </component>
      <component name="ShippingWorker" type="readendpoint,datareader" deploymentnode="//@interimmodels.6/@designmodel/@host.3/@node.0">
        <port name="listqueue" role="//@interimmodels.6/@designmodel/@connector.5/@role.0" type="read,OutboundPort,EventProcessorPort">
          <events name="renderqueue"/>
        </port>
      </component>
      <component name="QueueDB" type="repository,datastore" deploymentnode="//@interimmodels.6/@designmodel/@host.3/@node.1">
        <port name="writequeue" role="//@interimmodels.6/@designmodel/@connector.6/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="queuewritten"/>
        </port>
        <port name="readqueue" role="//@interimmodels.6/@designmodel/@connector.5/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="queuereaded"/>
        </port>
      </component>
      <component name="ShopBackend" type="client" deploymentnode="//@interimmodels.6/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface">
        <port name="listorder" role="//@interimmodels.6/@designmodel/@connector.2/@role.0" type="request,OutboundPort">
          <events name="renderlist"/>
        </port>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="append" role="//@interimmodels.6/@designmodel/@connector.11/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <deploymentnode href="target.arch#//@host.4/@node.0"/>
      </component>
      <component name="OrderwireLog" type="eventlogger,datastore">
        <port name="logorderwire" role="//@interimmodels.6/@designmodel/@connector.9/@role.2" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <component name="ShippinglogwireCommandLog" type="commanddb,datastore">
        <port name="logshippinglogwire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.3/@node.2"/>
      </component>
      <component name="OrderlogwireCommandLog" type="commanddb,datastore">
        <port name="logorderlogwire" role="//@interimmodels.6/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <connector name="userwire" type="CSConnector" connectortype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.6/@designmodel/@connector.0"/>
      </connector>
      <connector name="cateloquewire" type="CSConnector" connectortype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.1"/>
        <role name="responder" roletype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.6/@designmodel/@connector.1"/>
      </connector>
      <connector name="orderquerywire" type="CSConnector" connectortype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.2"/>
        <role name="responder" roletype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.6/@designmodel/@connector.8/@role.0" connector="//@interimmodels.6/@designmodel/@connector.2"/>
      </connector>
      <connector name="cartwire" type="CSConnector" connectortype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.3"/>
        <role name="responder" roletype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.6/@designmodel/@connector.3"/>
      </connector>
      <connector name="shippingwire" type="CSConnector" connectortype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.6/@designmodel/@connector.6/@role.0" connector="//@interimmodels.6/@designmodel/@connector.4"/>
      </connector>
      <connector name="queuereadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.5"/>
        <role name="readstorage" roletype="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.6/@designmodel/@connector.5"/>
      </connector>
      <connector name="shippinglogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.6"/>
        <role name="writestorage" roletype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.6/@designmodel/@connector.6"/>
      </connector>
      <connector name="orderlogwire" type="CRConnector" connectortype="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.6/@designmodel/@connector.10/@role.0" connector="//@interimmodels.6/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.6/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.4/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="orderreadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.8"/>
        <role name="readstorage" roletype="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.6/@designmodel/@connector.8"/>
      </connector>
      <connector name="orderwire" type="ESConnector" connectortype="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.6/@designmodel/@archstyle.1/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.9"/>
        <role name="eventsubscriber" roletype="//@interimmodels.6/@designmodel/@archstyle.1/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.6/@designmodel/@connector.7/@role.0" connector="//@interimmodels.6/@designmodel/@connector.9"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.9"/>
        </role>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="writer" nextRoleExpr="//@interimmodels.6/@designmodel/@connector.4/@role.0" connector="//@interimmodels.6/@designmodel/@connector.10"/>
        <role name="writestorage" roletype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="writestorage" connector="//@interimmodels.6/@designmodel/@connector.10"/>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.6/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.6/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.6/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.6/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.6/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.6/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.6/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.6/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.6/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.6/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.6/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.4" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
            <event name="Skip"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.6/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.6/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.6/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.6/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.6/@designmodel/@archstyle.4/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.6/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.6/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.6/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.6/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.6/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.6/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.6/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.6/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.6/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.6/@designmodel" counterExample="" visitedStates="1117" verifyTime="0.060191699999999994" testport="//@interimmodels.6/@designmodel/@component.0/@port.3" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!70 -> paywire_req?70 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!70 -> paywire_res?70 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!70 -> shippingwire_req?70 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!70 -> shippinglogwire_req?70 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!70 -> shippinglogwire_res?70 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!70 -> shippingwire_res?70 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!70 -> orderlogwire_cmmd!70 -> orderlogwire_cmmd?70 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!84 -> cartwire_req?84 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!84 -> cartwire_res?84" exprText="[]  (ShopFrontend.shop.itemadded -> &lt;> CartsService.manage.saveitem)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.6/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.0/@port.3/@events.0" nextExpr="//@interimmodels.6/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.6/@designmodel" counterExample="" visitedStates="1874" verifyTime="0.06706379999999999" testport="//@interimmodels.6/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!74 -> paywire_req?74 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!74 -> paywire_res?74 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!74 -> shippingwire_req?74 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!74 -> shippinglogwire_req?74 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!74 -> shippinglogwire_res?74 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!74 -> shippingwire_res?74 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!74 -> orderlogwire_cmmd!74 -> orderlogwire_cmmd?74 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!42 -> orderwire_pevt?42 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!42 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?42 -> orderwire_bevt!42 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (Payment.pay.paid -> &lt;> ShippingService.postshipping.posted)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.6/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.6/@port.0/@events.0" nextExpr="//@interimmodels.6/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.6/@designmodel" valid="false" counterExample="init -> OrdersService_paywire_writer_request -> paywire_req!79 -> paywire_req?79 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!79 -> paywire_res?79 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!79 -> shippingwire_req?79 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!79 -> shippinglogwire_req?79 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!79 -> shippinglogwire_res?79 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!79 -> shippingwire_res?79 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!79 -> orderlogwire_cmmd!79 -> orderlogwire_cmmd?79 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!77 -> cartwire_req?77 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!77 -> cartwire_res?77" visitedStates="628" verifyTime="0.0268521" testport="//@interimmodels.6/@designmodel/@component.0/@port.3" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter6() |= ![](OrdersService_postorder_save->&lt;" exprText="[]  (OrdersService.postorder.save -> &lt;> Payment.pay.paid)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.6/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.3/@port.0/@events.1" nextExpr="//@interimmodels.6/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.6/@designmodel" counterExample="" visitedStates="1117" verifyTime="0.0433024" testport="//@interimmodels.6/@designmodel/@component.0/@port.0" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!68 -> paywire_req?68 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!68 -> paywire_res?68 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!68 -> shippingwire_req?68 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!68 -> shippinglogwire_req?68 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!68 -> shippinglogwire_res?68 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!68 -> shippingwire_res?68 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!68 -> orderlogwire_cmmd!68 -> orderlogwire_cmmd?68 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!99 -> userwire_req?99 -> UserService_userwire_responder_invoke -> UserService_login_signedon -> UserService_userwire_responder_process -> userwire_res!99 -> userwire_res?99" exprText="[]  (ShopFrontend.auth.checked -> &lt;> UserService.login.signedon)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.6/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.6/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.6/@designmodel" counterExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!62 -> cateloquewire_req?62 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!62 -> cateloquewire_res?62" visitedStates="1810" verifyTime="0.0549305" testport="//@interimmodels.6/@designmodel/@component.0/@port.1" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!64 -> paywire_req?64 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!64 -> paywire_res?64 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!64 -> shippingwire_req?64 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!64 -> shippinglogwire_req?64 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!64 -> shippinglogwire_res?64 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!64 -> shippingwire_res?64 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!64 -> orderlogwire_cmmd!64 -> orderlogwire_cmmd?64 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!91 -> cateloquewire_req?91 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!91 -> cateloquewire_res?91" exprText="[]  (&lt;> ShopFrontend.browse.read -> &lt;> CateloqueService.list.query)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.6/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.1/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.0/@port.1/@events.0" operator="EVENTUALLY" nextExpr="//@interimmodels.6/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop6" model="//@interimmodels.6/@designmodel" counterExample="" visitedStates="2195" verifyTime="0.0669794" testport="//@interimmodels.6/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!62 -> orderquerywire_req?62 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_reader_process -> orderreadwire_req!62 -> orderreadwire_req?62 -> OrdersDB_orderreadwire_readstorage_invoke -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstorage_process -> orderreadwire_res!62 -> orderreadwire_res?62 -> OrdersService_orderreadwire_reader_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!62 -> orderquerywire_res?62 -> OrdersService_paywire_writer_request -> paywire_req!98 -> paywire_req?98 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!98 -> paywire_res?98 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!98 -> shippingwire_req?98 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!98 -> shippinglogwire_req?98 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!98 -> shippinglogwire_res?98 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!98 -> shippingwire_res?98 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!98 -> orderlogwire_cmmd!98 -> orderlogwire_cmmd?98 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist" exprText="[]  (ShopBackend.listorder.renderlist -> &lt;> OrdersDB.queryorder.orderreaded)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.6/@designmodel/@verifyProperty.5">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.10/@port.0/@events.0" nextExpr="//@interimmodels.6/@designmodel/@verifyProperty.5/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop7" model="//@interimmodels.6/@designmodel" valid="false" counterExample="init -> OrdersService_paywire_writer_request -> paywire_req!85 -> paywire_req?85 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!85 -> paywire_res?85 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!85 -> shippingwire_req?85 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!85 -> shippinglogwire_req?85 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!85 -> shippinglogwire_res?85 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!85 -> shippingwire_res?85 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!85 -> orderlogwire_cmmd!85 -> orderlogwire_cmmd?85 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!46 -> orderwire_pevt?46 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!46 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?46 -> orderwire_bevt!46 -> ShopFrontend_orderwire_eventpublisher_broadcast" visitedStates="144" verifyTime="0.0161403" testport="//@interimmodels.6/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!85 -> paywire_req?85 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!85 -> paywire_res?85 -> OrdersService_postorder_check -> ShopFrontend_order_purchased -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!85 -> shippingwire_req?85 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!85 -> shippinglogwire_req?85 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!85 -> shippinglogwire_res?85 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!85 -> shippingwire_res?85 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!85 -> orderlogwire_cmmd!85 -> orderlogwire_cmmd?85 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!46 -> orderwire_pevt?46 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!46 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?46 -> orderwire_bevt!46 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (ShopFrontend.order.purchased -> &lt;> OrdersService.postorder.save)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.6/@designmodel/@verifyProperty.6">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.3/@port.0/@events.1" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.6/@designmodel/@verifyProperty.6/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" valid="false" counterExample="init -> OrdersService_paywire_writer_request -> paywire_req!96 -> paywire_req?96 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!96 -> paywire_res?96 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!96 -> shippingwire_req?96 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!96 -> shippinglogwire_req?96 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!96 -> shippinglogwire_res?96 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!96 -> shippingwire_res?96 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!96 -> orderlogwire_cmmd!96 -> orderlogwire_cmmd?96 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!62 -> orderwire_pevt?62 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!62 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?62 -> orderwire_bevt!62 -> ShopFrontend_orderwire_eventpublisher_broadcast" visitedStates="1163" verifyTime="0.04804" testport="//@interimmodels.6/@designmodel/@component.0/@port.2" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter6() |= ![](Payment_pay_paid->&lt;" exprText="[] (Payment.pay.paid-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.11"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-orderlogwire" visitedStates="2162" verifyTime="0.0631356" testport="//@interimmodels.6/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!59 -> paywire_req?59 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!59 -> paywire_res?59 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!59 -> shippingwire_req?59 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!59 -> shippinglogwire_req?59 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!59 -> shippinglogwire_res?59 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!59 -> shippingwire_res?59 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!59 -> orderlogwire_cmmd!59 -> orderlogwire_cmmd?59 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!51 -> orderwire_pevt?51 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!51 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?51 -> orderwire_bevt!51 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (OrdersService.postorder.check-> &lt;> OrderlogwireCommandLog.orderlogwire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-orderwire" visitedStates="2004" verifyTime="0.0629491" testport="//@interimmodels.6/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!35 -> paywire_req?35 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!35 -> paywire_res?35 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!35 -> shippingwire_req?35 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!35 -> shippinglogwire_req?35 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!35 -> shippinglogwire_res?35 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!35 -> shippingwire_res?35 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!35 -> orderlogwire_cmmd!35 -> orderlogwire_cmmd?35 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!18 -> orderwire_pevt?18 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!18 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?18 -> orderwire_bevt!18 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (ShopFrontend.order.purchased-> &lt;> OrderwireLog.orderwire.eventstore.persist)">
        <connector href="target.arch#//@connector.9"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="CLOUD_PLATFORM">
        <node name="NodeJSContainer1" component="//@interimmodels.6/@designmodel/@component.0 //@interimmodels.6/@designmodel/@component.10">
          <port name="port" portNumber="15551" node="//@interimmodels.6/@designmodel/@host.0/@node.0" namedport="//@interimmodels.6/@designmodel/@component.0/@port.0"/>
          <port name="port" portNumber="15552" node="//@interimmodels.6/@designmodel/@host.0/@node.0" namedport="//@interimmodels.6/@designmodel/@component.0/@port.2"/>
          <port name="port" portNumber="15553" node="//@interimmodels.6/@designmodel/@host.0/@node.0" namedport="//@interimmodels.6/@designmodel/@component.10/@port.0"/>
          <port name="port" portNumber="15554" node="//@interimmodels.6/@designmodel/@host.0/@node.0" namedport="//@interimmodels.6/@designmodel/@component.0/@port.3"/>
          <port name="port" portNumber="15555" node="//@interimmodels.6/@designmodel/@host.0/@node.0" namedport="//@interimmodels.6/@designmodel/@component.0/@port.1"/>
        </node>
        <node name="GoContainer3" component="//@interimmodels.6/@designmodel/@component.1">
          <port name="port" portNumber="80" node="//@interimmodels.6/@designmodel/@host.0/@node.1" namedport="//@interimmodels.6/@designmodel/@component.1/@port.0" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="SecureServer">
        <node name="GoContainer1" component="//@interimmodels.6/@designmodel/@component.2">
          <port name="port" portNumber="80" node="//@interimmodels.6/@designmodel/@host.1/@node.0" namedport="//@interimmodels.6/@designmodel/@component.2/@port.0" hasFirewall="true"/>
        </node>
        <node name="GoContainer2" component="//@interimmodels.6/@designmodel/@component.6">
          <port name="port" portNumber="80" node="//@interimmodels.6/@designmodel/@host.1/@node.1" namedport="//@interimmodels.6/@designmodel/@component.6/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="LocalServer">
        <node name="JEEContainer1" component="//@interimmodels.6/@designmodel/@component.3 //@interimmodels.6/@designmodel/@component.5">
          <port name="port" portNumber="80" namedport="//@interimmodels.6/@designmodel/@component.3/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15561" node="//@interimmodels.6/@designmodel/@host.2/@node.0" namedport="//@interimmodels.6/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15562" node="//@interimmodels.6/@designmodel/@host.2/@node.0" namedport="//@interimmodels.6/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15563" node="//@interimmodels.6/@designmodel/@host.2/@node.0" namedport="//@interimmodels.6/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15564" node="//@interimmodels.6/@designmodel/@host.2/@node.0" namedport="//@interimmodels.6/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15566" node="//@interimmodels.6/@designmodel/@host.2/@node.0" namedport="//@interimmodels.6/@designmodel/@component.3/@port.1"/>
          <port name="port" portNumber="81" node="//@interimmodels.6/@designmodel/@host.2/@node.0" namedport="//@interimmodels.6/@designmodel/@component.3/@port.1"/>
        </node>
        <node name="MySQL1" component="//@interimmodels.6/@designmodel/@component.4">
          <port name="port" portNumber="3306" node="//@interimmodels.6/@designmodel/@host.2/@node.1" namedport="//@interimmodels.6/@designmodel/@component.4/@port.0 //@interimmodels.6/@designmodel/@component.4/@port.1"/>
        </node>
      </host>
      <host name="BackOfficeServer">
        <node name="JEEContainer4" component="//@interimmodels.6/@designmodel/@component.7 //@interimmodels.6/@designmodel/@component.8">
          <port name="port" portNumber="80" node="//@interimmodels.6/@designmodel/@host.3/@node.0" namedport="//@interimmodels.6/@designmodel/@component.7/@port.0" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15571" node="//@interimmodels.6/@designmodel/@host.3/@node.0" namedport="//@interimmodels.6/@designmodel/@component.7/@port.0"/>
          <port name="port" portNumber="15572" node="//@interimmodels.6/@designmodel/@host.3/@node.0" namedport="//@interimmodels.6/@designmodel/@component.7/@port.0"/>
        </node>
        <node name="MySQL2" component="//@interimmodels.6/@designmodel/@component.9">
          <port name="port" portNumber="3306" node="//@interimmodels.6/@designmodel/@host.3/@node.1" namedport="//@interimmodels.6/@designmodel/@component.9/@port.0 //@interimmodels.6/@designmodel/@component.9/@port.1"/>
        </node>
      </host>
      <link name="link2" linkType="HTTPS" networkType="INTERNET" source="//@interimmodels.6/@designmodel/@host.0/@node.0/@port.1" target="//@interimmodels.6/@designmodel/@host.2/@node.0/@port.0"/>
      <link name="link3" source="//@interimmodels.6/@designmodel/@host.2/@node.0/@port.1"/>
      <link name="link4" source="//@interimmodels.6/@designmodel/@host.2/@node.0/@port.2"/>
      <link name="link5" target="//@interimmodels.6/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link7" networkType="INTERNET" source="//@interimmodels.6/@designmodel/@host.0/@node.0/@port.3"/>
      <link name="link9" source="//@interimmodels.6/@designmodel/@host.0/@node.0/@port.4" target="//@interimmodels.6/@designmodel/@host.0/@node.1/@port.0"/>
      <link name="link11" source="//@interimmodels.6/@designmodel/@host.3/@node.0/@port.1"/>
      <link name="link12" source="//@interimmodels.6/@designmodel/@host.3/@node.0/@port.2"/>
      <link name="link13" target="//@interimmodels.6/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link14" target="//@interimmodels.6/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link16" source="//@interimmodels.6/@designmodel/@host.2/@node.0/@port.5" target="//@interimmodels.6/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link15" networkType="INTERNET" source="//@interimmodels.6/@designmodel/@host.0/@node.0/@port.2" target="//@interimmodels.6/@designmodel/@host.2/@node.0/@port.6"/>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="8" description="deploy service: shippingservice" nextModel="//@interimmodels.8" name="deploy-service">
    <designmodel name="inter8">
      <component name="ShopFrontend" type="client,broadcaster" deploymentnode="//@interimmodels.7/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface,LeastPriviledge">
        <port name="auth" role="//@interimmodels.7/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="checked"/>
        </port>
        <port name="browse" role="//@interimmodels.7/@designmodel/@connector.1/@role.0" type="request,OutboundPort">
          <events name="read"/>
        </port>
        <port name="order" role="//@interimmodels.7/@designmodel/@connector.9/@role.0" type="broadcast,OutboundPort">
          <events name="purchased"/>
        </port>
        <port name="shop" role="//@interimmodels.7/@designmodel/@connector.3/@role.0" type="request,OutboundPort">
          <events name="itemadded"/>
        </port>
      </component>
      <component name="CateloqueService" type="server" deploymentnode="//@interimmodels.7/@designmodel/@host.0/@node.1" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
        <port name="list" role="//@interimmodels.7/@designmodel/@connector.1/@role.1" type="response,InboundPort">
          <events name="query"/>
        </port>
      </component>
      <component name="UserService" type="server" deploymentnode="//@interimmodels.7/@designmodel/@host.1/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DefenseInDepth,DenialOfService">
        <port name="login" role="//@interimmodels.7/@designmodel/@connector.0/@role.1" type="response,InboundPort">
          <events name="signedon"/>
        </port>
      </component>
      <component name="OrdersService" type="client,server,listener,eventconsumer,readendpoint,datawriter,datareader" deploymentnode="//@interimmodels.7/@designmodel/@host.2/@node.0" criticalLevel="Low" securityCharacters="AttackSurface,LeastPriviledge,Compartmentalization,DenialOfService,DataTampering">
        <port name="postorder" role="//@interimmodels.7/@designmodel/@connector.4/@role.0 //@interimmodels.7/@designmodel/@connector.10/@role.0 //@interimmodels.7/@designmodel/@connector.7/@role.0" type="request,listen,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="check" next="//@interimmodels.7/@designmodel/@component.3/@port.0/@events.1"/>
          <events name="save"/>
        </port>
        <port name="get" role="//@interimmodels.7/@designmodel/@connector.2/@role.1 //@interimmodels.7/@designmodel/@connector.8/@role.0" type="response,read,OutboundPort,InboundPort,EventProcessorPort">
          <events name="ack"/>
        </port>
      </component>
      <component name="OrdersDB" type="repository,datastore" deploymentnode="//@interimmodels.7/@designmodel/@host.2/@node.1">
        <port name="writeorder" type="store,InboundPort,EventProcessorPort">
          <events name="orderwritten"/>
        </port>
        <port name="queryorder" role="//@interimmodels.7/@designmodel/@connector.8/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="orderreaded"/>
        </port>
      </component>
      <component name="CartsService" type="server" deploymentnode="//@interimmodels.7/@designmodel/@host.2/@node.0" securityCharacters="AttackSurface,DenialOfService,DataTampering">
        <port name="manage" role="//@interimmodels.7/@designmodel/@connector.3/@role.1" type="response,InboundPort">
          <events name="saveitem"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,datastore" deploymentnode="//@interimmodels.7/@designmodel/@host.1/@node.1" criticalLevel="High" securityCharacters="DefenseInDepth,Compartmentalization">
        <port name="pay" role="//@interimmodels.7/@designmodel/@connector.10/@role.1 //@interimmodels.7/@designmodel/@connector.11/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="paid"/>
        </port>
      </component>
      <component name="ShippingService" type="server,datawriter" deploymentnode="//@interimmodels.7/@designmodel/@host.3/@node.0" securityCharacters="Compartmentalization">
        <port name="postshipping" role="//@interimmodels.7/@designmodel/@connector.4/@role.1 //@interimmodels.7/@designmodel/@connector.6/@role.0" type="response,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="posted"/>
        </port>
      </component>
      <component name="ShippingWorker" type="readendpoint,datareader" deploymentnode="//@interimmodels.7/@designmodel/@host.3/@node.0">
        <port name="listqueue" role="//@interimmodels.7/@designmodel/@connector.5/@role.0" type="read,OutboundPort,EventProcessorPort">
          <events name="renderqueue"/>
        </port>
      </component>
      <component name="QueueDB" type="repository,datastore" deploymentnode="//@interimmodels.7/@designmodel/@host.3/@node.1">
        <port name="writequeue" role="//@interimmodels.7/@designmodel/@connector.6/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="queuewritten"/>
        </port>
        <port name="readqueue" role="//@interimmodels.7/@designmodel/@connector.5/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="queuereaded"/>
        </port>
      </component>
      <component name="ShopBackend" type="client" deploymentnode="//@interimmodels.7/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface">
        <port name="listorder" role="//@interimmodels.7/@designmodel/@connector.2/@role.0" type="request,OutboundPort">
          <events name="renderlist"/>
        </port>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="append" role="//@interimmodels.7/@designmodel/@connector.11/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <deploymentnode href="target.arch#//@host.4/@node.0"/>
      </component>
      <component name="OrderwireLog" type="eventlogger,datastore">
        <port name="logorderwire" role="//@interimmodels.7/@designmodel/@connector.9/@role.2" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <component name="ShippinglogwireCommandLog" type="commanddb,datastore">
        <port name="logshippinglogwire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.3/@node.2"/>
      </component>
      <component name="OrderlogwireCommandLog" type="commanddb,datastore">
        <port name="logorderlogwire" role="//@interimmodels.7/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <connector name="userwire" type="CSConnector" connectortype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.7/@designmodel/@connector.0"/>
      </connector>
      <connector name="cateloquewire" type="CSConnector" connectortype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.1"/>
        <role name="responder" roletype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.7/@designmodel/@connector.1"/>
      </connector>
      <connector name="orderquerywire" type="CSConnector" connectortype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.2"/>
        <role name="responder" roletype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.7/@designmodel/@connector.8/@role.0" connector="//@interimmodels.7/@designmodel/@connector.2"/>
      </connector>
      <connector name="cartwire" type="CSConnector" connectortype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.3"/>
        <role name="responder" roletype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.7/@designmodel/@connector.3"/>
      </connector>
      <connector name="shippingwire" type="CSConnector" connectortype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.7/@designmodel/@connector.6/@role.0" connector="//@interimmodels.7/@designmodel/@connector.4"/>
      </connector>
      <connector name="queuereadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.5"/>
        <role name="readstorage" roletype="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.7/@designmodel/@connector.5"/>
      </connector>
      <connector name="shippinglogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.6"/>
        <role name="writestorage" roletype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.7/@designmodel/@connector.6"/>
      </connector>
      <connector name="orderlogwire" type="CRConnector" connectortype="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.7/@designmodel/@connector.10/@role.0" connector="//@interimmodels.7/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.7/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.4/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="orderreadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.8"/>
        <role name="readstorage" roletype="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.7/@designmodel/@connector.8"/>
      </connector>
      <connector name="orderwire" type="ESConnector" connectortype="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.7/@designmodel/@archstyle.1/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.9"/>
        <role name="eventsubscriber" roletype="//@interimmodels.7/@designmodel/@archstyle.1/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.7/@designmodel/@connector.7/@role.0" connector="//@interimmodels.7/@designmodel/@connector.9"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.9"/>
        </role>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="writer" nextRoleExpr="//@interimmodels.7/@designmodel/@connector.4/@role.0" connector="//@interimmodels.7/@designmodel/@connector.10"/>
        <role name="writestorage" roletype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="writestorage" connector="//@interimmodels.7/@designmodel/@connector.10"/>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.7/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.7/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.7/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.7/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.7/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.7/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.7/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.7/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.7/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.7/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.7/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.4" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
            <event name="Skip"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.7/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.7/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.7/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.7/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.7/@designmodel/@archstyle.4/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.7/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.7/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.7/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.7/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.7/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.7/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.7/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.7/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.7/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.7/@designmodel" counterExample="" visitedStates="1117" verifyTime="0.0580742" testport="//@interimmodels.7/@designmodel/@component.0/@port.3" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!34 -> paywire_req?34 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!34 -> paywire_res?34 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!34 -> shippingwire_req?34 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!34 -> shippinglogwire_req?34 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!34 -> shippinglogwire_res?34 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!34 -> shippingwire_res?34 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!34 -> orderlogwire_cmmd!34 -> orderlogwire_cmmd?34 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!41 -> cartwire_req?41 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!41 -> cartwire_res?41" exprText="[]  (ShopFrontend.shop.itemadded -> &lt;> CartsService.manage.saveitem)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.7/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.0/@port.3/@events.0" nextExpr="//@interimmodels.7/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.7/@designmodel" counterExample="" visitedStates="1874" verifyTime="0.0547331" testport="//@interimmodels.7/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!40 -> paywire_req?40 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!40 -> paywire_res?40 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!40 -> shippingwire_req?40 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!40 -> shippinglogwire_req?40 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!40 -> shippinglogwire_res?40 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!40 -> shippingwire_res?40 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!40 -> orderlogwire_cmmd!40 -> orderlogwire_cmmd?40 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!70 -> orderwire_pevt?70 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!70 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?70 -> orderwire_bevt!70 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (Payment.pay.paid -> &lt;> ShippingService.postshipping.posted)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.7/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.6/@port.0/@events.0" nextExpr="//@interimmodels.7/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.7/@designmodel" valid="false" counterExample="init -> OrdersService_paywire_writer_request -> paywire_req!42 -> paywire_req?42 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!42 -> paywire_res?42 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!42 -> shippingwire_req?42 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!42 -> shippinglogwire_req?42 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!42 -> shippinglogwire_res?42 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!42 -> shippingwire_res?42 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!42 -> orderlogwire_cmmd!42 -> orderlogwire_cmmd?42 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!85 -> cartwire_req?85 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!85 -> cartwire_res?85" visitedStates="628" verifyTime="0.0301846" testport="//@interimmodels.7/@designmodel/@component.0/@port.3" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter8() |= ![](OrdersService_postorder_save->&lt;" exprText="[]  (OrdersService.postorder.save -> &lt;> Payment.pay.paid)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.7/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.3/@port.0/@events.1" nextExpr="//@interimmodels.7/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.7/@designmodel" counterExample="" visitedStates="1117" verifyTime="0.0384568" testport="//@interimmodels.7/@designmodel/@component.0/@port.0" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!53 -> paywire_req?53 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!53 -> paywire_res?53 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!53 -> shippingwire_req?53 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!53 -> shippinglogwire_req?53 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!53 -> shippinglogwire_res?53 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!53 -> shippingwire_res?53 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!53 -> orderlogwire_cmmd!53 -> orderlogwire_cmmd?53 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!28 -> userwire_req?28 -> UserService_userwire_responder_invoke -> UserService_login_signedon -> UserService_userwire_responder_process -> userwire_res!28 -> userwire_res?28" exprText="[]  (ShopFrontend.auth.checked -> &lt;> UserService.login.signedon)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.7/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.7/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.7/@designmodel" counterExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!62 -> cateloquewire_req?62 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!62 -> cateloquewire_res?62" visitedStates="1810" verifyTime="0.0535029" testport="//@interimmodels.7/@designmodel/@component.0/@port.1" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!57 -> paywire_req?57 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!57 -> paywire_res?57 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!57 -> shippingwire_req?57 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!57 -> shippinglogwire_req?57 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!57 -> shippinglogwire_res?57 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!57 -> shippingwire_res?57 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!57 -> orderlogwire_cmmd!57 -> orderlogwire_cmmd?57 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!56 -> cateloquewire_req?56 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!56 -> cateloquewire_res?56" exprText="[]  (&lt;> ShopFrontend.browse.read -> &lt;> CateloqueService.list.query)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.7/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.1/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.0/@port.1/@events.0" operator="EVENTUALLY" nextExpr="//@interimmodels.7/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop6" model="//@interimmodels.7/@designmodel" counterExample="" visitedStates="2195" verifyTime="0.0697079" testport="//@interimmodels.7/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!44 -> orderquerywire_req?44 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_reader_process -> orderreadwire_req!44 -> orderreadwire_req?44 -> OrdersDB_orderreadwire_readstorage_invoke -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstorage_process -> orderreadwire_res!44 -> orderreadwire_res?44 -> OrdersService_orderreadwire_reader_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!44 -> orderquerywire_res?44 -> OrdersService_paywire_writer_request -> paywire_req!68 -> paywire_req?68 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!68 -> paywire_res?68 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!68 -> shippingwire_req?68 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!68 -> shippinglogwire_req?68 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!68 -> shippinglogwire_res?68 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!68 -> shippingwire_res?68 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!68 -> orderlogwire_cmmd!68 -> orderlogwire_cmmd?68 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist" exprText="[]  (ShopBackend.listorder.renderlist -> &lt;> OrdersDB.queryorder.orderreaded)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.7/@designmodel/@verifyProperty.5">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.10/@port.0/@events.0" nextExpr="//@interimmodels.7/@designmodel/@verifyProperty.5/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop7" model="//@interimmodels.7/@designmodel" valid="false" counterExample="init -> OrdersService_paywire_writer_request -> paywire_req!32 -> paywire_req?32 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!32 -> paywire_res?32 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!32 -> shippingwire_req?32 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!32 -> shippinglogwire_req?32 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!32 -> shippinglogwire_res?32 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!32 -> shippingwire_res?32 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!32 -> orderlogwire_cmmd!32 -> orderlogwire_cmmd?32 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!56 -> orderwire_pevt?56 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!56 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?56 -> orderwire_bevt!56 -> ShopFrontend_orderwire_eventpublisher_broadcast" visitedStates="144" verifyTime="0.0167452" testport="//@interimmodels.7/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!32 -> paywire_req?32 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!32 -> paywire_res?32 -> OrdersService_postorder_check -> ShopFrontend_order_purchased -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!32 -> shippingwire_req?32 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!32 -> shippinglogwire_req?32 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!32 -> shippinglogwire_res?32 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!32 -> shippingwire_res?32 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!32 -> orderlogwire_cmmd!32 -> orderlogwire_cmmd?32 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!56 -> orderwire_pevt?56 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!56 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?56 -> orderwire_bevt!56 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (ShopFrontend.order.purchased -> &lt;> OrdersService.postorder.save)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.7/@designmodel/@verifyProperty.6">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.3/@port.0/@events.1" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.7/@designmodel/@verifyProperty.6/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" valid="false" counterExample="init -> OrdersService_paywire_writer_request -> paywire_req!67 -> paywire_req?67 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!67 -> paywire_res?67 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!67 -> shippingwire_req?67 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!67 -> shippinglogwire_req?67 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!67 -> shippinglogwire_res?67 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!67 -> shippingwire_res?67 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!67 -> orderlogwire_cmmd!67 -> orderlogwire_cmmd?67 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!18 -> orderwire_pevt?18 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!18 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?18 -> orderwire_bevt!18 -> ShopFrontend_orderwire_eventpublisher_broadcast" visitedStates="1163" verifyTime="0.11713069999999999" testport="//@interimmodels.7/@designmodel/@component.0/@port.2" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter8() |= ![](Payment_pay_paid->&lt;" exprText="[] (Payment.pay.paid-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.11"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-orderlogwire" visitedStates="2162" verifyTime="0.0702651" testport="//@interimmodels.7/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!55 -> paywire_req?55 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!55 -> paywire_res?55 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!55 -> shippingwire_req?55 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!55 -> shippinglogwire_req?55 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!55 -> shippinglogwire_res?55 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!55 -> shippingwire_res?55 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!55 -> orderlogwire_cmmd!55 -> orderlogwire_cmmd?55 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!39 -> orderwire_pevt?39 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!39 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?39 -> orderwire_bevt!39 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (OrdersService.postorder.check-> &lt;> OrderlogwireCommandLog.orderlogwire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-orderwire" visitedStates="2004" verifyTime="0.0585233" testport="//@interimmodels.7/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!39 -> paywire_req?39 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!39 -> paywire_res?39 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!39 -> shippingwire_req?39 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!39 -> shippinglogwire_req?39 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!39 -> shippinglogwire_res?39 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!39 -> shippingwire_res?39 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!39 -> orderlogwire_cmmd!39 -> orderlogwire_cmmd?39 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!69 -> orderwire_pevt?69 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!69 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?69 -> orderwire_bevt!69 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (ShopFrontend.order.purchased-> &lt;> OrderwireLog.orderwire.eventstore.persist)">
        <connector href="target.arch#//@connector.9"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="CLOUD_PLATFORM">
        <node name="NodeJSContainer1" component="//@interimmodels.7/@designmodel/@component.0 //@interimmodels.7/@designmodel/@component.10">
          <port name="port" portNumber="15551" node="//@interimmodels.7/@designmodel/@host.0/@node.0" namedport="//@interimmodels.7/@designmodel/@component.0/@port.0"/>
          <port name="port" portNumber="15552" node="//@interimmodels.7/@designmodel/@host.0/@node.0" namedport="//@interimmodels.7/@designmodel/@component.0/@port.2"/>
          <port name="port" portNumber="15553" node="//@interimmodels.7/@designmodel/@host.0/@node.0" namedport="//@interimmodels.7/@designmodel/@component.10/@port.0"/>
          <port name="port" portNumber="15554" node="//@interimmodels.7/@designmodel/@host.0/@node.0" namedport="//@interimmodels.7/@designmodel/@component.0/@port.3"/>
          <port name="port" portNumber="15555" node="//@interimmodels.7/@designmodel/@host.0/@node.0" namedport="//@interimmodels.7/@designmodel/@component.0/@port.1"/>
        </node>
        <node name="GoContainer3" component="//@interimmodels.7/@designmodel/@component.1">
          <port name="port" portNumber="80" node="//@interimmodels.7/@designmodel/@host.0/@node.1" namedport="//@interimmodels.7/@designmodel/@component.1/@port.0" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="SecureServer">
        <node name="GoContainer1" component="//@interimmodels.7/@designmodel/@component.2">
          <port name="port" portNumber="80" node="//@interimmodels.7/@designmodel/@host.1/@node.0" namedport="//@interimmodels.7/@designmodel/@component.2/@port.0" hasFirewall="true"/>
        </node>
        <node name="GoContainer2" component="//@interimmodels.7/@designmodel/@component.6">
          <port name="port" portNumber="80" node="//@interimmodels.7/@designmodel/@host.1/@node.1" namedport="//@interimmodels.7/@designmodel/@component.6/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="LocalServer">
        <node name="JEEContainer1" component="//@interimmodels.7/@designmodel/@component.3 //@interimmodels.7/@designmodel/@component.5">
          <port name="port" portNumber="80" namedport="//@interimmodels.7/@designmodel/@component.3/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15561" node="//@interimmodels.7/@designmodel/@host.2/@node.0" namedport="//@interimmodels.7/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15562" node="//@interimmodels.7/@designmodel/@host.2/@node.0" namedport="//@interimmodels.7/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15563" node="//@interimmodels.7/@designmodel/@host.2/@node.0" namedport="//@interimmodels.7/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15564" node="//@interimmodels.7/@designmodel/@host.2/@node.0" namedport="//@interimmodels.7/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15566" node="//@interimmodels.7/@designmodel/@host.2/@node.0" namedport="//@interimmodels.7/@designmodel/@component.3/@port.1"/>
          <port name="port" portNumber="81" node="//@interimmodels.7/@designmodel/@host.2/@node.0" namedport="//@interimmodels.7/@designmodel/@component.3/@port.1"/>
        </node>
        <node name="MySQL1" component="//@interimmodels.7/@designmodel/@component.4">
          <port name="port" portNumber="3306" node="//@interimmodels.7/@designmodel/@host.2/@node.1" namedport="//@interimmodels.7/@designmodel/@component.4/@port.0 //@interimmodels.7/@designmodel/@component.4/@port.1"/>
        </node>
      </host>
      <host name="BackOfficeServer">
        <node name="JEEContainer4" component="//@interimmodels.7/@designmodel/@component.7 //@interimmodels.7/@designmodel/@component.8">
          <port name="port" portNumber="80" node="//@interimmodels.7/@designmodel/@host.3/@node.0" namedport="//@interimmodels.7/@designmodel/@component.7/@port.0" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15571" node="//@interimmodels.7/@designmodel/@host.3/@node.0" namedport="//@interimmodels.7/@designmodel/@component.7/@port.0"/>
          <port name="port" portNumber="15572" node="//@interimmodels.7/@designmodel/@host.3/@node.0" namedport="//@interimmodels.7/@designmodel/@component.7/@port.0"/>
        </node>
        <node name="MySQL2" component="//@interimmodels.7/@designmodel/@component.9">
          <port name="port" portNumber="3306" node="//@interimmodels.7/@designmodel/@host.3/@node.1" namedport="//@interimmodels.7/@designmodel/@component.9/@port.0 //@interimmodels.7/@designmodel/@component.9/@port.1"/>
        </node>
      </host>
      <link name="link2" linkType="HTTPS" networkType="INTERNET" source="//@interimmodels.7/@designmodel/@host.0/@node.0/@port.1" target="//@interimmodels.7/@designmodel/@host.2/@node.0/@port.0"/>
      <link name="link3" source="//@interimmodels.7/@designmodel/@host.2/@node.0/@port.1"/>
      <link name="link4" source="//@interimmodels.7/@designmodel/@host.2/@node.0/@port.2"/>
      <link name="link5" target="//@interimmodels.7/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link7" networkType="INTERNET" source="//@interimmodels.7/@designmodel/@host.0/@node.0/@port.3"/>
      <link name="link9" source="//@interimmodels.7/@designmodel/@host.0/@node.0/@port.4" target="//@interimmodels.7/@designmodel/@host.0/@node.1/@port.0"/>
      <link name="link11" source="//@interimmodels.7/@designmodel/@host.3/@node.0/@port.1"/>
      <link name="link12" source="//@interimmodels.7/@designmodel/@host.3/@node.0/@port.2"/>
      <link name="link13" target="//@interimmodels.7/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link14" target="//@interimmodels.7/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link16" source="//@interimmodels.7/@designmodel/@host.2/@node.0/@port.5" target="//@interimmodels.7/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link15" networkType="INTERNET" source="//@interimmodels.7/@designmodel/@host.0/@node.0/@port.2" target="//@interimmodels.7/@designmodel/@host.2/@node.0/@port.6"/>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="9" description="network route for connector:shippinglogwire between: shippingservice shippinglogwirecommandlog " nextModel="//@interimmodels.9" name="network-route">
    <designmodel name="inter9">
      <component name="ShopFrontend" type="client,broadcaster" deploymentnode="//@interimmodels.8/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface,LeastPriviledge">
        <port name="auth" role="//@interimmodels.8/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="checked"/>
        </port>
        <port name="browse" role="//@interimmodels.8/@designmodel/@connector.1/@role.0" type="request,OutboundPort">
          <events name="read"/>
        </port>
        <port name="order" role="//@interimmodels.8/@designmodel/@connector.9/@role.0" type="broadcast,OutboundPort">
          <events name="purchased"/>
        </port>
        <port name="shop" role="//@interimmodels.8/@designmodel/@connector.3/@role.0" type="request,OutboundPort">
          <events name="itemadded"/>
        </port>
      </component>
      <component name="CateloqueService" type="server" deploymentnode="//@interimmodels.8/@designmodel/@host.0/@node.1" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
        <port name="list" role="//@interimmodels.8/@designmodel/@connector.1/@role.1" type="response,InboundPort">
          <events name="query"/>
        </port>
      </component>
      <component name="UserService" type="server" deploymentnode="//@interimmodels.8/@designmodel/@host.1/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DefenseInDepth,DenialOfService">
        <port name="login" role="//@interimmodels.8/@designmodel/@connector.0/@role.1" type="response,InboundPort">
          <events name="signedon"/>
        </port>
      </component>
      <component name="OrdersService" type="client,server,listener,eventconsumer,readendpoint,datawriter,datareader" deploymentnode="//@interimmodels.8/@designmodel/@host.2/@node.0" criticalLevel="Low" securityCharacters="AttackSurface,LeastPriviledge,Compartmentalization,DenialOfService,DataTampering">
        <port name="postorder" role="//@interimmodels.8/@designmodel/@connector.4/@role.0 //@interimmodels.8/@designmodel/@connector.10/@role.0 //@interimmodels.8/@designmodel/@connector.7/@role.0" type="request,listen,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="check" next="//@interimmodels.8/@designmodel/@component.3/@port.0/@events.1"/>
          <events name="save"/>
        </port>
        <port name="get" role="//@interimmodels.8/@designmodel/@connector.2/@role.1 //@interimmodels.8/@designmodel/@connector.8/@role.0" type="response,read,OutboundPort,InboundPort,EventProcessorPort">
          <events name="ack"/>
        </port>
      </component>
      <component name="OrdersDB" type="repository,datastore" deploymentnode="//@interimmodels.8/@designmodel/@host.2/@node.1">
        <port name="writeorder" type="store,InboundPort,EventProcessorPort">
          <events name="orderwritten"/>
        </port>
        <port name="queryorder" role="//@interimmodels.8/@designmodel/@connector.8/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="orderreaded"/>
        </port>
      </component>
      <component name="CartsService" type="server" deploymentnode="//@interimmodels.8/@designmodel/@host.2/@node.0" securityCharacters="AttackSurface,DenialOfService,DataTampering">
        <port name="manage" role="//@interimmodels.8/@designmodel/@connector.3/@role.1" type="response,InboundPort">
          <events name="saveitem"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,datastore" deploymentnode="//@interimmodels.8/@designmodel/@host.1/@node.1" criticalLevel="High" securityCharacters="DefenseInDepth,Compartmentalization">
        <port name="pay" role="//@interimmodels.8/@designmodel/@connector.10/@role.1 //@interimmodels.8/@designmodel/@connector.11/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="paid"/>
        </port>
      </component>
      <component name="ShippingService" type="server,datawriter" deploymentnode="//@interimmodels.8/@designmodel/@host.3/@node.0" securityCharacters="Compartmentalization">
        <port name="postshipping" role="//@interimmodels.8/@designmodel/@connector.4/@role.1 //@interimmodels.8/@designmodel/@connector.6/@role.0" type="response,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="posted"/>
        </port>
      </component>
      <component name="ShippingWorker" type="readendpoint,datareader" deploymentnode="//@interimmodels.8/@designmodel/@host.3/@node.0">
        <port name="listqueue" role="//@interimmodels.8/@designmodel/@connector.5/@role.0" type="read,OutboundPort,EventProcessorPort">
          <events name="renderqueue"/>
        </port>
      </component>
      <component name="QueueDB" type="repository,datastore" deploymentnode="//@interimmodels.8/@designmodel/@host.3/@node.1">
        <port name="writequeue" type="store,InboundPort,EventProcessorPort">
          <events name="queuewritten"/>
        </port>
        <port name="readqueue" role="//@interimmodels.8/@designmodel/@connector.5/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="queuereaded"/>
        </port>
      </component>
      <component name="ShopBackend" type="client" deploymentnode="//@interimmodels.8/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface">
        <port name="listorder" role="//@interimmodels.8/@designmodel/@connector.2/@role.0" type="request,OutboundPort">
          <events name="renderlist"/>
        </port>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="append" role="//@interimmodels.8/@designmodel/@connector.11/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <deploymentnode href="target.arch#//@host.4/@node.0"/>
      </component>
      <component name="OrderwireLog" type="eventlogger,datastore">
        <port name="logorderwire" role="//@interimmodels.8/@designmodel/@connector.9/@role.2" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <component name="ShippinglogwireCommandLog" type="commanddb,datastore">
        <port name="logshippinglogwire" role="//@interimmodels.8/@designmodel/@connector.6/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.3/@node.2"/>
      </component>
      <component name="OrderlogwireCommandLog" type="commanddb,datastore">
        <port name="logorderlogwire" role="//@interimmodels.8/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <connector name="userwire" type="CSConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.8/@designmodel/@connector.0"/>
      </connector>
      <connector name="cateloquewire" type="CSConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.1"/>
        <role name="responder" roletype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.8/@designmodel/@connector.1"/>
      </connector>
      <connector name="orderquerywire" type="CSConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.2"/>
        <role name="responder" roletype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.8/@designmodel/@connector.8/@role.0" connector="//@interimmodels.8/@designmodel/@connector.2"/>
      </connector>
      <connector name="cartwire" type="CSConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.3"/>
        <role name="responder" roletype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.8/@designmodel/@connector.3"/>
      </connector>
      <connector name="shippingwire" type="CSConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.8/@designmodel/@connector.6/@role.0" connector="//@interimmodels.8/@designmodel/@connector.4"/>
      </connector>
      <connector name="queuereadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.5"/>
        <role name="readstorage" roletype="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.8/@designmodel/@connector.5"/>
      </connector>
      <connector name="shippinglogwire" type="CRConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.6"/>
        <role name="readstore" roletype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.8/@designmodel/@connector.6"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.4/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.6"/>
        </role>
      </connector>
      <connector name="orderlogwire" type="CRConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.8/@designmodel/@connector.10/@role.0" connector="//@interimmodels.8/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.8/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.4/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="orderreadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.8"/>
        <role name="readstorage" roletype="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.8/@designmodel/@connector.8"/>
      </connector>
      <connector name="orderwire" type="ESConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.8/@designmodel/@archstyle.1/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.9"/>
        <role name="eventsubscriber" roletype="//@interimmodels.8/@designmodel/@archstyle.1/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.8/@designmodel/@connector.7/@role.0" connector="//@interimmodels.8/@designmodel/@connector.9"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.9"/>
        </role>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="writer" nextRoleExpr="//@interimmodels.8/@designmodel/@connector.4/@role.0" connector="//@interimmodels.8/@designmodel/@connector.10"/>
        <role name="writestorage" roletype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="writestorage" connector="//@interimmodels.8/@designmodel/@connector.10"/>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.8/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.8/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.8/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.8/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.8/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.8/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.8/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.8/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.8/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.8/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.8/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.4" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
            <event name="Skip"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.8/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.8/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.8/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.8/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.8/@designmodel/@archstyle.4/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.8/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.8/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.8/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.8/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.8/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.8/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.8/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.8/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.8/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.8/@designmodel" valid="false" counterExample="init -> OrdersService_paywire_writer_request -> paywire_req!30 -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!11 -> cartwire_req?11 -> CartsService_cartwire_responder_invoke -> Payment_pay_paid -> (Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!30 -> oraclepaywire_token?30 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_pay_paid)*" visitedStates="764" verifyTime="0.0394134" testport="//@interimmodels.8/@designmodel/@component.0/@port.3" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!30 -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!11 -> cartwire_req?11 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!11 -> cartwire_res?11 -> Payment_pay_paid -> (Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!30 -> oraclepaywire_token?30 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_pay_paid)*" exprText="[]  (ShopFrontend.shop.itemadded -> &lt;> CartsService.manage.saveitem)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.8/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.0/@port.3/@events.0" nextExpr="//@interimmodels.8/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.8/@designmodel" valid="false" counterExample="init -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!29 -> oraclepaywire_token?29 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> OrdersService_paywire_writer_request -> paywire_req!55 -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!28 -> orderwire_pevt?28 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!28 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?28 -> orderwire_bevt!28 -> ShopFrontend_orderwire_eventpublisher_broadcast -> Payment_pay_paid -> (Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!29 -> oraclepaywire_token?29 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_pay_paid)*" visitedStates="236" verifyTime="0.0169726" testport="//@interimmodels.8/@designmodel/@component.0/@port.2" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter9() |= ![](Payment_pay_paid->&lt;" exprText="[]  (Payment.pay.paid -> &lt;> ShippingService.postshipping.posted)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.8/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.6/@port.0/@events.0" nextExpr="//@interimmodels.8/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.8/@designmodel" visitedStates="2359" verifyTime="0.07782889999999999" testport="//@interimmodels.8/@designmodel/@component.0/@port.3" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!40 -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!79 -> cartwire_req?79 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!79 -> cartwire_res?79 -> Payment_pay_paid -> (Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!10 -> Payment_pay_paid -> oraclepaywire_token?10 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!10 -> Payment_pay_paid)*" exprText="[]  (OrdersService.postorder.save -> &lt;> Payment.pay.paid)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.8/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.3/@port.0/@events.1" nextExpr="//@interimmodels.8/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.8/@designmodel" valid="false" counterExample="init -> OrdersService_paywire_writer_request -> paywire_req!64 -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!24 -> userwire_req?24 -> UserService_userwire_responder_invoke -> Payment_pay_paid -> (Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!84 -> oraclepaywire_token?84 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_pay_paid)*" visitedStates="764" verifyTime="0.028237599999999998" testport="//@interimmodels.8/@designmodel/@component.0/@port.0" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!64 -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!24 -> userwire_req?24 -> UserService_userwire_responder_invoke -> UserService_login_signedon -> UserService_userwire_responder_process -> userwire_res!24 -> userwire_res?24 -> Payment_pay_paid -> (Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!84 -> oraclepaywire_token?84 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_pay_paid)*" exprText="[]  (ShopFrontend.auth.checked -> &lt;> UserService.login.signedon)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.8/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.8/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.8/@designmodel" valid="false" counterExample="init -> OrdersService_paywire_writer_request -> paywire_req!69 -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!38 -> cateloquewire_req?38 -> CateloqueService_cateloquewire_responder_invoke -> Payment_pay_paid -> (Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!73 -> oraclepaywire_token?73 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_pay_paid)*" visitedStates="505" verifyTime="0.0301582" testport="//@interimmodels.8/@designmodel/@component.0/@port.1" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!69 -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!38 -> cateloquewire_req?38 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!38 -> cateloquewire_res?38 -> Payment_pay_paid -> (Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!73 -> oraclepaywire_token?73 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_pay_paid)*" exprText="[]  (&lt;> ShopFrontend.browse.read -> &lt;> CateloqueService.list.query)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.8/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.1/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.0/@port.1/@events.0" operator="EVENTUALLY" nextExpr="//@interimmodels.8/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop6" model="//@interimmodels.8/@designmodel" valid="false" counterExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!24 -> orderquerywire_req?24 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_reader_process -> orderreadwire_req!24 -> orderreadwire_req?24 -> OrdersDB_orderreadwire_readstorage_invoke -> OrdersService_paywire_writer_request -> paywire_req!62 -> Payment_pay_paid -> (Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!82 -> oraclepaywire_token?82 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_pay_paid)*" visitedStates="4565" verifyTime="0.14492739999999998" testport="//@interimmodels.8/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!24 -> orderquerywire_req?24 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_reader_process -> orderreadwire_req!24 -> orderreadwire_req?24 -> OrdersDB_orderreadwire_readstorage_invoke -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstorage_process -> orderreadwire_res!24 -> orderreadwire_res?24 -> OrdersService_orderreadwire_reader_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!24 -> orderquerywire_res?24 -> OrdersService_paywire_writer_request -> paywire_req!62 -> Payment_pay_paid -> (Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!82 -> oraclepaywire_token?82 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_pay_paid)*" exprText="[]  (ShopBackend.listorder.renderlist -> &lt;> OrdersDB.queryorder.orderreaded)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.8/@designmodel/@verifyProperty.5">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.10/@port.0/@events.0" nextExpr="//@interimmodels.8/@designmodel/@verifyProperty.5/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop7" model="//@interimmodels.8/@designmodel" valid="false" counterExample="init -> OrdersService_paywire_writer_request -> paywire_req!54 -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!21 -> orderwire_pevt?21 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!21 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?21 -> orderwire_bevt!21 -> ShopFrontend_orderwire_eventpublisher_broadcast -> Payment_pay_paid -> (Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!54 -> oraclepaywire_token?54 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_pay_paid)*" visitedStates="1190" verifyTime="0.0399487" testport="//@interimmodels.8/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!54 -> Payment_pay_paid -> (Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!54 -> oraclepaywire_token?54 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_pay_paid)*" exprText="[]  (ShopFrontend.order.purchased -> &lt;> OrdersService.postorder.save)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.8/@designmodel/@verifyProperty.6">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.3/@port.0/@events.1" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.8/@designmodel/@verifyProperty.6/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" visitedStates="7228" verifyTime="0.21920689999999998" testport="//@interimmodels.8/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!64 -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!45 -> orderwire_pevt?45 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!45 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?45 -> orderwire_bevt!45 -> ShopFrontend_orderwire_eventpublisher_broadcast -> Payment_pay_paid -> (Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!24 -> oraclepaywire_token?24 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!24 -> oraclepaywire_token?24 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored)*" exprText="[] (Payment.pay.paid-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.11"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-orderlogwire" visitedStates="3790" verifyTime="0.11749269999999999" testport="//@interimmodels.8/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!56 -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!96 -> orderwire_pevt?96 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!96 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?96 -> orderwire_bevt!96 -> ShopFrontend_orderwire_eventpublisher_broadcast -> Payment_pay_paid -> (Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!61 -> oraclepaywire_token?61 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_pay_paid)*" exprText="[] (OrdersService.postorder.check-> &lt;> OrderlogwireCommandLog.orderlogwire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-orderwire" valid="false" counterExample="init -> OrdersService_paywire_writer_request -> paywire_req!61 -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!32 -> orderwire_pevt?32 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!32 -> orderwire_sevt?32 -> orderwire_bevt!32 -> ShopFrontend_orderwire_eventpublisher_broadcast -> Payment_pay_paid -> (Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!98 -> oraclepaywire_token?98 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_pay_paid)*" visitedStates="1187" verifyTime="0.043084899999999995" testport="//@interimmodels.8/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!61 -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!32 -> orderwire_pevt?32 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!32 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?32 -> orderwire_bevt!32 -> ShopFrontend_orderwire_eventpublisher_broadcast -> Payment_pay_paid -> (Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!98 -> oraclepaywire_token?98 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_pay_paid)*" exprText="[] (ShopFrontend.order.purchased-> &lt;> OrderwireLog.orderwire.eventstore.persist)">
        <connector href="target.arch#//@connector.9"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-shippinglogwire" visitedStates="3790" verifyTime="0.1354162" testport="//@interimmodels.8/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!90 -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!43 -> orderwire_pevt?43 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!43 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?43 -> orderwire_bevt!43 -> ShopFrontend_orderwire_eventpublisher_broadcast -> Payment_pay_paid -> (Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!75 -> oraclepaywire_token?75 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_pay_paid)*" exprText="[] (ShippingService.postshipping.posted-> &lt;> ShippinglogwireCommandLog.shippinglogwire.commandstore.persist)">
        <connector href="target.arch#//@connector.6"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="CLOUD_PLATFORM">
        <node name="NodeJSContainer1" component="//@interimmodels.8/@designmodel/@component.0 //@interimmodels.8/@designmodel/@component.10">
          <port name="port" portNumber="15551" node="//@interimmodels.8/@designmodel/@host.0/@node.0" namedport="//@interimmodels.8/@designmodel/@component.0/@port.0"/>
          <port name="port" portNumber="15552" node="//@interimmodels.8/@designmodel/@host.0/@node.0" namedport="//@interimmodels.8/@designmodel/@component.0/@port.2"/>
          <port name="port" portNumber="15553" node="//@interimmodels.8/@designmodel/@host.0/@node.0" namedport="//@interimmodels.8/@designmodel/@component.10/@port.0"/>
          <port name="port" portNumber="15554" node="//@interimmodels.8/@designmodel/@host.0/@node.0" namedport="//@interimmodels.8/@designmodel/@component.0/@port.3"/>
          <port name="port" portNumber="15555" node="//@interimmodels.8/@designmodel/@host.0/@node.0" namedport="//@interimmodels.8/@designmodel/@component.0/@port.1"/>
        </node>
        <node name="GoContainer3" component="//@interimmodels.8/@designmodel/@component.1">
          <port name="port" portNumber="80" node="//@interimmodels.8/@designmodel/@host.0/@node.1" namedport="//@interimmodels.8/@designmodel/@component.1/@port.0" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="SecureServer">
        <node name="GoContainer1" component="//@interimmodels.8/@designmodel/@component.2">
          <port name="port" portNumber="80" node="//@interimmodels.8/@designmodel/@host.1/@node.0" namedport="//@interimmodels.8/@designmodel/@component.2/@port.0" hasFirewall="true"/>
        </node>
        <node name="GoContainer2" component="//@interimmodels.8/@designmodel/@component.6">
          <port name="port" portNumber="80" node="//@interimmodels.8/@designmodel/@host.1/@node.1" namedport="//@interimmodels.8/@designmodel/@component.6/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="LocalServer">
        <node name="JEEContainer1" component="//@interimmodels.8/@designmodel/@component.3 //@interimmodels.8/@designmodel/@component.5">
          <port name="port" portNumber="80" namedport="//@interimmodels.8/@designmodel/@component.3/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15561" node="//@interimmodels.8/@designmodel/@host.2/@node.0" namedport="//@interimmodels.8/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15562" node="//@interimmodels.8/@designmodel/@host.2/@node.0" namedport="//@interimmodels.8/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15563" node="//@interimmodels.8/@designmodel/@host.2/@node.0" namedport="//@interimmodels.8/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15564" node="//@interimmodels.8/@designmodel/@host.2/@node.0" namedport="//@interimmodels.8/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15566" node="//@interimmodels.8/@designmodel/@host.2/@node.0" namedport="//@interimmodels.8/@designmodel/@component.3/@port.1"/>
          <port name="port" portNumber="81" node="//@interimmodels.8/@designmodel/@host.2/@node.0" namedport="//@interimmodels.8/@designmodel/@component.3/@port.1"/>
        </node>
        <node name="MySQL1" component="//@interimmodels.8/@designmodel/@component.4">
          <port name="port" portNumber="3306" node="//@interimmodels.8/@designmodel/@host.2/@node.1" namedport="//@interimmodels.8/@designmodel/@component.4/@port.0 //@interimmodels.8/@designmodel/@component.4/@port.1"/>
        </node>
      </host>
      <host name="BackOfficeServer">
        <node name="JEEContainer4" component="//@interimmodels.8/@designmodel/@component.7 //@interimmodels.8/@designmodel/@component.8">
          <port name="port" portNumber="80" node="//@interimmodels.8/@designmodel/@host.3/@node.0" namedport="//@interimmodels.8/@designmodel/@component.7/@port.0" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15571" node="//@interimmodels.8/@designmodel/@host.3/@node.0" namedport="//@interimmodels.8/@designmodel/@component.7/@port.0"/>
          <port name="port" portNumber="15572" node="//@interimmodels.8/@designmodel/@host.3/@node.0" namedport="//@interimmodels.8/@designmodel/@component.7/@port.0"/>
        </node>
        <node name="MySQL2" component="//@interimmodels.8/@designmodel/@component.9">
          <port name="port" portNumber="3306" node="//@interimmodels.8/@designmodel/@host.3/@node.1" namedport="//@interimmodels.8/@designmodel/@component.9/@port.0 //@interimmodels.8/@designmodel/@component.9/@port.1"/>
        </node>
      </host>
      <link name="link2" linkType="HTTPS" networkType="INTERNET" source="//@interimmodels.8/@designmodel/@host.0/@node.0/@port.1" target="//@interimmodels.8/@designmodel/@host.2/@node.0/@port.0"/>
      <link name="link3" source="//@interimmodels.8/@designmodel/@host.2/@node.0/@port.1"/>
      <link name="link4" source="//@interimmodels.8/@designmodel/@host.2/@node.0/@port.2"/>
      <link name="link5" target="//@interimmodels.8/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link7" networkType="INTERNET" source="//@interimmodels.8/@designmodel/@host.0/@node.0/@port.3"/>
      <link name="link9" source="//@interimmodels.8/@designmodel/@host.0/@node.0/@port.4" target="//@interimmodels.8/@designmodel/@host.0/@node.1/@port.0"/>
      <link name="link11" source="//@interimmodels.8/@designmodel/@host.3/@node.0/@port.1"/>
      <link name="link12" source="//@interimmodels.8/@designmodel/@host.3/@node.0/@port.2"/>
      <link name="link13" target="//@interimmodels.8/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link14" target="//@interimmodels.8/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link16" source="//@interimmodels.8/@designmodel/@host.2/@node.0/@port.5" target="//@interimmodels.8/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link15" networkType="INTERNET" source="//@interimmodels.8/@designmodel/@host.0/@node.0/@port.2" target="//@interimmodels.8/@designmodel/@host.2/@node.0/@port.6"/>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="10" description="network route for connector:shippinglogwire between: shippingservice queuedb " nextModel="//@interimmodels.10" name="network-route">
    <designmodel name="inter10">
      <component name="ShopFrontend" type="client,broadcaster" deploymentnode="//@interimmodels.9/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface,LeastPriviledge">
        <port name="auth" role="//@interimmodels.9/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="checked"/>
        </port>
        <port name="browse" role="//@interimmodels.9/@designmodel/@connector.1/@role.0" type="request,OutboundPort">
          <events name="read"/>
        </port>
        <port name="order" role="//@interimmodels.9/@designmodel/@connector.9/@role.0" type="broadcast,OutboundPort">
          <events name="purchased"/>
        </port>
        <port name="shop" role="//@interimmodels.9/@designmodel/@connector.3/@role.0" type="request,OutboundPort">
          <events name="itemadded"/>
        </port>
      </component>
      <component name="CateloqueService" type="server" deploymentnode="//@interimmodels.9/@designmodel/@host.0/@node.1" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
        <port name="list" role="//@interimmodels.9/@designmodel/@connector.1/@role.1" type="response,InboundPort">
          <events name="query"/>
        </port>
      </component>
      <component name="UserService" type="server" deploymentnode="//@interimmodels.9/@designmodel/@host.1/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DefenseInDepth,DenialOfService">
        <port name="login" role="//@interimmodels.9/@designmodel/@connector.0/@role.1" type="response,InboundPort">
          <events name="signedon"/>
        </port>
      </component>
      <component name="OrdersService" type="client,server,listener,eventconsumer,readendpoint,datawriter,datareader" deploymentnode="//@interimmodels.9/@designmodel/@host.2/@node.0" criticalLevel="Low" securityCharacters="AttackSurface,LeastPriviledge,Compartmentalization,DenialOfService,DataTampering">
        <port name="postorder" role="//@interimmodels.9/@designmodel/@connector.4/@role.0 //@interimmodels.9/@designmodel/@connector.10/@role.0 //@interimmodels.9/@designmodel/@connector.7/@role.0" type="request,listen,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="check" next="//@interimmodels.9/@designmodel/@component.3/@port.0/@events.1"/>
          <events name="save"/>
        </port>
        <port name="get" role="//@interimmodels.9/@designmodel/@connector.2/@role.1 //@interimmodels.9/@designmodel/@connector.8/@role.0" type="response,read,OutboundPort,InboundPort,EventProcessorPort">
          <events name="ack"/>
        </port>
      </component>
      <component name="OrdersDB" type="repository,datastore" deploymentnode="//@interimmodels.9/@designmodel/@host.2/@node.1">
        <port name="writeorder" type="store,InboundPort,EventProcessorPort">
          <events name="orderwritten"/>
        </port>
        <port name="queryorder" role="//@interimmodels.9/@designmodel/@connector.8/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="orderreaded"/>
        </port>
      </component>
      <component name="CartsService" type="server" deploymentnode="//@interimmodels.9/@designmodel/@host.2/@node.0" securityCharacters="AttackSurface,DenialOfService,DataTampering">
        <port name="manage" role="//@interimmodels.9/@designmodel/@connector.3/@role.1" type="response,InboundPort">
          <events name="saveitem"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,datastore" deploymentnode="//@interimmodels.9/@designmodel/@host.1/@node.1" criticalLevel="High" securityCharacters="DefenseInDepth,Compartmentalization">
        <port name="pay" role="//@interimmodels.9/@designmodel/@connector.10/@role.1 //@interimmodels.9/@designmodel/@connector.11/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="paid"/>
        </port>
      </component>
      <component name="ShippingService" type="server,datawriter" deploymentnode="//@interimmodels.9/@designmodel/@host.3/@node.0" securityCharacters="Compartmentalization">
        <port name="postshipping" role="//@interimmodels.9/@designmodel/@connector.4/@role.1 //@interimmodels.9/@designmodel/@connector.6/@role.0" type="response,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="posted"/>
        </port>
      </component>
      <component name="ShippingWorker" type="readendpoint,datareader" deploymentnode="//@interimmodels.9/@designmodel/@host.3/@node.0">
        <port name="listqueue" role="//@interimmodels.9/@designmodel/@connector.5/@role.0" type="read,OutboundPort,EventProcessorPort">
          <events name="renderqueue"/>
        </port>
      </component>
      <component name="QueueDB" type="repository,datastore" deploymentnode="//@interimmodels.9/@designmodel/@host.3/@node.1">
        <port name="writequeue" role="//@interimmodels.9/@designmodel/@connector.6/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="queuewritten"/>
        </port>
        <port name="readqueue" role="//@interimmodels.9/@designmodel/@connector.5/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="queuereaded"/>
        </port>
      </component>
      <component name="ShopBackend" type="client" deploymentnode="//@interimmodels.9/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface">
        <port name="listorder" role="//@interimmodels.9/@designmodel/@connector.2/@role.0" type="request,OutboundPort">
          <events name="renderlist"/>
        </port>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="append" role="//@interimmodels.9/@designmodel/@connector.11/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <deploymentnode href="target.arch#//@host.4/@node.0"/>
      </component>
      <component name="OrderwireLog" type="eventlogger,datastore">
        <port name="logorderwire" role="//@interimmodels.9/@designmodel/@connector.9/@role.2" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <component name="ShippinglogwireCommandLog" type="commanddb,datastore">
        <port name="logshippinglogwire" role="//@interimmodels.9/@designmodel/@connector.6/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.3/@node.2"/>
      </component>
      <component name="OrderlogwireCommandLog" type="commanddb,datastore">
        <port name="logorderlogwire" role="//@interimmodels.9/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <connector name="userwire" type="CSConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.9/@designmodel/@connector.0"/>
      </connector>
      <connector name="cateloquewire" type="CSConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.1"/>
        <role name="responder" roletype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.9/@designmodel/@connector.1"/>
      </connector>
      <connector name="orderquerywire" type="CSConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.2"/>
        <role name="responder" roletype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.9/@designmodel/@connector.8/@role.0" connector="//@interimmodels.9/@designmodel/@connector.2"/>
      </connector>
      <connector name="cartwire" type="CSConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.3"/>
        <role name="responder" roletype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.9/@designmodel/@connector.3"/>
      </connector>
      <connector name="shippingwire" type="CSConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.9/@designmodel/@connector.6/@role.0" connector="//@interimmodels.9/@designmodel/@connector.4"/>
      </connector>
      <connector name="queuereadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.5"/>
        <role name="readstorage" roletype="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.9/@designmodel/@connector.5"/>
      </connector>
      <connector name="shippinglogwire" type="CRConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.6"/>
        <role name="readstore" roletype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.9/@designmodel/@connector.6"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.4/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.6"/>
        </role>
      </connector>
      <connector name="orderlogwire" type="CRConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.9/@designmodel/@connector.10/@role.0" connector="//@interimmodels.9/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.9/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.4/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="orderreadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.8"/>
        <role name="readstorage" roletype="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.9/@designmodel/@connector.8"/>
      </connector>
      <connector name="orderwire" type="ESConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.9/@designmodel/@archstyle.1/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.9"/>
        <role name="eventsubscriber" roletype="//@interimmodels.9/@designmodel/@archstyle.1/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.9/@designmodel/@connector.7/@role.0" connector="//@interimmodels.9/@designmodel/@connector.9"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.9"/>
        </role>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="writer" nextRoleExpr="//@interimmodels.9/@designmodel/@connector.4/@role.0" connector="//@interimmodels.9/@designmodel/@connector.10"/>
        <role name="writestorage" roletype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="writestorage" connector="//@interimmodels.9/@designmodel/@connector.10"/>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.9/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.9/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.9/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.9/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.9/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.9/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.9/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.9/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.9/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.9/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.9/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.4" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
            <event name="Skip"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.9/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.9/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.9/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.9/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.9/@designmodel/@archstyle.4/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.9/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.9/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.9/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.9/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.9/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.9/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.9/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.9/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.9/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.9/@designmodel" counterExample="" visitedStates="17607" verifyTime="0.5899348999999999" testport="//@interimmodels.9/@designmodel/@component.0/@port.3" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!98 -> paywire_req?98 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!98 -> paywire_res?98 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!98 -> shippingwire_req?98 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!98 -> shippinglogwire_stmt?98 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!98 -> shippinglogwire_cmmd?98 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!98 -> shippingwire_res?98 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!98 -> orderlogwire_cmmd!98 -> orderlogwire_cmmd?98 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!98 -> cartwire_req?98 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!98 -> cartwire_res?98" exprText="[]  (ShopFrontend.shop.itemadded -> &lt;> CartsService.manage.saveitem)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.9/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.0/@port.3/@events.0" nextExpr="//@interimmodels.9/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.9/@designmodel" counterExample="" visitedStates="19038" verifyTime="0.6030608" testport="//@interimmodels.9/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!54 -> paywire_req?54 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!54 -> paywire_res?54 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!54 -> shippingwire_req?54 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!54 -> shippinglogwire_stmt?54 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!54 -> shippinglogwire_cmmd?54 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!54 -> shippingwire_res?54 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!54 -> orderlogwire_cmmd!54 -> orderlogwire_cmmd?54 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!93 -> orderwire_pevt?93 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!93 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?93 -> orderwire_bevt!93 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (Payment.pay.paid -> &lt;> ShippingService.postshipping.posted)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.9/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.6/@port.0/@events.0" nextExpr="//@interimmodels.9/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.9/@designmodel" valid="false" counterExample="init -> OrdersService_paywire_writer_request -> paywire_req!97 -> paywire_req?97 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!97 -> paywire_res?97 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!97 -> shippingwire_req?97 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!97 -> shippinglogwire_stmt?97 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!97 -> shippinglogwire_cmmd?97 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!97 -> shippingwire_res?97 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!97 -> orderlogwire_cmmd!97 -> orderlogwire_cmmd?97 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!53 -> cartwire_req?53 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!53 -> cartwire_res?53" visitedStates="11530" verifyTime="0.3854265" testport="//@interimmodels.9/@designmodel/@component.0/@port.3" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter10() |= ![](OrdersService_postorder_save->&lt;" exprText="[]  (OrdersService.postorder.save -> &lt;> Payment.pay.paid)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.9/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.3/@port.0/@events.1" nextExpr="//@interimmodels.9/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.9/@designmodel" counterExample="" visitedStates="17607" verifyTime="0.5475715999999999" testport="//@interimmodels.9/@designmodel/@component.0/@port.0" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!62 -> paywire_req?62 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!62 -> paywire_res?62 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!62 -> shippingwire_req?62 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!62 -> shippinglogwire_stmt?62 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!62 -> shippinglogwire_cmmd?62 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!62 -> shippingwire_res?62 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!62 -> orderlogwire_cmmd!62 -> orderlogwire_cmmd?62 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!43 -> userwire_req?43 -> UserService_userwire_responder_invoke -> UserService_login_signedon -> UserService_userwire_responder_process -> userwire_res!43 -> userwire_res?43" exprText="[]  (ShopFrontend.auth.checked -> &lt;> UserService.login.signedon)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.9/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.9/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.9/@designmodel" counterExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!62 -> cateloquewire_req?62 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!62 -> cateloquewire_res?62" visitedStates="28880" verifyTime="0.9097883999999999" testport="//@interimmodels.9/@designmodel/@component.0/@port.1" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!46 -> paywire_req?46 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!46 -> paywire_res?46 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!46 -> shippingwire_req?46 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!46 -> shippinglogwire_stmt?46 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!46 -> shippinglogwire_cmmd?46 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!46 -> shippingwire_res?46 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!46 -> orderlogwire_cmmd!46 -> orderlogwire_cmmd?46 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!17 -> cateloquewire_req?17 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!17 -> cateloquewire_res?17" exprText="[]  (&lt;> ShopFrontend.browse.read -> &lt;> CateloqueService.list.query)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.9/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.1/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.0/@port.1/@events.0" operator="EVENTUALLY" nextExpr="//@interimmodels.9/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop6" model="//@interimmodels.9/@designmodel" counterExample="" visitedStates="34365" verifyTime="1.0269884" testport="//@interimmodels.9/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!75 -> orderquerywire_req?75 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_reader_process -> orderreadwire_req!75 -> orderreadwire_req?75 -> OrdersDB_orderreadwire_readstorage_invoke -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstorage_process -> orderreadwire_res!75 -> orderreadwire_res?75 -> OrdersService_orderreadwire_reader_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!75 -> orderquerywire_res?75 -> OrdersService_paywire_writer_request -> paywire_req!10 -> paywire_req?10 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!10 -> paywire_res?10 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!10 -> shippingwire_req?10 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!10 -> shippinglogwire_stmt?10 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!10 -> shippinglogwire_cmmd?10 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!10 -> shippingwire_res?10 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!10 -> orderlogwire_cmmd!10 -> orderlogwire_cmmd?10 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist" exprText="[]  (ShopBackend.listorder.renderlist -> &lt;> OrdersDB.queryorder.orderreaded)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.9/@designmodel/@verifyProperty.5">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.10/@port.0/@events.0" nextExpr="//@interimmodels.9/@designmodel/@verifyProperty.5/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop7" model="//@interimmodels.9/@designmodel" valid="false" counterExample="init -> OrdersService_paywire_writer_request -> paywire_req!88 -> paywire_req?88 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!88 -> paywire_res?88 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!88 -> shippingwire_req?88 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!88 -> shippinglogwire_stmt?88 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!88 -> shippinglogwire_cmmd?88 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!88 -> shippingwire_res?88 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!88 -> orderlogwire_cmmd!88 -> orderlogwire_cmmd?88 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!96 -> orderwire_pevt?96 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!96 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?96 -> orderwire_bevt!96 -> ShopFrontend_orderwire_eventpublisher_broadcast" visitedStates="158" verifyTime="0.0265491" testport="//@interimmodels.9/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!88 -> paywire_req?88 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!88 -> paywire_res?88 -> OrdersService_postorder_check -> ShopFrontend_order_purchased -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!88 -> shippingwire_req?88 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!88 -> shippinglogwire_stmt?88 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!88 -> shippinglogwire_cmmd?88 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!88 -> shippingwire_res?88 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!88 -> orderlogwire_cmmd!88 -> orderlogwire_cmmd?88 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!96 -> orderwire_pevt?96 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!96 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?96 -> orderwire_bevt!96 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (ShopFrontend.order.purchased -> &lt;> OrdersService.postorder.save)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.9/@designmodel/@verifyProperty.6">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.3/@port.0/@events.1" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.9/@designmodel/@verifyProperty.6/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" valid="false" counterExample="init -> OrdersService_paywire_writer_request -> paywire_req!86 -> paywire_req?86 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!86 -> paywire_res?86 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!86 -> shippingwire_req?86 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!86 -> shippinglogwire_stmt?86 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!86 -> shippinglogwire_cmmd?86 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!86 -> shippingwire_res?86 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!86 -> orderlogwire_cmmd!86 -> orderlogwire_cmmd?86 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!69 -> orderwire_pevt?69 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!69 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?69 -> orderwire_bevt!69 -> ShopFrontend_orderwire_eventpublisher_broadcast" visitedStates="18595" verifyTime="0.6086486999999999" testport="//@interimmodels.9/@designmodel/@component.0/@port.2" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter10() |= ![](Payment_pay_paid->&lt;" exprText="[] (Payment.pay.paid-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.11"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-orderlogwire" visitedStates="35634" verifyTime="1.2821034999999998" testport="//@interimmodels.9/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!90 -> paywire_req?90 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!90 -> paywire_res?90 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!90 -> shippingwire_req?90 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!90 -> shippinglogwire_stmt?90 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!90 -> shippinglogwire_cmmd?90 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!90 -> shippingwire_res?90 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!90 -> orderlogwire_cmmd!90 -> orderlogwire_cmmd?90 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!14 -> orderwire_pevt?14 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!14 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?14 -> orderwire_bevt!14 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (OrdersService.postorder.check-> &lt;> OrderlogwireCommandLog.orderlogwire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-orderwire" visitedStates="30624" verifyTime="0.9816838" testport="//@interimmodels.9/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!58 -> paywire_req?58 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!58 -> paywire_res?58 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!58 -> shippingwire_req?58 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!58 -> shippinglogwire_stmt?58 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!58 -> shippinglogwire_cmmd?58 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!58 -> shippingwire_res?58 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!58 -> orderlogwire_cmmd!58 -> orderlogwire_cmmd?58 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!11 -> orderwire_pevt?11 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!11 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?11 -> orderwire_bevt!11 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (ShopFrontend.order.purchased-> &lt;> OrderwireLog.orderwire.eventstore.persist)">
        <connector href="target.arch#//@connector.9"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-shippinglogwire" visitedStates="33018" verifyTime="1.003638" testport="//@interimmodels.9/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_paywire_writer_request -> paywire_req!91 -> paywire_req?91 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!91 -> paywire_res?91 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!91 -> shippingwire_req?91 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!91 -> shippinglogwire_stmt?91 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!91 -> shippinglogwire_cmmd?91 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!91 -> shippingwire_res?91 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!91 -> orderlogwire_cmmd!91 -> orderlogwire_cmmd?91 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!63 -> orderwire_pevt?63 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!63 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?63 -> orderwire_bevt!63 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (ShippingService.postshipping.posted-> &lt;> ShippinglogwireCommandLog.shippinglogwire.commandstore.persist)">
        <connector href="target.arch#//@connector.6"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="CLOUD_PLATFORM">
        <node name="NodeJSContainer1" component="//@interimmodels.9/@designmodel/@component.0 //@interimmodels.9/@designmodel/@component.10">
          <port name="port" portNumber="15551" node="//@interimmodels.9/@designmodel/@host.0/@node.0" namedport="//@interimmodels.9/@designmodel/@component.0/@port.0"/>
          <port name="port" portNumber="15552" node="//@interimmodels.9/@designmodel/@host.0/@node.0" namedport="//@interimmodels.9/@designmodel/@component.0/@port.2"/>
          <port name="port" portNumber="15553" node="//@interimmodels.9/@designmodel/@host.0/@node.0" namedport="//@interimmodels.9/@designmodel/@component.10/@port.0"/>
          <port name="port" portNumber="15554" node="//@interimmodels.9/@designmodel/@host.0/@node.0" namedport="//@interimmodels.9/@designmodel/@component.0/@port.3"/>
          <port name="port" portNumber="15555" node="//@interimmodels.9/@designmodel/@host.0/@node.0" namedport="//@interimmodels.9/@designmodel/@component.0/@port.1"/>
        </node>
        <node name="GoContainer3" component="//@interimmodels.9/@designmodel/@component.1">
          <port name="port" portNumber="80" node="//@interimmodels.9/@designmodel/@host.0/@node.1" namedport="//@interimmodels.9/@designmodel/@component.1/@port.0" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="SecureServer">
        <node name="GoContainer1" component="//@interimmodels.9/@designmodel/@component.2">
          <port name="port" portNumber="80" node="//@interimmodels.9/@designmodel/@host.1/@node.0" namedport="//@interimmodels.9/@designmodel/@component.2/@port.0" hasFirewall="true"/>
        </node>
        <node name="GoContainer2" component="//@interimmodels.9/@designmodel/@component.6">
          <port name="port" portNumber="80" node="//@interimmodels.9/@designmodel/@host.1/@node.1" namedport="//@interimmodels.9/@designmodel/@component.6/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="LocalServer">
        <node name="JEEContainer1" component="//@interimmodels.9/@designmodel/@component.3 //@interimmodels.9/@designmodel/@component.5">
          <port name="port" portNumber="80" namedport="//@interimmodels.9/@designmodel/@component.3/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15561" node="//@interimmodels.9/@designmodel/@host.2/@node.0" namedport="//@interimmodels.9/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15562" node="//@interimmodels.9/@designmodel/@host.2/@node.0" namedport="//@interimmodels.9/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15563" node="//@interimmodels.9/@designmodel/@host.2/@node.0" namedport="//@interimmodels.9/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15564" node="//@interimmodels.9/@designmodel/@host.2/@node.0" namedport="//@interimmodels.9/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15566" node="//@interimmodels.9/@designmodel/@host.2/@node.0" namedport="//@interimmodels.9/@designmodel/@component.3/@port.1"/>
          <port name="port" portNumber="81" node="//@interimmodels.9/@designmodel/@host.2/@node.0" namedport="//@interimmodels.9/@designmodel/@component.3/@port.1"/>
        </node>
        <node name="MySQL1" component="//@interimmodels.9/@designmodel/@component.4">
          <port name="port" portNumber="3306" node="//@interimmodels.9/@designmodel/@host.2/@node.1" namedport="//@interimmodels.9/@designmodel/@component.4/@port.0 //@interimmodels.9/@designmodel/@component.4/@port.1"/>
        </node>
      </host>
      <host name="BackOfficeServer">
        <node name="JEEContainer4" component="//@interimmodels.9/@designmodel/@component.7 //@interimmodels.9/@designmodel/@component.8">
          <port name="port" portNumber="80" node="//@interimmodels.9/@designmodel/@host.3/@node.0" namedport="//@interimmodels.9/@designmodel/@component.7/@port.0" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15571" node="//@interimmodels.9/@designmodel/@host.3/@node.0" namedport="//@interimmodels.9/@designmodel/@component.7/@port.0"/>
          <port name="port" portNumber="15572" node="//@interimmodels.9/@designmodel/@host.3/@node.0" namedport="//@interimmodels.9/@designmodel/@component.7/@port.0"/>
        </node>
        <node name="MySQL2" component="//@interimmodels.9/@designmodel/@component.9">
          <port name="port" portNumber="3306" node="//@interimmodels.9/@designmodel/@host.3/@node.1" namedport="//@interimmodels.9/@designmodel/@component.9/@port.0 //@interimmodels.9/@designmodel/@component.9/@port.1"/>
        </node>
      </host>
      <link name="link2" linkType="HTTPS" networkType="INTERNET" source="//@interimmodels.9/@designmodel/@host.0/@node.0/@port.1" target="//@interimmodels.9/@designmodel/@host.2/@node.0/@port.0"/>
      <link name="link3" source="//@interimmodels.9/@designmodel/@host.2/@node.0/@port.1"/>
      <link name="link4" source="//@interimmodels.9/@designmodel/@host.2/@node.0/@port.2"/>
      <link name="link5" target="//@interimmodels.9/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link7" networkType="INTERNET" source="//@interimmodels.9/@designmodel/@host.0/@node.0/@port.3"/>
      <link name="link9" source="//@interimmodels.9/@designmodel/@host.0/@node.0/@port.4" target="//@interimmodels.9/@designmodel/@host.0/@node.1/@port.0"/>
      <link name="link11" source="//@interimmodels.9/@designmodel/@host.3/@node.0/@port.1"/>
      <link name="link12" source="//@interimmodels.9/@designmodel/@host.3/@node.0/@port.2"/>
      <link name="link13" target="//@interimmodels.9/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link14" target="//@interimmodels.9/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link16" source="//@interimmodels.9/@designmodel/@host.2/@node.0/@port.5" target="//@interimmodels.9/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link15" networkType="INTERNET" source="//@interimmodels.9/@designmodel/@host.0/@node.0/@port.2" target="//@interimmodels.9/@designmodel/@host.2/@node.0/@port.6"/>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="11" description="network route for connector:paywire between: ordersservice payment " nextModel="//@interimmodels.11" name="network-route">
    <designmodel name="inter11">
      <component name="ShopFrontend" type="client,broadcaster" deploymentnode="//@interimmodels.10/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface,LeastPriviledge">
        <port name="auth" role="//@interimmodels.10/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="checked"/>
        </port>
        <port name="browse" role="//@interimmodels.10/@designmodel/@connector.1/@role.0" type="request,OutboundPort">
          <events name="read"/>
        </port>
        <port name="order" role="//@interimmodels.10/@designmodel/@connector.9/@role.0" type="broadcast,OutboundPort">
          <events name="purchased"/>
        </port>
        <port name="shop" role="//@interimmodels.10/@designmodel/@connector.3/@role.0" type="request,OutboundPort">
          <events name="itemadded"/>
        </port>
      </component>
      <component name="CateloqueService" type="server" deploymentnode="//@interimmodels.10/@designmodel/@host.0/@node.1" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
        <port name="list" role="//@interimmodels.10/@designmodel/@connector.1/@role.1" type="response,InboundPort">
          <events name="query"/>
        </port>
      </component>
      <component name="UserService" type="server" deploymentnode="//@interimmodels.10/@designmodel/@host.1/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DefenseInDepth,DenialOfService">
        <port name="login" role="//@interimmodels.10/@designmodel/@connector.0/@role.1" type="response,InboundPort">
          <events name="signedon"/>
        </port>
      </component>
      <component name="OrdersService" type="client,server,listener,eventconsumer,readendpoint,datawriter,datareader" deploymentnode="//@interimmodels.10/@designmodel/@host.2/@node.0" criticalLevel="Low" securityCharacters="AttackSurface,LeastPriviledge,Compartmentalization,DenialOfService,DataTampering">
        <port name="postorder" role="//@interimmodels.10/@designmodel/@connector.4/@role.0 //@interimmodels.10/@designmodel/@connector.7/@role.0 //@interimmodels.10/@designmodel/@connector.10/@role.0" type="request,listen,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="check" next="//@interimmodels.10/@designmodel/@component.3/@port.0/@events.1"/>
          <events name="save"/>
        </port>
        <port name="get" role="//@interimmodels.10/@designmodel/@connector.2/@role.1 //@interimmodels.10/@designmodel/@connector.8/@role.0" type="response,read,OutboundPort,InboundPort,EventProcessorPort">
          <events name="ack"/>
        </port>
      </component>
      <component name="OrdersDB" type="repository,datastore" deploymentnode="//@interimmodels.10/@designmodel/@host.2/@node.1">
        <port name="writeorder" type="store,InboundPort,EventProcessorPort">
          <events name="orderwritten"/>
        </port>
        <port name="queryorder" role="//@interimmodels.10/@designmodel/@connector.8/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="orderreaded"/>
        </port>
      </component>
      <component name="CartsService" type="server" deploymentnode="//@interimmodels.10/@designmodel/@host.2/@node.0" securityCharacters="AttackSurface,DenialOfService,DataTampering">
        <port name="manage" role="//@interimmodels.10/@designmodel/@connector.3/@role.1" type="response,InboundPort">
          <events name="saveitem"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,datastore" deploymentnode="//@interimmodels.10/@designmodel/@host.1/@node.1" criticalLevel="High" securityCharacters="DefenseInDepth,Compartmentalization">
        <port name="pay" role="//@interimmodels.10/@designmodel/@connector.11/@role.1 //@interimmodels.10/@designmodel/@connector.10/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="paid"/>
        </port>
      </component>
      <component name="ShippingService" type="server,datawriter" deploymentnode="//@interimmodels.10/@designmodel/@host.3/@node.0" securityCharacters="Compartmentalization">
        <port name="postshipping" role="//@interimmodels.10/@designmodel/@connector.4/@role.1 //@interimmodels.10/@designmodel/@connector.6/@role.0" type="response,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="posted"/>
        </port>
      </component>
      <component name="ShippingWorker" type="readendpoint,datareader" deploymentnode="//@interimmodels.10/@designmodel/@host.3/@node.0">
        <port name="listqueue" role="//@interimmodels.10/@designmodel/@connector.5/@role.0" type="read,OutboundPort,EventProcessorPort">
          <events name="renderqueue"/>
        </port>
      </component>
      <component name="QueueDB" type="repository,datastore" deploymentnode="//@interimmodels.10/@designmodel/@host.3/@node.1">
        <port name="writequeue" role="//@interimmodels.10/@designmodel/@connector.6/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="queuewritten"/>
        </port>
        <port name="readqueue" role="//@interimmodels.10/@designmodel/@connector.5/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="queuereaded"/>
        </port>
      </component>
      <component name="ShopBackend" type="client" deploymentnode="//@interimmodels.10/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface">
        <port name="listorder" role="//@interimmodels.10/@designmodel/@connector.2/@role.0" type="request,OutboundPort">
          <events name="renderlist"/>
        </port>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="append" role="//@interimmodels.10/@designmodel/@connector.11/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <deploymentnode href="target.arch#//@host.4/@node.0"/>
      </component>
      <component name="OrderwireLog" type="eventlogger,datastore">
        <port name="logorderwire" role="//@interimmodels.10/@designmodel/@connector.9/@role.2" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <component name="ShippinglogwireCommandLog" type="commanddb,datastore">
        <port name="logshippinglogwire" role="//@interimmodels.10/@designmodel/@connector.6/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.3/@node.2"/>
      </component>
      <component name="OrderlogwireCommandLog" type="commanddb,datastore">
        <port name="logorderlogwire" role="//@interimmodels.10/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <connector name="userwire" type="CSConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.10/@designmodel/@connector.0"/>
      </connector>
      <connector name="cateloquewire" type="CSConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.1"/>
        <role name="responder" roletype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.10/@designmodel/@connector.1"/>
      </connector>
      <connector name="orderquerywire" type="CSConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.2"/>
        <role name="responder" roletype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.10/@designmodel/@connector.8/@role.0" connector="//@interimmodels.10/@designmodel/@connector.2"/>
      </connector>
      <connector name="cartwire" type="CSConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.3"/>
        <role name="responder" roletype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.10/@designmodel/@connector.3"/>
      </connector>
      <connector name="shippingwire" type="CSConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.10/@designmodel/@connector.6/@role.0" connector="//@interimmodels.10/@designmodel/@connector.4"/>
      </connector>
      <connector name="queuereadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.5"/>
        <role name="readstorage" roletype="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.10/@designmodel/@connector.5"/>
      </connector>
      <connector name="shippinglogwire" type="CRConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.6"/>
        <role name="readstore" roletype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.10/@designmodel/@connector.6"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.4/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.6"/>
        </role>
      </connector>
      <connector name="orderlogwire" type="CRConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.10/@designmodel/@connector.10/@role.0" connector="//@interimmodels.10/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.10/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.4/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="orderreadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.8"/>
        <role name="readstorage" roletype="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.10/@designmodel/@connector.8"/>
      </connector>
      <connector name="orderwire" type="ESConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.10/@designmodel/@archstyle.1/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.9"/>
        <role name="eventsubscriber" roletype="//@interimmodels.10/@designmodel/@archstyle.1/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.10/@designmodel/@connector.7/@role.0" connector="//@interimmodels.10/@designmodel/@connector.9"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.9"/>
        </role>
      </connector>
      <connector name="paywire" type="CSConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="writer" nextRoleExpr="//@interimmodels.10/@designmodel/@connector.4/@role.0" connector="//@interimmodels.10/@designmodel/@connector.10"/>
        <role name="responder" roletype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="writestorage" nextRoleExpr="//@interimmodels.10/@designmodel/@connector.11/@role.1" connector="//@interimmodels.10/@designmodel/@connector.10"/>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.10/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.10/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.10/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.10/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.10/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.10/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.10/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.10/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.10/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.10/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.10/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.4" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
            <event name="Skip"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.10/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.10/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.10/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.10/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.10/@designmodel/@archstyle.4/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.10/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.10/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.10/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.10/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.10/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.10/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.10/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.10/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.10/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.10/@designmodel" counterExample="" visitedStates="107592" verifyTime="3.4659128999999997" testport="//@interimmodels.10/@designmodel/@component.0/@port.3" traceExample="init -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_requester_process -> paywire_req!13 -> paywire_req?13 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!13 -> oraclepaywire_token?13 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!13 -> paywire_res?13 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!13 -> shippingwire_req?13 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!13 -> shippinglogwire_stmt?13 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!13 -> shippinglogwire_cmmd?13 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!13 -> shippingwire_res?13 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!13 -> orderlogwire_cmmd!13 -> orderlogwire_cmmd?13 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!67 -> cartwire_req?67 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!67 -> cartwire_res?67" exprText="[]  (ShopFrontend.shop.itemadded -> &lt;> CartsService.manage.saveitem)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.10/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.0/@port.3/@events.0" nextExpr="//@interimmodels.10/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.10/@designmodel" counterExample="" visitedStates="114718" verifyTime="3.8995352999999997" testport="//@interimmodels.10/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_requester_process -> paywire_req!62 -> paywire_req?62 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!62 -> oraclepaywire_token?62 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!62 -> paywire_res?62 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!62 -> shippingwire_req?62 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!62 -> shippinglogwire_stmt?62 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!62 -> shippinglogwire_cmmd?62 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!62 -> shippingwire_res?62 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!62 -> orderlogwire_cmmd!62 -> orderlogwire_cmmd?62 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!85 -> orderwire_pevt?85 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!85 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?85 -> orderwire_bevt!85 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (Payment.pay.paid -> &lt;> ShippingService.postshipping.posted)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.10/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.6/@port.0/@events.0" nextExpr="//@interimmodels.10/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.10/@designmodel" visitedStates="71252" verifyTime="2.2408072999999997" testport="//@interimmodels.10/@designmodel/@component.0/@port.3" traceExample="init -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_requester_process -> paywire_req!70 -> paywire_req?70 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!70 -> oraclepaywire_token?70 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!70 -> paywire_res?70 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!70 -> shippingwire_req?70 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!70 -> shippinglogwire_stmt?70 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!70 -> shippinglogwire_cmmd?70 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!70 -> shippingwire_res?70 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!70 -> orderlogwire_cmmd!70 -> orderlogwire_cmmd?70 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!29 -> cartwire_req?29 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!29 -> cartwire_res?29" exprText="[]  (OrdersService.postorder.save -> &lt;> Payment.pay.paid)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.10/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.3/@port.0/@events.1" nextExpr="//@interimmodels.10/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.10/@designmodel" counterExample="" visitedStates="107592" verifyTime="3.4107871" testport="//@interimmodels.10/@designmodel/@component.0/@port.0" traceExample="init -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_requester_process -> paywire_req!31 -> paywire_req?31 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!31 -> oraclepaywire_token?31 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!31 -> paywire_res?31 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!31 -> shippingwire_req?31 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!31 -> shippinglogwire_stmt?31 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!31 -> shippinglogwire_cmmd?31 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!31 -> shippingwire_res?31 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!31 -> orderlogwire_cmmd!31 -> orderlogwire_cmmd?31 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!89 -> userwire_req?89 -> UserService_userwire_responder_invoke -> UserService_login_signedon -> UserService_userwire_responder_process -> userwire_res!89 -> userwire_res?89" exprText="[]  (ShopFrontend.auth.checked -> &lt;> UserService.login.signedon)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.10/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.10/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.10/@designmodel" counterExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!62 -> cateloquewire_req?62 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!62 -> cateloquewire_res?62" visitedStates="177035" verifyTime="6.0910547" testport="//@interimmodels.10/@designmodel/@component.0/@port.1" traceExample="init -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_requester_process -> paywire_req!97 -> paywire_req?97 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!97 -> oraclepaywire_token?97 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!97 -> paywire_res?97 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!97 -> shippingwire_req?97 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!97 -> shippinglogwire_stmt?97 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!97 -> shippinglogwire_cmmd?97 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!97 -> shippingwire_res?97 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!97 -> orderlogwire_cmmd!97 -> orderlogwire_cmmd?97 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!52 -> cateloquewire_req?52 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!52 -> cateloquewire_res?52" exprText="[]  (&lt;> ShopFrontend.browse.read -> &lt;> CateloqueService.list.query)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.10/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.1/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.0/@port.1/@events.0" operator="EVENTUALLY" nextExpr="//@interimmodels.10/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop6" model="//@interimmodels.10/@designmodel" counterExample="" visitedStates="209610" verifyTime="6.7819398" testport="//@interimmodels.10/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!22 -> orderquerywire_req?22 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_reader_process -> orderreadwire_req!22 -> orderreadwire_req?22 -> OrdersDB_orderreadwire_readstorage_invoke -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstorage_process -> orderreadwire_res!22 -> orderreadwire_res?22 -> OrdersService_orderreadwire_reader_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!22 -> orderquerywire_res?22 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_requester_process -> paywire_req!58 -> paywire_req?58 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!58 -> oraclepaywire_token?58 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!58 -> paywire_res?58 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!58 -> shippingwire_req?58 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!58 -> shippinglogwire_stmt?58 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!58 -> shippinglogwire_cmmd?58 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!58 -> shippingwire_res?58 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!58 -> orderlogwire_cmmd!58 -> orderlogwire_cmmd?58 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist" exprText="[]  (ShopBackend.listorder.renderlist -> &lt;> OrdersDB.queryorder.orderreaded)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.10/@designmodel/@verifyProperty.5">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.10/@port.0/@events.0" nextExpr="//@interimmodels.10/@designmodel/@verifyProperty.5/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop7" model="//@interimmodels.10/@designmodel" valid="false" counterExample="init -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_requester_process -> paywire_req!12 -> paywire_req?12 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!12 -> oraclepaywire_token?12 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!12 -> paywire_res?12 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!12 -> shippingwire_req?12 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!12 -> shippinglogwire_stmt?12 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!12 -> shippinglogwire_cmmd?12 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!12 -> shippingwire_res?12 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!12 -> orderlogwire_cmmd!12 -> orderlogwire_cmmd?12 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!82 -> orderwire_pevt?82 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!82 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?82 -> orderwire_bevt!82 -> ShopFrontend_orderwire_eventpublisher_broadcast" visitedStates="177" verifyTime="0.029804399999999998" testport="//@interimmodels.10/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_postorder_check -> ShopFrontend_order_purchased -> OrdersService_postorder_save -> OrdersService_paywire_requester_process -> paywire_req!12 -> paywire_req?12 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!12 -> oraclepaywire_token?12 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!12 -> paywire_res?12 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!12 -> shippingwire_req?12 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!12 -> shippinglogwire_stmt?12 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!12 -> shippinglogwire_cmmd?12 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!12 -> shippingwire_res?12 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!12 -> orderlogwire_cmmd!12 -> orderlogwire_cmmd?12 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!82 -> orderwire_pevt?82 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!82 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?82 -> orderwire_bevt!82 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (ShopFrontend.order.purchased -> &lt;> OrdersService.postorder.save)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.10/@designmodel/@verifyProperty.6">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.3/@port.0/@events.1" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.10/@designmodel/@verifyProperty.6/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" visitedStates="201746" verifyTime="6.968846999999999" testport="//@interimmodels.10/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_requester_process -> paywire_req!22 -> paywire_req?22 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!22 -> oraclepaywire_token?22 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!22 -> paywire_res?22 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!22 -> shippingwire_req?22 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!22 -> shippinglogwire_stmt?22 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!22 -> shippinglogwire_cmmd?22 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!22 -> shippingwire_res?22 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!22 -> orderlogwire_cmmd!22 -> orderlogwire_cmmd?22 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!18 -> orderwire_pevt?18 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!18 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?18 -> orderwire_bevt!18 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (Payment.pay.paid-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.11"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-orderlogwire" visitedStates="216950" verifyTime="7.3076322" testport="//@interimmodels.10/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_requester_process -> paywire_req!22 -> paywire_req?22 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!22 -> oraclepaywire_token?22 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!22 -> paywire_res?22 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!22 -> shippingwire_req?22 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!22 -> shippinglogwire_stmt?22 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!22 -> shippinglogwire_cmmd?22 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!22 -> shippingwire_res?22 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!22 -> orderlogwire_cmmd!22 -> orderlogwire_cmmd?22 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!11 -> orderwire_pevt?11 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!11 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?11 -> orderwire_bevt!11 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (OrdersService.postorder.check-> &lt;> OrderlogwireCommandLog.orderlogwire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-orderwire" visitedStates="185604" verifyTime="6.3095114" testport="//@interimmodels.10/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_requester_process -> paywire_req!41 -> paywire_req?41 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!41 -> oraclepaywire_token?41 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!41 -> paywire_res?41 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!41 -> shippingwire_req?41 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!41 -> shippinglogwire_stmt?41 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!41 -> shippinglogwire_cmmd?41 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!41 -> shippingwire_res?41 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!41 -> orderlogwire_cmmd!41 -> orderlogwire_cmmd?41 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!58 -> orderwire_pevt?58 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!58 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?58 -> orderwire_bevt!58 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (ShopFrontend.order.purchased-> &lt;> OrderwireLog.orderwire.eventstore.persist)">
        <connector href="target.arch#//@connector.9"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-shippinglogwire" visitedStates="200574" verifyTime="6.859959099999999" testport="//@interimmodels.10/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_requester_process -> paywire_req!67 -> paywire_req?67 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!67 -> oraclepaywire_token?67 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!67 -> paywire_res?67 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!67 -> shippingwire_req?67 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!67 -> shippinglogwire_stmt?67 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!67 -> shippinglogwire_cmmd?67 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!67 -> shippingwire_res?67 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!67 -> orderlogwire_cmmd!67 -> orderlogwire_cmmd?67 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!23 -> orderwire_pevt?23 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!23 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?23 -> orderwire_bevt!23 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (ShippingService.postshipping.posted-> &lt;> ShippinglogwireCommandLog.shippinglogwire.commandstore.persist)">
        <connector href="target.arch#//@connector.6"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="CLOUD_PLATFORM">
        <node name="NodeJSContainer1" component="//@interimmodels.10/@designmodel/@component.0 //@interimmodels.10/@designmodel/@component.10">
          <port name="port" portNumber="15551" node="//@interimmodels.10/@designmodel/@host.0/@node.0" namedport="//@interimmodels.10/@designmodel/@component.0/@port.0"/>
          <port name="port" portNumber="15552" node="//@interimmodels.10/@designmodel/@host.0/@node.0" namedport="//@interimmodels.10/@designmodel/@component.0/@port.2"/>
          <port name="port" portNumber="15553" node="//@interimmodels.10/@designmodel/@host.0/@node.0" namedport="//@interimmodels.10/@designmodel/@component.10/@port.0"/>
          <port name="port" portNumber="15554" node="//@interimmodels.10/@designmodel/@host.0/@node.0" namedport="//@interimmodels.10/@designmodel/@component.0/@port.3"/>
          <port name="port" portNumber="15555" node="//@interimmodels.10/@designmodel/@host.0/@node.0" namedport="//@interimmodels.10/@designmodel/@component.0/@port.1"/>
        </node>
        <node name="GoContainer3" component="//@interimmodels.10/@designmodel/@component.1">
          <port name="port" portNumber="80" node="//@interimmodels.10/@designmodel/@host.0/@node.1" namedport="//@interimmodels.10/@designmodel/@component.1/@port.0" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="SecureServer">
        <node name="GoContainer1" component="//@interimmodels.10/@designmodel/@component.2">
          <port name="port" portNumber="80" node="//@interimmodels.10/@designmodel/@host.1/@node.0" namedport="//@interimmodels.10/@designmodel/@component.2/@port.0" hasFirewall="true"/>
        </node>
        <node name="GoContainer2" component="//@interimmodels.10/@designmodel/@component.6">
          <port name="port" portNumber="80" node="//@interimmodels.10/@designmodel/@host.1/@node.1" namedport="//@interimmodels.10/@designmodel/@component.6/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="LocalServer">
        <node name="JEEContainer1" component="//@interimmodels.10/@designmodel/@component.3 //@interimmodels.10/@designmodel/@component.5">
          <port name="port" portNumber="80" namedport="//@interimmodels.10/@designmodel/@component.3/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15561" node="//@interimmodels.10/@designmodel/@host.2/@node.0" namedport="//@interimmodels.10/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15562" node="//@interimmodels.10/@designmodel/@host.2/@node.0" namedport="//@interimmodels.10/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15563" node="//@interimmodels.10/@designmodel/@host.2/@node.0" namedport="//@interimmodels.10/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15564" node="//@interimmodels.10/@designmodel/@host.2/@node.0" namedport="//@interimmodels.10/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15566" node="//@interimmodels.10/@designmodel/@host.2/@node.0" namedport="//@interimmodels.10/@designmodel/@component.3/@port.1"/>
          <port name="port" portNumber="81" node="//@interimmodels.10/@designmodel/@host.2/@node.0" namedport="//@interimmodels.10/@designmodel/@component.3/@port.1"/>
        </node>
        <node name="MySQL1" component="//@interimmodels.10/@designmodel/@component.4">
          <port name="port" portNumber="3306" node="//@interimmodels.10/@designmodel/@host.2/@node.1" namedport="//@interimmodels.10/@designmodel/@component.4/@port.0 //@interimmodels.10/@designmodel/@component.4/@port.1"/>
        </node>
      </host>
      <host name="BackOfficeServer">
        <node name="JEEContainer4" component="//@interimmodels.10/@designmodel/@component.7 //@interimmodels.10/@designmodel/@component.8">
          <port name="port" portNumber="80" node="//@interimmodels.10/@designmodel/@host.3/@node.0" namedport="//@interimmodels.10/@designmodel/@component.7/@port.0" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15571" node="//@interimmodels.10/@designmodel/@host.3/@node.0" namedport="//@interimmodels.10/@designmodel/@component.7/@port.0"/>
          <port name="port" portNumber="15572" node="//@interimmodels.10/@designmodel/@host.3/@node.0" namedport="//@interimmodels.10/@designmodel/@component.7/@port.0"/>
        </node>
        <node name="MySQL2" component="//@interimmodels.10/@designmodel/@component.9">
          <port name="port" portNumber="3306" node="//@interimmodels.10/@designmodel/@host.3/@node.1" namedport="//@interimmodels.10/@designmodel/@component.9/@port.0 //@interimmodels.10/@designmodel/@component.9/@port.1"/>
        </node>
      </host>
      <link name="link2" linkType="HTTPS" networkType="INTERNET" source="//@interimmodels.10/@designmodel/@host.0/@node.0/@port.1" target="//@interimmodels.10/@designmodel/@host.2/@node.0/@port.0"/>
      <link name="link3" source="//@interimmodels.10/@designmodel/@host.2/@node.0/@port.1"/>
      <link name="link4" source="//@interimmodels.10/@designmodel/@host.2/@node.0/@port.2"/>
      <link name="link5" target="//@interimmodels.10/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link7" networkType="INTERNET" source="//@interimmodels.10/@designmodel/@host.0/@node.0/@port.3"/>
      <link name="link9" source="//@interimmodels.10/@designmodel/@host.0/@node.0/@port.4" target="//@interimmodels.10/@designmodel/@host.0/@node.1/@port.0"/>
      <link name="link11" source="//@interimmodels.10/@designmodel/@host.3/@node.0/@port.1"/>
      <link name="link12" source="//@interimmodels.10/@designmodel/@host.3/@node.0/@port.2"/>
      <link name="link13" target="//@interimmodels.10/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link14" target="//@interimmodels.10/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link16" source="//@interimmodels.10/@designmodel/@host.2/@node.0/@port.5" target="//@interimmodels.10/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link15" networkType="INTERNET" source="//@interimmodels.10/@designmodel/@host.0/@node.0/@port.2" target="//@interimmodels.10/@designmodel/@host.2/@node.0/@port.6"/>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="12" description="network route for connector:queuereadwire between: shippingworker queuedb " nextModel="//@interimmodels.12" name="network-route">
    <designmodel name="inter12">
      <component name="ShopFrontend" type="client,broadcaster" deploymentnode="//@interimmodels.11/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface,LeastPriviledge">
        <port name="auth" role="//@interimmodels.11/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="checked"/>
        </port>
        <port name="browse" role="//@interimmodels.11/@designmodel/@connector.1/@role.0" type="request,OutboundPort">
          <events name="read"/>
        </port>
        <port name="order" role="//@interimmodels.11/@designmodel/@connector.9/@role.0" type="broadcast,OutboundPort">
          <events name="purchased"/>
        </port>
        <port name="shop" role="//@interimmodels.11/@designmodel/@connector.3/@role.0" type="request,OutboundPort">
          <events name="itemadded"/>
        </port>
      </component>
      <component name="CateloqueService" type="server" deploymentnode="//@interimmodels.11/@designmodel/@host.0/@node.1" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
        <port name="list" role="//@interimmodels.11/@designmodel/@connector.1/@role.1" type="response,InboundPort">
          <events name="query"/>
        </port>
      </component>
      <component name="UserService" type="server" deploymentnode="//@interimmodels.11/@designmodel/@host.1/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DefenseInDepth,DenialOfService">
        <port name="login" role="//@interimmodels.11/@designmodel/@connector.0/@role.1" type="response,InboundPort">
          <events name="signedon"/>
        </port>
      </component>
      <component name="OrdersService" type="client,server,listener,eventconsumer,readendpoint,datawriter,datareader" deploymentnode="//@interimmodels.11/@designmodel/@host.2/@node.0" criticalLevel="Low" securityCharacters="AttackSurface,LeastPriviledge,Compartmentalization,DenialOfService,DataTampering">
        <port name="postorder" role="//@interimmodels.11/@designmodel/@connector.4/@role.0 //@interimmodels.11/@designmodel/@connector.7/@role.0 //@interimmodels.11/@designmodel/@connector.10/@role.0" type="request,listen,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="check" next="//@interimmodels.11/@designmodel/@component.3/@port.0/@events.1"/>
          <events name="save"/>
        </port>
        <port name="get" role="//@interimmodels.11/@designmodel/@connector.2/@role.1 //@interimmodels.11/@designmodel/@connector.8/@role.0" type="response,read,OutboundPort,InboundPort,EventProcessorPort">
          <events name="ack"/>
        </port>
      </component>
      <component name="OrdersDB" type="repository,datastore" deploymentnode="//@interimmodels.11/@designmodel/@host.2/@node.1">
        <port name="writeorder" type="store,InboundPort,EventProcessorPort">
          <events name="orderwritten"/>
        </port>
        <port name="queryorder" role="//@interimmodels.11/@designmodel/@connector.8/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="orderreaded"/>
        </port>
      </component>
      <component name="CartsService" type="server" deploymentnode="//@interimmodels.11/@designmodel/@host.2/@node.0" securityCharacters="AttackSurface,DenialOfService,DataTampering">
        <port name="manage" role="//@interimmodels.11/@designmodel/@connector.3/@role.1" type="response,InboundPort">
          <events name="saveitem"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,datastore" deploymentnode="//@interimmodels.11/@designmodel/@host.1/@node.1" criticalLevel="High" securityCharacters="DefenseInDepth,Compartmentalization">
        <port name="pay" role="//@interimmodels.11/@designmodel/@connector.11/@role.1 //@interimmodels.11/@designmodel/@connector.10/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="paid"/>
        </port>
      </component>
      <component name="ShippingService" type="server,datawriter" deploymentnode="//@interimmodels.11/@designmodel/@host.3/@node.0" securityCharacters="Compartmentalization">
        <port name="postshipping" role="//@interimmodels.11/@designmodel/@connector.4/@role.1 //@interimmodels.11/@designmodel/@connector.6/@role.0" type="response,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="posted"/>
        </port>
      </component>
      <component name="ShippingWorker" type="readendpoint,datareader" deploymentnode="//@interimmodels.11/@designmodel/@host.3/@node.0">
        <port name="listqueue" role="//@interimmodels.11/@designmodel/@connector.5/@role.0" type="read,OutboundPort,EventProcessorPort">
          <events name="renderqueue"/>
        </port>
      </component>
      <component name="QueueDB" type="repository,datastore" deploymentnode="//@interimmodels.11/@designmodel/@host.3/@node.1">
        <port name="writequeue" role="//@interimmodels.11/@designmodel/@connector.6/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="queuewritten"/>
        </port>
        <port name="readqueue" role="//@interimmodels.11/@designmodel/@connector.5/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="queuereaded"/>
        </port>
      </component>
      <component name="ShopBackend" type="client" deploymentnode="//@interimmodels.11/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface">
        <port name="listorder" role="//@interimmodels.11/@designmodel/@connector.2/@role.0" type="request,OutboundPort">
          <events name="renderlist"/>
        </port>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="append" role="//@interimmodels.11/@designmodel/@connector.11/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <deploymentnode href="target.arch#//@host.4/@node.0"/>
      </component>
      <component name="OrderwireLog" type="eventlogger,datastore">
        <port name="logorderwire" role="//@interimmodels.11/@designmodel/@connector.9/@role.2" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <component name="ShippinglogwireCommandLog" type="commanddb,datastore">
        <port name="logshippinglogwire" role="//@interimmodels.11/@designmodel/@connector.6/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.3/@node.2"/>
      </component>
      <component name="OrderlogwireCommandLog" type="commanddb,datastore">
        <port name="logorderlogwire" role="//@interimmodels.11/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <connector name="userwire" type="CSConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.11/@designmodel/@connector.0"/>
      </connector>
      <connector name="cateloquewire" type="CSConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.1"/>
        <role name="responder" roletype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.11/@designmodel/@connector.1"/>
      </connector>
      <connector name="orderquerywire" type="CSConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.2"/>
        <role name="responder" roletype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.11/@designmodel/@connector.8/@role.0" connector="//@interimmodels.11/@designmodel/@connector.2"/>
      </connector>
      <connector name="cartwire" type="CSConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.3"/>
        <role name="responder" roletype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.11/@designmodel/@connector.3"/>
      </connector>
      <connector name="shippingwire" type="CSConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.11/@designmodel/@connector.6/@role.0" connector="//@interimmodels.11/@designmodel/@connector.4"/>
      </connector>
      <connector name="queuereadwire" type="QRConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0">
        <role name="querier" roletype="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.5"/>
        <role name="readstore" roletype="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.11/@designmodel/@connector.5"/>
      </connector>
      <connector name="shippinglogwire" type="CRConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.6"/>
        <role name="readstore" roletype="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.11/@designmodel/@connector.6"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.4/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.6"/>
        </role>
      </connector>
      <connector name="orderlogwire" type="CRConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.11/@designmodel/@connector.10/@role.0" connector="//@interimmodels.11/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.11/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.4/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="orderreadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.8"/>
        <role name="readstorage" roletype="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.11/@designmodel/@connector.8"/>
      </connector>
      <connector name="orderwire" type="ESConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.11/@designmodel/@archstyle.1/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.9"/>
        <role name="eventsubscriber" roletype="//@interimmodels.11/@designmodel/@archstyle.1/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.11/@designmodel/@connector.7/@role.0" connector="//@interimmodels.11/@designmodel/@connector.9"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.9"/>
        </role>
      </connector>
      <connector name="paywire" type="CSConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="writer" nextRoleExpr="//@interimmodels.11/@designmodel/@connector.4/@role.0" connector="//@interimmodels.11/@designmodel/@connector.10"/>
        <role name="responder" roletype="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="writestorage" nextRoleExpr="//@interimmodels.11/@designmodel/@connector.11/@role.1" connector="//@interimmodels.11/@designmodel/@connector.10"/>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.11/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.11/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.11/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.11/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.11/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.11/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.11/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.11/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.11/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.11/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.11/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.4" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
            <event name="Skip"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.11/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.11/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.11/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.11/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.11/@designmodel/@archstyle.4/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.11/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.11/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.11/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.11/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.11/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.11/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.11/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.11/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.11/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.11/@designmodel" counterExample="" visitedStates="107592" verifyTime="3.6196156999999998" testport="//@interimmodels.11/@designmodel/@component.0/@port.3" traceExample="init -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_requester_process -> paywire_req!28 -> paywire_req?28 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!28 -> oraclepaywire_token?28 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!28 -> paywire_res?28 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!28 -> shippingwire_req?28 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!28 -> shippinglogwire_stmt?28 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!28 -> shippinglogwire_cmmd?28 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!28 -> shippingwire_res?28 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!28 -> orderlogwire_cmmd!28 -> orderlogwire_cmmd?28 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!56 -> cartwire_req?56 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!56 -> cartwire_res?56" exprText="[]  (ShopFrontend.shop.itemadded -> &lt;> CartsService.manage.saveitem)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.11/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.0/@port.3/@events.0" nextExpr="//@interimmodels.11/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.11/@designmodel" counterExample="" visitedStates="114718" verifyTime="4.0333612" testport="//@interimmodels.11/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_requester_process -> paywire_req!17 -> paywire_req?17 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!17 -> oraclepaywire_token?17 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!17 -> paywire_res?17 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!17 -> shippingwire_req?17 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!17 -> shippinglogwire_stmt?17 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!17 -> shippinglogwire_cmmd?17 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!17 -> shippingwire_res?17 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!17 -> orderlogwire_cmmd!17 -> orderlogwire_cmmd?17 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!98 -> orderwire_pevt?98 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!98 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?98 -> orderwire_bevt!98 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (Payment.pay.paid -> &lt;> ShippingService.postshipping.posted)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.11/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.6/@port.0/@events.0" nextExpr="//@interimmodels.11/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.11/@designmodel" visitedStates="71252" verifyTime="2.3106328" testport="//@interimmodels.11/@designmodel/@component.0/@port.3" traceExample="init -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_requester_process -> paywire_req!21 -> paywire_req?21 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!21 -> oraclepaywire_token?21 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!21 -> paywire_res?21 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!21 -> shippingwire_req?21 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!21 -> shippinglogwire_stmt?21 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!21 -> shippinglogwire_cmmd?21 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!21 -> shippingwire_res?21 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!21 -> orderlogwire_cmmd!21 -> orderlogwire_cmmd?21 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!75 -> cartwire_req?75 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!75 -> cartwire_res?75" exprText="[]  (OrdersService.postorder.save -> &lt;> Payment.pay.paid)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.11/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.3/@port.0/@events.1" nextExpr="//@interimmodels.11/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.11/@designmodel" counterExample="" visitedStates="15" verifyTime="0.005777099999999999" testport="//@interimmodels.11/@designmodel/@component.0/@port.0" traceExample="init -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!78 -> userwire_req?78 -> UserService_userwire_responder_invoke -> UserService_login_signedon -> UserService_userwire_responder_process -> userwire_res!78 -> userwire_res?78" exprText="[]  (ShopFrontend.auth.checked -> &lt;> UserService.login.signedon)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.11/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.11/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.11/@designmodel" counterExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!62 -> cateloquewire_req?62 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!62 -> cateloquewire_res?62" visitedStates="177035" verifyTime="5.927539599999999" testport="//@interimmodels.11/@designmodel/@component.0/@port.1" traceExample="init -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_requester_process -> paywire_req!75 -> paywire_req?75 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!75 -> oraclepaywire_token?75 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!75 -> paywire_res?75 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!75 -> shippingwire_req?75 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!75 -> shippinglogwire_stmt?75 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!75 -> shippinglogwire_cmmd?75 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!75 -> shippingwire_res?75 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!75 -> orderlogwire_cmmd!75 -> orderlogwire_cmmd?75 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!92 -> cateloquewire_req?92 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!92 -> cateloquewire_res?92" exprText="[]  (&lt;> ShopFrontend.browse.read -> &lt;> CateloqueService.list.query)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.11/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.1/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.0/@port.1/@events.0" operator="EVENTUALLY" nextExpr="//@interimmodels.11/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop6" model="//@interimmodels.11/@designmodel" counterExample="" visitedStates="209610" verifyTime="6.710428599999999" testport="//@interimmodels.11/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!22 -> orderquerywire_req?22 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_reader_process -> orderreadwire_req!22 -> orderreadwire_req?22 -> OrdersDB_orderreadwire_readstorage_invoke -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstorage_process -> orderreadwire_res!22 -> orderreadwire_res?22 -> OrdersService_orderreadwire_reader_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!22 -> orderquerywire_res?22 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_requester_process -> paywire_req!68 -> paywire_req?68 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!68 -> oraclepaywire_token?68 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!68 -> paywire_res?68 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!68 -> shippingwire_req?68 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!68 -> shippinglogwire_stmt?68 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!68 -> shippinglogwire_cmmd?68 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!68 -> shippingwire_res?68 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!68 -> orderlogwire_cmmd!68 -> orderlogwire_cmmd?68 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist" exprText="[]  (ShopBackend.listorder.renderlist -> &lt;> OrdersDB.queryorder.orderreaded)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.11/@designmodel/@verifyProperty.5">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.10/@port.0/@events.0" nextExpr="//@interimmodels.11/@designmodel/@verifyProperty.5/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop7" model="//@interimmodels.11/@designmodel" valid="false" counterExample="init -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_requester_process -> paywire_req!24 -> paywire_req?24 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!24 -> oraclepaywire_token?24 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!24 -> paywire_res?24 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!24 -> shippingwire_req?24 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!24 -> shippinglogwire_stmt?24 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!24 -> shippinglogwire_cmmd?24 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!24 -> shippingwire_res?24 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!24 -> orderlogwire_cmmd!24 -> orderlogwire_cmmd?24 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!76 -> orderwire_pevt?76 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!76 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?76 -> orderwire_bevt!76 -> ShopFrontend_orderwire_eventpublisher_broadcast" visitedStates="177" verifyTime="0.0274142" testport="//@interimmodels.11/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_postorder_check -> ShopFrontend_order_purchased -> OrdersService_postorder_save -> OrdersService_paywire_requester_process -> paywire_req!24 -> paywire_req?24 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!24 -> oraclepaywire_token?24 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!24 -> paywire_res?24 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!24 -> shippingwire_req?24 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!24 -> shippinglogwire_stmt?24 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!24 -> shippinglogwire_cmmd?24 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!24 -> shippingwire_res?24 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!24 -> orderlogwire_cmmd!24 -> orderlogwire_cmmd?24 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!76 -> orderwire_pevt?76 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!76 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?76 -> orderwire_bevt!76 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (ShopFrontend.order.purchased -> &lt;> OrdersService.postorder.save)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.11/@designmodel/@verifyProperty.6">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.3/@port.0/@events.1" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.11/@designmodel/@verifyProperty.6/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" visitedStates="201746" verifyTime="7.5500924" testport="//@interimmodels.11/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_requester_process -> paywire_req!98 -> paywire_req?98 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!98 -> oraclepaywire_token?98 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!98 -> paywire_res?98 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!98 -> shippingwire_req?98 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!98 -> shippinglogwire_stmt?98 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!98 -> shippinglogwire_cmmd?98 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!98 -> shippingwire_res?98 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!98 -> orderlogwire_cmmd!98 -> orderlogwire_cmmd?98 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!68 -> orderwire_pevt?68 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!68 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?68 -> orderwire_bevt!68 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (Payment.pay.paid-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.11"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-orderlogwire" visitedStates="216950" verifyTime="7.287627499999999" testport="//@interimmodels.11/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_requester_process -> paywire_req!75 -> paywire_req?75 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!75 -> oraclepaywire_token?75 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!75 -> paywire_res?75 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!75 -> shippingwire_req?75 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!75 -> shippinglogwire_stmt?75 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!75 -> shippinglogwire_cmmd?75 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!75 -> shippingwire_res?75 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!75 -> orderlogwire_cmmd!75 -> orderlogwire_cmmd?75 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!59 -> orderwire_pevt?59 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!59 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?59 -> orderwire_bevt!59 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (OrdersService.postorder.check-> &lt;> OrderlogwireCommandLog.orderlogwire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-orderwire" visitedStates="185604" verifyTime="6.2187111999999996" testport="//@interimmodels.11/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_requester_process -> paywire_req!14 -> paywire_req?14 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!14 -> oraclepaywire_token?14 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!14 -> paywire_res?14 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!14 -> shippingwire_req?14 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!14 -> shippinglogwire_stmt?14 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!14 -> shippinglogwire_cmmd?14 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!14 -> shippingwire_res?14 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!14 -> orderlogwire_cmmd!14 -> orderlogwire_cmmd?14 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!44 -> orderwire_pevt?44 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!44 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?44 -> orderwire_bevt!44 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (ShopFrontend.order.purchased-> &lt;> OrderwireLog.orderwire.eventstore.persist)">
        <connector href="target.arch#//@connector.9"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-shippinglogwire" visitedStates="200574" verifyTime="6.958144099999999" testport="//@interimmodels.11/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_requester_process -> paywire_req!35 -> paywire_req?35 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!35 -> oraclepaywire_token?35 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!35 -> paywire_res?35 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!35 -> shippingwire_req?35 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!35 -> shippinglogwire_stmt?35 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!35 -> shippinglogwire_cmmd?35 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!35 -> shippingwire_res?35 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!35 -> orderlogwire_cmmd!35 -> orderlogwire_cmmd?35 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!49 -> orderwire_pevt?49 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!49 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?49 -> orderwire_bevt!49 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (ShippingService.postshipping.posted-> &lt;> ShippinglogwireCommandLog.shippinglogwire.commandstore.persist)">
        <connector href="target.arch#//@connector.6"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-query-queuereadwire" visitedStates="100305" verifyTime="3.3399110999999997" testport="//@interimmodels.11/@designmodel/@component.8/@port.0" traceExample="init -> ShippingWorker_listqueue_renderqueue -> ShippingWorker_queuereadwire_querier_process -> queuereadwire_stmt!13 -> queuereadwire_stmt?13 -> QueueDB_readqueue_queuereaded -> QueueDB_queuereadwire_readstore_process -> queuereadwire_res!13 -> queuereadwire_res?13 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_requester_process -> paywire_req!19 -> paywire_req?19 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!19 -> oraclepaywire_token?19 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!19 -> paywire_res?19 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!19 -> shippingwire_req?19 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!19 -> shippinglogwire_stmt?19 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!19 -> shippinglogwire_cmmd?19 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!19 -> shippingwire_res?19 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!19 -> orderlogwire_cmmd!19 -> orderlogwire_cmmd?19 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist" exprText="[] (ShippingWorker.listqueue.renderqueue-> &lt;> QueueDB.queuereadwire.readstore.process)">
        <connector href="target.arch#//@connector.5"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="CLOUD_PLATFORM">
        <node name="NodeJSContainer1" component="//@interimmodels.11/@designmodel/@component.0 //@interimmodels.11/@designmodel/@component.10">
          <port name="port" portNumber="15551" node="//@interimmodels.11/@designmodel/@host.0/@node.0" namedport="//@interimmodels.11/@designmodel/@component.0/@port.0"/>
          <port name="port" portNumber="15552" node="//@interimmodels.11/@designmodel/@host.0/@node.0" namedport="//@interimmodels.11/@designmodel/@component.0/@port.2"/>
          <port name="port" portNumber="15553" node="//@interimmodels.11/@designmodel/@host.0/@node.0" namedport="//@interimmodels.11/@designmodel/@component.10/@port.0"/>
          <port name="port" portNumber="15554" node="//@interimmodels.11/@designmodel/@host.0/@node.0" namedport="//@interimmodels.11/@designmodel/@component.0/@port.3"/>
          <port name="port" portNumber="15555" node="//@interimmodels.11/@designmodel/@host.0/@node.0" namedport="//@interimmodels.11/@designmodel/@component.0/@port.1"/>
        </node>
        <node name="GoContainer3" component="//@interimmodels.11/@designmodel/@component.1">
          <port name="port" portNumber="80" node="//@interimmodels.11/@designmodel/@host.0/@node.1" namedport="//@interimmodels.11/@designmodel/@component.1/@port.0" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="SecureServer">
        <node name="GoContainer1" component="//@interimmodels.11/@designmodel/@component.2">
          <port name="port" portNumber="80" node="//@interimmodels.11/@designmodel/@host.1/@node.0" namedport="//@interimmodels.11/@designmodel/@component.2/@port.0" hasFirewall="true"/>
        </node>
        <node name="GoContainer2" component="//@interimmodels.11/@designmodel/@component.6">
          <port name="port" portNumber="80" node="//@interimmodels.11/@designmodel/@host.1/@node.1" namedport="//@interimmodels.11/@designmodel/@component.6/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="LocalServer">
        <node name="JEEContainer1" component="//@interimmodels.11/@designmodel/@component.3 //@interimmodels.11/@designmodel/@component.5">
          <port name="port" portNumber="80" namedport="//@interimmodels.11/@designmodel/@component.3/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15561" node="//@interimmodels.11/@designmodel/@host.2/@node.0" namedport="//@interimmodels.11/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15562" node="//@interimmodels.11/@designmodel/@host.2/@node.0" namedport="//@interimmodels.11/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15563" node="//@interimmodels.11/@designmodel/@host.2/@node.0" namedport="//@interimmodels.11/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15564" node="//@interimmodels.11/@designmodel/@host.2/@node.0" namedport="//@interimmodels.11/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15566" node="//@interimmodels.11/@designmodel/@host.2/@node.0" namedport="//@interimmodels.11/@designmodel/@component.3/@port.1"/>
          <port name="port" portNumber="81" node="//@interimmodels.11/@designmodel/@host.2/@node.0" namedport="//@interimmodels.11/@designmodel/@component.3/@port.1"/>
        </node>
        <node name="MySQL1" component="//@interimmodels.11/@designmodel/@component.4">
          <port name="port" portNumber="3306" node="//@interimmodels.11/@designmodel/@host.2/@node.1" namedport="//@interimmodels.11/@designmodel/@component.4/@port.0 //@interimmodels.11/@designmodel/@component.4/@port.1"/>
        </node>
      </host>
      <host name="BackOfficeServer">
        <node name="JEEContainer4" component="//@interimmodels.11/@designmodel/@component.7 //@interimmodels.11/@designmodel/@component.8">
          <port name="port" portNumber="80" node="//@interimmodels.11/@designmodel/@host.3/@node.0" namedport="//@interimmodels.11/@designmodel/@component.7/@port.0" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15571" node="//@interimmodels.11/@designmodel/@host.3/@node.0" namedport="//@interimmodels.11/@designmodel/@component.7/@port.0"/>
          <port name="port" portNumber="15572" node="//@interimmodels.11/@designmodel/@host.3/@node.0" namedport="//@interimmodels.11/@designmodel/@component.7/@port.0"/>
        </node>
        <node name="MySQL2" component="//@interimmodels.11/@designmodel/@component.9">
          <port name="port" portNumber="3306" node="//@interimmodels.11/@designmodel/@host.3/@node.1" namedport="//@interimmodels.11/@designmodel/@component.9/@port.0 //@interimmodels.11/@designmodel/@component.9/@port.1"/>
        </node>
      </host>
      <link name="link2" linkType="HTTPS" networkType="INTERNET" source="//@interimmodels.11/@designmodel/@host.0/@node.0/@port.1" target="//@interimmodels.11/@designmodel/@host.2/@node.0/@port.0"/>
      <link name="link3" source="//@interimmodels.11/@designmodel/@host.2/@node.0/@port.1"/>
      <link name="link4" source="//@interimmodels.11/@designmodel/@host.2/@node.0/@port.2"/>
      <link name="link5" target="//@interimmodels.11/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link7" networkType="INTERNET" source="//@interimmodels.11/@designmodel/@host.0/@node.0/@port.3"/>
      <link name="link9" source="//@interimmodels.11/@designmodel/@host.0/@node.0/@port.4" target="//@interimmodels.11/@designmodel/@host.0/@node.1/@port.0"/>
      <link name="link11" source="//@interimmodels.11/@designmodel/@host.3/@node.0/@port.1"/>
      <link name="link12" source="//@interimmodels.11/@designmodel/@host.3/@node.0/@port.2"/>
      <link name="link13" target="//@interimmodels.11/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link14" target="//@interimmodels.11/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link16" source="//@interimmodels.11/@designmodel/@host.2/@node.0/@port.5" target="//@interimmodels.11/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link15" networkType="INTERNET" source="//@interimmodels.11/@designmodel/@host.0/@node.0/@port.2" target="//@interimmodels.11/@designmodel/@host.2/@node.0/@port.6"/>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="13" description="network route for connector:orderreadwire between: ordersservice ordersdb " nextModel="//@interimmodels.13" name="network-route">
    <designmodel name="inter13">
      <component name="ShopFrontend" type="client,broadcaster" deploymentnode="//@interimmodels.12/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface,LeastPriviledge">
        <port name="auth" role="//@interimmodels.12/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="checked"/>
        </port>
        <port name="browse" role="//@interimmodels.12/@designmodel/@connector.1/@role.0" type="request,OutboundPort">
          <events name="read"/>
        </port>
        <port name="order" role="//@interimmodels.12/@designmodel/@connector.9/@role.0" type="broadcast,OutboundPort">
          <events name="purchased"/>
        </port>
        <port name="shop" role="//@interimmodels.12/@designmodel/@connector.3/@role.0" type="request,OutboundPort">
          <events name="itemadded"/>
        </port>
      </component>
      <component name="CateloqueService" type="server" deploymentnode="//@interimmodels.12/@designmodel/@host.0/@node.1" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
        <port name="list" role="//@interimmodels.12/@designmodel/@connector.1/@role.1" type="response,InboundPort">
          <events name="query"/>
        </port>
      </component>
      <component name="UserService" type="server" deploymentnode="//@interimmodels.12/@designmodel/@host.1/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DefenseInDepth,DenialOfService">
        <port name="login" role="//@interimmodels.12/@designmodel/@connector.0/@role.1" type="response,InboundPort">
          <events name="signedon"/>
        </port>
      </component>
      <component name="OrdersService" type="client,server,listener,eventconsumer,readendpoint,datawriter,datareader" deploymentnode="//@interimmodels.12/@designmodel/@host.2/@node.0" criticalLevel="Low" securityCharacters="AttackSurface,LeastPriviledge,Compartmentalization,DenialOfService,DataTampering">
        <port name="postorder" role="//@interimmodels.12/@designmodel/@connector.4/@role.0 //@interimmodels.12/@designmodel/@connector.7/@role.0 //@interimmodels.12/@designmodel/@connector.10/@role.0" type="request,listen,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="check" next="//@interimmodels.12/@designmodel/@component.3/@port.0/@events.1"/>
          <events name="save"/>
        </port>
        <port name="get" role="//@interimmodels.12/@designmodel/@connector.2/@role.1 //@interimmodels.12/@designmodel/@connector.8/@role.0" type="response,read,OutboundPort,InboundPort,EventProcessorPort">
          <events name="ack"/>
        </port>
      </component>
      <component name="OrdersDB" type="repository,datastore" deploymentnode="//@interimmodels.12/@designmodel/@host.2/@node.1">
        <port name="writeorder" type="store,InboundPort,EventProcessorPort">
          <events name="orderwritten"/>
        </port>
        <port name="queryorder" role="//@interimmodels.12/@designmodel/@connector.8/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="orderreaded"/>
        </port>
      </component>
      <component name="CartsService" type="server" deploymentnode="//@interimmodels.12/@designmodel/@host.2/@node.0" securityCharacters="AttackSurface,DenialOfService,DataTampering">
        <port name="manage" role="//@interimmodels.12/@designmodel/@connector.3/@role.1" type="response,InboundPort">
          <events name="saveitem"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,datastore" deploymentnode="//@interimmodels.12/@designmodel/@host.1/@node.1" criticalLevel="High" securityCharacters="DefenseInDepth,Compartmentalization">
        <port name="pay" role="//@interimmodels.12/@designmodel/@connector.11/@role.1 //@interimmodels.12/@designmodel/@connector.10/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="paid"/>
        </port>
      </component>
      <component name="ShippingService" type="server,datawriter" deploymentnode="//@interimmodels.12/@designmodel/@host.3/@node.0" securityCharacters="Compartmentalization">
        <port name="postshipping" role="//@interimmodels.12/@designmodel/@connector.4/@role.1 //@interimmodels.12/@designmodel/@connector.6/@role.0" type="response,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="posted"/>
        </port>
      </component>
      <component name="ShippingWorker" type="readendpoint,datareader" deploymentnode="//@interimmodels.12/@designmodel/@host.3/@node.0">
        <port name="listqueue" role="//@interimmodels.12/@designmodel/@connector.5/@role.0" type="read,OutboundPort,EventProcessorPort">
          <events name="renderqueue"/>
        </port>
      </component>
      <component name="QueueDB" type="repository,datastore" deploymentnode="//@interimmodels.12/@designmodel/@host.3/@node.1">
        <port name="writequeue" role="//@interimmodels.12/@designmodel/@connector.6/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="queuewritten"/>
        </port>
        <port name="readqueue" role="//@interimmodels.12/@designmodel/@connector.5/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="queuereaded"/>
        </port>
      </component>
      <component name="ShopBackend" type="client" deploymentnode="//@interimmodels.12/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface">
        <port name="listorder" role="//@interimmodels.12/@designmodel/@connector.2/@role.0" type="request,OutboundPort">
          <events name="renderlist"/>
        </port>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="append" role="//@interimmodels.12/@designmodel/@connector.11/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <deploymentnode href="target.arch#//@host.4/@node.0"/>
      </component>
      <component name="OrderwireLog" type="eventlogger,datastore">
        <port name="logorderwire" role="//@interimmodels.12/@designmodel/@connector.9/@role.2" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <component name="ShippinglogwireCommandLog" type="commanddb,datastore">
        <port name="logshippinglogwire" role="//@interimmodels.12/@designmodel/@connector.6/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.3/@node.2"/>
      </component>
      <component name="OrderlogwireCommandLog" type="commanddb,datastore">
        <port name="logorderlogwire" role="//@interimmodels.12/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <connector name="userwire" type="CSConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.12/@designmodel/@connector.0"/>
      </connector>
      <connector name="cateloquewire" type="CSConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.1"/>
        <role name="responder" roletype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.12/@designmodel/@connector.1"/>
      </connector>
      <connector name="orderquerywire" type="CSConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.2"/>
        <role name="responder" roletype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.12/@designmodel/@connector.8/@role.0" connector="//@interimmodels.12/@designmodel/@connector.2"/>
      </connector>
      <connector name="cartwire" type="CSConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.3"/>
        <role name="responder" roletype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.12/@designmodel/@connector.3"/>
      </connector>
      <connector name="shippingwire" type="CSConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.12/@designmodel/@connector.6/@role.0" connector="//@interimmodels.12/@designmodel/@connector.4"/>
      </connector>
      <connector name="queuereadwire" type="QRConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0">
        <role name="querier" roletype="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.5"/>
        <role name="readstore" roletype="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.12/@designmodel/@connector.5"/>
      </connector>
      <connector name="shippinglogwire" type="CRConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.6"/>
        <role name="readstore" roletype="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.12/@designmodel/@connector.6"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.4/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.6"/>
        </role>
      </connector>
      <connector name="orderlogwire" type="CRConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.12/@designmodel/@connector.10/@role.0" connector="//@interimmodels.12/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.12/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.4/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="orderreadwire" type="QRConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0">
        <role name="querier" roletype="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.8"/>
        <role name="readstore" roletype="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.12/@designmodel/@connector.8"/>
      </connector>
      <connector name="orderwire" type="ESConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.12/@designmodel/@archstyle.1/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.9"/>
        <role name="eventsubscriber" roletype="//@interimmodels.12/@designmodel/@archstyle.1/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.12/@designmodel/@connector.7/@role.0" connector="//@interimmodels.12/@designmodel/@connector.9"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.9"/>
        </role>
      </connector>
      <connector name="paywire" type="CSConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="writer" nextRoleExpr="//@interimmodels.12/@designmodel/@connector.4/@role.0" connector="//@interimmodels.12/@designmodel/@connector.10"/>
        <role name="responder" roletype="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="writestorage" nextRoleExpr="//@interimmodels.12/@designmodel/@connector.11/@role.1" connector="//@interimmodels.12/@designmodel/@connector.10"/>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.12/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.12/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.12/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.12/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.12/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.12/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.12/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.12/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.12/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.12/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.12/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.4" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
            <event name="Skip"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.12/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.12/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.12/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.12/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.12/@designmodel/@archstyle.4/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.12/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.12/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.12/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.12/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.12/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.12/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.12/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.12/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.12/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.12/@designmodel" counterExample="" visitedStates="107592" verifyTime="3.4298614" testport="//@interimmodels.12/@designmodel/@component.0/@port.3" traceExample="init -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_requester_process -> paywire_req!84 -> paywire_req?84 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!84 -> oraclepaywire_token?84 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!84 -> paywire_res?84 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!84 -> shippingwire_req?84 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!84 -> shippinglogwire_stmt?84 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!84 -> shippinglogwire_cmmd?84 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!84 -> shippingwire_res?84 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!84 -> orderlogwire_cmmd!84 -> orderlogwire_cmmd?84 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!20 -> cartwire_req?20 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!20 -> cartwire_res?20" exprText="[]  (ShopFrontend.shop.itemadded -> &lt;> CartsService.manage.saveitem)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.12/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.0/@port.3/@events.0" nextExpr="//@interimmodels.12/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.12/@designmodel" counterExample="" visitedStates="114718" verifyTime="3.9363675" testport="//@interimmodels.12/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_requester_process -> paywire_req!91 -> paywire_req?91 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!91 -> oraclepaywire_token?91 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!91 -> paywire_res?91 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!91 -> shippingwire_req?91 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!91 -> shippinglogwire_stmt?91 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!91 -> shippinglogwire_cmmd?91 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!91 -> shippingwire_res?91 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!91 -> orderlogwire_cmmd!91 -> orderlogwire_cmmd?91 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!35 -> orderwire_pevt?35 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!35 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?35 -> orderwire_bevt!35 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (Payment.pay.paid -> &lt;> ShippingService.postshipping.posted)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.12/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.6/@port.0/@events.0" nextExpr="//@interimmodels.12/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.12/@designmodel" visitedStates="71252" verifyTime="2.3642163" testport="//@interimmodels.12/@designmodel/@component.0/@port.3" traceExample="init -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_requester_process -> paywire_req!42 -> paywire_req?42 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!42 -> oraclepaywire_token?42 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!42 -> paywire_res?42 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!42 -> shippingwire_req?42 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!42 -> shippinglogwire_stmt?42 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!42 -> shippinglogwire_cmmd?42 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!42 -> shippingwire_res?42 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!42 -> orderlogwire_cmmd!42 -> orderlogwire_cmmd?42 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!13 -> cartwire_req?13 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!13 -> cartwire_res?13" exprText="[]  (OrdersService.postorder.save -> &lt;> Payment.pay.paid)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.12/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.3/@port.0/@events.1" nextExpr="//@interimmodels.12/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.12/@designmodel" counterExample="" visitedStates="107592" verifyTime="3.4277919" testport="//@interimmodels.12/@designmodel/@component.0/@port.0" traceExample="init -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_requester_process -> paywire_req!54 -> paywire_req?54 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!54 -> oraclepaywire_token?54 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!54 -> paywire_res?54 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!54 -> shippingwire_req?54 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!54 -> shippinglogwire_stmt?54 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!54 -> shippinglogwire_cmmd?54 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!54 -> shippingwire_res?54 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!54 -> orderlogwire_cmmd!54 -> orderlogwire_cmmd?54 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!61 -> userwire_req?61 -> UserService_userwire_responder_invoke -> UserService_login_signedon -> UserService_userwire_responder_process -> userwire_res!61 -> userwire_res?61" exprText="[]  (ShopFrontend.auth.checked -> &lt;> UserService.login.signedon)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.12/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.12/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.12/@designmodel" counterExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!62 -> cateloquewire_req?62 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!62 -> cateloquewire_res?62" visitedStates="177035" verifyTime="6.2088575" testport="//@interimmodels.12/@designmodel/@component.0/@port.1" traceExample="init -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_requester_process -> paywire_req!72 -> paywire_req?72 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!72 -> oraclepaywire_token?72 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!72 -> paywire_res?72 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!72 -> shippingwire_req?72 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!72 -> shippinglogwire_stmt?72 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!72 -> shippinglogwire_cmmd?72 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!72 -> shippingwire_res?72 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!72 -> orderlogwire_cmmd!72 -> orderlogwire_cmmd?72 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!10 -> cateloquewire_req?10 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!10 -> cateloquewire_res?10" exprText="[]  (&lt;> ShopFrontend.browse.read -> &lt;> CateloqueService.list.query)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.12/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.1/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.0/@port.1/@events.0" operator="EVENTUALLY" nextExpr="//@interimmodels.12/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop6" model="//@interimmodels.12/@designmodel" counterExample="" visitedStates="195036" verifyTime="6.5621838" testport="//@interimmodels.12/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!12 -> orderquerywire_req?12 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_querier_process -> orderreadwire_stmt!12 -> orderreadwire_stmt?12 -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstore_process -> orderreadwire_res!12 -> orderreadwire_res?12 -> OrdersService_orderreadwire_querier_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!12 -> orderquerywire_res?12 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_requester_process -> paywire_req!98 -> paywire_req?98 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!98 -> oraclepaywire_token?98 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!98 -> paywire_res?98 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!98 -> shippingwire_req?98 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!98 -> shippinglogwire_stmt?98 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!98 -> shippinglogwire_cmmd?98 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!98 -> shippingwire_res?98 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!98 -> orderlogwire_cmmd!98 -> orderlogwire_cmmd?98 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist" exprText="[]  (ShopBackend.listorder.renderlist -> &lt;> OrdersDB.queryorder.orderreaded)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.12/@designmodel/@verifyProperty.5">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.10/@port.0/@events.0" nextExpr="//@interimmodels.12/@designmodel/@verifyProperty.5/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop7" model="//@interimmodels.12/@designmodel" valid="false" counterExample="init -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_requester_process -> paywire_req!13 -> paywire_req?13 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!13 -> oraclepaywire_token?13 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!13 -> paywire_res?13 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!13 -> shippingwire_req?13 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!13 -> shippinglogwire_stmt?13 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!13 -> shippinglogwire_cmmd?13 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!13 -> shippingwire_res?13 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!13 -> orderlogwire_cmmd!13 -> orderlogwire_cmmd?13 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!32 -> orderwire_pevt?32 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!32 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?32 -> orderwire_bevt!32 -> ShopFrontend_orderwire_eventpublisher_broadcast" visitedStates="177" verifyTime="0.0269891" testport="//@interimmodels.12/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_postorder_check -> ShopFrontend_order_purchased -> OrdersService_postorder_save -> OrdersService_paywire_requester_process -> paywire_req!13 -> paywire_req?13 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!13 -> oraclepaywire_token?13 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!13 -> paywire_res?13 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!13 -> shippingwire_req?13 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!13 -> shippinglogwire_stmt?13 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!13 -> shippinglogwire_cmmd?13 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!13 -> shippingwire_res?13 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!13 -> orderlogwire_cmmd!13 -> orderlogwire_cmmd?13 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!32 -> orderwire_pevt?32 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!32 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?32 -> orderwire_bevt!32 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (ShopFrontend.order.purchased -> &lt;> OrdersService.postorder.save)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.12/@designmodel/@verifyProperty.6">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.3/@port.0/@events.1" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.12/@designmodel/@verifyProperty.6/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" visitedStates="201746" verifyTime="6.9170837999999994" testport="//@interimmodels.12/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_requester_process -> paywire_req!49 -> paywire_req?49 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!49 -> oraclepaywire_token?49 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!49 -> paywire_res?49 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!49 -> shippingwire_req?49 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!49 -> shippinglogwire_stmt?49 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!49 -> shippinglogwire_cmmd?49 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!49 -> shippingwire_res?49 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!49 -> orderlogwire_cmmd!49 -> orderlogwire_cmmd?49 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!65 -> orderwire_pevt?65 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!65 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?65 -> orderwire_bevt!65 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (Payment.pay.paid-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.11"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-orderlogwire" visitedStates="216950" verifyTime="7.2716981999999994" testport="//@interimmodels.12/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_requester_process -> paywire_req!67 -> paywire_req?67 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!67 -> oraclepaywire_token?67 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!67 -> paywire_res?67 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!67 -> shippingwire_req?67 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!67 -> shippinglogwire_stmt?67 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!67 -> shippinglogwire_cmmd?67 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!67 -> shippingwire_res?67 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!67 -> orderlogwire_cmmd!67 -> orderlogwire_cmmd?67 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!80 -> orderwire_pevt?80 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!80 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?80 -> orderwire_bevt!80 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (OrdersService.postorder.check-> &lt;> OrderlogwireCommandLog.orderlogwire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-orderwire" visitedStates="185604" verifyTime="6.2478546" testport="//@interimmodels.12/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_requester_process -> paywire_req!72 -> paywire_req?72 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!72 -> oraclepaywire_token?72 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!72 -> paywire_res?72 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!72 -> shippingwire_req?72 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!72 -> shippinglogwire_stmt?72 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!72 -> shippinglogwire_cmmd?72 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!72 -> shippingwire_res?72 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!72 -> orderlogwire_cmmd!72 -> orderlogwire_cmmd?72 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!79 -> orderwire_pevt?79 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!79 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?79 -> orderwire_bevt!79 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (ShopFrontend.order.purchased-> &lt;> OrderwireLog.orderwire.eventstore.persist)">
        <connector href="target.arch#//@connector.9"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-shippinglogwire" visitedStates="200574" verifyTime="6.9180905" testport="//@interimmodels.12/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_requester_process -> paywire_req!71 -> paywire_req?71 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!71 -> oraclepaywire_token?71 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!71 -> paywire_res?71 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!71 -> shippingwire_req?71 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!71 -> shippinglogwire_stmt?71 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!71 -> shippinglogwire_cmmd?71 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!71 -> shippingwire_res?71 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!71 -> orderlogwire_cmmd!71 -> orderlogwire_cmmd?71 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!52 -> orderwire_pevt?52 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!52 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?52 -> orderwire_bevt!52 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (ShippingService.postshipping.posted-> &lt;> ShippinglogwireCommandLog.shippinglogwire.commandstore.persist)">
        <connector href="target.arch#//@connector.6"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-query-queuereadwire" visitedStates="100305" verifyTime="3.235419" testport="//@interimmodels.12/@designmodel/@component.8/@port.0" traceExample="init -> ShippingWorker_listqueue_renderqueue -> ShippingWorker_queuereadwire_querier_process -> queuereadwire_stmt!47 -> queuereadwire_stmt?47 -> QueueDB_readqueue_queuereaded -> QueueDB_queuereadwire_readstore_process -> queuereadwire_res!47 -> queuereadwire_res?47 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_requester_process -> paywire_req!42 -> paywire_req?42 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!42 -> oraclepaywire_token?42 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!42 -> paywire_res?42 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!42 -> shippingwire_req?42 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!42 -> shippinglogwire_stmt?42 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!42 -> shippinglogwire_cmmd?42 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!42 -> shippingwire_res?42 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!42 -> orderlogwire_cmmd!42 -> orderlogwire_cmmd?42 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist" exprText="[] (ShippingWorker.listqueue.renderqueue-> &lt;> QueueDB.queuereadwire.readstore.process)">
        <connector href="target.arch#//@connector.5"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-query-orderreadwire" visitedStates="165888" verifyTime="5.4774845" testport="//@interimmodels.12/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!99 -> orderquerywire_req?99 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_querier_process -> orderreadwire_stmt!99 -> orderreadwire_stmt?99 -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstore_process -> orderreadwire_res!99 -> orderreadwire_res?99 -> OrdersService_orderreadwire_querier_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!99 -> orderquerywire_res?99 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_requester_process -> paywire_req!64 -> paywire_req?64 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!64 -> oraclepaywire_token?64 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!64 -> paywire_res?64 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!64 -> shippingwire_req?64 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!64 -> shippinglogwire_stmt?64 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!64 -> shippinglogwire_cmmd?64 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!64 -> shippingwire_res?64 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!64 -> orderlogwire_cmmd!64 -> orderlogwire_cmmd?64 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist" exprText="[] (OrdersService.get.ack-> &lt;> OrdersDB.orderreadwire.readstore.process)">
        <connector href="target.arch#//@connector.8"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="CLOUD_PLATFORM">
        <node name="NodeJSContainer1" component="//@interimmodels.12/@designmodel/@component.0 //@interimmodels.12/@designmodel/@component.10">
          <port name="port" portNumber="15551" node="//@interimmodels.12/@designmodel/@host.0/@node.0" namedport="//@interimmodels.12/@designmodel/@component.0/@port.0"/>
          <port name="port" portNumber="15552" node="//@interimmodels.12/@designmodel/@host.0/@node.0" namedport="//@interimmodels.12/@designmodel/@component.0/@port.2"/>
          <port name="port" portNumber="15553" node="//@interimmodels.12/@designmodel/@host.0/@node.0" namedport="//@interimmodels.12/@designmodel/@component.10/@port.0"/>
          <port name="port" portNumber="15554" node="//@interimmodels.12/@designmodel/@host.0/@node.0" namedport="//@interimmodels.12/@designmodel/@component.0/@port.3"/>
          <port name="port" portNumber="15555" node="//@interimmodels.12/@designmodel/@host.0/@node.0" namedport="//@interimmodels.12/@designmodel/@component.0/@port.1"/>
        </node>
        <node name="GoContainer3" component="//@interimmodels.12/@designmodel/@component.1">
          <port name="port" portNumber="80" node="//@interimmodels.12/@designmodel/@host.0/@node.1" namedport="//@interimmodels.12/@designmodel/@component.1/@port.0" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="SecureServer">
        <node name="GoContainer1" component="//@interimmodels.12/@designmodel/@component.2">
          <port name="port" portNumber="80" node="//@interimmodels.12/@designmodel/@host.1/@node.0" namedport="//@interimmodels.12/@designmodel/@component.2/@port.0" hasFirewall="true"/>
        </node>
        <node name="GoContainer2" component="//@interimmodels.12/@designmodel/@component.6">
          <port name="port" portNumber="80" node="//@interimmodels.12/@designmodel/@host.1/@node.1" namedport="//@interimmodels.12/@designmodel/@component.6/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="LocalServer">
        <node name="JEEContainer1" component="//@interimmodels.12/@designmodel/@component.3 //@interimmodels.12/@designmodel/@component.5">
          <port name="port" portNumber="80" namedport="//@interimmodels.12/@designmodel/@component.3/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15561" node="//@interimmodels.12/@designmodel/@host.2/@node.0" namedport="//@interimmodels.12/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15562" node="//@interimmodels.12/@designmodel/@host.2/@node.0" namedport="//@interimmodels.12/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15563" node="//@interimmodels.12/@designmodel/@host.2/@node.0" namedport="//@interimmodels.12/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15564" node="//@interimmodels.12/@designmodel/@host.2/@node.0" namedport="//@interimmodels.12/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15566" node="//@interimmodels.12/@designmodel/@host.2/@node.0" namedport="//@interimmodels.12/@designmodel/@component.3/@port.1"/>
          <port name="port" portNumber="81" node="//@interimmodels.12/@designmodel/@host.2/@node.0" namedport="//@interimmodels.12/@designmodel/@component.3/@port.1"/>
        </node>
        <node name="MySQL1" component="//@interimmodels.12/@designmodel/@component.4">
          <port name="port" portNumber="3306" node="//@interimmodels.12/@designmodel/@host.2/@node.1" namedport="//@interimmodels.12/@designmodel/@component.4/@port.0 //@interimmodels.12/@designmodel/@component.4/@port.1"/>
        </node>
      </host>
      <host name="BackOfficeServer">
        <node name="JEEContainer4" component="//@interimmodels.12/@designmodel/@component.7 //@interimmodels.12/@designmodel/@component.8">
          <port name="port" portNumber="80" node="//@interimmodels.12/@designmodel/@host.3/@node.0" namedport="//@interimmodels.12/@designmodel/@component.7/@port.0" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15571" node="//@interimmodels.12/@designmodel/@host.3/@node.0" namedport="//@interimmodels.12/@designmodel/@component.7/@port.0"/>
          <port name="port" portNumber="15572" node="//@interimmodels.12/@designmodel/@host.3/@node.0" namedport="//@interimmodels.12/@designmodel/@component.7/@port.0"/>
        </node>
        <node name="MySQL2" component="//@interimmodels.12/@designmodel/@component.9">
          <port name="port" portNumber="3306" node="//@interimmodels.12/@designmodel/@host.3/@node.1" namedport="//@interimmodels.12/@designmodel/@component.9/@port.0 //@interimmodels.12/@designmodel/@component.9/@port.1"/>
        </node>
      </host>
      <link name="link2" linkType="HTTPS" networkType="INTERNET" source="//@interimmodels.12/@designmodel/@host.0/@node.0/@port.1" target="//@interimmodels.12/@designmodel/@host.2/@node.0/@port.0"/>
      <link name="link3" source="//@interimmodels.12/@designmodel/@host.2/@node.0/@port.1"/>
      <link name="link4" source="//@interimmodels.12/@designmodel/@host.2/@node.0/@port.2"/>
      <link name="link5" target="//@interimmodels.12/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link7" networkType="INTERNET" source="//@interimmodels.12/@designmodel/@host.0/@node.0/@port.3"/>
      <link name="link9" source="//@interimmodels.12/@designmodel/@host.0/@node.0/@port.4" target="//@interimmodels.12/@designmodel/@host.0/@node.1/@port.0"/>
      <link name="link11" source="//@interimmodels.12/@designmodel/@host.3/@node.0/@port.1"/>
      <link name="link12" source="//@interimmodels.12/@designmodel/@host.3/@node.0/@port.2"/>
      <link name="link13" target="//@interimmodels.12/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link14" target="//@interimmodels.12/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link16" source="//@interimmodels.12/@designmodel/@host.2/@node.0/@port.5" target="//@interimmodels.12/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link15" networkType="INTERNET" source="//@interimmodels.12/@designmodel/@host.0/@node.0/@port.2" target="//@interimmodels.12/@designmodel/@host.2/@node.0/@port.6"/>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="14" description="network route for connector:orderwire between: shopfrontend ordersservice " isStable="true" name="network-route">
    <designmodel name="inter14">
      <component name="ShopFrontend" type="client,broadcaster" deploymentnode="//@interimmodels.13/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface,LeastPriviledge">
        <port name="auth" role="//@interimmodels.13/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="checked"/>
        </port>
        <port name="browse" role="//@interimmodels.13/@designmodel/@connector.1/@role.0" type="request,OutboundPort">
          <events name="read"/>
        </port>
        <port name="order" role="//@interimmodels.13/@designmodel/@connector.9/@role.0" type="broadcast,OutboundPort">
          <events name="purchased"/>
        </port>
        <port name="shop" role="//@interimmodels.13/@designmodel/@connector.3/@role.0" type="request,OutboundPort">
          <events name="itemadded"/>
        </port>
      </component>
      <component name="CateloqueService" type="server" deploymentnode="//@interimmodels.13/@designmodel/@host.0/@node.1" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
        <port name="list" role="//@interimmodels.13/@designmodel/@connector.1/@role.1" type="response,InboundPort">
          <events name="query"/>
        </port>
      </component>
      <component name="UserService" type="server" deploymentnode="//@interimmodels.13/@designmodel/@host.1/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DefenseInDepth,DenialOfService">
        <port name="login" role="//@interimmodels.13/@designmodel/@connector.0/@role.1" type="response,InboundPort">
          <events name="signedon"/>
        </port>
      </component>
      <component name="OrdersService" type="client,server,listener,eventconsumer,readendpoint,datawriter,datareader" deploymentnode="//@interimmodels.13/@designmodel/@host.2/@node.0" criticalLevel="Low" securityCharacters="AttackSurface,LeastPriviledge,Compartmentalization,DenialOfService,DataTampering">
        <port name="postorder" role="//@interimmodels.13/@designmodel/@connector.4/@role.0 //@interimmodels.13/@designmodel/@connector.7/@role.0 //@interimmodels.13/@designmodel/@connector.10/@role.0 //@interimmodels.13/@designmodel/@connector.9/@role.1" type="request,listen,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="check" next="//@interimmodels.13/@designmodel/@component.3/@port.0/@events.1"/>
          <events name="save"/>
        </port>
        <port name="get" role="//@interimmodels.13/@designmodel/@connector.2/@role.1 //@interimmodels.13/@designmodel/@connector.8/@role.0" type="response,read,OutboundPort,InboundPort,EventProcessorPort">
          <events name="ack"/>
        </port>
      </component>
      <component name="OrdersDB" type="repository,datastore" deploymentnode="//@interimmodels.13/@designmodel/@host.2/@node.1">
        <port name="writeorder" type="store,InboundPort,EventProcessorPort">
          <events name="orderwritten"/>
        </port>
        <port name="queryorder" role="//@interimmodels.13/@designmodel/@connector.8/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="orderreaded"/>
        </port>
      </component>
      <component name="CartsService" type="server" deploymentnode="//@interimmodels.13/@designmodel/@host.2/@node.0" securityCharacters="AttackSurface,DenialOfService,DataTampering">
        <port name="manage" role="//@interimmodels.13/@designmodel/@connector.3/@role.1" type="response,InboundPort">
          <events name="saveitem"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,datastore" deploymentnode="//@interimmodels.13/@designmodel/@host.1/@node.1" criticalLevel="High" securityCharacters="DefenseInDepth,Compartmentalization">
        <port name="pay" role="//@interimmodels.13/@designmodel/@connector.11/@role.1 //@interimmodels.13/@designmodel/@connector.10/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="paid"/>
        </port>
      </component>
      <component name="ShippingService" type="server,datawriter" deploymentnode="//@interimmodels.13/@designmodel/@host.3/@node.0" securityCharacters="Compartmentalization">
        <port name="postshipping" role="//@interimmodels.13/@designmodel/@connector.4/@role.1 //@interimmodels.13/@designmodel/@connector.6/@role.0" type="response,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="posted"/>
        </port>
      </component>
      <component name="ShippingWorker" type="readendpoint,datareader" deploymentnode="//@interimmodels.13/@designmodel/@host.3/@node.0">
        <port name="listqueue" role="//@interimmodels.13/@designmodel/@connector.5/@role.0" type="read,OutboundPort,EventProcessorPort">
          <events name="renderqueue"/>
        </port>
      </component>
      <component name="QueueDB" type="repository,datastore" deploymentnode="//@interimmodels.13/@designmodel/@host.3/@node.1">
        <port name="writequeue" role="//@interimmodels.13/@designmodel/@connector.6/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="queuewritten"/>
        </port>
        <port name="readqueue" role="//@interimmodels.13/@designmodel/@connector.5/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="queuereaded"/>
        </port>
      </component>
      <component name="ShopBackend" type="client" deploymentnode="//@interimmodels.13/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface">
        <port name="listorder" role="//@interimmodels.13/@designmodel/@connector.2/@role.0" type="request,OutboundPort">
          <events name="renderlist"/>
        </port>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="append" role="//@interimmodels.13/@designmodel/@connector.11/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <deploymentnode href="target.arch#//@host.4/@node.0"/>
      </component>
      <component name="OrderwireLog" type="eventlogger,datastore">
        <port name="logorderwire" role="//@interimmodels.13/@designmodel/@connector.9/@role.2" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <component name="ShippinglogwireCommandLog" type="commanddb,datastore">
        <port name="logshippinglogwire" role="//@interimmodels.13/@designmodel/@connector.6/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.3/@node.2"/>
      </component>
      <component name="OrderlogwireCommandLog" type="commanddb,datastore">
        <port name="logorderlogwire" role="//@interimmodels.13/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <connector name="userwire" type="CSConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.13/@designmodel/@connector.0"/>
      </connector>
      <connector name="cateloquewire" type="CSConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.1"/>
        <role name="responder" roletype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.13/@designmodel/@connector.1"/>
      </connector>
      <connector name="orderquerywire" type="CSConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.2"/>
        <role name="responder" roletype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.13/@designmodel/@connector.8/@role.0" connector="//@interimmodels.13/@designmodel/@connector.2"/>
      </connector>
      <connector name="cartwire" type="CSConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.3"/>
        <role name="responder" roletype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.13/@designmodel/@connector.3"/>
      </connector>
      <connector name="shippingwire" type="CSConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.13/@designmodel/@connector.6/@role.0" connector="//@interimmodels.13/@designmodel/@connector.4"/>
      </connector>
      <connector name="queuereadwire" type="QRConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0">
        <role name="querier" roletype="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.5"/>
        <role name="readstore" roletype="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.13/@designmodel/@connector.5"/>
      </connector>
      <connector name="shippinglogwire" type="CRConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.6"/>
        <role name="readstore" roletype="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.13/@designmodel/@connector.6"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.4/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.6"/>
        </role>
      </connector>
      <connector name="orderlogwire" type="CRConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.13/@designmodel/@connector.10/@role.0" connector="//@interimmodels.13/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.13/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.4/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="orderreadwire" type="QRConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0">
        <role name="querier" roletype="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.8"/>
        <role name="readstore" roletype="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.13/@designmodel/@connector.8"/>
      </connector>
      <connector name="orderwire" type="ESConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.13/@designmodel/@archstyle.1/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.9"/>
        <role name="eventsubscriber" roletype="//@interimmodels.13/@designmodel/@archstyle.1/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.13/@designmodel/@connector.7/@role.0" connector="//@interimmodels.13/@designmodel/@connector.9"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.9"/>
        </role>
      </connector>
      <connector name="paywire" type="CSConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="writer" nextRoleExpr="//@interimmodels.13/@designmodel/@connector.4/@role.0" connector="//@interimmodels.13/@designmodel/@connector.10"/>
        <role name="responder" roletype="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="writestorage" nextRoleExpr="//@interimmodels.13/@designmodel/@connector.11/@role.1" connector="//@interimmodels.13/@designmodel/@connector.10"/>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.13/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.13/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.13/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.13/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.13/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.13/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.13/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.13/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.13/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.13/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.13/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.4" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
            <event name="Skip"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.13/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.13/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.13/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.13/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.13/@designmodel/@archstyle.4/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.13/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.13/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.13/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.13/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.13/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.13/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.13/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.13/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.13/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.13/@designmodel" counterExample="" visitedStates="15" verifyTime="0.0247504" testport="//@interimmodels.13/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!77 -> cartwire_req?77 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!77 -> cartwire_res?77" exprText="[]  (ShopFrontend.shop.itemadded -> &lt;> CartsService.manage.saveitem)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.13/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.0/@port.3/@events.0" nextExpr="//@interimmodels.13/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.13/@designmodel" counterExample="" visitedStates="98442" verifyTime="3.3532553" testport="//@interimmodels.13/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!65 -> orderwire_pevt?65 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!65 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?65 -> orderwire_bevt!65 -> orderwire_bevt?65 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!65 -> orderlogwire_cmmd!65 -> orderlogwire_cmmd?65 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_requester_process -> paywire_req!65 -> paywire_req?65 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!65 -> oraclepaywire_token?65 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!65 -> paywire_res?65 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!65 -> shippingwire_req?65 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!65 -> shippinglogwire_stmt?65 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!65 -> shippinglogwire_cmmd?65 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!65 -> shippingwire_res?65 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (Payment.pay.paid -> &lt;> ShippingService.postshipping.posted)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.13/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.6/@port.0/@events.0" nextExpr="//@interimmodels.13/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.13/@designmodel" visitedStates="10" verifyTime="0.025151899999999998" testport="//@interimmodels.13/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!25 -> cartwire_req?25 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!25 -> cartwire_res?25" exprText="[]  (OrdersService.postorder.save -> &lt;> Payment.pay.paid)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.13/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.3/@port.0/@events.1" nextExpr="//@interimmodels.13/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.13/@designmodel" counterExample="" visitedStates="15" verifyTime="0.08793369999999999" testport="//@interimmodels.13/@designmodel/@component.0/@port.0" traceExample="init -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!97 -> userwire_req?97 -> UserService_userwire_responder_invoke -> UserService_login_signedon -> UserService_userwire_responder_process -> userwire_res!97 -> userwire_res?97" exprText="[]  (ShopFrontend.auth.checked -> &lt;> UserService.login.signedon)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.13/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.13/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.13/@designmodel" counterExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!62 -> cateloquewire_req?62 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!62 -> cateloquewire_res?62" visitedStates="24" verifyTime="0.0378198" testport="//@interimmodels.13/@designmodel/@component.0/@port.1" traceExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!79 -> cateloquewire_req?79 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!79 -> cateloquewire_res?79" exprText="[]  (&lt;> ShopFrontend.browse.read -> &lt;> CateloqueService.list.query)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.13/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.1/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.0/@port.1/@events.0" operator="EVENTUALLY" nextExpr="//@interimmodels.13/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop6" model="//@interimmodels.13/@designmodel" counterExample="" visitedStates="27" verifyTime="0.0243122" testport="//@interimmodels.13/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!19 -> orderquerywire_req?19 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_querier_process -> orderreadwire_stmt!19 -> orderreadwire_stmt?19 -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstore_process -> orderreadwire_res!19 -> orderreadwire_res?19 -> OrdersService_orderreadwire_querier_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!19 -> orderquerywire_res?19" exprText="[]  (ShopBackend.listorder.renderlist -> &lt;> OrdersDB.queryorder.orderreaded)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.13/@designmodel/@verifyProperty.5">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.10/@port.0/@events.0" nextExpr="//@interimmodels.13/@designmodel/@verifyProperty.5/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop7" model="//@interimmodels.13/@designmodel" counterExample="" visitedStates="95203" verifyTime="3.2707363999999997" testport="//@interimmodels.13/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!13 -> orderwire_pevt?13 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!13 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?13 -> orderwire_bevt!13 -> orderwire_bevt?13 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!13 -> orderlogwire_cmmd!13 -> orderlogwire_cmmd?13 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_requester_process -> paywire_req!13 -> paywire_req?13 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!13 -> oraclepaywire_token?13 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!13 -> paywire_res?13 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!13 -> shippingwire_req?13 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!13 -> shippinglogwire_stmt?13 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!13 -> shippinglogwire_cmmd?13 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!13 -> shippingwire_res?13 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (ShopFrontend.order.purchased -> &lt;> OrdersService.postorder.save)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.13/@designmodel/@verifyProperty.6">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.3/@port.0/@events.1" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.13/@designmodel/@verifyProperty.6/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" visitedStates="170266" verifyTime="5.684555" testport="//@interimmodels.13/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!50 -> orderwire_pevt?50 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!50 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?50 -> orderwire_bevt!50 -> orderwire_bevt?50 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!50 -> orderlogwire_cmmd!50 -> orderlogwire_cmmd?50 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_requester_process -> paywire_req!50 -> paywire_req?50 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!50 -> oraclepaywire_token?50 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!50 -> paywire_res?50 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!50 -> shippingwire_req?50 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!50 -> shippinglogwire_stmt?50 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!50 -> shippinglogwire_cmmd?50 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!50 -> shippingwire_res?50 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (Payment.pay.paid-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.11"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-orderlogwire" visitedStates="170522" verifyTime="5.8905886999999995" testport="//@interimmodels.13/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!79 -> orderwire_pevt?79 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!79 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?79 -> orderwire_bevt!79 -> orderwire_bevt?79 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!79 -> orderlogwire_cmmd!79 -> orderlogwire_cmmd?79 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_requester_process -> paywire_req!79 -> paywire_req?79 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!79 -> oraclepaywire_token?79 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!79 -> paywire_res?79 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!79 -> shippingwire_req?79 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!79 -> shippinglogwire_stmt?79 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!79 -> shippinglogwire_cmmd?79 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!79 -> shippingwire_res?79 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (OrdersService.postorder.check-> &lt;> OrderlogwireCommandLog.orderlogwire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-orderwire" visitedStates="137936" verifyTime="4.6211079" testport="//@interimmodels.13/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!69 -> orderwire_pevt?69 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!69 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?69 -> orderwire_bevt!69 -> orderwire_bevt?69 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!69 -> orderlogwire_cmmd!69 -> orderlogwire_cmmd?69 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_requester_process -> paywire_req!69 -> paywire_req?69 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!69 -> oraclepaywire_token?69 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!69 -> paywire_res?69 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!69 -> shippingwire_req?69 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!69 -> shippinglogwire_stmt?69 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!69 -> shippinglogwire_cmmd?69 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!69 -> shippingwire_res?69 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (ShopFrontend.order.purchased-> &lt;> OrderwireLog.orderwire.eventstore.persist)">
        <connector href="target.arch#//@connector.9"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-shippinglogwire" visitedStates="168290" verifyTime="5.4068133" testport="//@interimmodels.13/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!66 -> orderwire_pevt?66 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!66 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?66 -> orderwire_bevt!66 -> orderwire_bevt?66 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!66 -> orderlogwire_cmmd!66 -> orderlogwire_cmmd?66 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_requester_process -> paywire_req!66 -> paywire_req?66 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!66 -> oraclepaywire_token?66 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!66 -> paywire_res?66 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!66 -> shippingwire_req?66 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!66 -> shippinglogwire_stmt?66 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!66 -> shippinglogwire_cmmd?66 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!66 -> shippingwire_res?66 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (ShippingService.postshipping.posted-> &lt;> ShippinglogwireCommandLog.shippinglogwire.commandstore.persist)">
        <connector href="target.arch#//@connector.6"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-query-queuereadwire" visitedStates="14" verifyTime="0.0246392" testport="//@interimmodels.13/@designmodel/@component.8/@port.0" traceExample="init -> ShippingWorker_listqueue_renderqueue -> ShippingWorker_queuereadwire_querier_process -> queuereadwire_stmt!92 -> queuereadwire_stmt?92 -> QueueDB_readqueue_queuereaded -> QueueDB_queuereadwire_readstore_process -> queuereadwire_res!92 -> queuereadwire_res?92" exprText="[] (ShippingWorker.listqueue.renderqueue-> &lt;> QueueDB.queuereadwire.readstore.process)">
        <connector href="target.arch#//@connector.5"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-query-orderreadwire" visitedStates="23" verifyTime="0.024585799999999998" testport="//@interimmodels.13/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!79 -> orderquerywire_req?79 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_querier_process -> orderreadwire_stmt!79 -> orderreadwire_stmt?79 -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstore_process -> orderreadwire_res!79 -> orderreadwire_res?79 -> OrdersService_orderreadwire_querier_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!79 -> orderquerywire_res?79" exprText="[] (OrdersService.get.ack-> &lt;> OrdersDB.orderreadwire.readstore.process)">
        <connector href="target.arch#//@connector.8"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="CLOUD_PLATFORM">
        <node name="NodeJSContainer1" component="//@interimmodels.13/@designmodel/@component.0 //@interimmodels.13/@designmodel/@component.10">
          <port name="port" portNumber="15551" node="//@interimmodels.13/@designmodel/@host.0/@node.0" namedport="//@interimmodels.13/@designmodel/@component.0/@port.0"/>
          <port name="port" portNumber="15552" node="//@interimmodels.13/@designmodel/@host.0/@node.0" namedport="//@interimmodels.13/@designmodel/@component.0/@port.2"/>
          <port name="port" portNumber="15553" node="//@interimmodels.13/@designmodel/@host.0/@node.0" namedport="//@interimmodels.13/@designmodel/@component.10/@port.0"/>
          <port name="port" portNumber="15554" node="//@interimmodels.13/@designmodel/@host.0/@node.0" namedport="//@interimmodels.13/@designmodel/@component.0/@port.3"/>
          <port name="port" portNumber="15555" node="//@interimmodels.13/@designmodel/@host.0/@node.0" namedport="//@interimmodels.13/@designmodel/@component.0/@port.1"/>
        </node>
        <node name="GoContainer3" component="//@interimmodels.13/@designmodel/@component.1">
          <port name="port" portNumber="80" node="//@interimmodels.13/@designmodel/@host.0/@node.1" namedport="//@interimmodels.13/@designmodel/@component.1/@port.0" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="SecureServer">
        <node name="GoContainer1" component="//@interimmodels.13/@designmodel/@component.2">
          <port name="port" portNumber="80" node="//@interimmodels.13/@designmodel/@host.1/@node.0" namedport="//@interimmodels.13/@designmodel/@component.2/@port.0" hasFirewall="true"/>
        </node>
        <node name="GoContainer2" component="//@interimmodels.13/@designmodel/@component.6">
          <port name="port" portNumber="80" node="//@interimmodels.13/@designmodel/@host.1/@node.1" namedport="//@interimmodels.13/@designmodel/@component.6/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="LocalServer">
        <node name="JEEContainer1" component="//@interimmodels.13/@designmodel/@component.3 //@interimmodels.13/@designmodel/@component.5">
          <port name="port" portNumber="80" namedport="//@interimmodels.13/@designmodel/@component.3/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15561" node="//@interimmodels.13/@designmodel/@host.2/@node.0" namedport="//@interimmodels.13/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15562" node="//@interimmodels.13/@designmodel/@host.2/@node.0" namedport="//@interimmodels.13/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15563" node="//@interimmodels.13/@designmodel/@host.2/@node.0" namedport="//@interimmodels.13/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15564" node="//@interimmodels.13/@designmodel/@host.2/@node.0" namedport="//@interimmodels.13/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15566" node="//@interimmodels.13/@designmodel/@host.2/@node.0" namedport="//@interimmodels.13/@designmodel/@component.3/@port.1"/>
          <port name="port" portNumber="81" node="//@interimmodels.13/@designmodel/@host.2/@node.0" namedport="//@interimmodels.13/@designmodel/@component.3/@port.1"/>
        </node>
        <node name="MySQL1" component="//@interimmodels.13/@designmodel/@component.4">
          <port name="port" portNumber="3306" node="//@interimmodels.13/@designmodel/@host.2/@node.1" namedport="//@interimmodels.13/@designmodel/@component.4/@port.0 //@interimmodels.13/@designmodel/@component.4/@port.1"/>
        </node>
      </host>
      <host name="BackOfficeServer">
        <node name="JEEContainer4" component="//@interimmodels.13/@designmodel/@component.7 //@interimmodels.13/@designmodel/@component.8">
          <port name="port" portNumber="80" node="//@interimmodels.13/@designmodel/@host.3/@node.0" namedport="//@interimmodels.13/@designmodel/@component.7/@port.0" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15571" node="//@interimmodels.13/@designmodel/@host.3/@node.0" namedport="//@interimmodels.13/@designmodel/@component.7/@port.0"/>
          <port name="port" portNumber="15572" node="//@interimmodels.13/@designmodel/@host.3/@node.0" namedport="//@interimmodels.13/@designmodel/@component.7/@port.0"/>
        </node>
        <node name="MySQL2" component="//@interimmodels.13/@designmodel/@component.9">
          <port name="port" portNumber="3306" node="//@interimmodels.13/@designmodel/@host.3/@node.1" namedport="//@interimmodels.13/@designmodel/@component.9/@port.0 //@interimmodels.13/@designmodel/@component.9/@port.1"/>
        </node>
      </host>
      <link name="link2" linkType="HTTPS" networkType="INTERNET" source="//@interimmodels.13/@designmodel/@host.0/@node.0/@port.1" target="//@interimmodels.13/@designmodel/@host.2/@node.0/@port.0"/>
      <link name="link3" source="//@interimmodels.13/@designmodel/@host.2/@node.0/@port.1"/>
      <link name="link4" source="//@interimmodels.13/@designmodel/@host.2/@node.0/@port.2"/>
      <link name="link5" target="//@interimmodels.13/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link7" networkType="INTERNET" source="//@interimmodels.13/@designmodel/@host.0/@node.0/@port.3"/>
      <link name="link9" source="//@interimmodels.13/@designmodel/@host.0/@node.0/@port.4" target="//@interimmodels.13/@designmodel/@host.0/@node.1/@port.0"/>
      <link name="link11" source="//@interimmodels.13/@designmodel/@host.3/@node.0/@port.1"/>
      <link name="link12" source="//@interimmodels.13/@designmodel/@host.3/@node.0/@port.2"/>
      <link name="link13" target="//@interimmodels.13/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link14" target="//@interimmodels.13/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link16" source="//@interimmodels.13/@designmodel/@host.2/@node.0/@port.5" target="//@interimmodels.13/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link15" networkType="INTERNET" source="//@interimmodels.13/@designmodel/@host.0/@node.0/@port.2" target="//@interimmodels.13/@designmodel/@host.2/@node.0/@port.6"/>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb"/>
    </designmodel>
  </interimmodels>
</arch:MigrationModel>
