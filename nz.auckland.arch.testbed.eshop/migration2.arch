<?xml version="1.0" encoding="UTF-8"?>
<arch:MigrationModel xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arch="http://www.example.org/arch">
  <source href="sample.arch#/"/>
  <target href="target.arch#/"/>
  <interimmodels description="setup database: orderlogwirecommandlog" nextModel="//@interimmodels.1" isStable="true" name="setup-database">
    <designmodel name="inter0">
      <component name="ShopFrontend" type="client,broadcaster" deploymentnode="//@interimmodels.0/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface,LeastPriviledge">
        <port name="auth" role="//@interimmodels.0/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="checked"/>
        </port>
        <port name="browse" role="//@interimmodels.0/@designmodel/@connector.1/@role.0" type="request,OutboundPort">
          <events name="read"/>
        </port>
        <port name="order" role="//@interimmodels.0/@designmodel/@connector.9/@role.0" type="broadcast,OutboundPort">
          <events name="purchased"/>
        </port>
        <port name="shop" role="//@interimmodels.0/@designmodel/@connector.3/@role.0" type="request,OutboundPort">
          <events name="itemadded"/>
        </port>
      </component>
      <component name="CateloqueService" type="server" deploymentnode="//@interimmodels.0/@designmodel/@host.0/@node.1" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
        <port name="list" role="//@interimmodels.0/@designmodel/@connector.1/@role.1" type="response,InboundPort">
          <events name="query"/>
        </port>
      </component>
      <component name="UserService" type="server" deploymentnode="//@interimmodels.0/@designmodel/@host.1/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DefenseInDepth,DenialOfService">
        <port name="login" role="//@interimmodels.0/@designmodel/@connector.0/@role.1" type="response,InboundPort">
          <events name="signedon"/>
        </port>
      </component>
      <component name="OrdersService" type="client,server,listener,eventconsumer,readendpoint,datawriter,datareader" deploymentnode="//@interimmodels.0/@designmodel/@host.2/@node.0" criticalLevel="Low" securityCharacters="AttackSurface,LeastPriviledge,Compartmentalization,DenialOfService,DataTampering">
        <port name="postorder" role="//@interimmodels.0/@designmodel/@connector.4/@role.0 //@interimmodels.0/@designmodel/@connector.7/@role.0 //@interimmodels.0/@designmodel/@connector.9/@role.1 //@interimmodels.0/@designmodel/@connector.10/@role.0" type="request,listen,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="check" next="//@interimmodels.0/@designmodel/@component.3/@port.0/@events.1"/>
          <events name="save"/>
        </port>
        <port name="get" role="//@interimmodels.0/@designmodel/@connector.2/@role.1 //@interimmodels.0/@designmodel/@connector.8/@role.0" type="response,read,OutboundPort,InboundPort,EventProcessorPort">
          <events name="ack"/>
        </port>
      </component>
      <component name="OrdersDB" type="repository,datastore" deploymentnode="//@interimmodels.0/@designmodel/@host.2/@node.1">
        <port name="writeorder" role="//@interimmodels.0/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="orderwritten"/>
        </port>
        <port name="queryorder" role="//@interimmodels.0/@designmodel/@connector.8/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="orderreaded"/>
        </port>
      </component>
      <component name="CartsService" type="server" deploymentnode="//@interimmodels.0/@designmodel/@host.2/@node.0" securityCharacters="AttackSurface,DenialOfService,DataTampering">
        <port name="manage" role="//@interimmodels.0/@designmodel/@connector.3/@role.1" type="response,InboundPort">
          <events name="saveitem"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,datastore" deploymentnode="//@interimmodels.0/@designmodel/@host.1/@node.1" criticalLevel="High" securityCharacters="DefenseInDepth,Compartmentalization">
        <port name="pay" role="//@interimmodels.0/@designmodel/@connector.10/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="paid"/>
        </port>
      </component>
      <component name="ShippingService" type="server,datawriter" deploymentnode="//@interimmodels.0/@designmodel/@host.3/@node.0" securityCharacters="Compartmentalization">
        <port name="postshipping" role="//@interimmodels.0/@designmodel/@connector.4/@role.1 //@interimmodels.0/@designmodel/@connector.6/@role.0" type="response,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="posted"/>
        </port>
      </component>
      <component name="ShippingWorker" type="readendpoint,datareader" deploymentnode="//@interimmodels.0/@designmodel/@host.3/@node.0">
        <port name="listqueue" role="//@interimmodels.0/@designmodel/@connector.5/@role.0" type="read,OutboundPort,EventProcessorPort">
          <events name="renderqueue"/>
        </port>
      </component>
      <component name="QueueDB" type="repository,datastore" deploymentnode="//@interimmodels.0/@designmodel/@host.3/@node.1">
        <port name="writequeue" role="//@interimmodels.0/@designmodel/@connector.6/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="queuewritten"/>
        </port>
        <port name="readqueue" role="//@interimmodels.0/@designmodel/@connector.5/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="queuereaded"/>
        </port>
      </component>
      <component name="ShopBackend" type="client" deploymentnode="//@interimmodels.0/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface">
        <port name="listorder" role="//@interimmodels.0/@designmodel/@connector.2/@role.0" type="request,OutboundPort">
          <events name="renderlist"/>
        </port>
      </component>
      <component name="OrderlogwireCommandLog" type="commanddb,datastore">
        <port name="logorderlogwire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <connector name="userwire" type="CSConnector" connectortype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.0/@designmodel/@connector.0"/>
      </connector>
      <connector name="cateloquewire" type="CSConnector" connectortype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.1"/>
        <role name="responder" roletype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.0/@designmodel/@connector.1"/>
      </connector>
      <connector name="orderquerywire" type="CSConnector" connectortype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.2"/>
        <role name="responder" roletype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.0/@designmodel/@connector.8/@role.0" connector="//@interimmodels.0/@designmodel/@connector.2"/>
      </connector>
      <connector name="cartwire" type="CSConnector" connectortype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.3"/>
        <role name="responder" roletype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.0/@designmodel/@connector.3"/>
      </connector>
      <connector name="shippingwire" type="CSConnector" connectortype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.0/@designmodel/@connector.6/@role.0" connector="//@interimmodels.0/@designmodel/@connector.4"/>
      </connector>
      <connector name="queuereadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.5"/>
        <role name="readstorage" roletype="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.0/@designmodel/@connector.5"/>
      </connector>
      <connector name="shippinglogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.6"/>
        <role name="writestorage" roletype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.0/@designmodel/@connector.6"/>
      </connector>
      <connector name="orderlogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.0/@designmodel/@connector.10/@role.0" connector="//@interimmodels.0/@designmodel/@connector.7"/>
        <role name="writestorage" roletype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.0/@designmodel/@connector.7"/>
      </connector>
      <connector name="orderreadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.8"/>
        <role name="readstorage" roletype="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.0/@designmodel/@connector.8"/>
      </connector>
      <connector name="orderwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.0/@designmodel/@connector.9"/>
        <role name="subscriber" roletype="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.0/@designmodel/@connector.7/@role.0" connector="//@interimmodels.0/@designmodel/@connector.9"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="writer" nextRoleExpr="//@interimmodels.0/@designmodel/@connector.4/@role.0" connector="//@interimmodels.0/@designmodel/@connector.10"/>
        <role name="writestorage" roletype="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="writestorage" connector="//@interimmodels.0/@designmodel/@connector.10"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.0/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.0/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.0/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.0/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.0/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.0/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.0/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.0/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.0/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.4" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.0/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
            <event name="Skip"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.0/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.0/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.0/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.0/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.0/@designmodel/@archstyle.4/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.0/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.0/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.0/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.0/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.0/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.0/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.0/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.0/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.0/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.0/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.0/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.0/@designmodel" counterExample="" visitedStates="15" verifyTime="0.0051397" testport="//@interimmodels.0/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!54 -> cartwire_req?54 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!54 -> cartwire_res?54" exprText="[]  (ShopFrontend.shop.itemadded -> &lt;> CartsService.manage.saveitem)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.0/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.0/@port.3/@events.0" nextExpr="//@interimmodels.0/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.0/@designmodel" counterExample="" visitedStates="65" verifyTime="0.0061192" testport="//@interimmodels.0/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_publisher_process -> orderwire_pub!76 -> orderwire_pub?76 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!76 -> orderlogwire_req?76 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!76 -> orderlogwire_res?76 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_writer_request -> paywire_req!76 -> paywire_req?76 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!76 -> paywire_res?76 -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!76 -> shippingwire_req?76 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!76 -> shippinglogwire_req?76 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!76 -> shippinglogwire_res?76 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!76 -> shippingwire_res?76 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_subscriber_process" exprText="[]  (Payment.pay.paid -> &lt;> ShippingService.postshipping.posted)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.0/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.6/@port.0/@events.0" nextExpr="//@interimmodels.0/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.0/@designmodel" visitedStates="10" verifyTime="0.004919" testport="//@interimmodels.0/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!65 -> cartwire_req?65 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!65 -> cartwire_res?65" exprText="[]  (OrdersService.postorder.save -> &lt;> Payment.pay.paid)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.0/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.3/@port.0/@events.1" nextExpr="//@interimmodels.0/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.0/@designmodel" counterExample="" visitedStates="15" verifyTime="0.005777099999999999" testport="//@interimmodels.0/@designmodel/@component.0/@port.0" traceExample="init -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!78 -> userwire_req?78 -> UserService_userwire_responder_invoke -> UserService_login_signedon -> UserService_userwire_responder_process -> userwire_res!78 -> userwire_res?78" exprText="[]  (ShopFrontend.auth.checked -> &lt;> UserService.login.signedon)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.0/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.0/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.0/@designmodel" counterExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!62 -> cateloquewire_req?62 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!62 -> cateloquewire_res?62" visitedStates="24" verifyTime="0.0083064" testport="//@interimmodels.0/@designmodel/@component.0/@port.1" traceExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!26 -> cateloquewire_req?26 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!26 -> cateloquewire_res?26" exprText="[]  (&lt;> ShopFrontend.browse.read -> &lt;> CateloqueService.list.query)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.0/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.1/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.0/@port.1/@events.0" operator="EVENTUALLY" nextExpr="//@interimmodels.0/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop6" model="//@interimmodels.0/@designmodel" counterExample="" visitedStates="29" verifyTime="0.005203999999999999" testport="//@interimmodels.0/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!33 -> orderquerywire_req?33 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_reader_process -> orderreadwire_req!33 -> orderreadwire_req?33 -> OrdersDB_orderreadwire_readstorage_invoke -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstorage_process -> orderreadwire_res!33 -> orderreadwire_res?33 -> OrdersService_orderreadwire_reader_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!33 -> orderquerywire_res?33" exprText="[]  (ShopBackend.listorder.renderlist -> &lt;> OrdersDB.queryorder.orderreaded)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.0/@designmodel/@verifyProperty.5">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.10/@port.0/@events.0" nextExpr="//@interimmodels.0/@designmodel/@verifyProperty.5/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop7" model="//@interimmodels.0/@designmodel" counterExample="" visitedStates="59" verifyTime="0.0096414" testport="//@interimmodels.0/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_publisher_process -> orderwire_pub!93 -> orderwire_pub?93 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!93 -> orderlogwire_req?93 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!93 -> orderlogwire_res?93 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_requester_process -> paywire_req!93 -> paywire_req?93 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_paywire_responder_process -> paywire_res!93 -> paywire_res?93 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!93 -> shippingwire_req?93 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!93 -> shippinglogwire_req?93 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!93 -> shippinglogwire_res?93 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!93 -> shippingwire_res?93 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_subscriber_process" exprText="[]  (ShopFrontend.order.purchased -> &lt;> OrdersService.postorder.save)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.0/@designmodel/@verifyProperty.6">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.3/@port.0/@events.1" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.0/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.0/@designmodel/@verifyProperty.6/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="CLOUD_PLATFORM">
        <node name="NodeJSContainer1" component="//@interimmodels.0/@designmodel/@component.0 //@interimmodels.0/@designmodel/@component.10">
          <port name="port" portNumber="15551" node="//@interimmodels.0/@designmodel/@host.0/@node.0" namedport="//@interimmodels.0/@designmodel/@component.0/@port.0"/>
          <port name="port" portNumber="15552" node="//@interimmodels.0/@designmodel/@host.0/@node.0" namedport="//@interimmodels.0/@designmodel/@component.0/@port.2"/>
          <port name="port" portNumber="15553" node="//@interimmodels.0/@designmodel/@host.0/@node.0" namedport="//@interimmodels.0/@designmodel/@component.10/@port.0"/>
          <port name="port" portNumber="15554" node="//@interimmodels.0/@designmodel/@host.0/@node.0" namedport="//@interimmodels.0/@designmodel/@component.0/@port.3"/>
          <port name="port" portNumber="15555" node="//@interimmodels.0/@designmodel/@host.0/@node.0" namedport="//@interimmodels.0/@designmodel/@component.0/@port.1"/>
        </node>
        <node name="GoContainer3" component="//@interimmodels.0/@designmodel/@component.1">
          <port name="port" portNumber="80" node="//@interimmodels.0/@designmodel/@host.0/@node.1" namedport="//@interimmodels.0/@designmodel/@component.1/@port.0" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="SecureServer">
        <node name="GoContainer1" component="//@interimmodels.0/@designmodel/@component.2">
          <port name="port" portNumber="80" node="//@interimmodels.0/@designmodel/@host.1/@node.0" namedport="//@interimmodels.0/@designmodel/@component.2/@port.0" hasFirewall="true"/>
        </node>
        <node name="GoContainer2" component="//@interimmodels.0/@designmodel/@component.6">
          <port name="port" portNumber="80" node="//@interimmodels.0/@designmodel/@host.1/@node.1" namedport="//@interimmodels.0/@designmodel/@component.6/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="LocalServer">
        <node name="JEEContainer1" component="//@interimmodels.0/@designmodel/@component.3 //@interimmodels.0/@designmodel/@component.5">
          <port name="port" portNumber="80" namedport="//@interimmodels.0/@designmodel/@component.3/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15561" node="//@interimmodels.0/@designmodel/@host.2/@node.0" namedport="//@interimmodels.0/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15562" node="//@interimmodels.0/@designmodel/@host.2/@node.0" namedport="//@interimmodels.0/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15563" node="//@interimmodels.0/@designmodel/@host.2/@node.0" namedport="//@interimmodels.0/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15564" node="//@interimmodels.0/@designmodel/@host.2/@node.0" namedport="//@interimmodels.0/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15566" node="//@interimmodels.0/@designmodel/@host.2/@node.0" namedport="//@interimmodels.0/@designmodel/@component.3/@port.1"/>
          <port name="port" portNumber="81" node="//@interimmodels.0/@designmodel/@host.2/@node.0" namedport="//@interimmodels.0/@designmodel/@component.3/@port.1"/>
        </node>
        <node name="MySQL1" component="//@interimmodels.0/@designmodel/@component.4">
          <port name="port" portNumber="3306" node="//@interimmodels.0/@designmodel/@host.2/@node.1" namedport="//@interimmodels.0/@designmodel/@component.4/@port.0 //@interimmodels.0/@designmodel/@component.4/@port.1"/>
        </node>
      </host>
      <host name="BackOfficeServer">
        <node name="JEEContainer4" component="//@interimmodels.0/@designmodel/@component.7 //@interimmodels.0/@designmodel/@component.8">
          <port name="port" portNumber="80" node="//@interimmodels.0/@designmodel/@host.3/@node.0" namedport="//@interimmodels.0/@designmodel/@component.7/@port.0" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15571" node="//@interimmodels.0/@designmodel/@host.3/@node.0" namedport="//@interimmodels.0/@designmodel/@component.7/@port.0"/>
          <port name="port" portNumber="15572" node="//@interimmodels.0/@designmodel/@host.3/@node.0" namedport="//@interimmodels.0/@designmodel/@component.7/@port.0"/>
        </node>
        <node name="MySQL2" component="//@interimmodels.0/@designmodel/@component.9">
          <port name="port" portNumber="3306" node="//@interimmodels.0/@designmodel/@host.3/@node.1" namedport="//@interimmodels.0/@designmodel/@component.9/@port.0 //@interimmodels.0/@designmodel/@component.9/@port.1"/>
        </node>
      </host>
      <link name="link2" linkType="HTTPS" networkType="INTERNET" source="//@interimmodels.0/@designmodel/@host.0/@node.0/@port.1" target="//@interimmodels.0/@designmodel/@host.2/@node.0/@port.0"/>
      <link name="link3" source="//@interimmodels.0/@designmodel/@host.2/@node.0/@port.1"/>
      <link name="link4" source="//@interimmodels.0/@designmodel/@host.2/@node.0/@port.2"/>
      <link name="link5" target="//@interimmodels.0/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link7" networkType="INTERNET" source="//@interimmodels.0/@designmodel/@host.0/@node.0/@port.3"/>
      <link name="link9" source="//@interimmodels.0/@designmodel/@host.0/@node.0/@port.4" target="//@interimmodels.0/@designmodel/@host.0/@node.1/@port.0"/>
      <link name="link11" source="//@interimmodels.0/@designmodel/@host.3/@node.0/@port.1"/>
      <link name="link12" source="//@interimmodels.0/@designmodel/@host.3/@node.0/@port.2"/>
      <link name="link13" target="//@interimmodels.0/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link14" target="//@interimmodels.0/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link16" source="//@interimmodels.0/@designmodel/@host.2/@node.0/@port.5" target="//@interimmodels.0/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link15" networkType="INTERNET" source="//@interimmodels.0/@designmodel/@host.0/@node.0/@port.2" target="//@interimmodels.0/@designmodel/@host.2/@node.0/@port.6"/>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="1" description="setup database: shippinglogwirecommandlog" nextModel="//@interimmodels.2" isStable="true" name="setup-database">
    <designmodel name="inter1">
      <component name="ShopFrontend" type="client,broadcaster" deploymentnode="//@interimmodels.1/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface,LeastPriviledge">
        <port name="auth" role="//@interimmodels.1/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="checked"/>
        </port>
        <port name="browse" role="//@interimmodels.1/@designmodel/@connector.1/@role.0" type="request,OutboundPort">
          <events name="read"/>
        </port>
        <port name="order" role="//@interimmodels.1/@designmodel/@connector.9/@role.0" type="broadcast,OutboundPort">
          <events name="purchased"/>
        </port>
        <port name="shop" role="//@interimmodels.1/@designmodel/@connector.3/@role.0" type="request,OutboundPort">
          <events name="itemadded"/>
        </port>
      </component>
      <component name="CateloqueService" type="server" deploymentnode="//@interimmodels.1/@designmodel/@host.0/@node.1" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
        <port name="list" role="//@interimmodels.1/@designmodel/@connector.1/@role.1" type="response,InboundPort">
          <events name="query"/>
        </port>
      </component>
      <component name="UserService" type="server" deploymentnode="//@interimmodels.1/@designmodel/@host.1/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DefenseInDepth,DenialOfService">
        <port name="login" role="//@interimmodels.1/@designmodel/@connector.0/@role.1" type="response,InboundPort">
          <events name="signedon"/>
        </port>
      </component>
      <component name="OrdersService" type="client,server,listener,eventconsumer,readendpoint,datawriter,datareader" deploymentnode="//@interimmodels.1/@designmodel/@host.2/@node.0" criticalLevel="Low" securityCharacters="AttackSurface,LeastPriviledge,Compartmentalization,DenialOfService,DataTampering">
        <port name="postorder" role="//@interimmodels.1/@designmodel/@connector.4/@role.0 //@interimmodels.1/@designmodel/@connector.7/@role.0 //@interimmodels.1/@designmodel/@connector.9/@role.1 //@interimmodels.1/@designmodel/@connector.10/@role.0" type="request,listen,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="check" next="//@interimmodels.1/@designmodel/@component.3/@port.0/@events.1"/>
          <events name="save"/>
        </port>
        <port name="get" role="//@interimmodels.1/@designmodel/@connector.2/@role.1 //@interimmodels.1/@designmodel/@connector.8/@role.0" type="response,read,OutboundPort,InboundPort,EventProcessorPort">
          <events name="ack"/>
        </port>
      </component>
      <component name="OrdersDB" type="repository,datastore" deploymentnode="//@interimmodels.1/@designmodel/@host.2/@node.1">
        <port name="writeorder" role="//@interimmodels.1/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="orderwritten"/>
        </port>
        <port name="queryorder" role="//@interimmodels.1/@designmodel/@connector.8/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="orderreaded"/>
        </port>
      </component>
      <component name="CartsService" type="server" deploymentnode="//@interimmodels.1/@designmodel/@host.2/@node.0" securityCharacters="AttackSurface,DenialOfService,DataTampering">
        <port name="manage" role="//@interimmodels.1/@designmodel/@connector.3/@role.1" type="response,InboundPort">
          <events name="saveitem"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,datastore" deploymentnode="//@interimmodels.1/@designmodel/@host.1/@node.1" criticalLevel="High" securityCharacters="DefenseInDepth,Compartmentalization">
        <port name="pay" role="//@interimmodels.1/@designmodel/@connector.10/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="paid"/>
        </port>
      </component>
      <component name="ShippingService" type="server,datawriter" deploymentnode="//@interimmodels.1/@designmodel/@host.3/@node.0" securityCharacters="Compartmentalization">
        <port name="postshipping" role="//@interimmodels.1/@designmodel/@connector.4/@role.1 //@interimmodels.1/@designmodel/@connector.6/@role.0" type="response,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="posted"/>
        </port>
      </component>
      <component name="ShippingWorker" type="readendpoint,datareader" deploymentnode="//@interimmodels.1/@designmodel/@host.3/@node.0">
        <port name="listqueue" role="//@interimmodels.1/@designmodel/@connector.5/@role.0" type="read,OutboundPort,EventProcessorPort">
          <events name="renderqueue"/>
        </port>
      </component>
      <component name="QueueDB" type="repository,datastore" deploymentnode="//@interimmodels.1/@designmodel/@host.3/@node.1">
        <port name="writequeue" role="//@interimmodels.1/@designmodel/@connector.6/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="queuewritten"/>
        </port>
        <port name="readqueue" role="//@interimmodels.1/@designmodel/@connector.5/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="queuereaded"/>
        </port>
      </component>
      <component name="ShopBackend" type="client" deploymentnode="//@interimmodels.1/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface">
        <port name="listorder" role="//@interimmodels.1/@designmodel/@connector.2/@role.0" type="request,OutboundPort">
          <events name="renderlist"/>
        </port>
      </component>
      <component name="OrderlogwireCommandLog" type="commanddb,datastore">
        <port name="logorderlogwire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <component name="ShippinglogwireCommandLog" type="commanddb,datastore">
        <port name="logshippinglogwire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.3/@node.2"/>
      </component>
      <connector name="userwire" type="CSConnector" connectortype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.1/@designmodel/@connector.0"/>
      </connector>
      <connector name="cateloquewire" type="CSConnector" connectortype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.1"/>
        <role name="responder" roletype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.1/@designmodel/@connector.1"/>
      </connector>
      <connector name="orderquerywire" type="CSConnector" connectortype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.2"/>
        <role name="responder" roletype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.1/@designmodel/@connector.8/@role.0" connector="//@interimmodels.1/@designmodel/@connector.2"/>
      </connector>
      <connector name="cartwire" type="CSConnector" connectortype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.3"/>
        <role name="responder" roletype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.1/@designmodel/@connector.3"/>
      </connector>
      <connector name="shippingwire" type="CSConnector" connectortype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.1/@designmodel/@connector.6/@role.0" connector="//@interimmodels.1/@designmodel/@connector.4"/>
      </connector>
      <connector name="queuereadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.5"/>
        <role name="readstorage" roletype="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.1/@designmodel/@connector.5"/>
      </connector>
      <connector name="shippinglogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.6"/>
        <role name="writestorage" roletype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.1/@designmodel/@connector.6"/>
      </connector>
      <connector name="orderlogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.1/@designmodel/@connector.10/@role.0" connector="//@interimmodels.1/@designmodel/@connector.7"/>
        <role name="writestorage" roletype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.1/@designmodel/@connector.7"/>
      </connector>
      <connector name="orderreadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.8"/>
        <role name="readstorage" roletype="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.1/@designmodel/@connector.8"/>
      </connector>
      <connector name="orderwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.1/@designmodel/@connector.9"/>
        <role name="subscriber" roletype="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.1/@designmodel/@connector.7/@role.0" connector="//@interimmodels.1/@designmodel/@connector.9"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="writer" nextRoleExpr="//@interimmodels.1/@designmodel/@connector.4/@role.0" connector="//@interimmodels.1/@designmodel/@connector.10"/>
        <role name="writestorage" roletype="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="writestorage" connector="//@interimmodels.1/@designmodel/@connector.10"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.1/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.1/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.1/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.1/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.1/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.1/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.1/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.1/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.1/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.4" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.1/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
            <event name="Skip"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.1/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.1/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.1/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.1/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.1/@designmodel/@archstyle.4/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.1/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.1/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.1/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.1/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.1/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.1/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.1/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.1/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.1/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.1/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.1/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.1/@designmodel" counterExample="" visitedStates="15" verifyTime="0.005574399999999999" testport="//@interimmodels.1/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!97 -> cartwire_req?97 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!97 -> cartwire_res?97" exprText="[]  (ShopFrontend.shop.itemadded -> &lt;> CartsService.manage.saveitem)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.1/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.0/@port.3/@events.0" nextExpr="//@interimmodels.1/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.1/@designmodel" counterExample="" visitedStates="65" verifyTime="0.0060899" testport="//@interimmodels.1/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_publisher_process -> orderwire_pub!25 -> orderwire_pub?25 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!25 -> orderlogwire_req?25 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!25 -> orderlogwire_res?25 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_writer_request -> paywire_req!25 -> paywire_req?25 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!25 -> paywire_res?25 -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!25 -> shippingwire_req?25 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!25 -> shippinglogwire_req?25 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!25 -> shippinglogwire_res?25 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!25 -> shippingwire_res?25 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_subscriber_process" exprText="[]  (Payment.pay.paid -> &lt;> ShippingService.postshipping.posted)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.1/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.6/@port.0/@events.0" nextExpr="//@interimmodels.1/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.1/@designmodel" visitedStates="10" verifyTime="0.005912" testport="//@interimmodels.1/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!51 -> cartwire_req?51 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!51 -> cartwire_res?51" exprText="[]  (OrdersService.postorder.save -> &lt;> Payment.pay.paid)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.1/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.3/@port.0/@events.1" nextExpr="//@interimmodels.1/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.1/@designmodel" counterExample="" visitedStates="15" verifyTime="0.0050536" testport="//@interimmodels.1/@designmodel/@component.0/@port.0" traceExample="init -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!56 -> userwire_req?56 -> UserService_userwire_responder_invoke -> UserService_login_signedon -> UserService_userwire_responder_process -> userwire_res!56 -> userwire_res?56" exprText="[]  (ShopFrontend.auth.checked -> &lt;> UserService.login.signedon)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.1/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.1/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.1/@designmodel" counterExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!62 -> cateloquewire_req?62 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!62 -> cateloquewire_res?62" visitedStates="24" verifyTime="0.0053349999999999995" testport="//@interimmodels.1/@designmodel/@component.0/@port.1" traceExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!76 -> cateloquewire_req?76 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!76 -> cateloquewire_res?76" exprText="[]  (&lt;> ShopFrontend.browse.read -> &lt;> CateloqueService.list.query)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.1/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.1/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.0/@port.1/@events.0" operator="EVENTUALLY" nextExpr="//@interimmodels.1/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop6" model="//@interimmodels.1/@designmodel" counterExample="" visitedStates="29" verifyTime="0.0054469" testport="//@interimmodels.1/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!96 -> orderquerywire_req?96 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_reader_process -> orderreadwire_req!96 -> orderreadwire_req?96 -> OrdersDB_orderreadwire_readstorage_invoke -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstorage_process -> orderreadwire_res!96 -> orderreadwire_res?96 -> OrdersService_orderreadwire_reader_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!96 -> orderquerywire_res?96" exprText="[]  (ShopBackend.listorder.renderlist -> &lt;> OrdersDB.queryorder.orderreaded)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.1/@designmodel/@verifyProperty.5">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.10/@port.0/@events.0" nextExpr="//@interimmodels.1/@designmodel/@verifyProperty.5/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop7" model="//@interimmodels.1/@designmodel" counterExample="" visitedStates="60" verifyTime="0.0059556999999999995" testport="//@interimmodels.1/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_publisher_process -> orderwire_pub!67 -> orderwire_pub?67 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!67 -> orderlogwire_req?67 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!67 -> orderlogwire_res?67 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_writer_request -> paywire_req!67 -> paywire_req?67 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!67 -> paywire_res?67 -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!67 -> shippingwire_req?67 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!67 -> shippinglogwire_req?67 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!67 -> shippinglogwire_res?67 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!67 -> shippingwire_res?67 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_subscriber_process" exprText="[]  (ShopFrontend.order.purchased -> &lt;> OrdersService.postorder.save)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.1/@designmodel/@verifyProperty.6">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.3/@port.0/@events.1" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.1/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.1/@designmodel/@verifyProperty.6/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="CLOUD_PLATFORM">
        <node name="NodeJSContainer1" component="//@interimmodels.1/@designmodel/@component.0 //@interimmodels.1/@designmodel/@component.10">
          <port name="port" portNumber="15551" node="//@interimmodels.1/@designmodel/@host.0/@node.0" namedport="//@interimmodels.1/@designmodel/@component.0/@port.0"/>
          <port name="port" portNumber="15552" node="//@interimmodels.1/@designmodel/@host.0/@node.0" namedport="//@interimmodels.1/@designmodel/@component.0/@port.2"/>
          <port name="port" portNumber="15553" node="//@interimmodels.1/@designmodel/@host.0/@node.0" namedport="//@interimmodels.1/@designmodel/@component.10/@port.0"/>
          <port name="port" portNumber="15554" node="//@interimmodels.1/@designmodel/@host.0/@node.0" namedport="//@interimmodels.1/@designmodel/@component.0/@port.3"/>
          <port name="port" portNumber="15555" node="//@interimmodels.1/@designmodel/@host.0/@node.0" namedport="//@interimmodels.1/@designmodel/@component.0/@port.1"/>
        </node>
        <node name="GoContainer3" component="//@interimmodels.1/@designmodel/@component.1">
          <port name="port" portNumber="80" node="//@interimmodels.1/@designmodel/@host.0/@node.1" namedport="//@interimmodels.1/@designmodel/@component.1/@port.0" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="SecureServer">
        <node name="GoContainer1" component="//@interimmodels.1/@designmodel/@component.2">
          <port name="port" portNumber="80" node="//@interimmodels.1/@designmodel/@host.1/@node.0" namedport="//@interimmodels.1/@designmodel/@component.2/@port.0" hasFirewall="true"/>
        </node>
        <node name="GoContainer2" component="//@interimmodels.1/@designmodel/@component.6">
          <port name="port" portNumber="80" node="//@interimmodels.1/@designmodel/@host.1/@node.1" namedport="//@interimmodels.1/@designmodel/@component.6/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="LocalServer">
        <node name="JEEContainer1" component="//@interimmodels.1/@designmodel/@component.3 //@interimmodels.1/@designmodel/@component.5">
          <port name="port" portNumber="80" namedport="//@interimmodels.1/@designmodel/@component.3/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15561" node="//@interimmodels.1/@designmodel/@host.2/@node.0" namedport="//@interimmodels.1/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15562" node="//@interimmodels.1/@designmodel/@host.2/@node.0" namedport="//@interimmodels.1/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15563" node="//@interimmodels.1/@designmodel/@host.2/@node.0" namedport="//@interimmodels.1/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15564" node="//@interimmodels.1/@designmodel/@host.2/@node.0" namedport="//@interimmodels.1/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15566" node="//@interimmodels.1/@designmodel/@host.2/@node.0" namedport="//@interimmodels.1/@designmodel/@component.3/@port.1"/>
          <port name="port" portNumber="81" node="//@interimmodels.1/@designmodel/@host.2/@node.0" namedport="//@interimmodels.1/@designmodel/@component.3/@port.1"/>
        </node>
        <node name="MySQL1" component="//@interimmodels.1/@designmodel/@component.4">
          <port name="port" portNumber="3306" node="//@interimmodels.1/@designmodel/@host.2/@node.1" namedport="//@interimmodels.1/@designmodel/@component.4/@port.0 //@interimmodels.1/@designmodel/@component.4/@port.1"/>
        </node>
      </host>
      <host name="BackOfficeServer">
        <node name="JEEContainer4" component="//@interimmodels.1/@designmodel/@component.7 //@interimmodels.1/@designmodel/@component.8">
          <port name="port" portNumber="80" node="//@interimmodels.1/@designmodel/@host.3/@node.0" namedport="//@interimmodels.1/@designmodel/@component.7/@port.0" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15571" node="//@interimmodels.1/@designmodel/@host.3/@node.0" namedport="//@interimmodels.1/@designmodel/@component.7/@port.0"/>
          <port name="port" portNumber="15572" node="//@interimmodels.1/@designmodel/@host.3/@node.0" namedport="//@interimmodels.1/@designmodel/@component.7/@port.0"/>
        </node>
        <node name="MySQL2" component="//@interimmodels.1/@designmodel/@component.9">
          <port name="port" portNumber="3306" node="//@interimmodels.1/@designmodel/@host.3/@node.1" namedport="//@interimmodels.1/@designmodel/@component.9/@port.0 //@interimmodels.1/@designmodel/@component.9/@port.1"/>
        </node>
      </host>
      <link name="link2" linkType="HTTPS" networkType="INTERNET" source="//@interimmodels.1/@designmodel/@host.0/@node.0/@port.1" target="//@interimmodels.1/@designmodel/@host.2/@node.0/@port.0"/>
      <link name="link3" source="//@interimmodels.1/@designmodel/@host.2/@node.0/@port.1"/>
      <link name="link4" source="//@interimmodels.1/@designmodel/@host.2/@node.0/@port.2"/>
      <link name="link5" target="//@interimmodels.1/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link7" networkType="INTERNET" source="//@interimmodels.1/@designmodel/@host.0/@node.0/@port.3"/>
      <link name="link9" source="//@interimmodels.1/@designmodel/@host.0/@node.0/@port.4" target="//@interimmodels.1/@designmodel/@host.0/@node.1/@port.0"/>
      <link name="link11" source="//@interimmodels.1/@designmodel/@host.3/@node.0/@port.1"/>
      <link name="link12" source="//@interimmodels.1/@designmodel/@host.3/@node.0/@port.2"/>
      <link name="link13" target="//@interimmodels.1/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link14" target="//@interimmodels.1/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link16" source="//@interimmodels.1/@designmodel/@host.2/@node.0/@port.5" target="//@interimmodels.1/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link15" networkType="INTERNET" source="//@interimmodels.1/@designmodel/@host.0/@node.0/@port.2" target="//@interimmodels.1/@designmodel/@host.2/@node.0/@port.6"/>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="2" description="setup database: orderwirelog" nextModel="//@interimmodels.3" isStable="true" name="setup-database">
    <designmodel name="inter2">
      <component name="ShopFrontend" type="client,broadcaster" deploymentnode="//@interimmodels.2/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface,LeastPriviledge">
        <port name="auth" role="//@interimmodels.2/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="checked"/>
        </port>
        <port name="browse" role="//@interimmodels.2/@designmodel/@connector.1/@role.0" type="request,OutboundPort">
          <events name="read"/>
        </port>
        <port name="order" role="//@interimmodels.2/@designmodel/@connector.9/@role.0" type="broadcast,OutboundPort">
          <events name="purchased"/>
        </port>
        <port name="shop" role="//@interimmodels.2/@designmodel/@connector.3/@role.0" type="request,OutboundPort">
          <events name="itemadded"/>
        </port>
      </component>
      <component name="CateloqueService" type="server" deploymentnode="//@interimmodels.2/@designmodel/@host.0/@node.1" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
        <port name="list" role="//@interimmodels.2/@designmodel/@connector.1/@role.1" type="response,InboundPort">
          <events name="query"/>
        </port>
      </component>
      <component name="UserService" type="server" deploymentnode="//@interimmodels.2/@designmodel/@host.1/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DefenseInDepth,DenialOfService">
        <port name="login" role="//@interimmodels.2/@designmodel/@connector.0/@role.1" type="response,InboundPort">
          <events name="signedon"/>
        </port>
      </component>
      <component name="OrdersService" type="client,server,listener,eventconsumer,readendpoint,datawriter,datareader" deploymentnode="//@interimmodels.2/@designmodel/@host.2/@node.0" criticalLevel="Low" securityCharacters="AttackSurface,LeastPriviledge,Compartmentalization,DenialOfService,DataTampering">
        <port name="postorder" role="//@interimmodels.2/@designmodel/@connector.4/@role.0 //@interimmodels.2/@designmodel/@connector.7/@role.0 //@interimmodels.2/@designmodel/@connector.9/@role.1 //@interimmodels.2/@designmodel/@connector.10/@role.0" type="request,listen,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="check" next="//@interimmodels.2/@designmodel/@component.3/@port.0/@events.1"/>
          <events name="save"/>
        </port>
        <port name="get" role="//@interimmodels.2/@designmodel/@connector.2/@role.1 //@interimmodels.2/@designmodel/@connector.8/@role.0" type="response,read,OutboundPort,InboundPort,EventProcessorPort">
          <events name="ack"/>
        </port>
      </component>
      <component name="OrdersDB" type="repository,datastore" deploymentnode="//@interimmodels.2/@designmodel/@host.2/@node.1">
        <port name="writeorder" role="//@interimmodels.2/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="orderwritten"/>
        </port>
        <port name="queryorder" role="//@interimmodels.2/@designmodel/@connector.8/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="orderreaded"/>
        </port>
      </component>
      <component name="CartsService" type="server" deploymentnode="//@interimmodels.2/@designmodel/@host.2/@node.0" securityCharacters="AttackSurface,DenialOfService,DataTampering">
        <port name="manage" role="//@interimmodels.2/@designmodel/@connector.3/@role.1" type="response,InboundPort">
          <events name="saveitem"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,datastore" deploymentnode="//@interimmodels.2/@designmodel/@host.1/@node.1" criticalLevel="High" securityCharacters="DefenseInDepth,Compartmentalization">
        <port name="pay" role="//@interimmodels.2/@designmodel/@connector.10/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="paid"/>
        </port>
      </component>
      <component name="ShippingService" type="server,datawriter" deploymentnode="//@interimmodels.2/@designmodel/@host.3/@node.0" securityCharacters="Compartmentalization">
        <port name="postshipping" role="//@interimmodels.2/@designmodel/@connector.4/@role.1 //@interimmodels.2/@designmodel/@connector.6/@role.0" type="response,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="posted"/>
        </port>
      </component>
      <component name="ShippingWorker" type="readendpoint,datareader" deploymentnode="//@interimmodels.2/@designmodel/@host.3/@node.0">
        <port name="listqueue" role="//@interimmodels.2/@designmodel/@connector.5/@role.0" type="read,OutboundPort,EventProcessorPort">
          <events name="renderqueue"/>
        </port>
      </component>
      <component name="QueueDB" type="repository,datastore" deploymentnode="//@interimmodels.2/@designmodel/@host.3/@node.1">
        <port name="writequeue" role="//@interimmodels.2/@designmodel/@connector.6/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="queuewritten"/>
        </port>
        <port name="readqueue" role="//@interimmodels.2/@designmodel/@connector.5/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="queuereaded"/>
        </port>
      </component>
      <component name="ShopBackend" type="client" deploymentnode="//@interimmodels.2/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface">
        <port name="listorder" role="//@interimmodels.2/@designmodel/@connector.2/@role.0" type="request,OutboundPort">
          <events name="renderlist"/>
        </port>
      </component>
      <component name="OrderlogwireCommandLog" type="commanddb,datastore">
        <port name="logorderlogwire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <component name="ShippinglogwireCommandLog" type="commanddb,datastore">
        <port name="logshippinglogwire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.3/@node.2"/>
      </component>
      <component name="OrderwireLog" type="eventlogger,datastore">
        <port name="logorderwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <connector name="userwire" type="CSConnector" connectortype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.2/@designmodel/@connector.0"/>
      </connector>
      <connector name="cateloquewire" type="CSConnector" connectortype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.1"/>
        <role name="responder" roletype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.2/@designmodel/@connector.1"/>
      </connector>
      <connector name="orderquerywire" type="CSConnector" connectortype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.2"/>
        <role name="responder" roletype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.2/@designmodel/@connector.8/@role.0" connector="//@interimmodels.2/@designmodel/@connector.2"/>
      </connector>
      <connector name="cartwire" type="CSConnector" connectortype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.3"/>
        <role name="responder" roletype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.2/@designmodel/@connector.3"/>
      </connector>
      <connector name="shippingwire" type="CSConnector" connectortype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.2/@designmodel/@connector.6/@role.0" connector="//@interimmodels.2/@designmodel/@connector.4"/>
      </connector>
      <connector name="queuereadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.5"/>
        <role name="readstorage" roletype="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.2/@designmodel/@connector.5"/>
      </connector>
      <connector name="shippinglogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.6"/>
        <role name="writestorage" roletype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.2/@designmodel/@connector.6"/>
      </connector>
      <connector name="orderlogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.2/@designmodel/@connector.10/@role.0" connector="//@interimmodels.2/@designmodel/@connector.7"/>
        <role name="writestorage" roletype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.2/@designmodel/@connector.7"/>
      </connector>
      <connector name="orderreadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.8"/>
        <role name="readstorage" roletype="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.2/@designmodel/@connector.8"/>
      </connector>
      <connector name="orderwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.2/@designmodel/@connector.9"/>
        <role name="subscriber" roletype="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.2/@designmodel/@connector.7/@role.0" connector="//@interimmodels.2/@designmodel/@connector.9"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="writer" nextRoleExpr="//@interimmodels.2/@designmodel/@connector.4/@role.0" connector="//@interimmodels.2/@designmodel/@connector.10"/>
        <role name="writestorage" roletype="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="writestorage" connector="//@interimmodels.2/@designmodel/@connector.10"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.2/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.2/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.2/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.2/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.2/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.2/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.2/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.2/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.2/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.4" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.2/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
            <event name="Skip"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.2/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.2/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.2/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.2/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.2/@designmodel/@archstyle.4/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.2/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.2/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.2/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.2/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.2/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.2/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.2/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.2/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.2/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.2/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.2/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.2/@designmodel" counterExample="" visitedStates="15" verifyTime="0.005991799999999999" testport="//@interimmodels.2/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!72 -> cartwire_req?72 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!72 -> cartwire_res?72" exprText="[]  (ShopFrontend.shop.itemadded -> &lt;> CartsService.manage.saveitem)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.2/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.0/@port.3/@events.0" nextExpr="//@interimmodels.2/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.2/@designmodel" counterExample="" visitedStates="65" verifyTime="0.006568399999999999" testport="//@interimmodels.2/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_publisher_process -> orderwire_pub!65 -> orderwire_pub?65 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!65 -> orderlogwire_req?65 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!65 -> orderlogwire_res?65 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_writer_request -> paywire_req!65 -> paywire_req?65 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!65 -> paywire_res?65 -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!65 -> shippingwire_req?65 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!65 -> shippinglogwire_req?65 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!65 -> shippinglogwire_res?65 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!65 -> shippingwire_res?65 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_subscriber_process" exprText="[]  (Payment.pay.paid -> &lt;> ShippingService.postshipping.posted)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.2/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.6/@port.0/@events.0" nextExpr="//@interimmodels.2/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.2/@designmodel" visitedStates="10" verifyTime="0.008002" testport="//@interimmodels.2/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!13 -> cartwire_req?13 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!13 -> cartwire_res?13" exprText="[]  (OrdersService.postorder.save -> &lt;> Payment.pay.paid)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.2/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.3/@port.0/@events.1" nextExpr="//@interimmodels.2/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.2/@designmodel" counterExample="" visitedStates="15" verifyTime="0.005137999999999999" testport="//@interimmodels.2/@designmodel/@component.0/@port.0" traceExample="init -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!81 -> userwire_req?81 -> UserService_userwire_responder_invoke -> UserService_login_signedon -> UserService_userwire_responder_process -> userwire_res!81 -> userwire_res?81" exprText="[]  (ShopFrontend.auth.checked -> &lt;> UserService.login.signedon)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.2/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.2/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.2/@designmodel" counterExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!62 -> cateloquewire_req?62 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!62 -> cateloquewire_res?62" visitedStates="24" verifyTime="0.0055617" testport="//@interimmodels.2/@designmodel/@component.0/@port.1" traceExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!42 -> cateloquewire_req?42 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!42 -> cateloquewire_res?42" exprText="[]  (&lt;> ShopFrontend.browse.read -> &lt;> CateloqueService.list.query)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.2/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.1/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.0/@port.1/@events.0" operator="EVENTUALLY" nextExpr="//@interimmodels.2/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop6" model="//@interimmodels.2/@designmodel" counterExample="" visitedStates="29" verifyTime="0.0056029999999999995" testport="//@interimmodels.2/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!87 -> orderquerywire_req?87 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_reader_process -> orderreadwire_req!87 -> orderreadwire_req?87 -> OrdersDB_orderreadwire_readstorage_invoke -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstorage_process -> orderreadwire_res!87 -> orderreadwire_res?87 -> OrdersService_orderreadwire_reader_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!87 -> orderquerywire_res?87" exprText="[]  (ShopBackend.listorder.renderlist -> &lt;> OrdersDB.queryorder.orderreaded)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.2/@designmodel/@verifyProperty.5">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.10/@port.0/@events.0" nextExpr="//@interimmodels.2/@designmodel/@verifyProperty.5/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop7" model="//@interimmodels.2/@designmodel" counterExample="" visitedStates="60" verifyTime="0.0092792" testport="//@interimmodels.2/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_publisher_process -> orderwire_pub!65 -> orderwire_pub?65 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!65 -> orderlogwire_req?65 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!65 -> orderlogwire_res?65 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_writer_request -> paywire_req!65 -> paywire_req?65 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!65 -> paywire_res?65 -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!65 -> shippingwire_req?65 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!65 -> shippinglogwire_req?65 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!65 -> shippinglogwire_res?65 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!65 -> shippingwire_res?65 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_subscriber_process" exprText="[]  (ShopFrontend.order.purchased -> &lt;> OrdersService.postorder.save)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.2/@designmodel/@verifyProperty.6">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.3/@port.0/@events.1" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.2/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.2/@designmodel/@verifyProperty.6/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="CLOUD_PLATFORM">
        <node name="NodeJSContainer1" component="//@interimmodels.2/@designmodel/@component.0 //@interimmodels.2/@designmodel/@component.10">
          <port name="port" portNumber="15551" node="//@interimmodels.2/@designmodel/@host.0/@node.0" namedport="//@interimmodels.2/@designmodel/@component.0/@port.0"/>
          <port name="port" portNumber="15552" node="//@interimmodels.2/@designmodel/@host.0/@node.0" namedport="//@interimmodels.2/@designmodel/@component.0/@port.2"/>
          <port name="port" portNumber="15553" node="//@interimmodels.2/@designmodel/@host.0/@node.0" namedport="//@interimmodels.2/@designmodel/@component.10/@port.0"/>
          <port name="port" portNumber="15554" node="//@interimmodels.2/@designmodel/@host.0/@node.0" namedport="//@interimmodels.2/@designmodel/@component.0/@port.3"/>
          <port name="port" portNumber="15555" node="//@interimmodels.2/@designmodel/@host.0/@node.0" namedport="//@interimmodels.2/@designmodel/@component.0/@port.1"/>
        </node>
        <node name="GoContainer3" component="//@interimmodels.2/@designmodel/@component.1">
          <port name="port" portNumber="80" node="//@interimmodels.2/@designmodel/@host.0/@node.1" namedport="//@interimmodels.2/@designmodel/@component.1/@port.0" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="SecureServer">
        <node name="GoContainer1" component="//@interimmodels.2/@designmodel/@component.2">
          <port name="port" portNumber="80" node="//@interimmodels.2/@designmodel/@host.1/@node.0" namedport="//@interimmodels.2/@designmodel/@component.2/@port.0" hasFirewall="true"/>
        </node>
        <node name="GoContainer2" component="//@interimmodels.2/@designmodel/@component.6">
          <port name="port" portNumber="80" node="//@interimmodels.2/@designmodel/@host.1/@node.1" namedport="//@interimmodels.2/@designmodel/@component.6/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="LocalServer">
        <node name="JEEContainer1" component="//@interimmodels.2/@designmodel/@component.3 //@interimmodels.2/@designmodel/@component.5">
          <port name="port" portNumber="80" namedport="//@interimmodels.2/@designmodel/@component.3/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15561" node="//@interimmodels.2/@designmodel/@host.2/@node.0" namedport="//@interimmodels.2/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15562" node="//@interimmodels.2/@designmodel/@host.2/@node.0" namedport="//@interimmodels.2/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15563" node="//@interimmodels.2/@designmodel/@host.2/@node.0" namedport="//@interimmodels.2/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15564" node="//@interimmodels.2/@designmodel/@host.2/@node.0" namedport="//@interimmodels.2/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15566" node="//@interimmodels.2/@designmodel/@host.2/@node.0" namedport="//@interimmodels.2/@designmodel/@component.3/@port.1"/>
          <port name="port" portNumber="81" node="//@interimmodels.2/@designmodel/@host.2/@node.0" namedport="//@interimmodels.2/@designmodel/@component.3/@port.1"/>
        </node>
        <node name="MySQL1" component="//@interimmodels.2/@designmodel/@component.4">
          <port name="port" portNumber="3306" node="//@interimmodels.2/@designmodel/@host.2/@node.1" namedport="//@interimmodels.2/@designmodel/@component.4/@port.0 //@interimmodels.2/@designmodel/@component.4/@port.1"/>
        </node>
      </host>
      <host name="BackOfficeServer">
        <node name="JEEContainer4" component="//@interimmodels.2/@designmodel/@component.7 //@interimmodels.2/@designmodel/@component.8">
          <port name="port" portNumber="80" node="//@interimmodels.2/@designmodel/@host.3/@node.0" namedport="//@interimmodels.2/@designmodel/@component.7/@port.0" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15571" node="//@interimmodels.2/@designmodel/@host.3/@node.0" namedport="//@interimmodels.2/@designmodel/@component.7/@port.0"/>
          <port name="port" portNumber="15572" node="//@interimmodels.2/@designmodel/@host.3/@node.0" namedport="//@interimmodels.2/@designmodel/@component.7/@port.0"/>
        </node>
        <node name="MySQL2" component="//@interimmodels.2/@designmodel/@component.9">
          <port name="port" portNumber="3306" node="//@interimmodels.2/@designmodel/@host.3/@node.1" namedport="//@interimmodels.2/@designmodel/@component.9/@port.0 //@interimmodels.2/@designmodel/@component.9/@port.1"/>
        </node>
      </host>
      <link name="link2" linkType="HTTPS" networkType="INTERNET" source="//@interimmodels.2/@designmodel/@host.0/@node.0/@port.1" target="//@interimmodels.2/@designmodel/@host.2/@node.0/@port.0"/>
      <link name="link3" source="//@interimmodels.2/@designmodel/@host.2/@node.0/@port.1"/>
      <link name="link4" source="//@interimmodels.2/@designmodel/@host.2/@node.0/@port.2"/>
      <link name="link5" target="//@interimmodels.2/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link7" networkType="INTERNET" source="//@interimmodels.2/@designmodel/@host.0/@node.0/@port.3"/>
      <link name="link9" source="//@interimmodels.2/@designmodel/@host.0/@node.0/@port.4" target="//@interimmodels.2/@designmodel/@host.0/@node.1/@port.0"/>
      <link name="link11" source="//@interimmodels.2/@designmodel/@host.3/@node.0/@port.1"/>
      <link name="link12" source="//@interimmodels.2/@designmodel/@host.3/@node.0/@port.2"/>
      <link name="link13" target="//@interimmodels.2/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link14" target="//@interimmodels.2/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link16" source="//@interimmodels.2/@designmodel/@host.2/@node.0/@port.5" target="//@interimmodels.2/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link15" networkType="INTERNET" source="//@interimmodels.2/@designmodel/@host.0/@node.0/@port.2" target="//@interimmodels.2/@designmodel/@host.2/@node.0/@port.6"/>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="4" description="deploy service: shippingservice" nextModel="//@interimmodels.4" isStable="true" name="deploy-service">
    <designmodel name="inter4">
      <component name="ShopFrontend" type="client,broadcaster" deploymentnode="//@interimmodels.3/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface,LeastPriviledge">
        <port name="auth" role="//@interimmodels.3/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="checked"/>
        </port>
        <port name="browse" role="//@interimmodels.3/@designmodel/@connector.1/@role.0" type="request,OutboundPort">
          <events name="read"/>
        </port>
        <port name="order" role="//@interimmodels.3/@designmodel/@connector.9/@role.0" type="broadcast,OutboundPort">
          <events name="purchased"/>
        </port>
        <port name="shop" role="//@interimmodels.3/@designmodel/@connector.3/@role.0" type="request,OutboundPort">
          <events name="itemadded"/>
        </port>
      </component>
      <component name="CateloqueService" type="server" deploymentnode="//@interimmodels.3/@designmodel/@host.0/@node.1" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
        <port name="list" role="//@interimmodels.3/@designmodel/@connector.1/@role.1" type="response,InboundPort">
          <events name="query"/>
        </port>
      </component>
      <component name="UserService" type="server" deploymentnode="//@interimmodels.3/@designmodel/@host.1/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DefenseInDepth,DenialOfService">
        <port name="login" role="//@interimmodels.3/@designmodel/@connector.0/@role.1" type="response,InboundPort">
          <events name="signedon"/>
        </port>
      </component>
      <component name="OrdersService" type="client,server,listener,eventconsumer,readendpoint,datawriter,datareader" deploymentnode="//@interimmodels.3/@designmodel/@host.2/@node.0" criticalLevel="Low" securityCharacters="AttackSurface,LeastPriviledge,Compartmentalization,DenialOfService,DataTampering">
        <port name="postorder" role="//@interimmodels.3/@designmodel/@connector.4/@role.0 //@interimmodels.3/@designmodel/@connector.7/@role.0 //@interimmodels.3/@designmodel/@connector.9/@role.1 //@interimmodels.3/@designmodel/@connector.10/@role.0" type="request,listen,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="check" next="//@interimmodels.3/@designmodel/@component.3/@port.0/@events.1"/>
          <events name="save"/>
        </port>
        <port name="get" role="//@interimmodels.3/@designmodel/@connector.2/@role.1 //@interimmodels.3/@designmodel/@connector.8/@role.0" type="response,read,OutboundPort,InboundPort,EventProcessorPort">
          <events name="ack"/>
        </port>
      </component>
      <component name="OrdersDB" type="repository,datastore" deploymentnode="//@interimmodels.3/@designmodel/@host.2/@node.1">
        <port name="writeorder" role="//@interimmodels.3/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="orderwritten"/>
        </port>
        <port name="queryorder" role="//@interimmodels.3/@designmodel/@connector.8/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="orderreaded"/>
        </port>
      </component>
      <component name="CartsService" type="server" deploymentnode="//@interimmodels.3/@designmodel/@host.2/@node.0" securityCharacters="AttackSurface,DenialOfService,DataTampering">
        <port name="manage" role="//@interimmodels.3/@designmodel/@connector.3/@role.1" type="response,InboundPort">
          <events name="saveitem"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,datastore" deploymentnode="//@interimmodels.3/@designmodel/@host.1/@node.1" criticalLevel="High" securityCharacters="DefenseInDepth,Compartmentalization">
        <port name="pay" role="//@interimmodels.3/@designmodel/@connector.10/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="paid"/>
        </port>
      </component>
      <component name="ShippingService" type="server,datawriter" deploymentnode="//@interimmodels.3/@designmodel/@host.3/@node.0" securityCharacters="Compartmentalization">
        <port name="postshipping" role="//@interimmodels.3/@designmodel/@connector.4/@role.1 //@interimmodels.3/@designmodel/@connector.6/@role.0" type="response,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="posted"/>
        </port>
      </component>
      <component name="ShippingWorker" type="readendpoint,datareader" deploymentnode="//@interimmodels.3/@designmodel/@host.3/@node.0">
        <port name="listqueue" role="//@interimmodels.3/@designmodel/@connector.5/@role.0" type="read,OutboundPort,EventProcessorPort">
          <events name="renderqueue"/>
        </port>
      </component>
      <component name="QueueDB" type="repository,datastore" deploymentnode="//@interimmodels.3/@designmodel/@host.3/@node.1">
        <port name="writequeue" role="//@interimmodels.3/@designmodel/@connector.6/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="queuewritten"/>
        </port>
        <port name="readqueue" role="//@interimmodels.3/@designmodel/@connector.5/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="queuereaded"/>
        </port>
      </component>
      <component name="ShopBackend" type="client" deploymentnode="//@interimmodels.3/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface">
        <port name="listorder" role="//@interimmodels.3/@designmodel/@connector.2/@role.0" type="request,OutboundPort">
          <events name="renderlist"/>
        </port>
      </component>
      <component name="OrderlogwireCommandLog" type="commanddb,datastore">
        <port name="logorderlogwire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <component name="ShippinglogwireCommandLog" type="commanddb,datastore">
        <port name="logshippinglogwire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.3/@node.2"/>
      </component>
      <component name="OrderwireLog" type="eventlogger,datastore">
        <port name="logorderwire" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <connector name="userwire" type="CSConnector" connectortype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.3/@designmodel/@connector.0"/>
      </connector>
      <connector name="cateloquewire" type="CSConnector" connectortype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.1"/>
        <role name="responder" roletype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.3/@designmodel/@connector.1"/>
      </connector>
      <connector name="orderquerywire" type="CSConnector" connectortype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.2"/>
        <role name="responder" roletype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.3/@designmodel/@connector.8/@role.0" connector="//@interimmodels.3/@designmodel/@connector.2"/>
      </connector>
      <connector name="cartwire" type="CSConnector" connectortype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.3"/>
        <role name="responder" roletype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.3/@designmodel/@connector.3"/>
      </connector>
      <connector name="shippingwire" type="CSConnector" connectortype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.3/@designmodel/@connector.6/@role.0" connector="//@interimmodels.3/@designmodel/@connector.4"/>
      </connector>
      <connector name="queuereadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.5"/>
        <role name="readstorage" roletype="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.3/@designmodel/@connector.5"/>
      </connector>
      <connector name="shippinglogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.6"/>
        <role name="writestorage" roletype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.3/@designmodel/@connector.6"/>
      </connector>
      <connector name="orderlogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.3/@designmodel/@connector.10/@role.0" connector="//@interimmodels.3/@designmodel/@connector.7"/>
        <role name="writestorage" roletype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.3/@designmodel/@connector.7"/>
      </connector>
      <connector name="orderreadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.8"/>
        <role name="readstorage" roletype="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.3/@designmodel/@connector.8"/>
      </connector>
      <connector name="orderwire" type="PSConnector,RuleEventCentre" connectortype="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0">
        <role name="publisher" roletype="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.3/@designmodel/@connector.9"/>
        <role name="subscriber" roletype="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.3/@designmodel/@connector.7/@role.0" connector="//@interimmodels.3/@designmodel/@connector.9"/>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="writer" nextRoleExpr="//@interimmodels.3/@designmodel/@connector.4/@role.0" connector="//@interimmodels.3/@designmodel/@connector.10"/>
        <role name="writestorage" roletype="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="writestorage" connector="//@interimmodels.3/@designmodel/@connector.10"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.3/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.3/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.3/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.3/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.3/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.3/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.3/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.3/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.3/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.4" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.3/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
            <event name="Skip"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.3/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.3/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.3/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.3/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.3/@designmodel/@archstyle.4/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.3/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.3/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.3/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.3/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.3/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.3/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.3/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.3/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.3/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.3/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.3/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.3/@designmodel" counterExample="" visitedStates="15" verifyTime="0.0050377" testport="//@interimmodels.3/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!91 -> cartwire_req?91 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!91 -> cartwire_res?91" exprText="[]  (ShopFrontend.shop.itemadded -> &lt;> CartsService.manage.saveitem)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.3/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.0/@port.3/@events.0" nextExpr="//@interimmodels.3/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.3/@designmodel" counterExample="" visitedStates="65" verifyTime="0.0061736" testport="//@interimmodels.3/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_publisher_process -> orderwire_pub!45 -> orderwire_pub?45 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!45 -> orderlogwire_req?45 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!45 -> orderlogwire_res?45 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_writer_request -> paywire_req!45 -> paywire_req?45 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!45 -> paywire_res?45 -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!45 -> shippingwire_req?45 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!45 -> shippinglogwire_req?45 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!45 -> shippinglogwire_res?45 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!45 -> shippingwire_res?45 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_subscriber_process" exprText="[]  (Payment.pay.paid -> &lt;> ShippingService.postshipping.posted)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.3/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.6/@port.0/@events.0" nextExpr="//@interimmodels.3/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.3/@designmodel" visitedStates="10" verifyTime="0.0044646" testport="//@interimmodels.3/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!37 -> cartwire_req?37 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!37 -> cartwire_res?37" exprText="[]  (OrdersService.postorder.save -> &lt;> Payment.pay.paid)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.3/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.3/@port.0/@events.1" nextExpr="//@interimmodels.3/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.3/@designmodel" counterExample="" visitedStates="15" verifyTime="0.008654499999999999" testport="//@interimmodels.3/@designmodel/@component.0/@port.0" traceExample="init -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!26 -> userwire_req?26 -> UserService_userwire_responder_invoke -> UserService_login_signedon -> UserService_userwire_responder_process -> userwire_res!26 -> userwire_res?26" exprText="[]  (ShopFrontend.auth.checked -> &lt;> UserService.login.signedon)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.3/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.3/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.3/@designmodel" counterExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!62 -> cateloquewire_req?62 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!62 -> cateloquewire_res?62" visitedStates="24" verifyTime="0.0058226" testport="//@interimmodels.3/@designmodel/@component.0/@port.1" traceExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!57 -> cateloquewire_req?57 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!57 -> cateloquewire_res?57" exprText="[]  (&lt;> ShopFrontend.browse.read -> &lt;> CateloqueService.list.query)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.3/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.1/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.0/@port.1/@events.0" operator="EVENTUALLY" nextExpr="//@interimmodels.3/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop6" model="//@interimmodels.3/@designmodel" counterExample="" visitedStates="29" verifyTime="0.0052711" testport="//@interimmodels.3/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!41 -> orderquerywire_req?41 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_reader_process -> orderreadwire_req!41 -> orderreadwire_req?41 -> OrdersDB_orderreadwire_readstorage_invoke -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstorage_process -> orderreadwire_res!41 -> orderreadwire_res?41 -> OrdersService_orderreadwire_reader_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!41 -> orderquerywire_res?41" exprText="[]  (ShopBackend.listorder.renderlist -> &lt;> OrdersDB.queryorder.orderreaded)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.3/@designmodel/@verifyProperty.5">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.10/@port.0/@events.0" nextExpr="//@interimmodels.3/@designmodel/@verifyProperty.5/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop7" model="//@interimmodels.3/@designmodel" counterExample="" visitedStates="60" verifyTime="0.0059497" testport="//@interimmodels.3/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_publisher_process -> orderwire_pub!80 -> orderwire_pub?80 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!80 -> orderlogwire_req?80 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!80 -> orderlogwire_res?80 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_writer_request -> paywire_req!80 -> paywire_req?80 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!80 -> paywire_res?80 -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!80 -> shippingwire_req?80 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!80 -> shippinglogwire_req?80 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!80 -> shippinglogwire_res?80 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!80 -> shippingwire_res?80 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_subscriber_process" exprText="[]  (ShopFrontend.order.purchased -> &lt;> OrdersService.postorder.save)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.3/@designmodel/@verifyProperty.6">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.3/@port.0/@events.1" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.3/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.3/@designmodel/@verifyProperty.6/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="CLOUD_PLATFORM">
        <node name="NodeJSContainer1" component="//@interimmodels.3/@designmodel/@component.0 //@interimmodels.3/@designmodel/@component.10">
          <port name="port" portNumber="15551" node="//@interimmodels.3/@designmodel/@host.0/@node.0" namedport="//@interimmodels.3/@designmodel/@component.0/@port.0"/>
          <port name="port" portNumber="15552" node="//@interimmodels.3/@designmodel/@host.0/@node.0" namedport="//@interimmodels.3/@designmodel/@component.0/@port.2"/>
          <port name="port" portNumber="15553" node="//@interimmodels.3/@designmodel/@host.0/@node.0" namedport="//@interimmodels.3/@designmodel/@component.10/@port.0"/>
          <port name="port" portNumber="15554" node="//@interimmodels.3/@designmodel/@host.0/@node.0" namedport="//@interimmodels.3/@designmodel/@component.0/@port.3"/>
          <port name="port" portNumber="15555" node="//@interimmodels.3/@designmodel/@host.0/@node.0" namedport="//@interimmodels.3/@designmodel/@component.0/@port.1"/>
        </node>
        <node name="GoContainer3" component="//@interimmodels.3/@designmodel/@component.1">
          <port name="port" portNumber="80" node="//@interimmodels.3/@designmodel/@host.0/@node.1" namedport="//@interimmodels.3/@designmodel/@component.1/@port.0" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="SecureServer">
        <node name="GoContainer1" component="//@interimmodels.3/@designmodel/@component.2">
          <port name="port" portNumber="80" node="//@interimmodels.3/@designmodel/@host.1/@node.0" namedport="//@interimmodels.3/@designmodel/@component.2/@port.0" hasFirewall="true"/>
        </node>
        <node name="GoContainer2" component="//@interimmodels.3/@designmodel/@component.6">
          <port name="port" portNumber="80" node="//@interimmodels.3/@designmodel/@host.1/@node.1" namedport="//@interimmodels.3/@designmodel/@component.6/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="LocalServer">
        <node name="JEEContainer1" component="//@interimmodels.3/@designmodel/@component.3 //@interimmodels.3/@designmodel/@component.5">
          <port name="port" portNumber="80" namedport="//@interimmodels.3/@designmodel/@component.3/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15561" node="//@interimmodels.3/@designmodel/@host.2/@node.0" namedport="//@interimmodels.3/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15562" node="//@interimmodels.3/@designmodel/@host.2/@node.0" namedport="//@interimmodels.3/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15563" node="//@interimmodels.3/@designmodel/@host.2/@node.0" namedport="//@interimmodels.3/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15564" node="//@interimmodels.3/@designmodel/@host.2/@node.0" namedport="//@interimmodels.3/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15566" node="//@interimmodels.3/@designmodel/@host.2/@node.0" namedport="//@interimmodels.3/@designmodel/@component.3/@port.1"/>
          <port name="port" portNumber="81" node="//@interimmodels.3/@designmodel/@host.2/@node.0" namedport="//@interimmodels.3/@designmodel/@component.3/@port.1"/>
        </node>
        <node name="MySQL1" component="//@interimmodels.3/@designmodel/@component.4">
          <port name="port" portNumber="3306" node="//@interimmodels.3/@designmodel/@host.2/@node.1" namedport="//@interimmodels.3/@designmodel/@component.4/@port.0 //@interimmodels.3/@designmodel/@component.4/@port.1"/>
        </node>
      </host>
      <host name="BackOfficeServer">
        <node name="JEEContainer4" component="//@interimmodels.3/@designmodel/@component.7 //@interimmodels.3/@designmodel/@component.8">
          <port name="port" portNumber="80" node="//@interimmodels.3/@designmodel/@host.3/@node.0" namedport="//@interimmodels.3/@designmodel/@component.7/@port.0" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15571" node="//@interimmodels.3/@designmodel/@host.3/@node.0" namedport="//@interimmodels.3/@designmodel/@component.7/@port.0"/>
          <port name="port" portNumber="15572" node="//@interimmodels.3/@designmodel/@host.3/@node.0" namedport="//@interimmodels.3/@designmodel/@component.7/@port.0"/>
        </node>
        <node name="MySQL2" component="//@interimmodels.3/@designmodel/@component.9">
          <port name="port" portNumber="3306" node="//@interimmodels.3/@designmodel/@host.3/@node.1" namedport="//@interimmodels.3/@designmodel/@component.9/@port.0 //@interimmodels.3/@designmodel/@component.9/@port.1"/>
        </node>
      </host>
      <link name="link2" linkType="HTTPS" networkType="INTERNET" source="//@interimmodels.3/@designmodel/@host.0/@node.0/@port.1" target="//@interimmodels.3/@designmodel/@host.2/@node.0/@port.0"/>
      <link name="link3" source="//@interimmodels.3/@designmodel/@host.2/@node.0/@port.1"/>
      <link name="link4" source="//@interimmodels.3/@designmodel/@host.2/@node.0/@port.2"/>
      <link name="link5" target="//@interimmodels.3/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link7" networkType="INTERNET" source="//@interimmodels.3/@designmodel/@host.0/@node.0/@port.3"/>
      <link name="link9" source="//@interimmodels.3/@designmodel/@host.0/@node.0/@port.4" target="//@interimmodels.3/@designmodel/@host.0/@node.1/@port.0"/>
      <link name="link11" source="//@interimmodels.3/@designmodel/@host.3/@node.0/@port.1"/>
      <link name="link12" source="//@interimmodels.3/@designmodel/@host.3/@node.0/@port.2"/>
      <link name="link13" target="//@interimmodels.3/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link14" target="//@interimmodels.3/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link16" source="//@interimmodels.3/@designmodel/@host.2/@node.0/@port.5" target="//@interimmodels.3/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link15" networkType="INTERNET" source="//@interimmodels.3/@designmodel/@host.0/@node.0/@port.2" target="//@interimmodels.3/@designmodel/@host.2/@node.0/@port.6"/>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="5" description="network route for connector:orderwire between: shopfrontend orderwirelog " nextModel="//@interimmodels.5" name="network-route">
    <designmodel name="inter5">
      <component name="ShopFrontend" type="client,broadcaster" deploymentnode="//@interimmodels.4/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface,LeastPriviledge">
        <port name="auth" role="//@interimmodels.4/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="checked"/>
        </port>
        <port name="browse" role="//@interimmodels.4/@designmodel/@connector.1/@role.0" type="request,OutboundPort">
          <events name="read"/>
        </port>
        <port name="order" role="//@interimmodels.4/@designmodel/@connector.9/@role.0" type="broadcast,OutboundPort">
          <events name="purchased"/>
        </port>
        <port name="shop" role="//@interimmodels.4/@designmodel/@connector.3/@role.0" type="request,OutboundPort">
          <events name="itemadded"/>
        </port>
      </component>
      <component name="CateloqueService" type="server" deploymentnode="//@interimmodels.4/@designmodel/@host.0/@node.1" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
        <port name="list" role="//@interimmodels.4/@designmodel/@connector.1/@role.1" type="response,InboundPort">
          <events name="query"/>
        </port>
      </component>
      <component name="UserService" type="server" deploymentnode="//@interimmodels.4/@designmodel/@host.1/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DefenseInDepth,DenialOfService">
        <port name="login" role="//@interimmodels.4/@designmodel/@connector.0/@role.1" type="response,InboundPort">
          <events name="signedon"/>
        </port>
      </component>
      <component name="OrdersService" type="client,server,listener,eventconsumer,readendpoint,datawriter,datareader" deploymentnode="//@interimmodels.4/@designmodel/@host.2/@node.0" criticalLevel="Low" securityCharacters="AttackSurface,LeastPriviledge,Compartmentalization,DenialOfService,DataTampering">
        <port name="postorder" role="//@interimmodels.4/@designmodel/@connector.4/@role.0 //@interimmodels.4/@designmodel/@connector.7/@role.0 //@interimmodels.4/@designmodel/@connector.10/@role.0" type="request,listen,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="check" next="//@interimmodels.4/@designmodel/@component.3/@port.0/@events.1"/>
          <events name="save"/>
        </port>
        <port name="get" role="//@interimmodels.4/@designmodel/@connector.2/@role.1 //@interimmodels.4/@designmodel/@connector.8/@role.0" type="response,read,OutboundPort,InboundPort,EventProcessorPort">
          <events name="ack"/>
        </port>
      </component>
      <component name="OrdersDB" type="repository,datastore" deploymentnode="//@interimmodels.4/@designmodel/@host.2/@node.1">
        <port name="writeorder" role="//@interimmodels.4/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="orderwritten"/>
        </port>
        <port name="queryorder" role="//@interimmodels.4/@designmodel/@connector.8/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="orderreaded"/>
        </port>
      </component>
      <component name="CartsService" type="server" deploymentnode="//@interimmodels.4/@designmodel/@host.2/@node.0" securityCharacters="AttackSurface,DenialOfService,DataTampering">
        <port name="manage" role="//@interimmodels.4/@designmodel/@connector.3/@role.1" type="response,InboundPort">
          <events name="saveitem"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,datastore" deploymentnode="//@interimmodels.4/@designmodel/@host.1/@node.1" criticalLevel="High" securityCharacters="DefenseInDepth,Compartmentalization">
        <port name="pay" role="//@interimmodels.4/@designmodel/@connector.10/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="paid"/>
        </port>
      </component>
      <component name="ShippingService" type="server,datawriter" deploymentnode="//@interimmodels.4/@designmodel/@host.3/@node.0" securityCharacters="Compartmentalization">
        <port name="postshipping" role="//@interimmodels.4/@designmodel/@connector.4/@role.1 //@interimmodels.4/@designmodel/@connector.6/@role.0" type="response,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="posted"/>
        </port>
      </component>
      <component name="ShippingWorker" type="readendpoint,datareader" deploymentnode="//@interimmodels.4/@designmodel/@host.3/@node.0">
        <port name="listqueue" role="//@interimmodels.4/@designmodel/@connector.5/@role.0" type="read,OutboundPort,EventProcessorPort">
          <events name="renderqueue"/>
        </port>
      </component>
      <component name="QueueDB" type="repository,datastore" deploymentnode="//@interimmodels.4/@designmodel/@host.3/@node.1">
        <port name="writequeue" role="//@interimmodels.4/@designmodel/@connector.6/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="queuewritten"/>
        </port>
        <port name="readqueue" role="//@interimmodels.4/@designmodel/@connector.5/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="queuereaded"/>
        </port>
      </component>
      <component name="ShopBackend" type="client" deploymentnode="//@interimmodels.4/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface">
        <port name="listorder" role="//@interimmodels.4/@designmodel/@connector.2/@role.0" type="request,OutboundPort">
          <events name="renderlist"/>
        </port>
      </component>
      <component name="OrderlogwireCommandLog" type="commanddb,datastore">
        <port name="logorderlogwire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <component name="ShippinglogwireCommandLog" type="commanddb,datastore">
        <port name="logshippinglogwire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.3/@node.2"/>
      </component>
      <component name="OrderwireLog" type="eventlogger,datastore">
        <port name="logorderwire" role="//@interimmodels.4/@designmodel/@connector.9/@role.2" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <connector name="userwire" type="CSConnector" connectortype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.4/@designmodel/@connector.0"/>
      </connector>
      <connector name="cateloquewire" type="CSConnector" connectortype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.1"/>
        <role name="responder" roletype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.4/@designmodel/@connector.1"/>
      </connector>
      <connector name="orderquerywire" type="CSConnector" connectortype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.2"/>
        <role name="responder" roletype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.4/@designmodel/@connector.8/@role.0" connector="//@interimmodels.4/@designmodel/@connector.2"/>
      </connector>
      <connector name="cartwire" type="CSConnector" connectortype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.3"/>
        <role name="responder" roletype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.4/@designmodel/@connector.3"/>
      </connector>
      <connector name="shippingwire" type="CSConnector" connectortype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.4/@designmodel/@connector.6/@role.0" connector="//@interimmodels.4/@designmodel/@connector.4"/>
      </connector>
      <connector name="queuereadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.5"/>
        <role name="readstorage" roletype="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.4/@designmodel/@connector.5"/>
      </connector>
      <connector name="shippinglogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.6"/>
        <role name="writestorage" roletype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.4/@designmodel/@connector.6"/>
      </connector>
      <connector name="orderlogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.4/@designmodel/@connector.10/@role.0" connector="//@interimmodels.4/@designmodel/@connector.7"/>
        <role name="writestorage" roletype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.4/@designmodel/@connector.7"/>
      </connector>
      <connector name="orderreadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.8"/>
        <role name="readstorage" roletype="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.4/@designmodel/@connector.8"/>
      </connector>
      <connector name="orderwire" type="ESConnector" connectortype="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.4/@designmodel/@archstyle.1/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.4/@designmodel/@connector.9"/>
        <role name="eventsubscriber" roletype="//@interimmodels.4/@designmodel/@archstyle.1/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.4/@designmodel/@connector.7/@role.0" connector="//@interimmodels.4/@designmodel/@connector.9"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.9"/>
        </role>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="writer" nextRoleExpr="//@interimmodels.4/@designmodel/@connector.4/@role.0" connector="//@interimmodels.4/@designmodel/@connector.10"/>
        <role name="writestorage" roletype="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="writestorage" connector="//@interimmodels.4/@designmodel/@connector.10"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.4/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.4/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.4/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.4/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.4/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.4/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.4/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.4/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.4/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.4/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.4" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.4/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
            <event name="Skip"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.4/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.4/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.4/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.4/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.4/@designmodel/@archstyle.4/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.4/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.4/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.4/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.4/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.4/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.4/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.4/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.4/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.4/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.4/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.4/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.4/@designmodel" counterExample="" visitedStates="1175" verifyTime="0.0340059" testport="//@interimmodels.4/@designmodel/@component.0/@port.3" traceExample="init -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!50 -> orderlogwire_req?50 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!50 -> orderlogwire_res?50 -> OrdersService_paywire_writer_request -> paywire_req!50 -> paywire_req?50 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!50 -> paywire_res?50 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!50 -> shippingwire_req?50 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!50 -> shippinglogwire_req?50 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!50 -> shippinglogwire_res?50 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!50 -> shippingwire_res?50 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_writer_process -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!73 -> cartwire_req?73 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!73 -> cartwire_res?73" exprText="[]  (ShopFrontend.shop.itemadded -> &lt;> CartsService.manage.saveitem)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.4/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.0/@port.3/@events.0" nextExpr="//@interimmodels.4/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.4/@designmodel" counterExample="" visitedStates="1938" verifyTime="0.0577815" testport="//@interimmodels.4/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!25 -> orderlogwire_req?25 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!25 -> orderlogwire_res?25 -> OrdersService_paywire_writer_request -> paywire_req!25 -> paywire_req?25 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!25 -> paywire_res?25 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!25 -> shippingwire_req?25 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!25 -> shippinglogwire_req?25 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!25 -> shippinglogwire_res?25 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!25 -> shippingwire_res?25 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_writer_process -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!70 -> orderwire_pevt?70 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!70 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?70 -> orderwire_bevt!70 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (Payment.pay.paid -> &lt;> ShippingService.postshipping.posted)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.4/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.6/@port.0/@events.0" nextExpr="//@interimmodels.4/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.4/@designmodel" valid="false" counterExample="init -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!69 -> orderlogwire_req?69 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!69 -> orderlogwire_res?69 -> OrdersService_paywire_writer_request -> paywire_req!69 -> paywire_req?69 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!69 -> paywire_res?69 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!69 -> shippingwire_req?69 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!69 -> shippinglogwire_req?69 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!69 -> shippinglogwire_res?69 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!69 -> shippingwire_res?69 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_writer_process -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!16 -> cartwire_req?16 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!16 -> cartwire_res?16" visitedStates="518" verifyTime="0.0186142" testport="//@interimmodels.4/@designmodel/@component.0/@port.3" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter5() |= ![](OrdersService_postorder_save->&lt;" exprText="[]  (OrdersService.postorder.save -> &lt;> Payment.pay.paid)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.4/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.3/@port.0/@events.1" nextExpr="//@interimmodels.4/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.4/@designmodel" counterExample="" visitedStates="1175" verifyTime="0.0424868" testport="//@interimmodels.4/@designmodel/@component.0/@port.0" traceExample="init -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!28 -> orderlogwire_req?28 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!28 -> orderlogwire_res?28 -> OrdersService_paywire_writer_request -> paywire_req!28 -> paywire_req?28 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!28 -> paywire_res?28 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!28 -> shippingwire_req?28 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!28 -> shippinglogwire_req?28 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!28 -> shippinglogwire_res?28 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!28 -> shippingwire_res?28 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_writer_process -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!50 -> userwire_req?50 -> UserService_userwire_responder_invoke -> UserService_login_signedon -> UserService_userwire_responder_process -> userwire_res!50 -> userwire_res?50" exprText="[]  (ShopFrontend.auth.checked -> &lt;> UserService.login.signedon)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.4/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.4/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.4/@designmodel" counterExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!62 -> cateloquewire_req?62 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!62 -> cateloquewire_res?62" visitedStates="1904" verifyTime="0.0609869" testport="//@interimmodels.4/@designmodel/@component.0/@port.1" traceExample="init -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!31 -> orderlogwire_req?31 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!31 -> orderlogwire_res?31 -> OrdersService_paywire_writer_request -> paywire_req!31 -> paywire_req?31 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!31 -> paywire_res?31 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!31 -> shippingwire_req?31 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!31 -> shippinglogwire_req?31 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!31 -> shippinglogwire_res?31 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!31 -> shippingwire_res?31 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_writer_process -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!74 -> cateloquewire_req?74 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!74 -> cateloquewire_res?74" exprText="[]  (&lt;> ShopFrontend.browse.read -> &lt;> CateloqueService.list.query)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.4/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.1/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.0/@port.1/@events.0" operator="EVENTUALLY" nextExpr="//@interimmodels.4/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop6" model="//@interimmodels.4/@designmodel" counterExample="" visitedStates="29" verifyTime="0.0057502" testport="//@interimmodels.4/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!62 -> orderquerywire_req?62 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_reader_process -> orderreadwire_req!62 -> orderreadwire_req?62 -> OrdersDB_orderreadwire_readstorage_invoke -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstorage_process -> orderreadwire_res!62 -> orderreadwire_res?62 -> OrdersService_orderreadwire_reader_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!62 -> orderquerywire_res?62" exprText="[]  (ShopBackend.listorder.renderlist -> &lt;> OrdersDB.queryorder.orderreaded)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.4/@designmodel/@verifyProperty.5">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.10/@port.0/@events.0" nextExpr="//@interimmodels.4/@designmodel/@verifyProperty.5/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop7" model="//@interimmodels.4/@designmodel" valid="false" counterExample="init -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!84 -> orderlogwire_req?84 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!84 -> orderlogwire_res?84 -> OrdersService_paywire_writer_request -> paywire_req!84 -> paywire_req?84 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!84 -> paywire_res?84 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!84 -> shippingwire_req?84 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!84 -> shippinglogwire_req?84 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!84 -> shippinglogwire_res?84 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!84 -> shippingwire_res?84 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_writer_process -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!58 -> orderwire_pevt?58 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!58 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?58 -> orderwire_bevt!58 -> ShopFrontend_orderwire_eventpublisher_broadcast" visitedStates="150" verifyTime="0.0112293" testport="//@interimmodels.4/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!84 -> orderlogwire_req?84 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!84 -> orderlogwire_res?84 -> OrdersService_paywire_writer_request -> paywire_req!84 -> paywire_req?84 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!84 -> paywire_res?84 -> OrdersService_postorder_check -> ShopFrontend_order_purchased -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!84 -> shippingwire_req?84 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!84 -> shippinglogwire_req?84 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!84 -> shippinglogwire_res?84 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!84 -> shippingwire_res?84 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_writer_process -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!58 -> orderwire_pevt?58 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!58 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?58 -> orderwire_bevt!58 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (ShopFrontend.order.purchased -> &lt;> OrdersService.postorder.save)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.4/@designmodel/@verifyProperty.6">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.3/@port.0/@events.1" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.4/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.4/@designmodel/@verifyProperty.6/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-orderwire" visitedStates="2108" verifyTime="0.0578831" testport="//@interimmodels.4/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!25 -> orderlogwire_req?25 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!25 -> orderlogwire_res?25 -> OrdersService_paywire_writer_request -> paywire_req!25 -> paywire_req?25 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!25 -> paywire_res?25 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!25 -> shippingwire_req?25 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!25 -> shippinglogwire_req?25 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!25 -> shippinglogwire_res?25 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!25 -> shippingwire_res?25 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_writer_process -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!26 -> orderwire_pevt?26 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!26 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?26 -> orderwire_bevt!26 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (ShopFrontend.order.purchased-> &lt;> OrderwireLog.orderwire.eventstore.persist)">
        <connector href="target.arch#//@connector.9"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="CLOUD_PLATFORM">
        <node name="NodeJSContainer1" component="//@interimmodels.4/@designmodel/@component.0 //@interimmodels.4/@designmodel/@component.10">
          <port name="port" portNumber="15551" node="//@interimmodels.4/@designmodel/@host.0/@node.0" namedport="//@interimmodels.4/@designmodel/@component.0/@port.0"/>
          <port name="port" portNumber="15552" node="//@interimmodels.4/@designmodel/@host.0/@node.0" namedport="//@interimmodels.4/@designmodel/@component.0/@port.2"/>
          <port name="port" portNumber="15553" node="//@interimmodels.4/@designmodel/@host.0/@node.0" namedport="//@interimmodels.4/@designmodel/@component.10/@port.0"/>
          <port name="port" portNumber="15554" node="//@interimmodels.4/@designmodel/@host.0/@node.0" namedport="//@interimmodels.4/@designmodel/@component.0/@port.3"/>
          <port name="port" portNumber="15555" node="//@interimmodels.4/@designmodel/@host.0/@node.0" namedport="//@interimmodels.4/@designmodel/@component.0/@port.1"/>
        </node>
        <node name="GoContainer3" component="//@interimmodels.4/@designmodel/@component.1">
          <port name="port" portNumber="80" node="//@interimmodels.4/@designmodel/@host.0/@node.1" namedport="//@interimmodels.4/@designmodel/@component.1/@port.0" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="SecureServer">
        <node name="GoContainer1" component="//@interimmodels.4/@designmodel/@component.2">
          <port name="port" portNumber="80" node="//@interimmodels.4/@designmodel/@host.1/@node.0" namedport="//@interimmodels.4/@designmodel/@component.2/@port.0" hasFirewall="true"/>
        </node>
        <node name="GoContainer2" component="//@interimmodels.4/@designmodel/@component.6">
          <port name="port" portNumber="80" node="//@interimmodels.4/@designmodel/@host.1/@node.1" namedport="//@interimmodels.4/@designmodel/@component.6/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="LocalServer">
        <node name="JEEContainer1" component="//@interimmodels.4/@designmodel/@component.3 //@interimmodels.4/@designmodel/@component.5">
          <port name="port" portNumber="80" namedport="//@interimmodels.4/@designmodel/@component.3/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15561" node="//@interimmodels.4/@designmodel/@host.2/@node.0" namedport="//@interimmodels.4/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15562" node="//@interimmodels.4/@designmodel/@host.2/@node.0" namedport="//@interimmodels.4/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15563" node="//@interimmodels.4/@designmodel/@host.2/@node.0" namedport="//@interimmodels.4/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15564" node="//@interimmodels.4/@designmodel/@host.2/@node.0" namedport="//@interimmodels.4/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15566" node="//@interimmodels.4/@designmodel/@host.2/@node.0" namedport="//@interimmodels.4/@designmodel/@component.3/@port.1"/>
          <port name="port" portNumber="81" node="//@interimmodels.4/@designmodel/@host.2/@node.0" namedport="//@interimmodels.4/@designmodel/@component.3/@port.1"/>
        </node>
        <node name="MySQL1" component="//@interimmodels.4/@designmodel/@component.4">
          <port name="port" portNumber="3306" node="//@interimmodels.4/@designmodel/@host.2/@node.1" namedport="//@interimmodels.4/@designmodel/@component.4/@port.0 //@interimmodels.4/@designmodel/@component.4/@port.1"/>
        </node>
      </host>
      <host name="BackOfficeServer">
        <node name="JEEContainer4" component="//@interimmodels.4/@designmodel/@component.7 //@interimmodels.4/@designmodel/@component.8">
          <port name="port" portNumber="80" node="//@interimmodels.4/@designmodel/@host.3/@node.0" namedport="//@interimmodels.4/@designmodel/@component.7/@port.0" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15571" node="//@interimmodels.4/@designmodel/@host.3/@node.0" namedport="//@interimmodels.4/@designmodel/@component.7/@port.0"/>
          <port name="port" portNumber="15572" node="//@interimmodels.4/@designmodel/@host.3/@node.0" namedport="//@interimmodels.4/@designmodel/@component.7/@port.0"/>
        </node>
        <node name="MySQL2" component="//@interimmodels.4/@designmodel/@component.9">
          <port name="port" portNumber="3306" node="//@interimmodels.4/@designmodel/@host.3/@node.1" namedport="//@interimmodels.4/@designmodel/@component.9/@port.0 //@interimmodels.4/@designmodel/@component.9/@port.1"/>
        </node>
      </host>
      <link name="link2" linkType="HTTPS" networkType="INTERNET" source="//@interimmodels.4/@designmodel/@host.0/@node.0/@port.1" target="//@interimmodels.4/@designmodel/@host.2/@node.0/@port.0"/>
      <link name="link3" source="//@interimmodels.4/@designmodel/@host.2/@node.0/@port.1"/>
      <link name="link4" source="//@interimmodels.4/@designmodel/@host.2/@node.0/@port.2"/>
      <link name="link5" target="//@interimmodels.4/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link7" networkType="INTERNET" source="//@interimmodels.4/@designmodel/@host.0/@node.0/@port.3"/>
      <link name="link9" source="//@interimmodels.4/@designmodel/@host.0/@node.0/@port.4" target="//@interimmodels.4/@designmodel/@host.0/@node.1/@port.0"/>
      <link name="link11" source="//@interimmodels.4/@designmodel/@host.3/@node.0/@port.1"/>
      <link name="link12" source="//@interimmodels.4/@designmodel/@host.3/@node.0/@port.2"/>
      <link name="link13" target="//@interimmodels.4/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link14" target="//@interimmodels.4/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link16" source="//@interimmodels.4/@designmodel/@host.2/@node.0/@port.5" target="//@interimmodels.4/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link15" networkType="INTERNET" source="//@interimmodels.4/@designmodel/@host.0/@node.0/@port.2" target="//@interimmodels.4/@designmodel/@host.2/@node.0/@port.6"/>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="6" description="network route for connector:shippinglogwire between: shippingservice queuedb " nextModel="//@interimmodels.6" name="network-route">
    <designmodel name="inter6">
      <component name="ShopFrontend" type="client,broadcaster" deploymentnode="//@interimmodels.5/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface,LeastPriviledge">
        <port name="auth" role="//@interimmodels.5/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="checked"/>
        </port>
        <port name="browse" role="//@interimmodels.5/@designmodel/@connector.1/@role.0" type="request,OutboundPort">
          <events name="read"/>
        </port>
        <port name="order" role="//@interimmodels.5/@designmodel/@connector.9/@role.0" type="broadcast,OutboundPort">
          <events name="purchased"/>
        </port>
        <port name="shop" role="//@interimmodels.5/@designmodel/@connector.3/@role.0" type="request,OutboundPort">
          <events name="itemadded"/>
        </port>
      </component>
      <component name="CateloqueService" type="server" deploymentnode="//@interimmodels.5/@designmodel/@host.0/@node.1" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
        <port name="list" role="//@interimmodels.5/@designmodel/@connector.1/@role.1" type="response,InboundPort">
          <events name="query"/>
        </port>
      </component>
      <component name="UserService" type="server" deploymentnode="//@interimmodels.5/@designmodel/@host.1/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DefenseInDepth,DenialOfService">
        <port name="login" role="//@interimmodels.5/@designmodel/@connector.0/@role.1" type="response,InboundPort">
          <events name="signedon"/>
        </port>
      </component>
      <component name="OrdersService" type="client,server,listener,eventconsumer,readendpoint,datawriter,datareader" deploymentnode="//@interimmodels.5/@designmodel/@host.2/@node.0" criticalLevel="Low" securityCharacters="AttackSurface,LeastPriviledge,Compartmentalization,DenialOfService,DataTampering">
        <port name="postorder" role="//@interimmodels.5/@designmodel/@connector.4/@role.0 //@interimmodels.5/@designmodel/@connector.7/@role.0 //@interimmodels.5/@designmodel/@connector.10/@role.0" type="request,listen,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="check" next="//@interimmodels.5/@designmodel/@component.3/@port.0/@events.1"/>
          <events name="save"/>
        </port>
        <port name="get" role="//@interimmodels.5/@designmodel/@connector.2/@role.1 //@interimmodels.5/@designmodel/@connector.8/@role.0" type="response,read,OutboundPort,InboundPort,EventProcessorPort">
          <events name="ack"/>
        </port>
      </component>
      <component name="OrdersDB" type="repository,datastore" deploymentnode="//@interimmodels.5/@designmodel/@host.2/@node.1">
        <port name="writeorder" role="//@interimmodels.5/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="orderwritten"/>
        </port>
        <port name="queryorder" role="//@interimmodels.5/@designmodel/@connector.8/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="orderreaded"/>
        </port>
      </component>
      <component name="CartsService" type="server" deploymentnode="//@interimmodels.5/@designmodel/@host.2/@node.0" securityCharacters="AttackSurface,DenialOfService,DataTampering">
        <port name="manage" role="//@interimmodels.5/@designmodel/@connector.3/@role.1" type="response,InboundPort">
          <events name="saveitem"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,datastore" deploymentnode="//@interimmodels.5/@designmodel/@host.1/@node.1" criticalLevel="High" securityCharacters="DefenseInDepth,Compartmentalization">
        <port name="pay" role="//@interimmodels.5/@designmodel/@connector.10/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="paid"/>
        </port>
      </component>
      <component name="ShippingService" type="server,datawriter" deploymentnode="//@interimmodels.5/@designmodel/@host.3/@node.0" securityCharacters="Compartmentalization">
        <port name="postshipping" role="//@interimmodels.5/@designmodel/@connector.4/@role.1 //@interimmodels.5/@designmodel/@connector.6/@role.0" type="response,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="posted"/>
        </port>
      </component>
      <component name="ShippingWorker" type="readendpoint,datareader" deploymentnode="//@interimmodels.5/@designmodel/@host.3/@node.0">
        <port name="listqueue" role="//@interimmodels.5/@designmodel/@connector.5/@role.0" type="read,OutboundPort,EventProcessorPort">
          <events name="renderqueue"/>
        </port>
      </component>
      <component name="QueueDB" type="repository,datastore" deploymentnode="//@interimmodels.5/@designmodel/@host.3/@node.1">
        <port name="writequeue" role="//@interimmodels.5/@designmodel/@connector.6/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="queuewritten"/>
        </port>
        <port name="readqueue" role="//@interimmodels.5/@designmodel/@connector.5/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="queuereaded"/>
        </port>
      </component>
      <component name="ShopBackend" type="client" deploymentnode="//@interimmodels.5/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface">
        <port name="listorder" role="//@interimmodels.5/@designmodel/@connector.2/@role.0" type="request,OutboundPort">
          <events name="renderlist"/>
        </port>
      </component>
      <component name="OrderlogwireCommandLog" type="commanddb,datastore">
        <port name="logorderlogwire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <component name="ShippinglogwireCommandLog" type="commanddb,datastore">
        <port name="logshippinglogwire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.3/@node.2"/>
      </component>
      <component name="OrderwireLog" type="eventlogger,datastore">
        <port name="logorderwire" role="//@interimmodels.5/@designmodel/@connector.9/@role.2" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <connector name="userwire" type="CSConnector" connectortype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.5/@designmodel/@connector.0"/>
      </connector>
      <connector name="cateloquewire" type="CSConnector" connectortype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.1"/>
        <role name="responder" roletype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.5/@designmodel/@connector.1"/>
      </connector>
      <connector name="orderquerywire" type="CSConnector" connectortype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.2"/>
        <role name="responder" roletype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.5/@designmodel/@connector.8/@role.0" connector="//@interimmodels.5/@designmodel/@connector.2"/>
      </connector>
      <connector name="cartwire" type="CSConnector" connectortype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.3"/>
        <role name="responder" roletype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.5/@designmodel/@connector.3"/>
      </connector>
      <connector name="shippingwire" type="CSConnector" connectortype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.5/@designmodel/@connector.6/@role.0" connector="//@interimmodels.5/@designmodel/@connector.4"/>
      </connector>
      <connector name="queuereadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.5"/>
        <role name="readstorage" roletype="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.5/@designmodel/@connector.5"/>
      </connector>
      <connector name="shippinglogwire" type="CRConnector" connectortype="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.6"/>
        <role name="readstore" roletype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.5/@designmodel/@connector.6"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.4/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.6"/>
        </role>
      </connector>
      <connector name="orderlogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.5/@designmodel/@connector.10/@role.0" connector="//@interimmodels.5/@designmodel/@connector.7"/>
        <role name="writestorage" roletype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.5/@designmodel/@connector.7"/>
      </connector>
      <connector name="orderreadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.8"/>
        <role name="readstorage" roletype="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.5/@designmodel/@connector.8"/>
      </connector>
      <connector name="orderwire" type="ESConnector" connectortype="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.5/@designmodel/@archstyle.1/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.5/@designmodel/@connector.9"/>
        <role name="eventsubscriber" roletype="//@interimmodels.5/@designmodel/@archstyle.1/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.5/@designmodel/@connector.7/@role.0" connector="//@interimmodels.5/@designmodel/@connector.9"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.9"/>
        </role>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="writer" nextRoleExpr="//@interimmodels.5/@designmodel/@connector.4/@role.0" connector="//@interimmodels.5/@designmodel/@connector.10"/>
        <role name="writestorage" roletype="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="writestorage" connector="//@interimmodels.5/@designmodel/@connector.10"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.5/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.5/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.5/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.5/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.5/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.5/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.5/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.5/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.5/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.5/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.4" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.5/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
            <event name="Skip"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.5/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.5/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.5/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.5/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.5/@designmodel/@archstyle.4/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.5/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.5/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.5/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.5/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.5/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.5/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.5/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.5/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.5/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.5/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.5/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.5/@designmodel" counterExample="" visitedStates="2349" verifyTime="0.0585399" testport="//@interimmodels.5/@designmodel/@component.0/@port.3" traceExample="init -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!44 -> orderlogwire_req?44 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!44 -> orderlogwire_res?44 -> OrdersService_paywire_writer_request -> paywire_req!44 -> paywire_req?44 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!44 -> paywire_res?44 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!44 -> shippingwire_req?44 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!44 -> shippinglogwire_stmt?44 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!44 -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!44 -> shippingwire_res?44 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_writer_process -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!86 -> cartwire_req?86 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!86 -> cartwire_res?86" exprText="[]  (ShopFrontend.shop.itemadded -> &lt;> CartsService.manage.saveitem)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.5/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.0/@port.3/@events.0" nextExpr="//@interimmodels.5/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.5/@designmodel" counterExample="" visitedStates="2934" verifyTime="0.0717004" testport="//@interimmodels.5/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!49 -> orderlogwire_req?49 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!49 -> orderlogwire_res?49 -> OrdersService_paywire_writer_request -> paywire_req!49 -> paywire_req?49 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!49 -> paywire_res?49 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!49 -> shippingwire_req?49 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!49 -> shippinglogwire_stmt?49 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!49 -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!49 -> shippingwire_res?49 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_writer_process -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!76 -> orderwire_pevt?76 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!76 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?76 -> orderwire_bevt!76 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (Payment.pay.paid -> &lt;> ShippingService.postshipping.posted)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.5/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.6/@port.0/@events.0" nextExpr="//@interimmodels.5/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.5/@designmodel" valid="false" counterExample="init -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!29 -> orderlogwire_req?29 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!29 -> orderlogwire_res?29 -> OrdersService_paywire_writer_request -> paywire_req!29 -> paywire_req?29 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!29 -> paywire_res?29 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!29 -> shippingwire_req?29 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!29 -> shippinglogwire_stmt?29 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!29 -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!29 -> shippingwire_res?29 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_writer_process -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!99 -> cartwire_req?99 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!99 -> cartwire_res?99" visitedStates="1292" verifyTime="0.037714199999999996" testport="//@interimmodels.5/@designmodel/@component.0/@port.3" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter6() |= ![](OrdersService_postorder_save->&lt;" exprText="[]  (OrdersService.postorder.save -> &lt;> Payment.pay.paid)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.5/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.3/@port.0/@events.1" nextExpr="//@interimmodels.5/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.5/@designmodel" counterExample="" visitedStates="2349" verifyTime="0.0592341" testport="//@interimmodels.5/@designmodel/@component.0/@port.0" traceExample="init -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!18 -> orderlogwire_req?18 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!18 -> orderlogwire_res?18 -> OrdersService_paywire_writer_request -> paywire_req!18 -> paywire_req?18 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!18 -> paywire_res?18 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!18 -> shippingwire_req?18 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!18 -> shippinglogwire_stmt?18 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!18 -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!18 -> shippingwire_res?18 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_writer_process -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!19 -> userwire_req?19 -> UserService_userwire_responder_invoke -> UserService_login_signedon -> UserService_userwire_responder_process -> userwire_res!19 -> userwire_res?19" exprText="[]  (ShopFrontend.auth.checked -> &lt;> UserService.login.signedon)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.5/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.5/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.5/@designmodel" counterExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!62 -> cateloquewire_req?62 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!62 -> cateloquewire_res?62" visitedStates="3826" verifyTime="0.0925194" testport="//@interimmodels.5/@designmodel/@component.0/@port.1" traceExample="init -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!60 -> orderlogwire_req?60 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!60 -> orderlogwire_res?60 -> OrdersService_paywire_writer_request -> paywire_req!60 -> paywire_req?60 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!60 -> paywire_res?60 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!60 -> shippingwire_req?60 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!60 -> shippinglogwire_stmt?60 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!60 -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!60 -> shippingwire_res?60 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_writer_process -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!29 -> cateloquewire_req?29 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!29 -> cateloquewire_res?29" exprText="[]  (&lt;> ShopFrontend.browse.read -> &lt;> CateloqueService.list.query)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.5/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.1/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.0/@port.1/@events.0" operator="EVENTUALLY" nextExpr="//@interimmodels.5/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop6" model="//@interimmodels.5/@designmodel" counterExample="" visitedStates="4603" verifyTime="0.11226739999999999" testport="//@interimmodels.5/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!69 -> orderquerywire_req?69 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_reader_process -> orderreadwire_req!69 -> orderreadwire_req?69 -> OrdersDB_orderreadwire_readstorage_invoke -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstorage_process -> orderreadwire_res!69 -> orderreadwire_res?69 -> OrdersService_orderreadwire_reader_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!69 -> orderquerywire_res?69 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!54 -> orderlogwire_req?54 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!54 -> orderlogwire_res?54 -> OrdersService_paywire_writer_request -> paywire_req!54 -> paywire_req?54 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!54 -> paywire_res?54 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!54 -> shippingwire_req?54 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!54 -> shippinglogwire_stmt?54 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!54 -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!54 -> shippingwire_res?54 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_writer_process" exprText="[]  (ShopBackend.listorder.renderlist -> &lt;> OrdersDB.queryorder.orderreaded)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.5/@designmodel/@verifyProperty.5">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.10/@port.0/@events.0" nextExpr="//@interimmodels.5/@designmodel/@verifyProperty.5/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop7" model="//@interimmodels.5/@designmodel" valid="false" counterExample="init -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!54 -> orderlogwire_req?54 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!54 -> orderlogwire_res?54 -> OrdersService_paywire_writer_request -> paywire_req!54 -> paywire_req?54 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!54 -> paywire_res?54 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!54 -> shippingwire_req?54 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!54 -> shippinglogwire_stmt?54 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!54 -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!54 -> shippingwire_res?54 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_writer_process -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!21 -> orderwire_pevt?21 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!21 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?21 -> orderwire_bevt!21 -> ShopFrontend_orderwire_eventpublisher_broadcast" visitedStates="148" verifyTime="0.0098243" testport="//@interimmodels.5/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!54 -> orderlogwire_req?54 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!54 -> orderlogwire_res?54 -> OrdersService_paywire_writer_request -> paywire_req!54 -> paywire_req?54 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!54 -> paywire_res?54 -> OrdersService_postorder_check -> ShopFrontend_order_purchased -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!54 -> shippingwire_req?54 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!54 -> shippinglogwire_stmt?54 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!54 -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!54 -> shippingwire_res?54 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_writer_process -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!21 -> orderwire_pevt?21 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!21 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?21 -> orderwire_bevt!21 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (ShopFrontend.order.purchased -> &lt;> OrdersService.postorder.save)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.5/@designmodel/@verifyProperty.6">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.3/@port.0/@events.1" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.5/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.5/@designmodel/@verifyProperty.6/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-orderwire" visitedStates="4160" verifyTime="0.09789329999999999" testport="//@interimmodels.5/@designmodel/@component.0/@port.2" traceExample="init -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!32 -> orderlogwire_req?32 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!32 -> orderlogwire_res?32 -> OrdersService_paywire_writer_request -> paywire_req!32 -> paywire_req?32 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!32 -> paywire_res?32 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!32 -> shippingwire_req?32 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!32 -> shippinglogwire_stmt?32 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!32 -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!32 -> shippingwire_res?32 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_writer_process -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!16 -> orderwire_pevt?16 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!16 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?16 -> orderwire_bevt!16 -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (ShopFrontend.order.purchased-> &lt;> OrderwireLog.orderwire.eventstore.persist)">
        <connector href="target.arch#//@connector.9"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-shippinglogwire" valid="false" counterExample="init -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!59 -> orderlogwire_req?59 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!59 -> orderlogwire_res?59 -> OrdersService_paywire_writer_request -> paywire_req!59 -> paywire_req?59 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!59 -> paywire_res?59 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!59 -> shippingwire_req?59 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!59 -> shippinglogwire_stmt?59 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!59 -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!59 -> shippingwire_res?59 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderlogwire_writer_process -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!84 -> orderwire_pevt?84 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!84 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?84 -> orderwire_bevt!84 -> ShopFrontend_orderwire_eventpublisher_broadcast" visitedStates="1843" verifyTime="0.053603899999999996" testport="//@interimmodels.5/@designmodel/@component.0/@port.2" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter6() |= ![](ShippingService_postshipping_posted->&lt;" exprText="[] (ShippingService.postshipping.posted-> &lt;> ShippinglogwireCommandLog.shippinglogwire.commandstore.persist)">
        <connector href="target.arch#//@connector.6"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="CLOUD_PLATFORM">
        <node name="NodeJSContainer1" component="//@interimmodels.5/@designmodel/@component.0 //@interimmodels.5/@designmodel/@component.10">
          <port name="port" portNumber="15551" node="//@interimmodels.5/@designmodel/@host.0/@node.0" namedport="//@interimmodels.5/@designmodel/@component.0/@port.0"/>
          <port name="port" portNumber="15552" node="//@interimmodels.5/@designmodel/@host.0/@node.0" namedport="//@interimmodels.5/@designmodel/@component.0/@port.2"/>
          <port name="port" portNumber="15553" node="//@interimmodels.5/@designmodel/@host.0/@node.0" namedport="//@interimmodels.5/@designmodel/@component.10/@port.0"/>
          <port name="port" portNumber="15554" node="//@interimmodels.5/@designmodel/@host.0/@node.0" namedport="//@interimmodels.5/@designmodel/@component.0/@port.3"/>
          <port name="port" portNumber="15555" node="//@interimmodels.5/@designmodel/@host.0/@node.0" namedport="//@interimmodels.5/@designmodel/@component.0/@port.1"/>
        </node>
        <node name="GoContainer3" component="//@interimmodels.5/@designmodel/@component.1">
          <port name="port" portNumber="80" node="//@interimmodels.5/@designmodel/@host.0/@node.1" namedport="//@interimmodels.5/@designmodel/@component.1/@port.0" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="SecureServer">
        <node name="GoContainer1" component="//@interimmodels.5/@designmodel/@component.2">
          <port name="port" portNumber="80" node="//@interimmodels.5/@designmodel/@host.1/@node.0" namedport="//@interimmodels.5/@designmodel/@component.2/@port.0" hasFirewall="true"/>
        </node>
        <node name="GoContainer2" component="//@interimmodels.5/@designmodel/@component.6">
          <port name="port" portNumber="80" node="//@interimmodels.5/@designmodel/@host.1/@node.1" namedport="//@interimmodels.5/@designmodel/@component.6/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="LocalServer">
        <node name="JEEContainer1" component="//@interimmodels.5/@designmodel/@component.3 //@interimmodels.5/@designmodel/@component.5">
          <port name="port" portNumber="80" namedport="//@interimmodels.5/@designmodel/@component.3/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15561" node="//@interimmodels.5/@designmodel/@host.2/@node.0" namedport="//@interimmodels.5/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15562" node="//@interimmodels.5/@designmodel/@host.2/@node.0" namedport="//@interimmodels.5/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15563" node="//@interimmodels.5/@designmodel/@host.2/@node.0" namedport="//@interimmodels.5/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15564" node="//@interimmodels.5/@designmodel/@host.2/@node.0" namedport="//@interimmodels.5/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15566" node="//@interimmodels.5/@designmodel/@host.2/@node.0" namedport="//@interimmodels.5/@designmodel/@component.3/@port.1"/>
          <port name="port" portNumber="81" node="//@interimmodels.5/@designmodel/@host.2/@node.0" namedport="//@interimmodels.5/@designmodel/@component.3/@port.1"/>
        </node>
        <node name="MySQL1" component="//@interimmodels.5/@designmodel/@component.4">
          <port name="port" portNumber="3306" node="//@interimmodels.5/@designmodel/@host.2/@node.1" namedport="//@interimmodels.5/@designmodel/@component.4/@port.0 //@interimmodels.5/@designmodel/@component.4/@port.1"/>
        </node>
      </host>
      <host name="BackOfficeServer">
        <node name="JEEContainer4" component="//@interimmodels.5/@designmodel/@component.7 //@interimmodels.5/@designmodel/@component.8">
          <port name="port" portNumber="80" node="//@interimmodels.5/@designmodel/@host.3/@node.0" namedport="//@interimmodels.5/@designmodel/@component.7/@port.0" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15571" node="//@interimmodels.5/@designmodel/@host.3/@node.0" namedport="//@interimmodels.5/@designmodel/@component.7/@port.0"/>
          <port name="port" portNumber="15572" node="//@interimmodels.5/@designmodel/@host.3/@node.0" namedport="//@interimmodels.5/@designmodel/@component.7/@port.0"/>
        </node>
        <node name="MySQL2" component="//@interimmodels.5/@designmodel/@component.9">
          <port name="port" portNumber="3306" node="//@interimmodels.5/@designmodel/@host.3/@node.1" namedport="//@interimmodels.5/@designmodel/@component.9/@port.0 //@interimmodels.5/@designmodel/@component.9/@port.1"/>
        </node>
      </host>
      <link name="link2" linkType="HTTPS" networkType="INTERNET" source="//@interimmodels.5/@designmodel/@host.0/@node.0/@port.1" target="//@interimmodels.5/@designmodel/@host.2/@node.0/@port.0"/>
      <link name="link3" source="//@interimmodels.5/@designmodel/@host.2/@node.0/@port.1"/>
      <link name="link4" source="//@interimmodels.5/@designmodel/@host.2/@node.0/@port.2"/>
      <link name="link5" target="//@interimmodels.5/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link7" networkType="INTERNET" source="//@interimmodels.5/@designmodel/@host.0/@node.0/@port.3"/>
      <link name="link9" source="//@interimmodels.5/@designmodel/@host.0/@node.0/@port.4" target="//@interimmodels.5/@designmodel/@host.0/@node.1/@port.0"/>
      <link name="link11" source="//@interimmodels.5/@designmodel/@host.3/@node.0/@port.1"/>
      <link name="link12" source="//@interimmodels.5/@designmodel/@host.3/@node.0/@port.2"/>
      <link name="link13" target="//@interimmodels.5/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link14" target="//@interimmodels.5/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link16" source="//@interimmodels.5/@designmodel/@host.2/@node.0/@port.5" target="//@interimmodels.5/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link15" networkType="INTERNET" source="//@interimmodels.5/@designmodel/@host.0/@node.0/@port.2" target="//@interimmodels.5/@designmodel/@host.2/@node.0/@port.6"/>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="7" description="network route for connector:orderwire between: shopfrontend ordersservice " nextModel="//@interimmodels.7" name="network-route">
    <designmodel name="inter7">
      <component name="ShopFrontend" type="client,broadcaster" deploymentnode="//@interimmodels.6/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface,LeastPriviledge">
        <port name="auth" role="//@interimmodels.6/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="checked"/>
        </port>
        <port name="browse" role="//@interimmodels.6/@designmodel/@connector.1/@role.0" type="request,OutboundPort">
          <events name="read"/>
        </port>
        <port name="order" role="//@interimmodels.6/@designmodel/@connector.9/@role.0" type="broadcast,OutboundPort">
          <events name="purchased"/>
        </port>
        <port name="shop" role="//@interimmodels.6/@designmodel/@connector.3/@role.0" type="request,OutboundPort">
          <events name="itemadded"/>
        </port>
      </component>
      <component name="CateloqueService" type="server" deploymentnode="//@interimmodels.6/@designmodel/@host.0/@node.1" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
        <port name="list" role="//@interimmodels.6/@designmodel/@connector.1/@role.1" type="response,InboundPort">
          <events name="query"/>
        </port>
      </component>
      <component name="UserService" type="server" deploymentnode="//@interimmodels.6/@designmodel/@host.1/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DefenseInDepth,DenialOfService">
        <port name="login" role="//@interimmodels.6/@designmodel/@connector.0/@role.1" type="response,InboundPort">
          <events name="signedon"/>
        </port>
      </component>
      <component name="OrdersService" type="client,server,listener,eventconsumer,readendpoint,datawriter,datareader" deploymentnode="//@interimmodels.6/@designmodel/@host.2/@node.0" criticalLevel="Low" securityCharacters="AttackSurface,LeastPriviledge,Compartmentalization,DenialOfService,DataTampering">
        <port name="postorder" role="//@interimmodels.6/@designmodel/@connector.4/@role.0 //@interimmodels.6/@designmodel/@connector.7/@role.0 //@interimmodels.6/@designmodel/@connector.10/@role.0 //@interimmodels.6/@designmodel/@connector.9/@role.1" type="request,listen,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="check" next="//@interimmodels.6/@designmodel/@component.3/@port.0/@events.1"/>
          <events name="save"/>
        </port>
        <port name="get" role="//@interimmodels.6/@designmodel/@connector.2/@role.1 //@interimmodels.6/@designmodel/@connector.8/@role.0" type="response,read,OutboundPort,InboundPort,EventProcessorPort">
          <events name="ack"/>
        </port>
      </component>
      <component name="OrdersDB" type="repository,datastore" deploymentnode="//@interimmodels.6/@designmodel/@host.2/@node.1">
        <port name="writeorder" role="//@interimmodels.6/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="orderwritten"/>
        </port>
        <port name="queryorder" role="//@interimmodels.6/@designmodel/@connector.8/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="orderreaded"/>
        </port>
      </component>
      <component name="CartsService" type="server" deploymentnode="//@interimmodels.6/@designmodel/@host.2/@node.0" securityCharacters="AttackSurface,DenialOfService,DataTampering">
        <port name="manage" role="//@interimmodels.6/@designmodel/@connector.3/@role.1" type="response,InboundPort">
          <events name="saveitem"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,datastore" deploymentnode="//@interimmodels.6/@designmodel/@host.1/@node.1" criticalLevel="High" securityCharacters="DefenseInDepth,Compartmentalization">
        <port name="pay" role="//@interimmodels.6/@designmodel/@connector.10/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="paid"/>
        </port>
      </component>
      <component name="ShippingService" type="server,datawriter" deploymentnode="//@interimmodels.6/@designmodel/@host.3/@node.0" securityCharacters="Compartmentalization">
        <port name="postshipping" role="//@interimmodels.6/@designmodel/@connector.4/@role.1 //@interimmodels.6/@designmodel/@connector.6/@role.0" type="response,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="posted"/>
        </port>
      </component>
      <component name="ShippingWorker" type="readendpoint,datareader" deploymentnode="//@interimmodels.6/@designmodel/@host.3/@node.0">
        <port name="listqueue" role="//@interimmodels.6/@designmodel/@connector.5/@role.0" type="read,OutboundPort,EventProcessorPort">
          <events name="renderqueue"/>
        </port>
      </component>
      <component name="QueueDB" type="repository,datastore" deploymentnode="//@interimmodels.6/@designmodel/@host.3/@node.1">
        <port name="writequeue" role="//@interimmodels.6/@designmodel/@connector.6/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="queuewritten"/>
        </port>
        <port name="readqueue" role="//@interimmodels.6/@designmodel/@connector.5/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="queuereaded"/>
        </port>
      </component>
      <component name="ShopBackend" type="client" deploymentnode="//@interimmodels.6/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface">
        <port name="listorder" role="//@interimmodels.6/@designmodel/@connector.2/@role.0" type="request,OutboundPort">
          <events name="renderlist"/>
        </port>
      </component>
      <component name="OrderlogwireCommandLog" type="commanddb,datastore">
        <port name="logorderlogwire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <component name="ShippinglogwireCommandLog" type="commanddb,datastore">
        <port name="logshippinglogwire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.3/@node.2"/>
      </component>
      <component name="OrderwireLog" type="eventlogger,datastore">
        <port name="logorderwire" role="//@interimmodels.6/@designmodel/@connector.9/@role.2" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <connector name="userwire" type="CSConnector" connectortype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.6/@designmodel/@connector.0"/>
      </connector>
      <connector name="cateloquewire" type="CSConnector" connectortype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.1"/>
        <role name="responder" roletype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.6/@designmodel/@connector.1"/>
      </connector>
      <connector name="orderquerywire" type="CSConnector" connectortype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.2"/>
        <role name="responder" roletype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.6/@designmodel/@connector.8/@role.0" connector="//@interimmodels.6/@designmodel/@connector.2"/>
      </connector>
      <connector name="cartwire" type="CSConnector" connectortype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.3"/>
        <role name="responder" roletype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.6/@designmodel/@connector.3"/>
      </connector>
      <connector name="shippingwire" type="CSConnector" connectortype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.6/@designmodel/@connector.6/@role.0" connector="//@interimmodels.6/@designmodel/@connector.4"/>
      </connector>
      <connector name="queuereadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.5"/>
        <role name="readstorage" roletype="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.6/@designmodel/@connector.5"/>
      </connector>
      <connector name="shippinglogwire" type="CRConnector" connectortype="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.6"/>
        <role name="readstore" roletype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.6/@designmodel/@connector.6"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.4/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.6"/>
        </role>
      </connector>
      <connector name="orderlogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.6/@designmodel/@connector.10/@role.0" connector="//@interimmodels.6/@designmodel/@connector.7"/>
        <role name="writestorage" roletype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.6/@designmodel/@connector.7"/>
      </connector>
      <connector name="orderreadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.8"/>
        <role name="readstorage" roletype="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.6/@designmodel/@connector.8"/>
      </connector>
      <connector name="orderwire" type="ESConnector" connectortype="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.6/@designmodel/@archstyle.1/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.6/@designmodel/@connector.9"/>
        <role name="eventsubscriber" roletype="//@interimmodels.6/@designmodel/@archstyle.1/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.6/@designmodel/@connector.7/@role.0" connector="//@interimmodels.6/@designmodel/@connector.9"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.9"/>
        </role>
      </connector>
      <connector name="paywire" type="WRConnector" connectortype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="writer" nextRoleExpr="//@interimmodels.6/@designmodel/@connector.4/@role.0" connector="//@interimmodels.6/@designmodel/@connector.10"/>
        <role name="writestorage" roletype="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="writestorage" connector="//@interimmodels.6/@designmodel/@connector.10"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.6/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.6/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.6/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.6/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.6/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.6/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.6/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.6/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.6/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.6/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.4" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.6/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
            <event name="Skip"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.6/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.6/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.6/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.6/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.6/@designmodel/@archstyle.4/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.6/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.6/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.6/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.6/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.6/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.6/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.6/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.6/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.6/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.6/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.6/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.6/@designmodel" counterExample="" visitedStates="15" verifyTime="0.0093448" testport="//@interimmodels.6/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!44 -> cartwire_req?44 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!44 -> cartwire_res?44" exprText="[]  (ShopFrontend.shop.itemadded -> &lt;> CartsService.manage.saveitem)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.6/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.0/@port.3/@events.0" nextExpr="//@interimmodels.6/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.6/@designmodel" counterExample="" visitedStates="762" verifyTime="0.0223532" testport="//@interimmodels.6/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!74 -> orderwire_pevt?74 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!74 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?74 -> orderwire_bevt!74 -> orderwire_bevt?74 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!74 -> orderlogwire_req?74 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!74 -> orderlogwire_res?74 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_writer_request -> paywire_req!74 -> paywire_req?74 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!74 -> paywire_res?74 -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!74 -> shippingwire_req?74 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!74 -> shippinglogwire_stmt?74 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!74 -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!74 -> shippingwire_res?74 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (Payment.pay.paid -> &lt;> ShippingService.postshipping.posted)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.6/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.6/@port.0/@events.0" nextExpr="//@interimmodels.6/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.6/@designmodel" visitedStates="10" verifyTime="0.0077018" testport="//@interimmodels.6/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!17 -> cartwire_req?17 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!17 -> cartwire_res?17" exprText="[]  (OrdersService.postorder.save -> &lt;> Payment.pay.paid)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.6/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.3/@port.0/@events.1" nextExpr="//@interimmodels.6/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.6/@designmodel" counterExample="" visitedStates="15" verifyTime="0.011740599999999999" testport="//@interimmodels.6/@designmodel/@component.0/@port.0" traceExample="init -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!74 -> userwire_req?74 -> UserService_userwire_responder_invoke -> UserService_login_signedon -> UserService_userwire_responder_process -> userwire_res!74 -> userwire_res?74" exprText="[]  (ShopFrontend.auth.checked -> &lt;> UserService.login.signedon)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.6/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.6/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.6/@designmodel" counterExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!62 -> cateloquewire_req?62 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!62 -> cateloquewire_res?62" visitedStates="24" verifyTime="0.008421099999999999" testport="//@interimmodels.6/@designmodel/@component.0/@port.1" traceExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!55 -> cateloquewire_req?55 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!55 -> cateloquewire_res?55" exprText="[]  (&lt;> ShopFrontend.browse.read -> &lt;> CateloqueService.list.query)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.6/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.1/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.0/@port.1/@events.0" operator="EVENTUALLY" nextExpr="//@interimmodels.6/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop6" model="//@interimmodels.6/@designmodel" counterExample="" visitedStates="29" verifyTime="0.008214899999999999" testport="//@interimmodels.6/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!48 -> orderquerywire_req?48 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_reader_process -> orderreadwire_req!48 -> orderreadwire_req?48 -> OrdersDB_orderreadwire_readstorage_invoke -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstorage_process -> orderreadwire_res!48 -> orderreadwire_res?48 -> OrdersService_orderreadwire_reader_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!48 -> orderquerywire_res?48" exprText="[]  (ShopBackend.listorder.renderlist -> &lt;> OrdersDB.queryorder.orderreaded)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.6/@designmodel/@verifyProperty.5">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.10/@port.0/@events.0" nextExpr="//@interimmodels.6/@designmodel/@verifyProperty.5/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop7" model="//@interimmodels.6/@designmodel" counterExample="" visitedStates="779" verifyTime="0.023668099999999997" testport="//@interimmodels.6/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!85 -> orderwire_pevt?85 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!85 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?85 -> orderwire_bevt!85 -> orderwire_bevt?85 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!85 -> orderlogwire_req?85 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!85 -> orderlogwire_res?85 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_writer_request -> paywire_req!85 -> paywire_req?85 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!85 -> paywire_res?85 -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!85 -> shippingwire_req?85 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!85 -> shippinglogwire_stmt?85 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!85 -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!85 -> shippingwire_res?85 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (ShopFrontend.order.purchased -> &lt;> OrdersService.postorder.save)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.6/@designmodel/@verifyProperty.6">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.3/@port.0/@events.1" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.6/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.6/@designmodel/@verifyProperty.6/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-orderwire" visitedStates="955" verifyTime="0.0319572" testport="//@interimmodels.6/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!59 -> orderwire_pevt?59 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!59 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?59 -> orderwire_bevt!59 -> orderwire_bevt?59 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!59 -> orderlogwire_req?59 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!59 -> orderlogwire_res?59 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_writer_request -> paywire_req!59 -> paywire_req?59 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!59 -> paywire_res?59 -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!59 -> shippingwire_req?59 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!59 -> shippinglogwire_stmt?59 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!59 -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!59 -> shippingwire_res?59 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (ShopFrontend.order.purchased-> &lt;> OrderwireLog.orderwire.eventstore.persist)">
        <connector href="target.arch#//@connector.9"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-shippinglogwire" valid="false" counterExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!69 -> orderwire_pevt?69 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!69 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?69 -> orderwire_bevt!69 -> orderwire_bevt?69 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!69 -> orderlogwire_req?69 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!69 -> orderlogwire_res?69 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_writer_request -> paywire_req!69 -> paywire_req?69 -> Payment_paywire_writestorage_invoke -> Payment_pay_paid -> Payment_paywire_writestorage_process -> paywire_res!69 -> paywire_res?69 -> OrdersService_paywire_writer_process -> OrdersService_paywire_writer_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!69 -> shippingwire_req?69 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!69 -> shippinglogwire_stmt?69 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!69 -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!69 -> shippingwire_res?69 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" visitedStates="280" verifyTime="0.016385" testport="//@interimmodels.6/@designmodel/@component.0/@port.2" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter7() |= ![](ShippingService_postshipping_posted->&lt;" exprText="[] (ShippingService.postshipping.posted-> &lt;> ShippinglogwireCommandLog.shippinglogwire.commandstore.persist)">
        <connector href="target.arch#//@connector.6"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="CLOUD_PLATFORM">
        <node name="NodeJSContainer1" component="//@interimmodels.6/@designmodel/@component.0 //@interimmodels.6/@designmodel/@component.10">
          <port name="port" portNumber="15551" node="//@interimmodels.6/@designmodel/@host.0/@node.0" namedport="//@interimmodels.6/@designmodel/@component.0/@port.0"/>
          <port name="port" portNumber="15552" node="//@interimmodels.6/@designmodel/@host.0/@node.0" namedport="//@interimmodels.6/@designmodel/@component.0/@port.2"/>
          <port name="port" portNumber="15553" node="//@interimmodels.6/@designmodel/@host.0/@node.0" namedport="//@interimmodels.6/@designmodel/@component.10/@port.0"/>
          <port name="port" portNumber="15554" node="//@interimmodels.6/@designmodel/@host.0/@node.0" namedport="//@interimmodels.6/@designmodel/@component.0/@port.3"/>
          <port name="port" portNumber="15555" node="//@interimmodels.6/@designmodel/@host.0/@node.0" namedport="//@interimmodels.6/@designmodel/@component.0/@port.1"/>
        </node>
        <node name="GoContainer3" component="//@interimmodels.6/@designmodel/@component.1">
          <port name="port" portNumber="80" node="//@interimmodels.6/@designmodel/@host.0/@node.1" namedport="//@interimmodels.6/@designmodel/@component.1/@port.0" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="SecureServer">
        <node name="GoContainer1" component="//@interimmodels.6/@designmodel/@component.2">
          <port name="port" portNumber="80" node="//@interimmodels.6/@designmodel/@host.1/@node.0" namedport="//@interimmodels.6/@designmodel/@component.2/@port.0" hasFirewall="true"/>
        </node>
        <node name="GoContainer2" component="//@interimmodels.6/@designmodel/@component.6">
          <port name="port" portNumber="80" node="//@interimmodels.6/@designmodel/@host.1/@node.1" namedport="//@interimmodels.6/@designmodel/@component.6/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="LocalServer">
        <node name="JEEContainer1" component="//@interimmodels.6/@designmodel/@component.3 //@interimmodels.6/@designmodel/@component.5">
          <port name="port" portNumber="80" namedport="//@interimmodels.6/@designmodel/@component.3/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15561" node="//@interimmodels.6/@designmodel/@host.2/@node.0" namedport="//@interimmodels.6/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15562" node="//@interimmodels.6/@designmodel/@host.2/@node.0" namedport="//@interimmodels.6/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15563" node="//@interimmodels.6/@designmodel/@host.2/@node.0" namedport="//@interimmodels.6/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15564" node="//@interimmodels.6/@designmodel/@host.2/@node.0" namedport="//@interimmodels.6/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15566" node="//@interimmodels.6/@designmodel/@host.2/@node.0" namedport="//@interimmodels.6/@designmodel/@component.3/@port.1"/>
          <port name="port" portNumber="81" node="//@interimmodels.6/@designmodel/@host.2/@node.0" namedport="//@interimmodels.6/@designmodel/@component.3/@port.1"/>
        </node>
        <node name="MySQL1" component="//@interimmodels.6/@designmodel/@component.4">
          <port name="port" portNumber="3306" node="//@interimmodels.6/@designmodel/@host.2/@node.1" namedport="//@interimmodels.6/@designmodel/@component.4/@port.0 //@interimmodels.6/@designmodel/@component.4/@port.1"/>
        </node>
      </host>
      <host name="BackOfficeServer">
        <node name="JEEContainer4" component="//@interimmodels.6/@designmodel/@component.7 //@interimmodels.6/@designmodel/@component.8">
          <port name="port" portNumber="80" node="//@interimmodels.6/@designmodel/@host.3/@node.0" namedport="//@interimmodels.6/@designmodel/@component.7/@port.0" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15571" node="//@interimmodels.6/@designmodel/@host.3/@node.0" namedport="//@interimmodels.6/@designmodel/@component.7/@port.0"/>
          <port name="port" portNumber="15572" node="//@interimmodels.6/@designmodel/@host.3/@node.0" namedport="//@interimmodels.6/@designmodel/@component.7/@port.0"/>
        </node>
        <node name="MySQL2" component="//@interimmodels.6/@designmodel/@component.9">
          <port name="port" portNumber="3306" node="//@interimmodels.6/@designmodel/@host.3/@node.1" namedport="//@interimmodels.6/@designmodel/@component.9/@port.0 //@interimmodels.6/@designmodel/@component.9/@port.1"/>
        </node>
      </host>
      <link name="link2" linkType="HTTPS" networkType="INTERNET" source="//@interimmodels.6/@designmodel/@host.0/@node.0/@port.1" target="//@interimmodels.6/@designmodel/@host.2/@node.0/@port.0"/>
      <link name="link3" source="//@interimmodels.6/@designmodel/@host.2/@node.0/@port.1"/>
      <link name="link4" source="//@interimmodels.6/@designmodel/@host.2/@node.0/@port.2"/>
      <link name="link5" target="//@interimmodels.6/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link7" networkType="INTERNET" source="//@interimmodels.6/@designmodel/@host.0/@node.0/@port.3"/>
      <link name="link9" source="//@interimmodels.6/@designmodel/@host.0/@node.0/@port.4" target="//@interimmodels.6/@designmodel/@host.0/@node.1/@port.0"/>
      <link name="link11" source="//@interimmodels.6/@designmodel/@host.3/@node.0/@port.1"/>
      <link name="link12" source="//@interimmodels.6/@designmodel/@host.3/@node.0/@port.2"/>
      <link name="link13" target="//@interimmodels.6/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link14" target="//@interimmodels.6/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link16" source="//@interimmodels.6/@designmodel/@host.2/@node.0/@port.5" target="//@interimmodels.6/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link15" networkType="INTERNET" source="//@interimmodels.6/@designmodel/@host.0/@node.0/@port.2" target="//@interimmodels.6/@designmodel/@host.2/@node.0/@port.6"/>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="8" description="network route for connector:paywire between: ordersservice payment " nextModel="//@interimmodels.8" name="network-route">
    <designmodel name="inter8">
      <component name="ShopFrontend" type="client,broadcaster" deploymentnode="//@interimmodels.7/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface,LeastPriviledge">
        <port name="auth" role="//@interimmodels.7/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="checked"/>
        </port>
        <port name="browse" role="//@interimmodels.7/@designmodel/@connector.1/@role.0" type="request,OutboundPort">
          <events name="read"/>
        </port>
        <port name="order" role="//@interimmodels.7/@designmodel/@connector.9/@role.0" type="broadcast,OutboundPort">
          <events name="purchased"/>
        </port>
        <port name="shop" role="//@interimmodels.7/@designmodel/@connector.3/@role.0" type="request,OutboundPort">
          <events name="itemadded"/>
        </port>
      </component>
      <component name="CateloqueService" type="server" deploymentnode="//@interimmodels.7/@designmodel/@host.0/@node.1" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
        <port name="list" role="//@interimmodels.7/@designmodel/@connector.1/@role.1" type="response,InboundPort">
          <events name="query"/>
        </port>
      </component>
      <component name="UserService" type="server" deploymentnode="//@interimmodels.7/@designmodel/@host.1/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DefenseInDepth,DenialOfService">
        <port name="login" role="//@interimmodels.7/@designmodel/@connector.0/@role.1" type="response,InboundPort">
          <events name="signedon"/>
        </port>
      </component>
      <component name="OrdersService" type="client,server,listener,eventconsumer,readendpoint,datawriter,datareader" deploymentnode="//@interimmodels.7/@designmodel/@host.2/@node.0" criticalLevel="Low" securityCharacters="AttackSurface,LeastPriviledge,Compartmentalization,DenialOfService,DataTampering">
        <port name="postorder" role="//@interimmodels.7/@designmodel/@connector.4/@role.0 //@interimmodels.7/@designmodel/@connector.7/@role.0 //@interimmodels.7/@designmodel/@connector.9/@role.1 //@interimmodels.7/@designmodel/@connector.10/@role.0" type="request,listen,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="check" next="//@interimmodels.7/@designmodel/@component.3/@port.0/@events.1"/>
          <events name="save"/>
        </port>
        <port name="get" role="//@interimmodels.7/@designmodel/@connector.2/@role.1 //@interimmodels.7/@designmodel/@connector.8/@role.0" type="response,read,OutboundPort,InboundPort,EventProcessorPort">
          <events name="ack"/>
        </port>
      </component>
      <component name="OrdersDB" type="repository,datastore" deploymentnode="//@interimmodels.7/@designmodel/@host.2/@node.1">
        <port name="writeorder" role="//@interimmodels.7/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="orderwritten"/>
        </port>
        <port name="queryorder" role="//@interimmodels.7/@designmodel/@connector.8/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="orderreaded"/>
        </port>
      </component>
      <component name="CartsService" type="server" deploymentnode="//@interimmodels.7/@designmodel/@host.2/@node.0" securityCharacters="AttackSurface,DenialOfService,DataTampering">
        <port name="manage" role="//@interimmodels.7/@designmodel/@connector.3/@role.1" type="response,InboundPort">
          <events name="saveitem"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,datastore" deploymentnode="//@interimmodels.7/@designmodel/@host.1/@node.1" criticalLevel="High" securityCharacters="DefenseInDepth,Compartmentalization">
        <port name="pay" role="//@interimmodels.7/@designmodel/@connector.10/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="paid"/>
        </port>
      </component>
      <component name="ShippingService" type="server,datawriter" deploymentnode="//@interimmodels.7/@designmodel/@host.3/@node.0" securityCharacters="Compartmentalization">
        <port name="postshipping" role="//@interimmodels.7/@designmodel/@connector.4/@role.1 //@interimmodels.7/@designmodel/@connector.6/@role.0" type="response,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="posted"/>
        </port>
      </component>
      <component name="ShippingWorker" type="readendpoint,datareader" deploymentnode="//@interimmodels.7/@designmodel/@host.3/@node.0">
        <port name="listqueue" role="//@interimmodels.7/@designmodel/@connector.5/@role.0" type="read,OutboundPort,EventProcessorPort">
          <events name="renderqueue"/>
        </port>
      </component>
      <component name="QueueDB" type="repository,datastore" deploymentnode="//@interimmodels.7/@designmodel/@host.3/@node.1">
        <port name="writequeue" role="//@interimmodels.7/@designmodel/@connector.6/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="queuewritten"/>
        </port>
        <port name="readqueue" role="//@interimmodels.7/@designmodel/@connector.5/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="queuereaded"/>
        </port>
      </component>
      <component name="ShopBackend" type="client" deploymentnode="//@interimmodels.7/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface">
        <port name="listorder" role="//@interimmodels.7/@designmodel/@connector.2/@role.0" type="request,OutboundPort">
          <events name="renderlist"/>
        </port>
      </component>
      <component name="OrderlogwireCommandLog" type="commanddb,datastore">
        <port name="logorderlogwire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <component name="ShippinglogwireCommandLog" type="commanddb,datastore">
        <port name="logshippinglogwire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.3/@node.2"/>
      </component>
      <component name="OrderwireLog" type="eventlogger,datastore">
        <port name="logorderwire" role="//@interimmodels.7/@designmodel/@connector.9/@role.2" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <connector name="userwire" type="CSConnector" connectortype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.7/@designmodel/@connector.0"/>
      </connector>
      <connector name="cateloquewire" type="CSConnector" connectortype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.1"/>
        <role name="responder" roletype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.7/@designmodel/@connector.1"/>
      </connector>
      <connector name="orderquerywire" type="CSConnector" connectortype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.2"/>
        <role name="responder" roletype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.7/@designmodel/@connector.8/@role.0" connector="//@interimmodels.7/@designmodel/@connector.2"/>
      </connector>
      <connector name="cartwire" type="CSConnector" connectortype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.3"/>
        <role name="responder" roletype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.7/@designmodel/@connector.3"/>
      </connector>
      <connector name="shippingwire" type="CSConnector" connectortype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.7/@designmodel/@connector.6/@role.0" connector="//@interimmodels.7/@designmodel/@connector.4"/>
      </connector>
      <connector name="queuereadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.5"/>
        <role name="readstorage" roletype="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.7/@designmodel/@connector.5"/>
      </connector>
      <connector name="shippinglogwire" type="CRConnector" connectortype="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.6"/>
        <role name="readstore" roletype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.7/@designmodel/@connector.6"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.4/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.6"/>
        </role>
      </connector>
      <connector name="orderlogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.7/@designmodel/@connector.10/@role.0" connector="//@interimmodels.7/@designmodel/@connector.7"/>
        <role name="writestorage" roletype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.7/@designmodel/@connector.7"/>
      </connector>
      <connector name="orderreadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.8"/>
        <role name="readstorage" roletype="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.7/@designmodel/@connector.8"/>
      </connector>
      <connector name="orderwire" type="ESConnector" connectortype="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.7/@designmodel/@archstyle.1/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.7/@designmodel/@connector.9"/>
        <role name="eventsubscriber" roletype="//@interimmodels.7/@designmodel/@archstyle.1/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.7/@designmodel/@connector.7/@role.0" connector="//@interimmodels.7/@designmodel/@connector.9"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.9"/>
        </role>
      </connector>
      <connector name="paywire" type="CSConnector" connectortype="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="writer" nextRoleExpr="//@interimmodels.7/@designmodel/@connector.4/@role.0" connector="//@interimmodels.7/@designmodel/@connector.10"/>
        <role name="responder" roletype="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="writestorage" connector="//@interimmodels.7/@designmodel/@connector.10"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.7/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.7/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.7/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.7/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.7/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.7/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.7/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.7/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.7/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.7/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.4" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.7/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
            <event name="Skip"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.7/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.7/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.7/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.7/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.7/@designmodel/@archstyle.4/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.7/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.7/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.7/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.7/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.7/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.7/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.7/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.7/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.7/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.7/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.7/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.7/@designmodel" counterExample="" visitedStates="15" verifyTime="0.007818" testport="//@interimmodels.7/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!76 -> cartwire_req?76 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!76 -> cartwire_res?76" exprText="[]  (ShopFrontend.shop.itemadded -> &lt;> CartsService.manage.saveitem)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.7/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.0/@port.3/@events.0" nextExpr="//@interimmodels.7/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.7/@designmodel" counterExample="" visitedStates="746" verifyTime="0.0241808" testport="//@interimmodels.7/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!54 -> orderwire_pevt?54 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!54 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?54 -> orderwire_bevt!54 -> orderwire_bevt?54 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!54 -> orderlogwire_req?54 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!54 -> orderlogwire_res?54 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_requester_process -> paywire_req!54 -> paywire_req?54 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_paywire_responder_process -> paywire_res!54 -> paywire_res?54 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!54 -> shippingwire_req?54 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!54 -> shippinglogwire_stmt?54 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!54 -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!54 -> shippingwire_res?54 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (Payment.pay.paid -> &lt;> ShippingService.postshipping.posted)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.7/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.6/@port.0/@events.0" nextExpr="//@interimmodels.7/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.7/@designmodel" visitedStates="10" verifyTime="0.007783399999999999" testport="//@interimmodels.7/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!33 -> cartwire_req?33 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!33 -> cartwire_res?33" exprText="[]  (OrdersService.postorder.save -> &lt;> Payment.pay.paid)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.7/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.3/@port.0/@events.1" nextExpr="//@interimmodels.7/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.7/@designmodel" counterExample="" visitedStates="15" verifyTime="0.007605799999999999" testport="//@interimmodels.7/@designmodel/@component.0/@port.0" traceExample="init -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!45 -> userwire_req?45 -> UserService_userwire_responder_invoke -> UserService_login_signedon -> UserService_userwire_responder_process -> userwire_res!45 -> userwire_res?45" exprText="[]  (ShopFrontend.auth.checked -> &lt;> UserService.login.signedon)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.7/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.7/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.7/@designmodel" counterExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!62 -> cateloquewire_req?62 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!62 -> cateloquewire_res?62" visitedStates="24" verifyTime="0.0112414" testport="//@interimmodels.7/@designmodel/@component.0/@port.1" traceExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!41 -> cateloquewire_req?41 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!41 -> cateloquewire_res?41" exprText="[]  (&lt;> ShopFrontend.browse.read -> &lt;> CateloqueService.list.query)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.7/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.1/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.0/@port.1/@events.0" operator="EVENTUALLY" nextExpr="//@interimmodels.7/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop6" model="//@interimmodels.7/@designmodel" counterExample="" visitedStates="29" verifyTime="0.0079183" testport="//@interimmodels.7/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!19 -> orderquerywire_req?19 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_reader_process -> orderreadwire_req!19 -> orderreadwire_req?19 -> OrdersDB_orderreadwire_readstorage_invoke -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstorage_process -> orderreadwire_res!19 -> orderreadwire_res?19 -> OrdersService_orderreadwire_reader_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!19 -> orderquerywire_res?19" exprText="[]  (ShopBackend.listorder.renderlist -> &lt;> OrdersDB.queryorder.orderreaded)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.7/@designmodel/@verifyProperty.5">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.10/@port.0/@events.0" nextExpr="//@interimmodels.7/@designmodel/@verifyProperty.5/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop7" model="//@interimmodels.7/@designmodel" counterExample="" visitedStates="771" verifyTime="0.0274785" testport="//@interimmodels.7/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!59 -> orderwire_pevt?59 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!59 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?59 -> orderwire_bevt!59 -> orderwire_bevt?59 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!59 -> orderlogwire_req?59 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!59 -> orderlogwire_res?59 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_requester_process -> paywire_req!59 -> paywire_req?59 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_paywire_responder_process -> paywire_res!59 -> paywire_res?59 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!59 -> shippingwire_req?59 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!59 -> shippinglogwire_stmt?59 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!59 -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!59 -> shippingwire_res?59 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (ShopFrontend.order.purchased -> &lt;> OrdersService.postorder.save)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.7/@designmodel/@verifyProperty.6">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.3/@port.0/@events.1" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.7/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.7/@designmodel/@verifyProperty.6/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-orderwire" visitedStates="944" verifyTime="0.026117599999999998" testport="//@interimmodels.7/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!27 -> orderwire_pevt?27 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!27 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?27 -> orderwire_bevt!27 -> orderwire_bevt?27 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!27 -> orderlogwire_req?27 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!27 -> orderlogwire_res?27 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_requester_process -> paywire_req!27 -> paywire_req?27 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_paywire_responder_process -> paywire_res!27 -> paywire_res?27 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!27 -> shippingwire_req?27 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!27 -> shippinglogwire_stmt?27 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!27 -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!27 -> shippingwire_res?27 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (ShopFrontend.order.purchased-> &lt;> OrderwireLog.orderwire.eventstore.persist)">
        <connector href="target.arch#//@connector.9"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-shippinglogwire" valid="false" counterExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!22 -> orderwire_pevt?22 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!22 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?22 -> orderwire_bevt!22 -> orderwire_bevt?22 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!22 -> orderlogwire_req?22 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!22 -> orderlogwire_res?22 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_requester_process -> paywire_req!22 -> paywire_req?22 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_paywire_responder_process -> paywire_res!22 -> paywire_res?22 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!22 -> shippingwire_req?22 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!22 -> shippinglogwire_stmt?22 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!22 -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!22 -> shippingwire_res?22 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" visitedStates="278" verifyTime="0.015849699999999998" testport="//@interimmodels.7/@designmodel/@component.0/@port.2" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter8() |= ![](ShippingService_postshipping_posted->&lt;" exprText="[] (ShippingService.postshipping.posted-> &lt;> ShippinglogwireCommandLog.shippinglogwire.commandstore.persist)">
        <connector href="target.arch#//@connector.6"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="CLOUD_PLATFORM">
        <node name="NodeJSContainer1" component="//@interimmodels.7/@designmodel/@component.0 //@interimmodels.7/@designmodel/@component.10">
          <port name="port" portNumber="15551" node="//@interimmodels.7/@designmodel/@host.0/@node.0" namedport="//@interimmodels.7/@designmodel/@component.0/@port.0"/>
          <port name="port" portNumber="15552" node="//@interimmodels.7/@designmodel/@host.0/@node.0" namedport="//@interimmodels.7/@designmodel/@component.0/@port.2"/>
          <port name="port" portNumber="15553" node="//@interimmodels.7/@designmodel/@host.0/@node.0" namedport="//@interimmodels.7/@designmodel/@component.10/@port.0"/>
          <port name="port" portNumber="15554" node="//@interimmodels.7/@designmodel/@host.0/@node.0" namedport="//@interimmodels.7/@designmodel/@component.0/@port.3"/>
          <port name="port" portNumber="15555" node="//@interimmodels.7/@designmodel/@host.0/@node.0" namedport="//@interimmodels.7/@designmodel/@component.0/@port.1"/>
        </node>
        <node name="GoContainer3" component="//@interimmodels.7/@designmodel/@component.1">
          <port name="port" portNumber="80" node="//@interimmodels.7/@designmodel/@host.0/@node.1" namedport="//@interimmodels.7/@designmodel/@component.1/@port.0" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="SecureServer">
        <node name="GoContainer1" component="//@interimmodels.7/@designmodel/@component.2">
          <port name="port" portNumber="80" node="//@interimmodels.7/@designmodel/@host.1/@node.0" namedport="//@interimmodels.7/@designmodel/@component.2/@port.0" hasFirewall="true"/>
        </node>
        <node name="GoContainer2" component="//@interimmodels.7/@designmodel/@component.6">
          <port name="port" portNumber="80" node="//@interimmodels.7/@designmodel/@host.1/@node.1" namedport="//@interimmodels.7/@designmodel/@component.6/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="LocalServer">
        <node name="JEEContainer1" component="//@interimmodels.7/@designmodel/@component.3 //@interimmodels.7/@designmodel/@component.5">
          <port name="port" portNumber="80" namedport="//@interimmodels.7/@designmodel/@component.3/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15561" node="//@interimmodels.7/@designmodel/@host.2/@node.0" namedport="//@interimmodels.7/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15562" node="//@interimmodels.7/@designmodel/@host.2/@node.0" namedport="//@interimmodels.7/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15563" node="//@interimmodels.7/@designmodel/@host.2/@node.0" namedport="//@interimmodels.7/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15564" node="//@interimmodels.7/@designmodel/@host.2/@node.0" namedport="//@interimmodels.7/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15566" node="//@interimmodels.7/@designmodel/@host.2/@node.0" namedport="//@interimmodels.7/@designmodel/@component.3/@port.1"/>
          <port name="port" portNumber="81" node="//@interimmodels.7/@designmodel/@host.2/@node.0" namedport="//@interimmodels.7/@designmodel/@component.3/@port.1"/>
        </node>
        <node name="MySQL1" component="//@interimmodels.7/@designmodel/@component.4">
          <port name="port" portNumber="3306" node="//@interimmodels.7/@designmodel/@host.2/@node.1" namedport="//@interimmodels.7/@designmodel/@component.4/@port.0 //@interimmodels.7/@designmodel/@component.4/@port.1"/>
        </node>
      </host>
      <host name="BackOfficeServer">
        <node name="JEEContainer4" component="//@interimmodels.7/@designmodel/@component.7 //@interimmodels.7/@designmodel/@component.8">
          <port name="port" portNumber="80" node="//@interimmodels.7/@designmodel/@host.3/@node.0" namedport="//@interimmodels.7/@designmodel/@component.7/@port.0" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15571" node="//@interimmodels.7/@designmodel/@host.3/@node.0" namedport="//@interimmodels.7/@designmodel/@component.7/@port.0"/>
          <port name="port" portNumber="15572" node="//@interimmodels.7/@designmodel/@host.3/@node.0" namedport="//@interimmodels.7/@designmodel/@component.7/@port.0"/>
        </node>
        <node name="MySQL2" component="//@interimmodels.7/@designmodel/@component.9">
          <port name="port" portNumber="3306" node="//@interimmodels.7/@designmodel/@host.3/@node.1" namedport="//@interimmodels.7/@designmodel/@component.9/@port.0 //@interimmodels.7/@designmodel/@component.9/@port.1"/>
        </node>
      </host>
      <link name="link2" linkType="HTTPS" networkType="INTERNET" source="//@interimmodels.7/@designmodel/@host.0/@node.0/@port.1" target="//@interimmodels.7/@designmodel/@host.2/@node.0/@port.0"/>
      <link name="link3" source="//@interimmodels.7/@designmodel/@host.2/@node.0/@port.1"/>
      <link name="link4" source="//@interimmodels.7/@designmodel/@host.2/@node.0/@port.2"/>
      <link name="link5" target="//@interimmodels.7/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link7" networkType="INTERNET" source="//@interimmodels.7/@designmodel/@host.0/@node.0/@port.3"/>
      <link name="link9" source="//@interimmodels.7/@designmodel/@host.0/@node.0/@port.4" target="//@interimmodels.7/@designmodel/@host.0/@node.1/@port.0"/>
      <link name="link11" source="//@interimmodels.7/@designmodel/@host.3/@node.0/@port.1"/>
      <link name="link12" source="//@interimmodels.7/@designmodel/@host.3/@node.0/@port.2"/>
      <link name="link13" target="//@interimmodels.7/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link14" target="//@interimmodels.7/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link16" source="//@interimmodels.7/@designmodel/@host.2/@node.0/@port.5" target="//@interimmodels.7/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link15" networkType="INTERNET" source="//@interimmodels.7/@designmodel/@host.0/@node.0/@port.2" target="//@interimmodels.7/@designmodel/@host.2/@node.0/@port.6"/>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="9" description="network route for connector:orderreadwire between: ordersservice ordersdb " nextModel="//@interimmodels.9" name="network-route">
    <designmodel name="inter9">
      <component name="ShopFrontend" type="client,broadcaster" deploymentnode="//@interimmodels.8/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface,LeastPriviledge">
        <port name="auth" role="//@interimmodels.8/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="checked"/>
        </port>
        <port name="browse" role="//@interimmodels.8/@designmodel/@connector.1/@role.0" type="request,OutboundPort">
          <events name="read"/>
        </port>
        <port name="order" role="//@interimmodels.8/@designmodel/@connector.9/@role.0" type="broadcast,OutboundPort">
          <events name="purchased"/>
        </port>
        <port name="shop" role="//@interimmodels.8/@designmodel/@connector.3/@role.0" type="request,OutboundPort">
          <events name="itemadded"/>
        </port>
      </component>
      <component name="CateloqueService" type="server" deploymentnode="//@interimmodels.8/@designmodel/@host.0/@node.1" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
        <port name="list" role="//@interimmodels.8/@designmodel/@connector.1/@role.1" type="response,InboundPort">
          <events name="query"/>
        </port>
      </component>
      <component name="UserService" type="server" deploymentnode="//@interimmodels.8/@designmodel/@host.1/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DefenseInDepth,DenialOfService">
        <port name="login" role="//@interimmodels.8/@designmodel/@connector.0/@role.1" type="response,InboundPort">
          <events name="signedon"/>
        </port>
      </component>
      <component name="OrdersService" type="client,server,listener,eventconsumer,readendpoint,datawriter,datareader" deploymentnode="//@interimmodels.8/@designmodel/@host.2/@node.0" criticalLevel="Low" securityCharacters="AttackSurface,LeastPriviledge,Compartmentalization,DenialOfService,DataTampering">
        <port name="postorder" role="//@interimmodels.8/@designmodel/@connector.4/@role.0 //@interimmodels.8/@designmodel/@connector.7/@role.0 //@interimmodels.8/@designmodel/@connector.9/@role.1 //@interimmodels.8/@designmodel/@connector.10/@role.0" type="request,listen,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="check" next="//@interimmodels.8/@designmodel/@component.3/@port.0/@events.1"/>
          <events name="save"/>
        </port>
        <port name="get" role="//@interimmodels.8/@designmodel/@connector.2/@role.1 //@interimmodels.8/@designmodel/@connector.8/@role.0" type="response,read,OutboundPort,InboundPort,EventProcessorPort">
          <events name="ack"/>
        </port>
      </component>
      <component name="OrdersDB" type="repository,datastore" deploymentnode="//@interimmodels.8/@designmodel/@host.2/@node.1">
        <port name="writeorder" role="//@interimmodels.8/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="orderwritten"/>
        </port>
        <port name="queryorder" role="//@interimmodels.8/@designmodel/@connector.8/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="orderreaded"/>
        </port>
      </component>
      <component name="CartsService" type="server" deploymentnode="//@interimmodels.8/@designmodel/@host.2/@node.0" securityCharacters="AttackSurface,DenialOfService,DataTampering">
        <port name="manage" role="//@interimmodels.8/@designmodel/@connector.3/@role.1" type="response,InboundPort">
          <events name="saveitem"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,datastore" deploymentnode="//@interimmodels.8/@designmodel/@host.1/@node.1" criticalLevel="High" securityCharacters="DefenseInDepth,Compartmentalization">
        <port name="pay" role="//@interimmodels.8/@designmodel/@connector.10/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="paid"/>
        </port>
      </component>
      <component name="ShippingService" type="server,datawriter" deploymentnode="//@interimmodels.8/@designmodel/@host.3/@node.0" securityCharacters="Compartmentalization">
        <port name="postshipping" role="//@interimmodels.8/@designmodel/@connector.4/@role.1 //@interimmodels.8/@designmodel/@connector.6/@role.0" type="response,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="posted"/>
        </port>
      </component>
      <component name="ShippingWorker" type="readendpoint,datareader" deploymentnode="//@interimmodels.8/@designmodel/@host.3/@node.0">
        <port name="listqueue" role="//@interimmodels.8/@designmodel/@connector.5/@role.0" type="read,OutboundPort,EventProcessorPort">
          <events name="renderqueue"/>
        </port>
      </component>
      <component name="QueueDB" type="repository,datastore" deploymentnode="//@interimmodels.8/@designmodel/@host.3/@node.1">
        <port name="writequeue" role="//@interimmodels.8/@designmodel/@connector.6/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="queuewritten"/>
        </port>
        <port name="readqueue" role="//@interimmodels.8/@designmodel/@connector.5/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="queuereaded"/>
        </port>
      </component>
      <component name="ShopBackend" type="client" deploymentnode="//@interimmodels.8/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface">
        <port name="listorder" role="//@interimmodels.8/@designmodel/@connector.2/@role.0" type="request,OutboundPort">
          <events name="renderlist"/>
        </port>
      </component>
      <component name="OrderlogwireCommandLog" type="commanddb,datastore">
        <port name="logorderlogwire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <component name="ShippinglogwireCommandLog" type="commanddb,datastore">
        <port name="logshippinglogwire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.3/@node.2"/>
      </component>
      <component name="OrderwireLog" type="eventlogger,datastore">
        <port name="logorderwire" role="//@interimmodels.8/@designmodel/@connector.9/@role.2" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <connector name="userwire" type="CSConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.8/@designmodel/@connector.0"/>
      </connector>
      <connector name="cateloquewire" type="CSConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.1"/>
        <role name="responder" roletype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.8/@designmodel/@connector.1"/>
      </connector>
      <connector name="orderquerywire" type="CSConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.2"/>
        <role name="responder" roletype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.8/@designmodel/@connector.8/@role.0" connector="//@interimmodels.8/@designmodel/@connector.2"/>
      </connector>
      <connector name="cartwire" type="CSConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.3"/>
        <role name="responder" roletype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.8/@designmodel/@connector.3"/>
      </connector>
      <connector name="shippingwire" type="CSConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.8/@designmodel/@connector.6/@role.0" connector="//@interimmodels.8/@designmodel/@connector.4"/>
      </connector>
      <connector name="queuereadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.5"/>
        <role name="readstorage" roletype="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.8/@designmodel/@connector.5"/>
      </connector>
      <connector name="shippinglogwire" type="CRConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.6"/>
        <role name="readstore" roletype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.8/@designmodel/@connector.6"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.4/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.6"/>
        </role>
      </connector>
      <connector name="orderlogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.8/@designmodel/@connector.10/@role.0" connector="//@interimmodels.8/@designmodel/@connector.7"/>
        <role name="writestorage" roletype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.8/@designmodel/@connector.7"/>
      </connector>
      <connector name="orderreadwire" type="QRConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0">
        <role name="querier" roletype="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.8"/>
        <role name="readstore" roletype="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.8/@designmodel/@connector.8"/>
      </connector>
      <connector name="orderwire" type="ESConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.8/@designmodel/@archstyle.1/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.8/@designmodel/@connector.9"/>
        <role name="eventsubscriber" roletype="//@interimmodels.8/@designmodel/@archstyle.1/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.8/@designmodel/@connector.7/@role.0" connector="//@interimmodels.8/@designmodel/@connector.9"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.9"/>
        </role>
      </connector>
      <connector name="paywire" type="CSConnector" connectortype="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="writer" nextRoleExpr="//@interimmodels.8/@designmodel/@connector.4/@role.0" connector="//@interimmodels.8/@designmodel/@connector.10"/>
        <role name="responder" roletype="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="writestorage" connector="//@interimmodels.8/@designmodel/@connector.10"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.8/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.8/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.8/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.8/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.8/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.8/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.8/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.8/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.8/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.8/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.4" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.8/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
            <event name="Skip"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.8/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.8/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.8/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.8/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.8/@designmodel/@archstyle.4/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.8/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.8/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.8/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.8/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.8/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.8/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.8/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.8/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.8/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.8/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.8/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.8/@designmodel" counterExample="" visitedStates="15" verifyTime="0.009606499999999999" testport="//@interimmodels.8/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!67 -> cartwire_req?67 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!67 -> cartwire_res?67" exprText="[]  (ShopFrontend.shop.itemadded -> &lt;> CartsService.manage.saveitem)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.8/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.0/@port.3/@events.0" nextExpr="//@interimmodels.8/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.8/@designmodel" counterExample="" visitedStates="746" verifyTime="0.022971099999999998" testport="//@interimmodels.8/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!88 -> orderwire_pevt?88 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!88 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?88 -> orderwire_bevt!88 -> orderwire_bevt?88 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!88 -> orderlogwire_req?88 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!88 -> orderlogwire_res?88 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_requester_process -> paywire_req!88 -> paywire_req?88 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_paywire_responder_process -> paywire_res!88 -> paywire_res?88 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!88 -> shippingwire_req?88 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!88 -> shippinglogwire_stmt?88 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!88 -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!88 -> shippingwire_res?88 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (Payment.pay.paid -> &lt;> ShippingService.postshipping.posted)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.8/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.6/@port.0/@events.0" nextExpr="//@interimmodels.8/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.8/@designmodel" visitedStates="10" verifyTime="0.0073070999999999995" testport="//@interimmodels.8/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!41 -> cartwire_req?41 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!41 -> cartwire_res?41" exprText="[]  (OrdersService.postorder.save -> &lt;> Payment.pay.paid)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.8/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.3/@port.0/@events.1" nextExpr="//@interimmodels.8/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.8/@designmodel" counterExample="" visitedStates="15" verifyTime="0.005777099999999999" testport="//@interimmodels.8/@designmodel/@component.0/@port.0" traceExample="init -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!78 -> userwire_req?78 -> UserService_userwire_responder_invoke -> UserService_login_signedon -> UserService_userwire_responder_process -> userwire_res!78 -> userwire_res?78" exprText="[]  (ShopFrontend.auth.checked -> &lt;> UserService.login.signedon)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.8/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.8/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.8/@designmodel" counterExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!62 -> cateloquewire_req?62 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!62 -> cateloquewire_res?62" visitedStates="24" verifyTime="0.005226199999999999" testport="//@interimmodels.8/@designmodel/@component.0/@port.1" traceExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!91 -> cateloquewire_req?91 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!91 -> cateloquewire_res?91" exprText="[]  (&lt;> ShopFrontend.browse.read -> &lt;> CateloqueService.list.query)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.8/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.1/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.0/@port.1/@events.0" operator="EVENTUALLY" nextExpr="//@interimmodels.8/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop6" model="//@interimmodels.8/@designmodel" counterExample="" visitedStates="27" verifyTime="0.0078837" testport="//@interimmodels.8/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!97 -> orderquerywire_req?97 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_querier_process -> orderreadwire_stmt!97 -> orderreadwire_stmt?97 -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstore_process -> orderreadwire_res!97 -> orderreadwire_res?97 -> OrdersService_orderreadwire_querier_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!97 -> orderquerywire_res?97" exprText="[]  (ShopBackend.listorder.renderlist -> &lt;> OrdersDB.queryorder.orderreaded)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.8/@designmodel/@verifyProperty.5">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.10/@port.0/@events.0" nextExpr="//@interimmodels.8/@designmodel/@verifyProperty.5/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop7" model="//@interimmodels.8/@designmodel" counterExample="" visitedStates="771" verifyTime="0.02422" testport="//@interimmodels.8/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!63 -> orderwire_pevt?63 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!63 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?63 -> orderwire_bevt!63 -> orderwire_bevt?63 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!63 -> orderlogwire_req?63 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!63 -> orderlogwire_res?63 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_requester_process -> paywire_req!63 -> paywire_req?63 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_paywire_responder_process -> paywire_res!63 -> paywire_res?63 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!63 -> shippingwire_req?63 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!63 -> shippinglogwire_stmt?63 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!63 -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!63 -> shippingwire_res?63 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (ShopFrontend.order.purchased -> &lt;> OrdersService.postorder.save)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.8/@designmodel/@verifyProperty.6">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.3/@port.0/@events.1" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.8/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.8/@designmodel/@verifyProperty.6/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-orderwire" visitedStates="944" verifyTime="0.028457299999999998" testport="//@interimmodels.8/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!84 -> orderwire_pevt?84 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!84 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?84 -> orderwire_bevt!84 -> orderwire_bevt?84 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!84 -> orderlogwire_req?84 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!84 -> orderlogwire_res?84 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_requester_process -> paywire_req!84 -> paywire_req?84 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_paywire_responder_process -> paywire_res!84 -> paywire_res?84 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!84 -> shippingwire_req?84 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!84 -> shippinglogwire_stmt?84 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!84 -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!84 -> shippingwire_res?84 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (ShopFrontend.order.purchased-> &lt;> OrderwireLog.orderwire.eventstore.persist)">
        <connector href="target.arch#//@connector.9"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-shippinglogwire" valid="false" counterExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!18 -> orderwire_pevt?18 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!18 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?18 -> orderwire_bevt!18 -> orderwire_bevt?18 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!18 -> orderlogwire_req?18 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!18 -> orderlogwire_res?18 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_requester_process -> paywire_req!18 -> paywire_req?18 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_paywire_responder_process -> paywire_res!18 -> paywire_res?18 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!18 -> shippingwire_req?18 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!18 -> shippinglogwire_stmt?18 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!18 -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!18 -> shippingwire_res?18 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" visitedStates="278" verifyTime="0.017359899999999998" testport="//@interimmodels.8/@designmodel/@component.0/@port.2" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter9() |= ![](ShippingService_postshipping_posted->&lt;" exprText="[] (ShippingService.postshipping.posted-> &lt;> ShippinglogwireCommandLog.shippinglogwire.commandstore.persist)">
        <connector href="target.arch#//@connector.6"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-query-orderreadwire" visitedStates="23" verifyTime="0.0081789" testport="//@interimmodels.8/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!24 -> orderquerywire_req?24 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_querier_process -> orderreadwire_stmt!24 -> orderreadwire_stmt?24 -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstore_process -> orderreadwire_res!24 -> orderreadwire_res?24 -> OrdersService_orderreadwire_querier_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!24 -> orderquerywire_res?24" exprText="[] (OrdersService.get.ack-> &lt;> OrdersDB.orderreadwire.readstore.process)">
        <connector href="target.arch#//@connector.8"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="CLOUD_PLATFORM">
        <node name="NodeJSContainer1" component="//@interimmodels.8/@designmodel/@component.0 //@interimmodels.8/@designmodel/@component.10">
          <port name="port" portNumber="15551" node="//@interimmodels.8/@designmodel/@host.0/@node.0" namedport="//@interimmodels.8/@designmodel/@component.0/@port.0"/>
          <port name="port" portNumber="15552" node="//@interimmodels.8/@designmodel/@host.0/@node.0" namedport="//@interimmodels.8/@designmodel/@component.0/@port.2"/>
          <port name="port" portNumber="15553" node="//@interimmodels.8/@designmodel/@host.0/@node.0" namedport="//@interimmodels.8/@designmodel/@component.10/@port.0"/>
          <port name="port" portNumber="15554" node="//@interimmodels.8/@designmodel/@host.0/@node.0" namedport="//@interimmodels.8/@designmodel/@component.0/@port.3"/>
          <port name="port" portNumber="15555" node="//@interimmodels.8/@designmodel/@host.0/@node.0" namedport="//@interimmodels.8/@designmodel/@component.0/@port.1"/>
        </node>
        <node name="GoContainer3" component="//@interimmodels.8/@designmodel/@component.1">
          <port name="port" portNumber="80" node="//@interimmodels.8/@designmodel/@host.0/@node.1" namedport="//@interimmodels.8/@designmodel/@component.1/@port.0" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="SecureServer">
        <node name="GoContainer1" component="//@interimmodels.8/@designmodel/@component.2">
          <port name="port" portNumber="80" node="//@interimmodels.8/@designmodel/@host.1/@node.0" namedport="//@interimmodels.8/@designmodel/@component.2/@port.0" hasFirewall="true"/>
        </node>
        <node name="GoContainer2" component="//@interimmodels.8/@designmodel/@component.6">
          <port name="port" portNumber="80" node="//@interimmodels.8/@designmodel/@host.1/@node.1" namedport="//@interimmodels.8/@designmodel/@component.6/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="LocalServer">
        <node name="JEEContainer1" component="//@interimmodels.8/@designmodel/@component.3 //@interimmodels.8/@designmodel/@component.5">
          <port name="port" portNumber="80" namedport="//@interimmodels.8/@designmodel/@component.3/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15561" node="//@interimmodels.8/@designmodel/@host.2/@node.0" namedport="//@interimmodels.8/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15562" node="//@interimmodels.8/@designmodel/@host.2/@node.0" namedport="//@interimmodels.8/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15563" node="//@interimmodels.8/@designmodel/@host.2/@node.0" namedport="//@interimmodels.8/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15564" node="//@interimmodels.8/@designmodel/@host.2/@node.0" namedport="//@interimmodels.8/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15566" node="//@interimmodels.8/@designmodel/@host.2/@node.0" namedport="//@interimmodels.8/@designmodel/@component.3/@port.1"/>
          <port name="port" portNumber="81" node="//@interimmodels.8/@designmodel/@host.2/@node.0" namedport="//@interimmodels.8/@designmodel/@component.3/@port.1"/>
        </node>
        <node name="MySQL1" component="//@interimmodels.8/@designmodel/@component.4">
          <port name="port" portNumber="3306" node="//@interimmodels.8/@designmodel/@host.2/@node.1" namedport="//@interimmodels.8/@designmodel/@component.4/@port.0 //@interimmodels.8/@designmodel/@component.4/@port.1"/>
        </node>
      </host>
      <host name="BackOfficeServer">
        <node name="JEEContainer4" component="//@interimmodels.8/@designmodel/@component.7 //@interimmodels.8/@designmodel/@component.8">
          <port name="port" portNumber="80" node="//@interimmodels.8/@designmodel/@host.3/@node.0" namedport="//@interimmodels.8/@designmodel/@component.7/@port.0" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15571" node="//@interimmodels.8/@designmodel/@host.3/@node.0" namedport="//@interimmodels.8/@designmodel/@component.7/@port.0"/>
          <port name="port" portNumber="15572" node="//@interimmodels.8/@designmodel/@host.3/@node.0" namedport="//@interimmodels.8/@designmodel/@component.7/@port.0"/>
        </node>
        <node name="MySQL2" component="//@interimmodels.8/@designmodel/@component.9">
          <port name="port" portNumber="3306" node="//@interimmodels.8/@designmodel/@host.3/@node.1" namedport="//@interimmodels.8/@designmodel/@component.9/@port.0 //@interimmodels.8/@designmodel/@component.9/@port.1"/>
        </node>
      </host>
      <link name="link2" linkType="HTTPS" networkType="INTERNET" source="//@interimmodels.8/@designmodel/@host.0/@node.0/@port.1" target="//@interimmodels.8/@designmodel/@host.2/@node.0/@port.0"/>
      <link name="link3" source="//@interimmodels.8/@designmodel/@host.2/@node.0/@port.1"/>
      <link name="link4" source="//@interimmodels.8/@designmodel/@host.2/@node.0/@port.2"/>
      <link name="link5" target="//@interimmodels.8/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link7" networkType="INTERNET" source="//@interimmodels.8/@designmodel/@host.0/@node.0/@port.3"/>
      <link name="link9" source="//@interimmodels.8/@designmodel/@host.0/@node.0/@port.4" target="//@interimmodels.8/@designmodel/@host.0/@node.1/@port.0"/>
      <link name="link11" source="//@interimmodels.8/@designmodel/@host.3/@node.0/@port.1"/>
      <link name="link12" source="//@interimmodels.8/@designmodel/@host.3/@node.0/@port.2"/>
      <link name="link13" target="//@interimmodels.8/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link14" target="//@interimmodels.8/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link16" source="//@interimmodels.8/@designmodel/@host.2/@node.0/@port.5" target="//@interimmodels.8/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link15" networkType="INTERNET" source="//@interimmodels.8/@designmodel/@host.0/@node.0/@port.2" target="//@interimmodels.8/@designmodel/@host.2/@node.0/@port.6"/>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="10" description="setup database: paymentblockchain" nextModel="//@interimmodels.10" name="setup-database">
    <designmodel name="inter10">
      <component name="ShopFrontend" type="client,broadcaster" deploymentnode="//@interimmodels.9/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface,LeastPriviledge">
        <port name="auth" role="//@interimmodels.9/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="checked"/>
        </port>
        <port name="browse" role="//@interimmodels.9/@designmodel/@connector.1/@role.0" type="request,OutboundPort">
          <events name="read"/>
        </port>
        <port name="order" role="//@interimmodels.9/@designmodel/@connector.9/@role.0" type="broadcast,OutboundPort">
          <events name="purchased"/>
        </port>
        <port name="shop" role="//@interimmodels.9/@designmodel/@connector.3/@role.0" type="request,OutboundPort">
          <events name="itemadded"/>
        </port>
      </component>
      <component name="CateloqueService" type="server" deploymentnode="//@interimmodels.9/@designmodel/@host.0/@node.1" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
        <port name="list" role="//@interimmodels.9/@designmodel/@connector.1/@role.1" type="response,InboundPort">
          <events name="query"/>
        </port>
      </component>
      <component name="UserService" type="server" deploymentnode="//@interimmodels.9/@designmodel/@host.1/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DefenseInDepth,DenialOfService">
        <port name="login" role="//@interimmodels.9/@designmodel/@connector.0/@role.1" type="response,InboundPort">
          <events name="signedon"/>
        </port>
      </component>
      <component name="OrdersService" type="client,server,listener,eventconsumer,readendpoint,datawriter,datareader" deploymentnode="//@interimmodels.9/@designmodel/@host.2/@node.0" criticalLevel="Low" securityCharacters="AttackSurface,LeastPriviledge,Compartmentalization,DenialOfService,DataTampering">
        <port name="postorder" role="//@interimmodels.9/@designmodel/@connector.4/@role.0 //@interimmodels.9/@designmodel/@connector.7/@role.0 //@interimmodels.9/@designmodel/@connector.9/@role.1 //@interimmodels.9/@designmodel/@connector.10/@role.0" type="request,listen,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="check" next="//@interimmodels.9/@designmodel/@component.3/@port.0/@events.1"/>
          <events name="save"/>
        </port>
        <port name="get" role="//@interimmodels.9/@designmodel/@connector.2/@role.1 //@interimmodels.9/@designmodel/@connector.8/@role.0" type="response,read,OutboundPort,InboundPort,EventProcessorPort">
          <events name="ack"/>
        </port>
      </component>
      <component name="OrdersDB" type="repository,datastore" deploymentnode="//@interimmodels.9/@designmodel/@host.2/@node.1">
        <port name="writeorder" role="//@interimmodels.9/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="orderwritten"/>
        </port>
        <port name="queryorder" role="//@interimmodels.9/@designmodel/@connector.8/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="orderreaded"/>
        </port>
      </component>
      <component name="CartsService" type="server" deploymentnode="//@interimmodels.9/@designmodel/@host.2/@node.0" securityCharacters="AttackSurface,DenialOfService,DataTampering">
        <port name="manage" role="//@interimmodels.9/@designmodel/@connector.3/@role.1" type="response,InboundPort">
          <events name="saveitem"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,datastore" deploymentnode="//@interimmodels.9/@designmodel/@host.1/@node.1" criticalLevel="High" securityCharacters="DefenseInDepth,Compartmentalization">
        <port name="pay" role="//@interimmodels.9/@designmodel/@connector.10/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="paid"/>
        </port>
      </component>
      <component name="ShippingService" type="server,datawriter" deploymentnode="//@interimmodels.9/@designmodel/@host.3/@node.0" securityCharacters="Compartmentalization">
        <port name="postshipping" role="//@interimmodels.9/@designmodel/@connector.4/@role.1 //@interimmodels.9/@designmodel/@connector.6/@role.0" type="response,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="posted"/>
        </port>
      </component>
      <component name="ShippingWorker" type="readendpoint,datareader" deploymentnode="//@interimmodels.9/@designmodel/@host.3/@node.0">
        <port name="listqueue" role="//@interimmodels.9/@designmodel/@connector.5/@role.0" type="read,OutboundPort,EventProcessorPort">
          <events name="renderqueue"/>
        </port>
      </component>
      <component name="QueueDB" type="repository,datastore" deploymentnode="//@interimmodels.9/@designmodel/@host.3/@node.1">
        <port name="writequeue" role="//@interimmodels.9/@designmodel/@connector.6/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="queuewritten"/>
        </port>
        <port name="readqueue" role="//@interimmodels.9/@designmodel/@connector.5/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="queuereaded"/>
        </port>
      </component>
      <component name="ShopBackend" type="client" deploymentnode="//@interimmodels.9/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface">
        <port name="listorder" role="//@interimmodels.9/@designmodel/@connector.2/@role.0" type="request,OutboundPort">
          <events name="renderlist"/>
        </port>
      </component>
      <component name="OrderlogwireCommandLog" type="commanddb,datastore">
        <port name="logorderlogwire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <component name="ShippinglogwireCommandLog" type="commanddb,datastore">
        <port name="logshippinglogwire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.3/@node.2"/>
      </component>
      <component name="OrderwireLog" type="eventlogger,datastore">
        <port name="logorderwire" role="//@interimmodels.9/@designmodel/@connector.9/@role.2" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="append" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <deploymentnode href="target.arch#//@host.4/@node.0"/>
      </component>
      <connector name="userwire" type="CSConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.9/@designmodel/@connector.0"/>
      </connector>
      <connector name="cateloquewire" type="CSConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.1"/>
        <role name="responder" roletype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.9/@designmodel/@connector.1"/>
      </connector>
      <connector name="orderquerywire" type="CSConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.2"/>
        <role name="responder" roletype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.9/@designmodel/@connector.8/@role.0" connector="//@interimmodels.9/@designmodel/@connector.2"/>
      </connector>
      <connector name="cartwire" type="CSConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.3"/>
        <role name="responder" roletype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.9/@designmodel/@connector.3"/>
      </connector>
      <connector name="shippingwire" type="CSConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.9/@designmodel/@connector.6/@role.0" connector="//@interimmodels.9/@designmodel/@connector.4"/>
      </connector>
      <connector name="queuereadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.5"/>
        <role name="readstorage" roletype="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.9/@designmodel/@connector.5"/>
      </connector>
      <connector name="shippinglogwire" type="CRConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.6"/>
        <role name="readstore" roletype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.9/@designmodel/@connector.6"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.4/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.6"/>
        </role>
      </connector>
      <connector name="orderlogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.9/@designmodel/@connector.10/@role.0" connector="//@interimmodels.9/@designmodel/@connector.7"/>
        <role name="writestorage" roletype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.9/@designmodel/@connector.7"/>
      </connector>
      <connector name="orderreadwire" type="QRConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0">
        <role name="querier" roletype="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.8"/>
        <role name="readstore" roletype="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.9/@designmodel/@connector.8"/>
      </connector>
      <connector name="orderwire" type="ESConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.9/@designmodel/@archstyle.1/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.9/@designmodel/@connector.9"/>
        <role name="eventsubscriber" roletype="//@interimmodels.9/@designmodel/@archstyle.1/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.9/@designmodel/@connector.7/@role.0" connector="//@interimmodels.9/@designmodel/@connector.9"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.9"/>
        </role>
      </connector>
      <connector name="paywire" type="CSConnector" connectortype="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="writer" nextRoleExpr="//@interimmodels.9/@designmodel/@connector.4/@role.0" connector="//@interimmodels.9/@designmodel/@connector.10"/>
        <role name="responder" roletype="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="writestorage" connector="//@interimmodels.9/@designmodel/@connector.10"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.9/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.9/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.9/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.9/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.9/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.9/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.9/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.9/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.9/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.9/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.4" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.9/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
            <event name="Skip"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.9/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.9/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.9/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.9/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.9/@designmodel/@archstyle.4/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.9/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.9/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.9/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.9/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.9/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.9/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.9/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.9/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.9/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.9/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.9/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.9/@designmodel" counterExample="" visitedStates="15" verifyTime="0.0088484" testport="//@interimmodels.9/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!54 -> cartwire_req?54 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!54 -> cartwire_res?54" exprText="[]  (ShopFrontend.shop.itemadded -> &lt;> CartsService.manage.saveitem)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.9/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.0/@port.3/@events.0" nextExpr="//@interimmodels.9/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.9/@designmodel" counterExample="" visitedStates="63" verifyTime="0.0112015" testport="//@interimmodels.9/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_publisher_process -> orderwire_pub!79 -> orderwire_pub?79 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!79 -> orderlogwire_req?79 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!79 -> orderlogwire_res?79 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_requester_process -> paywire_req!79 -> paywire_req?79 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_paywire_responder_process -> paywire_res!79 -> paywire_res?79 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!79 -> shippingwire_req?79 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!79 -> shippinglogwire_req?79 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!79 -> shippinglogwire_res?79 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!79 -> shippingwire_res?79 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_subscriber_process" exprText="[]  (Payment.pay.paid -> &lt;> ShippingService.postshipping.posted)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.9/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.6/@port.0/@events.0" nextExpr="//@interimmodels.9/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.9/@designmodel" visitedStates="10" verifyTime="0.008180699999999999" testport="//@interimmodels.9/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!13 -> cartwire_req?13 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!13 -> cartwire_res?13" exprText="[]  (OrdersService.postorder.save -> &lt;> Payment.pay.paid)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.9/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.3/@port.0/@events.1" nextExpr="//@interimmodels.9/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.9/@designmodel" counterExample="" visitedStates="15" verifyTime="0.008699" testport="//@interimmodels.9/@designmodel/@component.0/@port.0" traceExample="init -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!32 -> userwire_req?32 -> UserService_userwire_responder_invoke -> UserService_login_signedon -> UserService_userwire_responder_process -> userwire_res!32 -> userwire_res?32" exprText="[]  (ShopFrontend.auth.checked -> &lt;> UserService.login.signedon)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.9/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.9/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.9/@designmodel" counterExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!62 -> cateloquewire_req?62 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!62 -> cateloquewire_res?62" visitedStates="24" verifyTime="0.008294" testport="//@interimmodels.9/@designmodel/@component.0/@port.1" traceExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!55 -> cateloquewire_req?55 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!55 -> cateloquewire_res?55" exprText="[]  (&lt;> ShopFrontend.browse.read -> &lt;> CateloqueService.list.query)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.9/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.1/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.0/@port.1/@events.0" operator="EVENTUALLY" nextExpr="//@interimmodels.9/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop6" model="//@interimmodels.9/@designmodel" counterExample="" visitedStates="27" verifyTime="0.0079229" testport="//@interimmodels.9/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!27 -> orderquerywire_req?27 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_querier_process -> orderreadwire_stmt!27 -> orderreadwire_stmt?27 -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstore_process -> orderreadwire_res!27 -> orderreadwire_res?27 -> OrdersService_orderreadwire_querier_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!27 -> orderquerywire_res?27" exprText="[]  (ShopBackend.listorder.renderlist -> &lt;> OrdersDB.queryorder.orderreaded)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.9/@designmodel/@verifyProperty.5">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.10/@port.0/@events.0" nextExpr="//@interimmodels.9/@designmodel/@verifyProperty.5/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop7" model="//@interimmodels.9/@designmodel" counterExample="" visitedStates="771" verifyTime="0.0250657" testport="//@interimmodels.9/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!27 -> orderwire_pevt?27 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!27 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?27 -> orderwire_bevt!27 -> orderwire_bevt?27 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!27 -> orderlogwire_req?27 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!27 -> orderlogwire_res?27 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_requester_process -> paywire_req!27 -> paywire_req?27 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_paywire_responder_process -> paywire_res!27 -> paywire_res?27 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!27 -> shippingwire_req?27 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!27 -> shippinglogwire_stmt?27 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!27 -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!27 -> shippingwire_res?27 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (ShopFrontend.order.purchased -> &lt;> OrdersService.postorder.save)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.9/@designmodel/@verifyProperty.6">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.3/@port.0/@events.1" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.9/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.9/@designmodel/@verifyProperty.6/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-orderwire" visitedStates="944" verifyTime="0.0259287" testport="//@interimmodels.9/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!56 -> orderwire_pevt?56 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!56 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?56 -> orderwire_bevt!56 -> orderwire_bevt?56 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!56 -> orderlogwire_req?56 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!56 -> orderlogwire_res?56 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_requester_process -> paywire_req!56 -> paywire_req?56 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_paywire_responder_process -> paywire_res!56 -> paywire_res?56 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!56 -> shippingwire_req?56 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!56 -> shippinglogwire_stmt?56 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!56 -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!56 -> shippingwire_res?56 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (ShopFrontend.order.purchased-> &lt;> OrderwireLog.orderwire.eventstore.persist)">
        <connector href="target.arch#//@connector.9"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-shippinglogwire" valid="false" counterExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!49 -> orderwire_pevt?49 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!49 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?49 -> orderwire_bevt!49 -> orderwire_bevt?49 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!49 -> orderlogwire_req?49 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!49 -> orderlogwire_res?49 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_requester_process -> paywire_req!49 -> paywire_req?49 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_paywire_responder_process -> paywire_res!49 -> paywire_res?49 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!49 -> shippingwire_req?49 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!49 -> shippinglogwire_stmt?49 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!49 -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!49 -> shippingwire_res?49 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" visitedStates="278" verifyTime="0.0129839" testport="//@interimmodels.9/@designmodel/@component.0/@port.2" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter10() |= ![](ShippingService_postshipping_posted->&lt;" exprText="[] (ShippingService.postshipping.posted-> &lt;> ShippinglogwireCommandLog.shippinglogwire.commandstore.persist)">
        <connector href="target.arch#//@connector.6"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-query-orderreadwire" visitedStates="23" verifyTime="0.0090048" testport="//@interimmodels.9/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!12 -> orderquerywire_req?12 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_querier_process -> orderreadwire_stmt!12 -> orderreadwire_stmt?12 -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstore_process -> orderreadwire_res!12 -> orderreadwire_res?12 -> OrdersService_orderreadwire_querier_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!12 -> orderquerywire_res?12" exprText="[] (OrdersService.get.ack-> &lt;> OrdersDB.orderreadwire.readstore.process)">
        <connector href="target.arch#//@connector.8"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="CLOUD_PLATFORM">
        <node name="NodeJSContainer1" component="//@interimmodels.9/@designmodel/@component.0 //@interimmodels.9/@designmodel/@component.10">
          <port name="port" portNumber="15551" node="//@interimmodels.9/@designmodel/@host.0/@node.0" namedport="//@interimmodels.9/@designmodel/@component.0/@port.0"/>
          <port name="port" portNumber="15552" node="//@interimmodels.9/@designmodel/@host.0/@node.0" namedport="//@interimmodels.9/@designmodel/@component.0/@port.2"/>
          <port name="port" portNumber="15553" node="//@interimmodels.9/@designmodel/@host.0/@node.0" namedport="//@interimmodels.9/@designmodel/@component.10/@port.0"/>
          <port name="port" portNumber="15554" node="//@interimmodels.9/@designmodel/@host.0/@node.0" namedport="//@interimmodels.9/@designmodel/@component.0/@port.3"/>
          <port name="port" portNumber="15555" node="//@interimmodels.9/@designmodel/@host.0/@node.0" namedport="//@interimmodels.9/@designmodel/@component.0/@port.1"/>
        </node>
        <node name="GoContainer3" component="//@interimmodels.9/@designmodel/@component.1">
          <port name="port" portNumber="80" node="//@interimmodels.9/@designmodel/@host.0/@node.1" namedport="//@interimmodels.9/@designmodel/@component.1/@port.0" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="SecureServer">
        <node name="GoContainer1" component="//@interimmodels.9/@designmodel/@component.2">
          <port name="port" portNumber="80" node="//@interimmodels.9/@designmodel/@host.1/@node.0" namedport="//@interimmodels.9/@designmodel/@component.2/@port.0" hasFirewall="true"/>
        </node>
        <node name="GoContainer2" component="//@interimmodels.9/@designmodel/@component.6">
          <port name="port" portNumber="80" node="//@interimmodels.9/@designmodel/@host.1/@node.1" namedport="//@interimmodels.9/@designmodel/@component.6/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="LocalServer">
        <node name="JEEContainer1" component="//@interimmodels.9/@designmodel/@component.3 //@interimmodels.9/@designmodel/@component.5">
          <port name="port" portNumber="80" namedport="//@interimmodels.9/@designmodel/@component.3/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15561" node="//@interimmodels.9/@designmodel/@host.2/@node.0" namedport="//@interimmodels.9/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15562" node="//@interimmodels.9/@designmodel/@host.2/@node.0" namedport="//@interimmodels.9/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15563" node="//@interimmodels.9/@designmodel/@host.2/@node.0" namedport="//@interimmodels.9/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15564" node="//@interimmodels.9/@designmodel/@host.2/@node.0" namedport="//@interimmodels.9/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15566" node="//@interimmodels.9/@designmodel/@host.2/@node.0" namedport="//@interimmodels.9/@designmodel/@component.3/@port.1"/>
          <port name="port" portNumber="81" node="//@interimmodels.9/@designmodel/@host.2/@node.0" namedport="//@interimmodels.9/@designmodel/@component.3/@port.1"/>
        </node>
        <node name="MySQL1" component="//@interimmodels.9/@designmodel/@component.4">
          <port name="port" portNumber="3306" node="//@interimmodels.9/@designmodel/@host.2/@node.1" namedport="//@interimmodels.9/@designmodel/@component.4/@port.0 //@interimmodels.9/@designmodel/@component.4/@port.1"/>
        </node>
      </host>
      <host name="BackOfficeServer">
        <node name="JEEContainer4" component="//@interimmodels.9/@designmodel/@component.7 //@interimmodels.9/@designmodel/@component.8">
          <port name="port" portNumber="80" node="//@interimmodels.9/@designmodel/@host.3/@node.0" namedport="//@interimmodels.9/@designmodel/@component.7/@port.0" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15571" node="//@interimmodels.9/@designmodel/@host.3/@node.0" namedport="//@interimmodels.9/@designmodel/@component.7/@port.0"/>
          <port name="port" portNumber="15572" node="//@interimmodels.9/@designmodel/@host.3/@node.0" namedport="//@interimmodels.9/@designmodel/@component.7/@port.0"/>
        </node>
        <node name="MySQL2" component="//@interimmodels.9/@designmodel/@component.9">
          <port name="port" portNumber="3306" node="//@interimmodels.9/@designmodel/@host.3/@node.1" namedport="//@interimmodels.9/@designmodel/@component.9/@port.0 //@interimmodels.9/@designmodel/@component.9/@port.1"/>
        </node>
      </host>
      <link name="link2" linkType="HTTPS" networkType="INTERNET" source="//@interimmodels.9/@designmodel/@host.0/@node.0/@port.1" target="//@interimmodels.9/@designmodel/@host.2/@node.0/@port.0"/>
      <link name="link3" source="//@interimmodels.9/@designmodel/@host.2/@node.0/@port.1"/>
      <link name="link4" source="//@interimmodels.9/@designmodel/@host.2/@node.0/@port.2"/>
      <link name="link5" target="//@interimmodels.9/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link7" networkType="INTERNET" source="//@interimmodels.9/@designmodel/@host.0/@node.0/@port.3"/>
      <link name="link9" source="//@interimmodels.9/@designmodel/@host.0/@node.0/@port.4" target="//@interimmodels.9/@designmodel/@host.0/@node.1/@port.0"/>
      <link name="link11" source="//@interimmodels.9/@designmodel/@host.3/@node.0/@port.1"/>
      <link name="link12" source="//@interimmodels.9/@designmodel/@host.3/@node.0/@port.2"/>
      <link name="link13" target="//@interimmodels.9/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link14" target="//@interimmodels.9/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link16" source="//@interimmodels.9/@designmodel/@host.2/@node.0/@port.5" target="//@interimmodels.9/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link15" networkType="INTERNET" source="//@interimmodels.9/@designmodel/@host.0/@node.0/@port.2" target="//@interimmodels.9/@designmodel/@host.2/@node.0/@port.6"/>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="11" description="network route for connector:oraclepaywire between: payment paymentblockchain " nextModel="//@interimmodels.11" name="network-route">
    <designmodel name="inter11">
      <component name="ShopFrontend" type="client,broadcaster" deploymentnode="//@interimmodels.10/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface,LeastPriviledge">
        <port name="auth" role="//@interimmodels.10/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="checked"/>
        </port>
        <port name="browse" role="//@interimmodels.10/@designmodel/@connector.1/@role.0" type="request,OutboundPort">
          <events name="read"/>
        </port>
        <port name="order" role="//@interimmodels.10/@designmodel/@connector.9/@role.0" type="broadcast,OutboundPort">
          <events name="purchased"/>
        </port>
        <port name="shop" role="//@interimmodels.10/@designmodel/@connector.3/@role.0" type="request,OutboundPort">
          <events name="itemadded"/>
        </port>
      </component>
      <component name="CateloqueService" type="server" deploymentnode="//@interimmodels.10/@designmodel/@host.0/@node.1" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
        <port name="list" role="//@interimmodels.10/@designmodel/@connector.1/@role.1" type="response,InboundPort">
          <events name="query"/>
        </port>
      </component>
      <component name="UserService" type="server" deploymentnode="//@interimmodels.10/@designmodel/@host.1/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DefenseInDepth,DenialOfService">
        <port name="login" role="//@interimmodels.10/@designmodel/@connector.0/@role.1" type="response,InboundPort">
          <events name="signedon"/>
        </port>
      </component>
      <component name="OrdersService" type="client,server,listener,eventconsumer,readendpoint,datawriter,datareader" deploymentnode="//@interimmodels.10/@designmodel/@host.2/@node.0" criticalLevel="Low" securityCharacters="AttackSurface,LeastPriviledge,Compartmentalization,DenialOfService,DataTampering">
        <port name="postorder" role="//@interimmodels.10/@designmodel/@connector.4/@role.0 //@interimmodels.10/@designmodel/@connector.7/@role.0 //@interimmodels.10/@designmodel/@connector.9/@role.1 //@interimmodels.10/@designmodel/@connector.10/@role.0" type="request,listen,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="check" next="//@interimmodels.10/@designmodel/@component.3/@port.0/@events.1"/>
          <events name="save"/>
        </port>
        <port name="get" role="//@interimmodels.10/@designmodel/@connector.2/@role.1 //@interimmodels.10/@designmodel/@connector.8/@role.0" type="response,read,OutboundPort,InboundPort,EventProcessorPort">
          <events name="ack"/>
        </port>
      </component>
      <component name="OrdersDB" type="repository,datastore" deploymentnode="//@interimmodels.10/@designmodel/@host.2/@node.1">
        <port name="writeorder" role="//@interimmodels.10/@designmodel/@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="orderwritten"/>
        </port>
        <port name="queryorder" role="//@interimmodels.10/@designmodel/@connector.8/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="orderreaded"/>
        </port>
      </component>
      <component name="CartsService" type="server" deploymentnode="//@interimmodels.10/@designmodel/@host.2/@node.0" securityCharacters="AttackSurface,DenialOfService,DataTampering">
        <port name="manage" role="//@interimmodels.10/@designmodel/@connector.3/@role.1" type="response,InboundPort">
          <events name="saveitem"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,datastore" deploymentnode="//@interimmodels.10/@designmodel/@host.1/@node.1" criticalLevel="High" securityCharacters="DefenseInDepth,Compartmentalization">
        <port name="pay" role="//@interimmodels.10/@designmodel/@connector.10/@role.1 //@interimmodels.10/@designmodel/@connector.11/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="paid"/>
        </port>
      </component>
      <component name="ShippingService" type="server,datawriter" deploymentnode="//@interimmodels.10/@designmodel/@host.3/@node.0" securityCharacters="Compartmentalization">
        <port name="postshipping" role="//@interimmodels.10/@designmodel/@connector.4/@role.1 //@interimmodels.10/@designmodel/@connector.6/@role.0" type="response,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="posted"/>
        </port>
      </component>
      <component name="ShippingWorker" type="readendpoint,datareader" deploymentnode="//@interimmodels.10/@designmodel/@host.3/@node.0">
        <port name="listqueue" role="//@interimmodels.10/@designmodel/@connector.5/@role.0" type="read,OutboundPort,EventProcessorPort">
          <events name="renderqueue"/>
        </port>
      </component>
      <component name="QueueDB" type="repository,datastore" deploymentnode="//@interimmodels.10/@designmodel/@host.3/@node.1">
        <port name="writequeue" role="//@interimmodels.10/@designmodel/@connector.6/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="queuewritten"/>
        </port>
        <port name="readqueue" role="//@interimmodels.10/@designmodel/@connector.5/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="queuereaded"/>
        </port>
      </component>
      <component name="ShopBackend" type="client" deploymentnode="//@interimmodels.10/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface">
        <port name="listorder" role="//@interimmodels.10/@designmodel/@connector.2/@role.0" type="request,OutboundPort">
          <events name="renderlist"/>
        </port>
      </component>
      <component name="OrderlogwireCommandLog" type="commanddb,datastore">
        <port name="logorderlogwire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <component name="ShippinglogwireCommandLog" type="commanddb,datastore">
        <port name="logshippinglogwire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.3/@node.2"/>
      </component>
      <component name="OrderwireLog" type="eventlogger,datastore">
        <port name="logorderwire" role="//@interimmodels.10/@designmodel/@connector.9/@role.2" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="append" role="//@interimmodels.10/@designmodel/@connector.11/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <deploymentnode href="target.arch#//@host.4/@node.0"/>
      </component>
      <connector name="userwire" type="CSConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.10/@designmodel/@connector.0"/>
      </connector>
      <connector name="cateloquewire" type="CSConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.1"/>
        <role name="responder" roletype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.10/@designmodel/@connector.1"/>
      </connector>
      <connector name="orderquerywire" type="CSConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.2"/>
        <role name="responder" roletype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.10/@designmodel/@connector.8/@role.0" connector="//@interimmodels.10/@designmodel/@connector.2"/>
      </connector>
      <connector name="cartwire" type="CSConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.3"/>
        <role name="responder" roletype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.10/@designmodel/@connector.3"/>
      </connector>
      <connector name="shippingwire" type="CSConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.10/@designmodel/@connector.6/@role.0" connector="//@interimmodels.10/@designmodel/@connector.4"/>
      </connector>
      <connector name="queuereadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.5"/>
        <role name="readstorage" roletype="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.10/@designmodel/@connector.5"/>
      </connector>
      <connector name="shippinglogwire" type="CRConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.6"/>
        <role name="readstore" roletype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.10/@designmodel/@connector.6"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.4/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.6"/>
        </role>
      </connector>
      <connector name="orderlogwire" type="WRConnector,RuleEventCommand" connectortype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0">
        <role name="writer" roletype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.10/@designmodel/@connector.10/@role.0" connector="//@interimmodels.10/@designmodel/@connector.7"/>
        <role name="writestorage" roletype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.10/@designmodel/@connector.7"/>
      </connector>
      <connector name="orderreadwire" type="QRConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0">
        <role name="querier" roletype="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.8"/>
        <role name="readstore" roletype="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.10/@designmodel/@connector.8"/>
      </connector>
      <connector name="orderwire" type="ESConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.10/@designmodel/@archstyle.1/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.10/@designmodel/@connector.9"/>
        <role name="eventsubscriber" roletype="//@interimmodels.10/@designmodel/@archstyle.1/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.10/@designmodel/@connector.7/@role.0" connector="//@interimmodels.10/@designmodel/@connector.9"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.9"/>
        </role>
      </connector>
      <connector name="paywire" type="CSConnector" connectortype="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="writer" nextRoleExpr="//@interimmodels.10/@designmodel/@connector.4/@role.0" connector="//@interimmodels.10/@designmodel/@connector.10"/>
        <role name="responder" roletype="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="writestorage" nextRoleExpr="//@interimmodels.10/@designmodel/@connector.11/@role.1" connector="//@interimmodels.10/@designmodel/@connector.10"/>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.10/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.10/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.10/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.10/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.10/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.10/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.10/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.10/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.10/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.10/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.10/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.10/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.4" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.10/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
            <event name="Skip"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.10/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.10/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.10/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.10/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.10/@designmodel/@archstyle.4/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.10/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.10/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.10/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.10/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.10/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.10/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.10/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.10/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.10/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.10/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.10/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.10/@designmodel" counterExample="" visitedStates="15" verifyTime="0.0131089" testport="//@interimmodels.10/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!53 -> cartwire_req?53 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!53 -> cartwire_res?53" exprText="[]  (ShopFrontend.shop.itemadded -> &lt;> CartsService.manage.saveitem)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.10/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.0/@port.3/@events.0" nextExpr="//@interimmodels.10/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.10/@designmodel" counterExample="" visitedStates="63" verifyTime="0.0112015" testport="//@interimmodels.10/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_publisher_process -> orderwire_pub!79 -> orderwire_pub?79 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!79 -> orderlogwire_req?79 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!79 -> orderlogwire_res?79 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_requester_process -> paywire_req!79 -> paywire_req?79 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_paywire_responder_process -> paywire_res!79 -> paywire_res?79 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!79 -> shippingwire_req?79 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!79 -> shippinglogwire_req?79 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!79 -> shippinglogwire_res?79 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!79 -> shippingwire_res?79 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_subscriber_process" exprText="[]  (Payment.pay.paid -> &lt;> ShippingService.postshipping.posted)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.10/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.6/@port.0/@events.0" nextExpr="//@interimmodels.10/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.10/@designmodel" visitedStates="10" verifyTime="0.0140754" testport="//@interimmodels.10/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!37 -> cartwire_req?37 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!37 -> cartwire_res?37" exprText="[]  (OrdersService.postorder.save -> &lt;> Payment.pay.paid)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.10/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.3/@port.0/@events.1" nextExpr="//@interimmodels.10/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.10/@designmodel" counterExample="" visitedStates="15" verifyTime="0.012751199999999999" testport="//@interimmodels.10/@designmodel/@component.0/@port.0" traceExample="init -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!91 -> userwire_req?91 -> UserService_userwire_responder_invoke -> UserService_login_signedon -> UserService_userwire_responder_process -> userwire_res!91 -> userwire_res?91" exprText="[]  (ShopFrontend.auth.checked -> &lt;> UserService.login.signedon)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.10/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.10/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.10/@designmodel" counterExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!62 -> cateloquewire_req?62 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!62 -> cateloquewire_res?62" visitedStates="24" verifyTime="0.014239199999999999" testport="//@interimmodels.10/@designmodel/@component.0/@port.1" traceExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!99 -> cateloquewire_req?99 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!99 -> cateloquewire_res?99" exprText="[]  (&lt;> ShopFrontend.browse.read -> &lt;> CateloqueService.list.query)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.10/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.1/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.0/@port.1/@events.0" operator="EVENTUALLY" nextExpr="//@interimmodels.10/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop6" model="//@interimmodels.10/@designmodel" counterExample="" visitedStates="27" verifyTime="0.014357799999999999" testport="//@interimmodels.10/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!26 -> orderquerywire_req?26 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_querier_process -> orderreadwire_stmt!26 -> orderreadwire_stmt?26 -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstore_process -> orderreadwire_res!26 -> orderreadwire_res?26 -> OrdersService_orderreadwire_querier_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!26 -> orderquerywire_res?26" exprText="[]  (ShopBackend.listorder.renderlist -> &lt;> OrdersDB.queryorder.orderreaded)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.10/@designmodel/@verifyProperty.5">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.10/@port.0/@events.0" nextExpr="//@interimmodels.10/@designmodel/@verifyProperty.5/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop7" model="//@interimmodels.10/@designmodel" counterExample="" visitedStates="3667" verifyTime="0.0965801" testport="//@interimmodels.10/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!16 -> orderwire_pevt?16 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!16 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?16 -> orderwire_bevt!16 -> orderwire_bevt?16 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!16 -> orderlogwire_req?16 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!16 -> orderlogwire_res?16 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_requester_process -> paywire_req!16 -> paywire_req?16 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!16 -> oraclepaywire_token?16 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!16 -> paywire_res?16 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!16 -> shippingwire_req?16 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!16 -> shippinglogwire_stmt?16 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!16 -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!16 -> shippingwire_res?16 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (ShopFrontend.order.purchased -> &lt;> OrdersService.postorder.save)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.10/@designmodel/@verifyProperty.6">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.3/@port.0/@events.1" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.10/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.10/@designmodel/@verifyProperty.6/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-orderwire" visitedStates="5082" verifyTime="0.13501259999999998" testport="//@interimmodels.10/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!64 -> orderwire_pevt?64 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!64 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?64 -> orderwire_bevt!64 -> orderwire_bevt?64 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!64 -> orderlogwire_req?64 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!64 -> orderlogwire_res?64 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_requester_process -> paywire_req!64 -> paywire_req?64 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!64 -> oraclepaywire_token?64 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!64 -> paywire_res?64 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!64 -> shippingwire_req?64 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!64 -> shippinglogwire_stmt?64 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!64 -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!64 -> shippingwire_res?64 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (ShopFrontend.order.purchased-> &lt;> OrderwireLog.orderwire.eventstore.persist)">
        <connector href="target.arch#//@connector.9"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-shippinglogwire" valid="false" counterExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!32 -> orderwire_pevt?32 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!32 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?32 -> orderwire_bevt!32 -> orderwire_bevt?32 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!32 -> orderlogwire_req?32 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!32 -> orderlogwire_res?32 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_requester_process -> paywire_req!32 -> paywire_req?32 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!32 -> oraclepaywire_token?32 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!32 -> paywire_res?32 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!32 -> shippingwire_req?32 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!32 -> shippinglogwire_stmt?32 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!32 -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!32 -> shippingwire_res?32 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" visitedStates="294" verifyTime="0.0191396" testport="//@interimmodels.10/@designmodel/@component.0/@port.2" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter11() |= ![](ShippingService_postshipping_posted->&lt;" exprText="[] (ShippingService.postshipping.posted-> &lt;> ShippinglogwireCommandLog.shippinglogwire.commandstore.persist)">
        <connector href="target.arch#//@connector.6"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-query-orderreadwire" visitedStates="23" verifyTime="0.0148204" testport="//@interimmodels.10/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!35 -> orderquerywire_req?35 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_querier_process -> orderreadwire_stmt!35 -> orderreadwire_stmt?35 -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstore_process -> orderreadwire_res!35 -> orderreadwire_res?35 -> OrdersService_orderreadwire_querier_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!35 -> orderquerywire_res?35" exprText="[] (OrdersService.get.ack-> &lt;> OrdersDB.orderreadwire.readstore.process)">
        <connector href="target.arch#//@connector.8"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" visitedStates="6266" verifyTime="0.1589922" testport="//@interimmodels.10/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!85 -> orderwire_pevt?85 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!85 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?85 -> orderwire_bevt!85 -> orderwire_bevt?85 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!85 -> orderlogwire_req?85 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!85 -> orderlogwire_res?85 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_requester_process -> paywire_req!85 -> paywire_req?85 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!85 -> oraclepaywire_token?85 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!85 -> paywire_res?85 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!85 -> shippingwire_req?85 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!85 -> shippinglogwire_stmt?85 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!85 -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!85 -> shippingwire_res?85 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (Payment.pay.paid-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.11"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="CLOUD_PLATFORM">
        <node name="NodeJSContainer1" component="//@interimmodels.10/@designmodel/@component.0 //@interimmodels.10/@designmodel/@component.10">
          <port name="port" portNumber="15551" node="//@interimmodels.10/@designmodel/@host.0/@node.0" namedport="//@interimmodels.10/@designmodel/@component.0/@port.0"/>
          <port name="port" portNumber="15552" node="//@interimmodels.10/@designmodel/@host.0/@node.0" namedport="//@interimmodels.10/@designmodel/@component.0/@port.2"/>
          <port name="port" portNumber="15553" node="//@interimmodels.10/@designmodel/@host.0/@node.0" namedport="//@interimmodels.10/@designmodel/@component.10/@port.0"/>
          <port name="port" portNumber="15554" node="//@interimmodels.10/@designmodel/@host.0/@node.0" namedport="//@interimmodels.10/@designmodel/@component.0/@port.3"/>
          <port name="port" portNumber="15555" node="//@interimmodels.10/@designmodel/@host.0/@node.0" namedport="//@interimmodels.10/@designmodel/@component.0/@port.1"/>
        </node>
        <node name="GoContainer3" component="//@interimmodels.10/@designmodel/@component.1">
          <port name="port" portNumber="80" node="//@interimmodels.10/@designmodel/@host.0/@node.1" namedport="//@interimmodels.10/@designmodel/@component.1/@port.0" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="SecureServer">
        <node name="GoContainer1" component="//@interimmodels.10/@designmodel/@component.2">
          <port name="port" portNumber="80" node="//@interimmodels.10/@designmodel/@host.1/@node.0" namedport="//@interimmodels.10/@designmodel/@component.2/@port.0" hasFirewall="true"/>
        </node>
        <node name="GoContainer2" component="//@interimmodels.10/@designmodel/@component.6">
          <port name="port" portNumber="80" node="//@interimmodels.10/@designmodel/@host.1/@node.1" namedport="//@interimmodels.10/@designmodel/@component.6/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="LocalServer">
        <node name="JEEContainer1" component="//@interimmodels.10/@designmodel/@component.3 //@interimmodels.10/@designmodel/@component.5">
          <port name="port" portNumber="80" namedport="//@interimmodels.10/@designmodel/@component.3/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15561" node="//@interimmodels.10/@designmodel/@host.2/@node.0" namedport="//@interimmodels.10/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15562" node="//@interimmodels.10/@designmodel/@host.2/@node.0" namedport="//@interimmodels.10/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15563" node="//@interimmodels.10/@designmodel/@host.2/@node.0" namedport="//@interimmodels.10/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15564" node="//@interimmodels.10/@designmodel/@host.2/@node.0" namedport="//@interimmodels.10/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15566" node="//@interimmodels.10/@designmodel/@host.2/@node.0" namedport="//@interimmodels.10/@designmodel/@component.3/@port.1"/>
          <port name="port" portNumber="81" node="//@interimmodels.10/@designmodel/@host.2/@node.0" namedport="//@interimmodels.10/@designmodel/@component.3/@port.1"/>
        </node>
        <node name="MySQL1" component="//@interimmodels.10/@designmodel/@component.4">
          <port name="port" portNumber="3306" node="//@interimmodels.10/@designmodel/@host.2/@node.1" namedport="//@interimmodels.10/@designmodel/@component.4/@port.0 //@interimmodels.10/@designmodel/@component.4/@port.1"/>
        </node>
      </host>
      <host name="BackOfficeServer">
        <node name="JEEContainer4" component="//@interimmodels.10/@designmodel/@component.7 //@interimmodels.10/@designmodel/@component.8">
          <port name="port" portNumber="80" node="//@interimmodels.10/@designmodel/@host.3/@node.0" namedport="//@interimmodels.10/@designmodel/@component.7/@port.0" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15571" node="//@interimmodels.10/@designmodel/@host.3/@node.0" namedport="//@interimmodels.10/@designmodel/@component.7/@port.0"/>
          <port name="port" portNumber="15572" node="//@interimmodels.10/@designmodel/@host.3/@node.0" namedport="//@interimmodels.10/@designmodel/@component.7/@port.0"/>
        </node>
        <node name="MySQL2" component="//@interimmodels.10/@designmodel/@component.9">
          <port name="port" portNumber="3306" node="//@interimmodels.10/@designmodel/@host.3/@node.1" namedport="//@interimmodels.10/@designmodel/@component.9/@port.0 //@interimmodels.10/@designmodel/@component.9/@port.1"/>
        </node>
      </host>
      <link name="link2" linkType="HTTPS" networkType="INTERNET" source="//@interimmodels.10/@designmodel/@host.0/@node.0/@port.1" target="//@interimmodels.10/@designmodel/@host.2/@node.0/@port.0"/>
      <link name="link3" source="//@interimmodels.10/@designmodel/@host.2/@node.0/@port.1"/>
      <link name="link4" source="//@interimmodels.10/@designmodel/@host.2/@node.0/@port.2"/>
      <link name="link5" target="//@interimmodels.10/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link7" networkType="INTERNET" source="//@interimmodels.10/@designmodel/@host.0/@node.0/@port.3"/>
      <link name="link9" source="//@interimmodels.10/@designmodel/@host.0/@node.0/@port.4" target="//@interimmodels.10/@designmodel/@host.0/@node.1/@port.0"/>
      <link name="link11" source="//@interimmodels.10/@designmodel/@host.3/@node.0/@port.1"/>
      <link name="link12" source="//@interimmodels.10/@designmodel/@host.3/@node.0/@port.2"/>
      <link name="link13" target="//@interimmodels.10/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link14" target="//@interimmodels.10/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link16" source="//@interimmodels.10/@designmodel/@host.2/@node.0/@port.5" target="//@interimmodels.10/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link15" networkType="INTERNET" source="//@interimmodels.10/@designmodel/@host.0/@node.0/@port.2" target="//@interimmodels.10/@designmodel/@host.2/@node.0/@port.6"/>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="12" description="network route for connector:orderlogwire between: ordersservice orderlogwirecommandlog " nextModel="//@interimmodels.12" name="network-route">
    <designmodel name="inter12">
      <component name="ShopFrontend" type="client,broadcaster" deploymentnode="//@interimmodels.11/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface,LeastPriviledge">
        <port name="auth" role="//@interimmodels.11/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="checked"/>
        </port>
        <port name="browse" role="//@interimmodels.11/@designmodel/@connector.1/@role.0" type="request,OutboundPort">
          <events name="read"/>
        </port>
        <port name="order" role="//@interimmodels.11/@designmodel/@connector.9/@role.0" type="broadcast,OutboundPort">
          <events name="purchased"/>
        </port>
        <port name="shop" role="//@interimmodels.11/@designmodel/@connector.3/@role.0" type="request,OutboundPort">
          <events name="itemadded"/>
        </port>
      </component>
      <component name="CateloqueService" type="server" deploymentnode="//@interimmodels.11/@designmodel/@host.0/@node.1" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
        <port name="list" role="//@interimmodels.11/@designmodel/@connector.1/@role.1" type="response,InboundPort">
          <events name="query"/>
        </port>
      </component>
      <component name="UserService" type="server" deploymentnode="//@interimmodels.11/@designmodel/@host.1/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DefenseInDepth,DenialOfService">
        <port name="login" role="//@interimmodels.11/@designmodel/@connector.0/@role.1" type="response,InboundPort">
          <events name="signedon"/>
        </port>
      </component>
      <component name="OrdersService" type="client,server,listener,eventconsumer,readendpoint,datawriter,datareader" deploymentnode="//@interimmodels.11/@designmodel/@host.2/@node.0" criticalLevel="Low" securityCharacters="AttackSurface,LeastPriviledge,Compartmentalization,DenialOfService,DataTampering">
        <port name="postorder" role="//@interimmodels.11/@designmodel/@connector.4/@role.0 //@interimmodels.11/@designmodel/@connector.9/@role.1 //@interimmodels.11/@designmodel/@connector.10/@role.0 //@interimmodels.11/@designmodel/@connector.7/@role.0" type="request,listen,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="check" next="//@interimmodels.11/@designmodel/@component.3/@port.0/@events.1"/>
          <events name="save"/>
        </port>
        <port name="get" role="//@interimmodels.11/@designmodel/@connector.2/@role.1 //@interimmodels.11/@designmodel/@connector.8/@role.0" type="response,read,OutboundPort,InboundPort,EventProcessorPort">
          <events name="ack"/>
        </port>
      </component>
      <component name="OrdersDB" type="repository,datastore" deploymentnode="//@interimmodels.11/@designmodel/@host.2/@node.1">
        <port name="writeorder" type="store,InboundPort,EventProcessorPort">
          <events name="orderwritten"/>
        </port>
        <port name="queryorder" role="//@interimmodels.11/@designmodel/@connector.8/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="orderreaded"/>
        </port>
      </component>
      <component name="CartsService" type="server" deploymentnode="//@interimmodels.11/@designmodel/@host.2/@node.0" securityCharacters="AttackSurface,DenialOfService,DataTampering">
        <port name="manage" role="//@interimmodels.11/@designmodel/@connector.3/@role.1" type="response,InboundPort">
          <events name="saveitem"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,datastore" deploymentnode="//@interimmodels.11/@designmodel/@host.1/@node.1" criticalLevel="High" securityCharacters="DefenseInDepth,Compartmentalization">
        <port name="pay" role="//@interimmodels.11/@designmodel/@connector.10/@role.1 //@interimmodels.11/@designmodel/@connector.11/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="paid"/>
        </port>
      </component>
      <component name="ShippingService" type="server,datawriter" deploymentnode="//@interimmodels.11/@designmodel/@host.3/@node.0" securityCharacters="Compartmentalization">
        <port name="postshipping" role="//@interimmodels.11/@designmodel/@connector.4/@role.1 //@interimmodels.11/@designmodel/@connector.6/@role.0" type="response,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="posted"/>
        </port>
      </component>
      <component name="ShippingWorker" type="readendpoint,datareader" deploymentnode="//@interimmodels.11/@designmodel/@host.3/@node.0">
        <port name="listqueue" role="//@interimmodels.11/@designmodel/@connector.5/@role.0" type="read,OutboundPort,EventProcessorPort">
          <events name="renderqueue"/>
        </port>
      </component>
      <component name="QueueDB" type="repository,datastore" deploymentnode="//@interimmodels.11/@designmodel/@host.3/@node.1">
        <port name="writequeue" role="//@interimmodels.11/@designmodel/@connector.6/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="queuewritten"/>
        </port>
        <port name="readqueue" role="//@interimmodels.11/@designmodel/@connector.5/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="queuereaded"/>
        </port>
      </component>
      <component name="ShopBackend" type="client" deploymentnode="//@interimmodels.11/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface">
        <port name="listorder" role="//@interimmodels.11/@designmodel/@connector.2/@role.0" type="request,OutboundPort">
          <events name="renderlist"/>
        </port>
      </component>
      <component name="OrderlogwireCommandLog" type="commanddb,datastore">
        <port name="logorderlogwire" role="//@interimmodels.11/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <component name="ShippinglogwireCommandLog" type="commanddb,datastore">
        <port name="logshippinglogwire" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.3/@node.2"/>
      </component>
      <component name="OrderwireLog" type="eventlogger,datastore">
        <port name="logorderwire" role="//@interimmodels.11/@designmodel/@connector.9/@role.2" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="append" role="//@interimmodels.11/@designmodel/@connector.11/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <deploymentnode href="target.arch#//@host.4/@node.0"/>
      </component>
      <connector name="userwire" type="CSConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.11/@designmodel/@connector.0"/>
      </connector>
      <connector name="cateloquewire" type="CSConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.1"/>
        <role name="responder" roletype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.11/@designmodel/@connector.1"/>
      </connector>
      <connector name="orderquerywire" type="CSConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.2"/>
        <role name="responder" roletype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.11/@designmodel/@connector.8/@role.0" connector="//@interimmodels.11/@designmodel/@connector.2"/>
      </connector>
      <connector name="cartwire" type="CSConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.3"/>
        <role name="responder" roletype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.11/@designmodel/@connector.3"/>
      </connector>
      <connector name="shippingwire" type="CSConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.11/@designmodel/@connector.6/@role.0" connector="//@interimmodels.11/@designmodel/@connector.4"/>
      </connector>
      <connector name="queuereadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.5"/>
        <role name="readstorage" roletype="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.11/@designmodel/@connector.5"/>
      </connector>
      <connector name="shippinglogwire" type="CRConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.6"/>
        <role name="readstore" roletype="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.11/@designmodel/@connector.6"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.4/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.6"/>
        </role>
      </connector>
      <connector name="orderlogwire" type="CRConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.11/@designmodel/@connector.10/@role.0" connector="//@interimmodels.11/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.11/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.4/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="orderreadwire" type="QRConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0">
        <role name="querier" roletype="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.8"/>
        <role name="readstore" roletype="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.11/@designmodel/@connector.8"/>
      </connector>
      <connector name="orderwire" type="ESConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.11/@designmodel/@archstyle.1/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.11/@designmodel/@connector.9"/>
        <role name="eventsubscriber" roletype="//@interimmodels.11/@designmodel/@archstyle.1/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.11/@designmodel/@connector.7/@role.0" connector="//@interimmodels.11/@designmodel/@connector.9"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.9"/>
        </role>
      </connector>
      <connector name="paywire" type="CSConnector" connectortype="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="writer" nextRoleExpr="//@interimmodels.11/@designmodel/@connector.4/@role.0" connector="//@interimmodels.11/@designmodel/@connector.10"/>
        <role name="responder" roletype="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="writestorage" nextRoleExpr="//@interimmodels.11/@designmodel/@connector.11/@role.1" connector="//@interimmodels.11/@designmodel/@connector.10"/>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.11/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.11/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.11/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.11/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.11/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.11/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.11/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.11/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.11/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.11/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.11/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.11/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.4" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.11/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
            <event name="Skip"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.11/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.11/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.11/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.11/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.11/@designmodel/@archstyle.4/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.11/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.11/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.11/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.11/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.11/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.11/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.11/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.11/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.11/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.11/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.11/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.11/@designmodel" counterExample="" visitedStates="15" verifyTime="0.015357099999999999" testport="//@interimmodels.11/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!65 -> cartwire_req?65 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!65 -> cartwire_res?65" exprText="[]  (ShopFrontend.shop.itemadded -> &lt;> CartsService.manage.saveitem)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.11/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.0/@port.3/@events.0" nextExpr="//@interimmodels.11/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.11/@designmodel" counterExample="" visitedStates="24842" verifyTime="0.7226132" testport="//@interimmodels.11/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!57 -> orderwire_pevt?57 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!57 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?57 -> orderwire_bevt!57 -> orderwire_bevt?57 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!57 -> orderlogwire_cmmd!57 -> orderlogwire_cmmd?57 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_requester_process -> paywire_req!57 -> paywire_req?57 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!57 -> oraclepaywire_token?57 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!57 -> paywire_res?57 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!57 -> shippingwire_req?57 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!57 -> shippinglogwire_stmt?57 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!57 -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!57 -> shippingwire_res?57 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (Payment.pay.paid -> &lt;> ShippingService.postshipping.posted)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.11/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.6/@port.0/@events.0" nextExpr="//@interimmodels.11/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.11/@designmodel" visitedStates="10" verifyTime="0.012896699999999999" testport="//@interimmodels.11/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!12 -> cartwire_req?12 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!12 -> cartwire_res?12" exprText="[]  (OrdersService.postorder.save -> &lt;> Payment.pay.paid)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.11/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.3/@port.0/@events.1" nextExpr="//@interimmodels.11/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.11/@designmodel" counterExample="" visitedStates="15" verifyTime="0.0156107" testport="//@interimmodels.11/@designmodel/@component.0/@port.0" traceExample="init -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!28 -> userwire_req?28 -> UserService_userwire_responder_invoke -> UserService_login_signedon -> UserService_userwire_responder_process -> userwire_res!28 -> userwire_res?28" exprText="[]  (ShopFrontend.auth.checked -> &lt;> UserService.login.signedon)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.11/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.11/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.11/@designmodel" counterExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!62 -> cateloquewire_req?62 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!62 -> cateloquewire_res?62" visitedStates="24" verifyTime="0.013311199999999999" testport="//@interimmodels.11/@designmodel/@component.0/@port.1" traceExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!56 -> cateloquewire_req?56 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!56 -> cateloquewire_res?56" exprText="[]  (&lt;> ShopFrontend.browse.read -> &lt;> CateloqueService.list.query)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.11/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.1/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.0/@port.1/@events.0" operator="EVENTUALLY" nextExpr="//@interimmodels.11/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop6" model="//@interimmodels.11/@designmodel" counterExample="" visitedStates="27" verifyTime="0.013444399999999999" testport="//@interimmodels.11/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!10 -> orderquerywire_req?10 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_querier_process -> orderreadwire_stmt!10 -> orderreadwire_stmt?10 -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstore_process -> orderreadwire_res!10 -> orderreadwire_res?10 -> OrdersService_orderreadwire_querier_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!10 -> orderquerywire_res?10" exprText="[]  (ShopBackend.listorder.renderlist -> &lt;> OrdersDB.queryorder.orderreaded)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.11/@designmodel/@verifyProperty.5">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.10/@port.0/@events.0" nextExpr="//@interimmodels.11/@designmodel/@verifyProperty.5/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop7" model="//@interimmodels.11/@designmodel" counterExample="" visitedStates="21603" verifyTime="0.5993383999999999" testport="//@interimmodels.11/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!32 -> orderwire_pevt?32 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!32 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?32 -> orderwire_bevt!32 -> orderwire_bevt?32 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!32 -> orderlogwire_cmmd!32 -> orderlogwire_cmmd?32 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_requester_process -> paywire_req!32 -> paywire_req?32 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!32 -> oraclepaywire_token?32 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!32 -> paywire_res?32 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!32 -> shippingwire_req?32 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!32 -> shippinglogwire_stmt?32 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!32 -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!32 -> shippingwire_res?32 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (ShopFrontend.order.purchased -> &lt;> OrdersService.postorder.save)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.11/@designmodel/@verifyProperty.6">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.3/@port.0/@events.1" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.11/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.11/@designmodel/@verifyProperty.6/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-orderwire" visitedStates="31036" verifyTime="0.8598578" testport="//@interimmodels.11/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!24 -> orderwire_pevt?24 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!24 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?24 -> orderwire_bevt!24 -> orderwire_bevt?24 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!24 -> orderlogwire_cmmd!24 -> orderlogwire_cmmd?24 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_requester_process -> paywire_req!24 -> paywire_req?24 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!24 -> oraclepaywire_token?24 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!24 -> paywire_res?24 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!24 -> shippingwire_req?24 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!24 -> shippinglogwire_stmt?24 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!24 -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!24 -> shippingwire_res?24 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (ShopFrontend.order.purchased-> &lt;> OrderwireLog.orderwire.eventstore.persist)">
        <connector href="target.arch#//@connector.9"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-shippinglogwire" valid="false" counterExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!65 -> orderwire_pevt?65 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!65 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?65 -> orderwire_bevt!65 -> orderwire_bevt?65 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!65 -> orderlogwire_cmmd!65 -> orderlogwire_cmmd?65 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_requester_process -> paywire_req!65 -> paywire_req?65 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!65 -> oraclepaywire_token?65 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!65 -> paywire_res?65 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!65 -> shippingwire_req?65 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!65 -> shippinglogwire_stmt?65 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!65 -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!65 -> shippingwire_res?65 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" visitedStates="294" verifyTime="0.018631099999999998" testport="//@interimmodels.11/@designmodel/@component.0/@port.2" traceExample="********Verification Result********&#xD;&#xA;The Assertion (inter12() |= ![](ShippingService_postshipping_posted->&lt;" exprText="[] (ShippingService.postshipping.posted-> &lt;> ShippinglogwireCommandLog.shippinglogwire.commandstore.persist)">
        <connector href="target.arch#//@connector.6"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-query-orderreadwire" visitedStates="23" verifyTime="0.0133225" testport="//@interimmodels.11/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!92 -> orderquerywire_req?92 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_querier_process -> orderreadwire_stmt!92 -> orderreadwire_stmt?92 -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstore_process -> orderreadwire_res!92 -> orderreadwire_res?92 -> OrdersService_orderreadwire_querier_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!92 -> orderquerywire_res?92" exprText="[] (OrdersService.get.ack-> &lt;> OrdersDB.orderreadwire.readstore.process)">
        <connector href="target.arch#//@connector.8"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" visitedStates="38346" verifyTime="1.0286095" testport="//@interimmodels.11/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!88 -> orderwire_pevt?88 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!88 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?88 -> orderwire_bevt!88 -> orderwire_bevt?88 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!88 -> orderlogwire_cmmd!88 -> orderlogwire_cmmd?88 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_requester_process -> paywire_req!88 -> paywire_req?88 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!88 -> oraclepaywire_token?88 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!88 -> paywire_res?88 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!88 -> shippingwire_req?88 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!88 -> shippinglogwire_stmt?88 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!88 -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!88 -> shippingwire_res?88 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (Payment.pay.paid-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.11"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-orderlogwire" visitedStates="38602" verifyTime="1.0399497" testport="//@interimmodels.11/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!91 -> orderwire_pevt?91 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!91 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?91 -> orderwire_bevt!91 -> orderwire_bevt?91 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!91 -> orderlogwire_cmmd!91 -> orderlogwire_cmmd?91 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_requester_process -> paywire_req!91 -> paywire_req?91 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!91 -> oraclepaywire_token?91 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!91 -> paywire_res?91 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!91 -> shippingwire_req?91 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!91 -> shippinglogwire_stmt?91 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!91 -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!91 -> shippingwire_res?91 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (OrdersService.postorder.check-> &lt;> OrderlogwireCommandLog.orderlogwire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="CLOUD_PLATFORM">
        <node name="NodeJSContainer1" component="//@interimmodels.11/@designmodel/@component.0 //@interimmodels.11/@designmodel/@component.10">
          <port name="port" portNumber="15551" node="//@interimmodels.11/@designmodel/@host.0/@node.0" namedport="//@interimmodels.11/@designmodel/@component.0/@port.0"/>
          <port name="port" portNumber="15552" node="//@interimmodels.11/@designmodel/@host.0/@node.0" namedport="//@interimmodels.11/@designmodel/@component.0/@port.2"/>
          <port name="port" portNumber="15553" node="//@interimmodels.11/@designmodel/@host.0/@node.0" namedport="//@interimmodels.11/@designmodel/@component.10/@port.0"/>
          <port name="port" portNumber="15554" node="//@interimmodels.11/@designmodel/@host.0/@node.0" namedport="//@interimmodels.11/@designmodel/@component.0/@port.3"/>
          <port name="port" portNumber="15555" node="//@interimmodels.11/@designmodel/@host.0/@node.0" namedport="//@interimmodels.11/@designmodel/@component.0/@port.1"/>
        </node>
        <node name="GoContainer3" component="//@interimmodels.11/@designmodel/@component.1">
          <port name="port" portNumber="80" node="//@interimmodels.11/@designmodel/@host.0/@node.1" namedport="//@interimmodels.11/@designmodel/@component.1/@port.0" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="SecureServer">
        <node name="GoContainer1" component="//@interimmodels.11/@designmodel/@component.2">
          <port name="port" portNumber="80" node="//@interimmodels.11/@designmodel/@host.1/@node.0" namedport="//@interimmodels.11/@designmodel/@component.2/@port.0" hasFirewall="true"/>
        </node>
        <node name="GoContainer2" component="//@interimmodels.11/@designmodel/@component.6">
          <port name="port" portNumber="80" node="//@interimmodels.11/@designmodel/@host.1/@node.1" namedport="//@interimmodels.11/@designmodel/@component.6/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="LocalServer">
        <node name="JEEContainer1" component="//@interimmodels.11/@designmodel/@component.3 //@interimmodels.11/@designmodel/@component.5">
          <port name="port" portNumber="80" namedport="//@interimmodels.11/@designmodel/@component.3/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15561" node="//@interimmodels.11/@designmodel/@host.2/@node.0" namedport="//@interimmodels.11/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15562" node="//@interimmodels.11/@designmodel/@host.2/@node.0" namedport="//@interimmodels.11/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15563" node="//@interimmodels.11/@designmodel/@host.2/@node.0" namedport="//@interimmodels.11/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15564" node="//@interimmodels.11/@designmodel/@host.2/@node.0" namedport="//@interimmodels.11/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15566" node="//@interimmodels.11/@designmodel/@host.2/@node.0" namedport="//@interimmodels.11/@designmodel/@component.3/@port.1"/>
          <port name="port" portNumber="81" node="//@interimmodels.11/@designmodel/@host.2/@node.0" namedport="//@interimmodels.11/@designmodel/@component.3/@port.1"/>
        </node>
        <node name="MySQL1" component="//@interimmodels.11/@designmodel/@component.4">
          <port name="port" portNumber="3306" node="//@interimmodels.11/@designmodel/@host.2/@node.1" namedport="//@interimmodels.11/@designmodel/@component.4/@port.0 //@interimmodels.11/@designmodel/@component.4/@port.1"/>
        </node>
      </host>
      <host name="BackOfficeServer">
        <node name="JEEContainer4" component="//@interimmodels.11/@designmodel/@component.7 //@interimmodels.11/@designmodel/@component.8">
          <port name="port" portNumber="80" node="//@interimmodels.11/@designmodel/@host.3/@node.0" namedport="//@interimmodels.11/@designmodel/@component.7/@port.0" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15571" node="//@interimmodels.11/@designmodel/@host.3/@node.0" namedport="//@interimmodels.11/@designmodel/@component.7/@port.0"/>
          <port name="port" portNumber="15572" node="//@interimmodels.11/@designmodel/@host.3/@node.0" namedport="//@interimmodels.11/@designmodel/@component.7/@port.0"/>
        </node>
        <node name="MySQL2" component="//@interimmodels.11/@designmodel/@component.9">
          <port name="port" portNumber="3306" node="//@interimmodels.11/@designmodel/@host.3/@node.1" namedport="//@interimmodels.11/@designmodel/@component.9/@port.0 //@interimmodels.11/@designmodel/@component.9/@port.1"/>
        </node>
      </host>
      <link name="link2" linkType="HTTPS" networkType="INTERNET" source="//@interimmodels.11/@designmodel/@host.0/@node.0/@port.1" target="//@interimmodels.11/@designmodel/@host.2/@node.0/@port.0"/>
      <link name="link3" source="//@interimmodels.11/@designmodel/@host.2/@node.0/@port.1"/>
      <link name="link4" source="//@interimmodels.11/@designmodel/@host.2/@node.0/@port.2"/>
      <link name="link5" target="//@interimmodels.11/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link7" networkType="INTERNET" source="//@interimmodels.11/@designmodel/@host.0/@node.0/@port.3"/>
      <link name="link9" source="//@interimmodels.11/@designmodel/@host.0/@node.0/@port.4" target="//@interimmodels.11/@designmodel/@host.0/@node.1/@port.0"/>
      <link name="link11" source="//@interimmodels.11/@designmodel/@host.3/@node.0/@port.1"/>
      <link name="link12" source="//@interimmodels.11/@designmodel/@host.3/@node.0/@port.2"/>
      <link name="link13" target="//@interimmodels.11/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link14" target="//@interimmodels.11/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link16" source="//@interimmodels.11/@designmodel/@host.2/@node.0/@port.5" target="//@interimmodels.11/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link15" networkType="INTERNET" source="//@interimmodels.11/@designmodel/@host.0/@node.0/@port.2" target="//@interimmodels.11/@designmodel/@host.2/@node.0/@port.6"/>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="13" description="network route for connector:shippinglogwire between: shippingservice shippinglogwirecommandlog " nextModel="//@interimmodels.13" isStable="true" name="network-route">
    <designmodel name="inter13">
      <component name="ShopFrontend" type="client,broadcaster" deploymentnode="//@interimmodels.12/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface,LeastPriviledge">
        <port name="auth" role="//@interimmodels.12/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="checked"/>
        </port>
        <port name="browse" role="//@interimmodels.12/@designmodel/@connector.1/@role.0" type="request,OutboundPort">
          <events name="read"/>
        </port>
        <port name="order" role="//@interimmodels.12/@designmodel/@connector.9/@role.0" type="broadcast,OutboundPort">
          <events name="purchased"/>
        </port>
        <port name="shop" role="//@interimmodels.12/@designmodel/@connector.3/@role.0" type="request,OutboundPort">
          <events name="itemadded"/>
        </port>
      </component>
      <component name="CateloqueService" type="server" deploymentnode="//@interimmodels.12/@designmodel/@host.0/@node.1" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
        <port name="list" role="//@interimmodels.12/@designmodel/@connector.1/@role.1" type="response,InboundPort">
          <events name="query"/>
        </port>
      </component>
      <component name="UserService" type="server" deploymentnode="//@interimmodels.12/@designmodel/@host.1/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DefenseInDepth,DenialOfService">
        <port name="login" role="//@interimmodels.12/@designmodel/@connector.0/@role.1" type="response,InboundPort">
          <events name="signedon"/>
        </port>
      </component>
      <component name="OrdersService" type="client,server,listener,eventconsumer,readendpoint,datawriter,datareader" deploymentnode="//@interimmodels.12/@designmodel/@host.2/@node.0" criticalLevel="Low" securityCharacters="AttackSurface,LeastPriviledge,Compartmentalization,DenialOfService,DataTampering">
        <port name="postorder" role="//@interimmodels.12/@designmodel/@connector.4/@role.0 //@interimmodels.12/@designmodel/@connector.9/@role.1 //@interimmodels.12/@designmodel/@connector.10/@role.0 //@interimmodels.12/@designmodel/@connector.7/@role.0" type="request,listen,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="check" next="//@interimmodels.12/@designmodel/@component.3/@port.0/@events.1"/>
          <events name="save"/>
        </port>
        <port name="get" role="//@interimmodels.12/@designmodel/@connector.2/@role.1 //@interimmodels.12/@designmodel/@connector.8/@role.0" type="response,read,OutboundPort,InboundPort,EventProcessorPort">
          <events name="ack"/>
        </port>
      </component>
      <component name="OrdersDB" type="repository,datastore" deploymentnode="//@interimmodels.12/@designmodel/@host.2/@node.1">
        <port name="writeorder" type="store,InboundPort,EventProcessorPort">
          <events name="orderwritten"/>
        </port>
        <port name="queryorder" role="//@interimmodels.12/@designmodel/@connector.8/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="orderreaded"/>
        </port>
      </component>
      <component name="CartsService" type="server" deploymentnode="//@interimmodels.12/@designmodel/@host.2/@node.0" securityCharacters="AttackSurface,DenialOfService,DataTampering">
        <port name="manage" role="//@interimmodels.12/@designmodel/@connector.3/@role.1" type="response,InboundPort">
          <events name="saveitem"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,datastore" deploymentnode="//@interimmodels.12/@designmodel/@host.1/@node.1" criticalLevel="High" securityCharacters="DefenseInDepth,Compartmentalization">
        <port name="pay" role="//@interimmodels.12/@designmodel/@connector.10/@role.1 //@interimmodels.12/@designmodel/@connector.11/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="paid"/>
        </port>
      </component>
      <component name="ShippingService" type="server,datawriter" deploymentnode="//@interimmodels.12/@designmodel/@host.3/@node.0" securityCharacters="Compartmentalization">
        <port name="postshipping" role="//@interimmodels.12/@designmodel/@connector.4/@role.1 //@interimmodels.12/@designmodel/@connector.6/@role.0" type="response,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="posted"/>
        </port>
      </component>
      <component name="ShippingWorker" type="readendpoint,datareader" deploymentnode="//@interimmodels.12/@designmodel/@host.3/@node.0">
        <port name="listqueue" role="//@interimmodels.12/@designmodel/@connector.5/@role.0" type="read,OutboundPort,EventProcessorPort">
          <events name="renderqueue"/>
        </port>
      </component>
      <component name="QueueDB" type="repository,datastore" deploymentnode="//@interimmodels.12/@designmodel/@host.3/@node.1">
        <port name="writequeue" role="//@interimmodels.12/@designmodel/@connector.6/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="queuewritten"/>
        </port>
        <port name="readqueue" role="//@interimmodels.12/@designmodel/@connector.5/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="queuereaded"/>
        </port>
      </component>
      <component name="ShopBackend" type="client" deploymentnode="//@interimmodels.12/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface">
        <port name="listorder" role="//@interimmodels.12/@designmodel/@connector.2/@role.0" type="request,OutboundPort">
          <events name="renderlist"/>
        </port>
      </component>
      <component name="OrderlogwireCommandLog" type="commanddb,datastore">
        <port name="logorderlogwire" role="//@interimmodels.12/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <component name="ShippinglogwireCommandLog" type="commanddb,datastore">
        <port name="logshippinglogwire" role="//@interimmodels.12/@designmodel/@connector.6/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.3/@node.2"/>
      </component>
      <component name="OrderwireLog" type="eventlogger,datastore">
        <port name="logorderwire" role="//@interimmodels.12/@designmodel/@connector.9/@role.2" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="append" role="//@interimmodels.12/@designmodel/@connector.11/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <deploymentnode href="target.arch#//@host.4/@node.0"/>
      </component>
      <connector name="userwire" type="CSConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.12/@designmodel/@connector.0"/>
      </connector>
      <connector name="cateloquewire" type="CSConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.1"/>
        <role name="responder" roletype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.12/@designmodel/@connector.1"/>
      </connector>
      <connector name="orderquerywire" type="CSConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.2"/>
        <role name="responder" roletype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.12/@designmodel/@connector.8/@role.0" connector="//@interimmodels.12/@designmodel/@connector.2"/>
      </connector>
      <connector name="cartwire" type="CSConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.3"/>
        <role name="responder" roletype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.12/@designmodel/@connector.3"/>
      </connector>
      <connector name="shippingwire" type="CSConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.12/@designmodel/@connector.6/@role.0" connector="//@interimmodels.12/@designmodel/@connector.4"/>
      </connector>
      <connector name="queuereadwire" type="REConnector,RuleEventQuery" connectortype="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0">
        <role name="reader" roletype="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.5"/>
        <role name="readstorage" roletype="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.12/@designmodel/@connector.5"/>
      </connector>
      <connector name="shippinglogwire" type="CRConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.6"/>
        <role name="readstore" roletype="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.12/@designmodel/@connector.6"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.4/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.6"/>
        </role>
      </connector>
      <connector name="orderlogwire" type="CRConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.12/@designmodel/@connector.10/@role.0" connector="//@interimmodels.12/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.12/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.4/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="orderreadwire" type="QRConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0">
        <role name="querier" roletype="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.8"/>
        <role name="readstore" roletype="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.12/@designmodel/@connector.8"/>
      </connector>
      <connector name="orderwire" type="ESConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.12/@designmodel/@archstyle.1/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.12/@designmodel/@connector.9"/>
        <role name="eventsubscriber" roletype="//@interimmodels.12/@designmodel/@archstyle.1/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.12/@designmodel/@connector.7/@role.0" connector="//@interimmodels.12/@designmodel/@connector.9"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.9"/>
        </role>
      </connector>
      <connector name="paywire" type="CSConnector" connectortype="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="writer" nextRoleExpr="//@interimmodels.12/@designmodel/@connector.4/@role.0" connector="//@interimmodels.12/@designmodel/@connector.10"/>
        <role name="responder" roletype="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="writestorage" nextRoleExpr="//@interimmodels.12/@designmodel/@connector.11/@role.1" connector="//@interimmodels.12/@designmodel/@connector.10"/>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.12/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.12/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.12/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.12/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.12/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.12/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.12/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.12/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.12/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.12/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.12/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.12/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.4" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.12/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
            <event name="Skip"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.12/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.12/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.12/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.12/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.12/@designmodel/@archstyle.4/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.12/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.12/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.12/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.12/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.12/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.12/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.12/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.12/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.12/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.12/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.12/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.12/@designmodel" counterExample="" visitedStates="15" verifyTime="0.0255163" testport="//@interimmodels.12/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!49 -> cartwire_req?49 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!49 -> cartwire_res?49" exprText="[]  (ShopFrontend.shop.itemadded -> &lt;> CartsService.manage.saveitem)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.12/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.0/@port.3/@events.0" nextExpr="//@interimmodels.12/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.12/@designmodel" counterExample="" visitedStates="98442" verifyTime="3.1246305999999997" testport="//@interimmodels.12/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!34 -> orderwire_pevt?34 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!34 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?34 -> orderwire_bevt!34 -> orderwire_bevt?34 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!34 -> orderlogwire_cmmd!34 -> orderlogwire_cmmd?34 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_requester_process -> paywire_req!34 -> paywire_req?34 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!34 -> oraclepaywire_token?34 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!34 -> paywire_res?34 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!34 -> shippingwire_req?34 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!34 -> shippinglogwire_stmt?34 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!34 -> shippinglogwire_cmmd?34 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!34 -> shippingwire_res?34 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (Payment.pay.paid -> &lt;> ShippingService.postshipping.posted)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.12/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.6/@port.0/@events.0" nextExpr="//@interimmodels.12/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.12/@designmodel" visitedStates="10" verifyTime="0.027173" testport="//@interimmodels.12/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!69 -> cartwire_req?69 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!69 -> cartwire_res?69" exprText="[]  (OrdersService.postorder.save -> &lt;> Payment.pay.paid)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.12/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.3/@port.0/@events.1" nextExpr="//@interimmodels.12/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.12/@designmodel" counterExample="" visitedStates="15" verifyTime="0.024010999999999998" testport="//@interimmodels.12/@designmodel/@component.0/@port.0" traceExample="init -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!65 -> userwire_req?65 -> UserService_userwire_responder_invoke -> UserService_login_signedon -> UserService_userwire_responder_process -> userwire_res!65 -> userwire_res?65" exprText="[]  (ShopFrontend.auth.checked -> &lt;> UserService.login.signedon)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.12/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.12/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.12/@designmodel" counterExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!62 -> cateloquewire_req?62 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!62 -> cateloquewire_res?62" visitedStates="24" verifyTime="0.0345215" testport="//@interimmodels.12/@designmodel/@component.0/@port.1" traceExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!69 -> cateloquewire_req?69 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!69 -> cateloquewire_res?69" exprText="[]  (&lt;> ShopFrontend.browse.read -> &lt;> CateloqueService.list.query)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.12/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.1/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.0/@port.1/@events.0" operator="EVENTUALLY" nextExpr="//@interimmodels.12/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop6" model="//@interimmodels.12/@designmodel" counterExample="" visitedStates="27" verifyTime="0.0236448" testport="//@interimmodels.12/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!66 -> orderquerywire_req?66 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_querier_process -> orderreadwire_stmt!66 -> orderreadwire_stmt?66 -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstore_process -> orderreadwire_res!66 -> orderreadwire_res?66 -> OrdersService_orderreadwire_querier_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!66 -> orderquerywire_res?66" exprText="[]  (ShopBackend.listorder.renderlist -> &lt;> OrdersDB.queryorder.orderreaded)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.12/@designmodel/@verifyProperty.5">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.10/@port.0/@events.0" nextExpr="//@interimmodels.12/@designmodel/@verifyProperty.5/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop7" model="//@interimmodels.12/@designmodel" counterExample="" visitedStates="95203" verifyTime="3.0128681" testport="//@interimmodels.12/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!54 -> orderwire_pevt?54 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!54 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?54 -> orderwire_bevt!54 -> orderwire_bevt?54 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!54 -> orderlogwire_cmmd!54 -> orderlogwire_cmmd?54 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_requester_process -> paywire_req!54 -> paywire_req?54 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!54 -> oraclepaywire_token?54 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!54 -> paywire_res?54 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!54 -> shippingwire_req?54 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!54 -> shippinglogwire_stmt?54 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!54 -> shippinglogwire_cmmd?54 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!54 -> shippingwire_res?54 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (ShopFrontend.order.purchased -> &lt;> OrdersService.postorder.save)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.12/@designmodel/@verifyProperty.6">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.3/@port.0/@events.1" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.12/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.12/@designmodel/@verifyProperty.6/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-orderwire" visitedStates="137936" verifyTime="4.333315499999999" testport="//@interimmodels.12/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!37 -> orderwire_pevt?37 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!37 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?37 -> orderwire_bevt!37 -> orderwire_bevt?37 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!37 -> orderlogwire_cmmd!37 -> orderlogwire_cmmd?37 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_requester_process -> paywire_req!37 -> paywire_req?37 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!37 -> oraclepaywire_token?37 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!37 -> paywire_res?37 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!37 -> shippingwire_req?37 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!37 -> shippinglogwire_stmt?37 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!37 -> shippinglogwire_cmmd?37 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!37 -> shippingwire_res?37 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (ShopFrontend.order.purchased-> &lt;> OrderwireLog.orderwire.eventstore.persist)">
        <connector href="target.arch#//@connector.9"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-shippinglogwire" visitedStates="168290" verifyTime="5.3520473" testport="//@interimmodels.12/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!62 -> orderwire_pevt?62 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!62 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?62 -> orderwire_bevt!62 -> orderwire_bevt?62 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!62 -> orderlogwire_cmmd!62 -> orderlogwire_cmmd?62 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_requester_process -> paywire_req!62 -> paywire_req?62 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!62 -> oraclepaywire_token?62 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!62 -> paywire_res?62 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!62 -> shippingwire_req?62 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!62 -> shippinglogwire_stmt?62 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!62 -> shippinglogwire_cmmd?62 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!62 -> shippingwire_res?62 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (ShippingService.postshipping.posted-> &lt;> ShippinglogwireCommandLog.shippinglogwire.commandstore.persist)">
        <connector href="target.arch#//@connector.6"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-query-orderreadwire" visitedStates="23" verifyTime="0.026598899999999998" testport="//@interimmodels.12/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!99 -> orderquerywire_req?99 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_querier_process -> orderreadwire_stmt!99 -> orderreadwire_stmt?99 -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstore_process -> orderreadwire_res!99 -> orderreadwire_res?99 -> OrdersService_orderreadwire_querier_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!99 -> orderquerywire_res?99" exprText="[] (OrdersService.get.ack-> &lt;> OrdersDB.orderreadwire.readstore.process)">
        <connector href="target.arch#//@connector.8"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" visitedStates="170266" verifyTime="5.7944062" testport="//@interimmodels.12/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!67 -> orderwire_pevt?67 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!67 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?67 -> orderwire_bevt!67 -> orderwire_bevt?67 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!67 -> orderlogwire_cmmd!67 -> orderlogwire_cmmd?67 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_requester_process -> paywire_req!67 -> paywire_req?67 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!67 -> oraclepaywire_token?67 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!67 -> paywire_res?67 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!67 -> shippingwire_req?67 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!67 -> shippinglogwire_stmt?67 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!67 -> shippinglogwire_cmmd?67 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!67 -> shippingwire_res?67 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (Payment.pay.paid-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.11"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-orderlogwire" visitedStates="170522" verifyTime="5.3183196" testport="//@interimmodels.12/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!12 -> orderwire_pevt?12 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!12 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?12 -> orderwire_bevt!12 -> orderwire_bevt?12 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!12 -> orderlogwire_cmmd!12 -> orderlogwire_cmmd?12 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_requester_process -> paywire_req!12 -> paywire_req?12 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!12 -> oraclepaywire_token?12 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!12 -> paywire_res?12 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!12 -> shippingwire_req?12 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!12 -> shippinglogwire_stmt?12 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!12 -> shippinglogwire_cmmd?12 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!12 -> shippingwire_res?12 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (OrdersService.postorder.check-> &lt;> OrderlogwireCommandLog.orderlogwire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="CLOUD_PLATFORM">
        <node name="NodeJSContainer1" component="//@interimmodels.12/@designmodel/@component.0 //@interimmodels.12/@designmodel/@component.10">
          <port name="port" portNumber="15551" node="//@interimmodels.12/@designmodel/@host.0/@node.0" namedport="//@interimmodels.12/@designmodel/@component.0/@port.0"/>
          <port name="port" portNumber="15552" node="//@interimmodels.12/@designmodel/@host.0/@node.0" namedport="//@interimmodels.12/@designmodel/@component.0/@port.2"/>
          <port name="port" portNumber="15553" node="//@interimmodels.12/@designmodel/@host.0/@node.0" namedport="//@interimmodels.12/@designmodel/@component.10/@port.0"/>
          <port name="port" portNumber="15554" node="//@interimmodels.12/@designmodel/@host.0/@node.0" namedport="//@interimmodels.12/@designmodel/@component.0/@port.3"/>
          <port name="port" portNumber="15555" node="//@interimmodels.12/@designmodel/@host.0/@node.0" namedport="//@interimmodels.12/@designmodel/@component.0/@port.1"/>
        </node>
        <node name="GoContainer3" component="//@interimmodels.12/@designmodel/@component.1">
          <port name="port" portNumber="80" node="//@interimmodels.12/@designmodel/@host.0/@node.1" namedport="//@interimmodels.12/@designmodel/@component.1/@port.0" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="SecureServer">
        <node name="GoContainer1" component="//@interimmodels.12/@designmodel/@component.2">
          <port name="port" portNumber="80" node="//@interimmodels.12/@designmodel/@host.1/@node.0" namedport="//@interimmodels.12/@designmodel/@component.2/@port.0" hasFirewall="true"/>
        </node>
        <node name="GoContainer2" component="//@interimmodels.12/@designmodel/@component.6">
          <port name="port" portNumber="80" node="//@interimmodels.12/@designmodel/@host.1/@node.1" namedport="//@interimmodels.12/@designmodel/@component.6/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="LocalServer">
        <node name="JEEContainer1" component="//@interimmodels.12/@designmodel/@component.3 //@interimmodels.12/@designmodel/@component.5">
          <port name="port" portNumber="80" namedport="//@interimmodels.12/@designmodel/@component.3/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15561" node="//@interimmodels.12/@designmodel/@host.2/@node.0" namedport="//@interimmodels.12/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15562" node="//@interimmodels.12/@designmodel/@host.2/@node.0" namedport="//@interimmodels.12/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15563" node="//@interimmodels.12/@designmodel/@host.2/@node.0" namedport="//@interimmodels.12/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15564" node="//@interimmodels.12/@designmodel/@host.2/@node.0" namedport="//@interimmodels.12/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15566" node="//@interimmodels.12/@designmodel/@host.2/@node.0" namedport="//@interimmodels.12/@designmodel/@component.3/@port.1"/>
          <port name="port" portNumber="81" node="//@interimmodels.12/@designmodel/@host.2/@node.0" namedport="//@interimmodels.12/@designmodel/@component.3/@port.1"/>
        </node>
        <node name="MySQL1" component="//@interimmodels.12/@designmodel/@component.4">
          <port name="port" portNumber="3306" node="//@interimmodels.12/@designmodel/@host.2/@node.1" namedport="//@interimmodels.12/@designmodel/@component.4/@port.0 //@interimmodels.12/@designmodel/@component.4/@port.1"/>
        </node>
      </host>
      <host name="BackOfficeServer">
        <node name="JEEContainer4" component="//@interimmodels.12/@designmodel/@component.7 //@interimmodels.12/@designmodel/@component.8">
          <port name="port" portNumber="80" node="//@interimmodels.12/@designmodel/@host.3/@node.0" namedport="//@interimmodels.12/@designmodel/@component.7/@port.0" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15571" node="//@interimmodels.12/@designmodel/@host.3/@node.0" namedport="//@interimmodels.12/@designmodel/@component.7/@port.0"/>
          <port name="port" portNumber="15572" node="//@interimmodels.12/@designmodel/@host.3/@node.0" namedport="//@interimmodels.12/@designmodel/@component.7/@port.0"/>
        </node>
        <node name="MySQL2" component="//@interimmodels.12/@designmodel/@component.9">
          <port name="port" portNumber="3306" node="//@interimmodels.12/@designmodel/@host.3/@node.1" namedport="//@interimmodels.12/@designmodel/@component.9/@port.0 //@interimmodels.12/@designmodel/@component.9/@port.1"/>
        </node>
      </host>
      <link name="link2" linkType="HTTPS" networkType="INTERNET" source="//@interimmodels.12/@designmodel/@host.0/@node.0/@port.1" target="//@interimmodels.12/@designmodel/@host.2/@node.0/@port.0"/>
      <link name="link3" source="//@interimmodels.12/@designmodel/@host.2/@node.0/@port.1"/>
      <link name="link4" source="//@interimmodels.12/@designmodel/@host.2/@node.0/@port.2"/>
      <link name="link5" target="//@interimmodels.12/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link7" networkType="INTERNET" source="//@interimmodels.12/@designmodel/@host.0/@node.0/@port.3"/>
      <link name="link9" source="//@interimmodels.12/@designmodel/@host.0/@node.0/@port.4" target="//@interimmodels.12/@designmodel/@host.0/@node.1/@port.0"/>
      <link name="link11" source="//@interimmodels.12/@designmodel/@host.3/@node.0/@port.1"/>
      <link name="link12" source="//@interimmodels.12/@designmodel/@host.3/@node.0/@port.2"/>
      <link name="link13" target="//@interimmodels.12/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link14" target="//@interimmodels.12/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link16" source="//@interimmodels.12/@designmodel/@host.2/@node.0/@port.5" target="//@interimmodels.12/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link15" networkType="INTERNET" source="//@interimmodels.12/@designmodel/@host.0/@node.0/@port.2" target="//@interimmodels.12/@designmodel/@host.2/@node.0/@port.6"/>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb"/>
    </designmodel>
  </interimmodels>
  <interimmodels step="14" description="network route for connector:queuereadwire between: shippingworker queuedb " isStable="true" name="network-route">
    <designmodel name="inter14">
      <component name="ShopFrontend" type="client,broadcaster" deploymentnode="//@interimmodels.13/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface,LeastPriviledge">
        <port name="auth" role="//@interimmodels.13/@designmodel/@connector.0/@role.0" type="request,OutboundPort">
          <events name="checked"/>
        </port>
        <port name="browse" role="//@interimmodels.13/@designmodel/@connector.1/@role.0" type="request,OutboundPort">
          <events name="read"/>
        </port>
        <port name="order" role="//@interimmodels.13/@designmodel/@connector.9/@role.0" type="broadcast,OutboundPort">
          <events name="purchased"/>
        </port>
        <port name="shop" role="//@interimmodels.13/@designmodel/@connector.3/@role.0" type="request,OutboundPort">
          <events name="itemadded"/>
        </port>
      </component>
      <component name="CateloqueService" type="server" deploymentnode="//@interimmodels.13/@designmodel/@host.0/@node.1" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
        <port name="list" role="//@interimmodels.13/@designmodel/@connector.1/@role.1" type="response,InboundPort">
          <events name="query"/>
        </port>
      </component>
      <component name="UserService" type="server" deploymentnode="//@interimmodels.13/@designmodel/@host.1/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DefenseInDepth,DenialOfService">
        <port name="login" role="//@interimmodels.13/@designmodel/@connector.0/@role.1" type="response,InboundPort">
          <events name="signedon"/>
        </port>
      </component>
      <component name="OrdersService" type="client,server,listener,eventconsumer,readendpoint,datawriter,datareader" deploymentnode="//@interimmodels.13/@designmodel/@host.2/@node.0" criticalLevel="Low" securityCharacters="AttackSurface,LeastPriviledge,Compartmentalization,DenialOfService,DataTampering">
        <port name="postorder" role="//@interimmodels.13/@designmodel/@connector.4/@role.0 //@interimmodels.13/@designmodel/@connector.9/@role.1 //@interimmodels.13/@designmodel/@connector.10/@role.0 //@interimmodels.13/@designmodel/@connector.7/@role.0" type="request,listen,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="check" next="//@interimmodels.13/@designmodel/@component.3/@port.0/@events.1"/>
          <events name="save"/>
        </port>
        <port name="get" role="//@interimmodels.13/@designmodel/@connector.2/@role.1 //@interimmodels.13/@designmodel/@connector.8/@role.0" type="response,read,OutboundPort,InboundPort,EventProcessorPort">
          <events name="ack"/>
        </port>
      </component>
      <component name="OrdersDB" type="repository,datastore" deploymentnode="//@interimmodels.13/@designmodel/@host.2/@node.1">
        <port name="writeorder" type="store,InboundPort,EventProcessorPort">
          <events name="orderwritten"/>
        </port>
        <port name="queryorder" role="//@interimmodels.13/@designmodel/@connector.8/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="orderreaded"/>
        </port>
      </component>
      <component name="CartsService" type="server" deploymentnode="//@interimmodels.13/@designmodel/@host.2/@node.0" securityCharacters="AttackSurface,DenialOfService,DataTampering">
        <port name="manage" role="//@interimmodels.13/@designmodel/@connector.3/@role.1" type="response,InboundPort">
          <events name="saveitem"/>
        </port>
      </component>
      <component name="Payment" type="repository,RuleSecureWriting,datastore" deploymentnode="//@interimmodels.13/@designmodel/@host.1/@node.1" criticalLevel="High" securityCharacters="DefenseInDepth,Compartmentalization">
        <port name="pay" role="//@interimmodels.13/@designmodel/@connector.10/@role.1 //@interimmodels.13/@designmodel/@connector.11/@role.1" type="store,InboundPort,TamperingProofPort">
          <events name="paid"/>
        </port>
      </component>
      <component name="ShippingService" type="server,datawriter" deploymentnode="//@interimmodels.13/@designmodel/@host.3/@node.0" securityCharacters="Compartmentalization">
        <port name="postshipping" role="//@interimmodels.13/@designmodel/@connector.4/@role.1 //@interimmodels.13/@designmodel/@connector.6/@role.0" type="response,write,OutboundPort,InboundPort,EventProcessorPort">
          <events name="posted"/>
        </port>
      </component>
      <component name="ShippingWorker" type="readendpoint,datareader" deploymentnode="//@interimmodels.13/@designmodel/@host.3/@node.0">
        <port name="listqueue" role="//@interimmodels.13/@designmodel/@connector.5/@role.0" type="read,OutboundPort,EventProcessorPort">
          <events name="renderqueue"/>
        </port>
      </component>
      <component name="QueueDB" type="repository,datastore" deploymentnode="//@interimmodels.13/@designmodel/@host.3/@node.1">
        <port name="writequeue" role="//@interimmodels.13/@designmodel/@connector.6/@role.1" type="store,InboundPort,EventProcessorPort">
          <events name="queuewritten"/>
        </port>
        <port name="readqueue" role="//@interimmodels.13/@designmodel/@connector.5/@role.1" type="access,InboundPort,EventProcessorPort">
          <events name="queuereaded"/>
        </port>
      </component>
      <component name="ShopBackend" type="client" deploymentnode="//@interimmodels.13/@designmodel/@host.0/@node.0" securityCharacters="AttackSurface">
        <port name="listorder" role="//@interimmodels.13/@designmodel/@connector.2/@role.0" type="request,OutboundPort">
          <events name="renderlist"/>
        </port>
      </component>
      <component name="OrderlogwireCommandLog" type="commanddb,datastore">
        <port name="logorderlogwire" role="//@interimmodels.13/@designmodel/@connector.7/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <component name="ShippinglogwireCommandLog" type="commanddb,datastore">
        <port name="logshippinglogwire" role="//@interimmodels.13/@designmodel/@connector.6/@role.2" type="logcommand,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.3/@node.2"/>
      </component>
      <component name="OrderwireLog" type="eventlogger,datastore">
        <port name="logorderwire" role="//@interimmodels.13/@designmodel/@connector.9/@role.2" type="log,InboundPort">
          <events name="logged"/>
        </port>
        <deploymentnode href="target.arch#//@host.2/@node.2"/>
      </component>
      <component name="PaymentBlockchain" type="blockchain,datastore">
        <port name="append" role="//@interimmodels.13/@designmodel/@connector.11/@role.0" type="bcstore,InboundPort">
          <events name="appended"/>
        </port>
        <deploymentnode href="target.arch#//@host.4/@node.0"/>
      </component>
      <connector name="userwire" type="CSConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.0"/>
        <role name="responder" roletype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.13/@designmodel/@connector.0"/>
      </connector>
      <connector name="cateloquewire" type="CSConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.1"/>
        <role name="responder" roletype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.13/@designmodel/@connector.1"/>
      </connector>
      <connector name="orderquerywire" type="CSConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.2"/>
        <role name="responder" roletype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.13/@designmodel/@connector.8/@role.0" connector="//@interimmodels.13/@designmodel/@connector.2"/>
      </connector>
      <connector name="cartwire" type="CSConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
        <role name="requester" roletype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.3"/>
        <role name="responder" roletype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.13/@designmodel/@connector.3"/>
      </connector>
      <connector name="shippingwire" type="CSConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.4"/>
        <role name="responder" roletype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.13/@designmodel/@connector.6/@role.0" connector="//@interimmodels.13/@designmodel/@connector.4"/>
      </connector>
      <connector name="queuereadwire" type="QRConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0">
        <role name="querier" roletype="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.5"/>
        <role name="readstore" roletype="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.13/@designmodel/@connector.5"/>
      </connector>
      <connector name="shippinglogwire" type="CRConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.6"/>
        <role name="readstore" roletype="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.13/@designmodel/@connector.6"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.4/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.6"/>
        </role>
      </connector>
      <connector name="orderlogwire" type="CRConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0">
        <role name="commander" roletype="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@interimmodels.13/@designmodel/@connector.10/@role.0" connector="//@interimmodels.13/@designmodel/@connector.7"/>
        <role name="readstore" roletype="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.13/@designmodel/@connector.7"/>
        <role name="commandstore" type="in">
          <roletype href="target.arch#//@archstyle.4/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.7"/>
        </role>
      </connector>
      <connector name="orderreadwire" type="QRConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0">
        <role name="querier" roletype="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.8"/>
        <role name="readstore" roletype="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@interimmodels.13/@designmodel/@connector.8"/>
      </connector>
      <connector name="orderwire" type="ESConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0">
        <role name="eventpublisher" roletype="//@interimmodels.13/@designmodel/@archstyle.1/@connectortype.0/@roletype.0" type="out" connector="//@interimmodels.13/@designmodel/@connector.9"/>
        <role name="eventsubscriber" roletype="//@interimmodels.13/@designmodel/@archstyle.1/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@interimmodels.13/@designmodel/@connector.7/@role.0" connector="//@interimmodels.13/@designmodel/@connector.9"/>
        <role name="eventstore" type="in">
          <roletype href="target.arch#//@archstyle.2/@connectortype.0/@roletype.2"/>
          <connector href="target.arch#//@connector.9"/>
        </role>
      </connector>
      <connector name="paywire" type="CSConnector" connectortype="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0">
        <role name="requester" roletype="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0" type="writer" nextRoleExpr="//@interimmodels.13/@designmodel/@connector.4/@role.0" connector="//@interimmodels.13/@designmodel/@connector.10"/>
        <role name="responder" roletype="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.1" type="writestorage" nextRoleExpr="//@interimmodels.13/@designmodel/@connector.11/@role.1" connector="//@interimmodels.13/@designmodel/@connector.10"/>
      </connector>
      <connector name="oraclepaywire" type="IOConnector">
        <role name="blockstorage" type="in" connector="//@interimmodels.13/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.0"/>
        </role>
        <role name="extsupplier" type="out" connector="//@interimmodels.13/@designmodel/@connector.11">
          <roletype href="target.arch#//@archstyle.8/@connectortype.0/@roletype.1"/>
        </role>
        <connectortype href="target.arch#//@archstyle.8/@connectortype.0"/>
      </connector>
      <archstyle name="client-server">
        <connectortype name="CSConnector">
          <roletype name="requester" porttype="//@interimmodels.13/@designmodel/@archstyle.0/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="responder" porttype="//@interimmodels.13/@designmodel/@archstyle.0/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="client">
          <porttype name="request"/>
        </componenttype>
        <componenttype name="server">
          <porttype name="response"/>
        </componenttype>
      </archstyle>
      <archstyle name="publish-subscribe">
        <connectortype name="PSConnector" eaConnector="//@interimmodels.13/@designmodel/@archstyle.0/@connectortype.0">
          <roletype name="publisher" porttype="//@interimmodels.13/@designmodel/@archstyle.1/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.13/@designmodel/@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="subscriber" porttype="//@interimmodels.13/@designmodel/@archstyle.1/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="pub" next="//@interimmodels.13/@designmodel/@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
        </connectortype>
        <componenttype name="broadcaster">
          <porttype name="broadcast"/>
        </componenttype>
        <componenttype name="listener">
          <porttype name="listen"/>
        </componenttype>
      </archstyle>
      <archstyle name="event-sourcing">
        <connectortype name="ESConnector">
          <roletype name="eventpublisher" porttype="//@interimmodels.13/@designmodel/@archstyle.2/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
            <event name="broadcast" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="eventsubscriber" porttype="//@interimmodels.13/@designmodel/@archstyle.2/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="bevt" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process"/>
          </roletype>
          <roletype name="eventstore" porttype="//@interimmodels.13/@designmodel/@archstyle.2/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="pevt" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
            <event xsi:type="arch:Channel" name="sevt" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.4" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist" next="//@interimmodels.13/@designmodel/@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
            <event name="Skip"/>
          </roletype>
        </connectortype>
        <componenttype name="eventsource">
          <porttype name="publish"/>
        </componenttype>
        <componenttype name="eventconsumer">
          <porttype name="listen"/>
        </componenttype>
        <componenttype name="eventlogger">
          <porttype name="log"/>
        </componenttype>
      </archstyle>
      <archstyle name="query-responsibility">
        <connectortype name="QRConnector">
          <roletype name="querier" porttype="//@interimmodels.13/@designmodel/@archstyle.3/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.0" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstore" porttype="//@interimmodels.13/@designmodel/@archstyle.3/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="readendpoint">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="query"/>
        </componenttype>
      </archstyle>
      <archstyle name="command-responsibility">
        <connectortype name="CRConnector">
          <roletype name="readstore" porttype="//@interimmodels.13/@designmodel/@archstyle.4/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
            <event name="persist"/>
          </roletype>
          <roletype name="commander" porttype="//@interimmodels.13/@designmodel/@archstyle.4/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="stmt" next="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.0/@event.0"/>
            <event name="Skip"/>
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.0"/>
          </roletype>
          <roletype name="commandstore" porttype="//@interimmodels.13/@designmodel/@archstyle.4/@componenttype.2/@porttype.0">
            <event xsi:type="arch:Channel" name="cmmd" next="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.4/@connectortype.0/@roletype.2/@event.2"/>
            <event name="persist"/>
          </roletype>
        </connectortype>
        <componenttype name="commandendpoint">
          <porttype name="issue"/>
        </componenttype>
        <componenttype name="viewdb">
          <porttype name="update"/>
        </componenttype>
        <componenttype name="commanddb">
          <porttype name="logcommand"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-write">
        <connectortype name="WRConnector">
          <roletype name="writer" porttype="//@interimmodels.13/@designmodel/@archstyle.5/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="writestorage" porttype="//@interimmodels.13/@designmodel/@archstyle.5/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datawriter">
          <porttype name="write"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="store"/>
        </componenttype>
      </archstyle>
      <archstyle name="repository-read">
        <connectortype name="REConnector">
          <roletype name="reader" porttype="//@interimmodels.13/@designmodel/@archstyle.6/@componenttype.0/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="readstorage" porttype="//@interimmodels.13/@designmodel/@archstyle.6/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="req" next="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="invoke" next="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.1/@event.3"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="datareader">
          <porttype name="read"/>
        </componenttype>
        <componenttype name="repository">
          <porttype name="access"/>
        </componenttype>
      </archstyle>
      <archstyle name="reverse-oracle">
        <connectortype name="ROConnector">
          <roletype name="extquerier" porttype="//@interimmodels.13/@designmodel/@archstyle.7/@componenttype.0/@porttype.0">
            <event name="request" next="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.1"/>
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
            <event xsi:type="arch:Channel" name="res" next="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.3" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.4"/>
            <event name="Skip"/>
          </roletype>
          <roletype name="blocksupplier" porttype="//@interimmodels.13/@designmodel/@archstyle.7/@componenttype.1/@porttype.0">
            <event xsi:type="arch:Channel" name="uid" next="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
            <event xsi:type="arch:Channel" name="res" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
          </roletype>
        </connectortype>
        <componenttype name="reverseoracle">
          <porttype name="blockquery"/>
        </componenttype>
        <componenttype name="blockchain">
          <porttype name="blocksupply"/>
        </componenttype>
      </archstyle>
      <archstyle name="oracle">
        <connectortype name="IOConnector">
          <roletype name="blockstorage" porttype="//@interimmodels.13/@designmodel/@archstyle.8/@componenttype.0/@porttype.0">
            <event xsi:type="arch:Channel" name="token" next="//@interimmodels.13/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
            <event name="stored"/>
          </roletype>
          <roletype name="extsupplier" porttype="//@interimmodels.13/@designmodel/@archstyle.8/@componenttype.1/@porttype.0">
            <event name="process" next="//@interimmodels.13/@designmodel/@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
            <event xsi:type="arch:Channel" name="token" type="output" bind="//@interimmodels.13/@designmodel/@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
          </roletype>
        </connectortype>
        <componenttype name="blockchain">
          <porttype name="bcstore"/>
        </componenttype>
        <componenttype name="oracle">
          <porttype name="orafeed"/>
        </componenttype>
      </archstyle>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="//@interimmodels.13/@designmodel" counterExample="" visitedStates="15" verifyTime="0.024692099999999998" testport="//@interimmodels.13/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!86 -> cartwire_req?86 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!86 -> cartwire_res?86" exprText="[]  (ShopFrontend.shop.itemadded -> &lt;> CartsService.manage.saveitem)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.13/@designmodel/@verifyProperty.0">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.0/@port.3/@events.0" nextExpr="//@interimmodels.13/@designmodel/@verifyProperty.0/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="//@interimmodels.13/@designmodel" counterExample="" visitedStates="98442" verifyTime="3.0802625" testport="//@interimmodels.13/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!79 -> orderwire_pevt?79 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!79 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?79 -> orderwire_bevt!79 -> orderwire_bevt?79 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!79 -> orderlogwire_cmmd!79 -> orderlogwire_cmmd?79 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_requester_process -> paywire_req!79 -> paywire_req?79 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!79 -> oraclepaywire_token?79 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!79 -> paywire_res?79 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!79 -> shippingwire_req?79 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!79 -> shippinglogwire_stmt?79 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!79 -> shippinglogwire_cmmd?79 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!79 -> shippingwire_res?79 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (Payment.pay.paid -> &lt;> ShippingService.postshipping.posted)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.13/@designmodel/@verifyProperty.1">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.6/@port.0/@events.0" nextExpr="//@interimmodels.13/@designmodel/@verifyProperty.1/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="//@interimmodels.13/@designmodel" visitedStates="10" verifyTime="0.025398999999999998" testport="//@interimmodels.13/@designmodel/@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!87 -> cartwire_req?87 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!87 -> cartwire_res?87" exprText="[]  (OrdersService.postorder.save -> &lt;> Payment.pay.paid)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.13/@designmodel/@verifyProperty.2">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.3/@port.0/@events.1" nextExpr="//@interimmodels.13/@designmodel/@verifyProperty.2/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="//@interimmodels.13/@designmodel" counterExample="" visitedStates="15" verifyTime="0.0241861" testport="//@interimmodels.13/@designmodel/@component.0/@port.0" traceExample="init -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!38 -> userwire_req?38 -> UserService_userwire_responder_invoke -> UserService_login_signedon -> UserService_userwire_responder_process -> userwire_res!38 -> userwire_res?38" exprText="[]  (ShopFrontend.auth.checked -> &lt;> UserService.login.signedon)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.13/@designmodel/@verifyProperty.3">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.0/@port.0/@events.0" nextExpr="//@interimmodels.13/@designmodel/@verifyProperty.3/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="//@interimmodels.13/@designmodel" counterExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!62 -> cateloquewire_req?62 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!62 -> cateloquewire_res?62" visitedStates="24" verifyTime="0.026614099999999998" testport="//@interimmodels.13/@designmodel/@component.0/@port.1" traceExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!48 -> cateloquewire_req?48 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!48 -> cateloquewire_res?48" exprText="[]  (&lt;> ShopFrontend.browse.read -> &lt;> CateloqueService.list.query)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.13/@designmodel/@verifyProperty.4">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.1/@port.0/@events.0" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.0/@port.1/@events.0" operator="EVENTUALLY" nextExpr="//@interimmodels.13/@designmodel/@verifyProperty.4/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop6" model="//@interimmodels.13/@designmodel" counterExample="" visitedStates="27" verifyTime="0.0231169" testport="//@interimmodels.13/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!61 -> orderquerywire_req?61 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_querier_process -> orderreadwire_stmt!61 -> orderreadwire_stmt?61 -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstore_process -> orderreadwire_res!61 -> orderreadwire_res?61 -> OrdersService_orderreadwire_querier_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!61 -> orderquerywire_res?61" exprText="[]  (ShopBackend.listorder.renderlist -> &lt;> OrdersDB.queryorder.orderreaded)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.13/@designmodel/@verifyProperty.5">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.10/@port.0/@events.0" nextExpr="//@interimmodels.13/@designmodel/@verifyProperty.5/@ltlexpr.0/@expr.1"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="prop7" model="//@interimmodels.13/@designmodel" counterExample="" visitedStates="95203" verifyTime="2.9708986" testport="//@interimmodels.13/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!46 -> orderwire_pevt?46 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!46 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?46 -> orderwire_bevt!46 -> orderwire_bevt?46 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!46 -> orderlogwire_cmmd!46 -> orderlogwire_cmmd?46 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_requester_process -> paywire_req!46 -> paywire_req?46 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!46 -> oraclepaywire_token?46 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!46 -> paywire_res?46 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!46 -> shippingwire_req?46 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!46 -> shippinglogwire_stmt?46 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!46 -> shippinglogwire_cmmd?46 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!46 -> shippingwire_res?46 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[]  (ShopFrontend.order.purchased -> &lt;> OrdersService.postorder.save)">
        <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@interimmodels.13/@designmodel/@verifyProperty.6">
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.3/@port.0/@events.1" operator="EVENTUALLY"/>
          <expr xsi:type="arch:LTLRegularExpr" event="//@interimmodels.13/@designmodel/@component.0/@port.2/@events.0" nextExpr="//@interimmodels.13/@designmodel/@verifyProperty.6/@ltlexpr.0/@expr.0"/>
        </ltlexpr>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-centre-orderwire" visitedStates="137936" verifyTime="4.5021735" testport="//@interimmodels.13/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!59 -> orderwire_pevt?59 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!59 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?59 -> orderwire_bevt!59 -> orderwire_bevt?59 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!59 -> orderlogwire_cmmd!59 -> orderlogwire_cmmd?59 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_requester_process -> paywire_req!59 -> paywire_req?59 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!59 -> oraclepaywire_token?59 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!59 -> paywire_res?59 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!59 -> shippingwire_req?59 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!59 -> shippinglogwire_stmt?59 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!59 -> shippinglogwire_cmmd?59 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!59 -> shippingwire_res?59 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (ShopFrontend.order.purchased-> &lt;> OrderwireLog.orderwire.eventstore.persist)">
        <connector href="target.arch#//@connector.9"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-shippinglogwire" visitedStates="168290" verifyTime="5.4416134" testport="//@interimmodels.13/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!58 -> orderwire_pevt?58 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!58 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?58 -> orderwire_bevt!58 -> orderwire_bevt?58 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!58 -> orderlogwire_cmmd!58 -> orderlogwire_cmmd?58 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_requester_process -> paywire_req!58 -> paywire_req?58 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!58 -> oraclepaywire_token?58 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!58 -> paywire_res?58 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!58 -> shippingwire_req?58 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!58 -> shippinglogwire_stmt?58 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!58 -> shippinglogwire_cmmd?58 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!58 -> shippingwire_res?58 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (ShippingService.postshipping.posted-> &lt;> ShippinglogwireCommandLog.shippinglogwire.commandstore.persist)">
        <connector href="target.arch#//@connector.6"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-query-orderreadwire" visitedStates="23" verifyTime="0.025452" testport="//@interimmodels.13/@designmodel/@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!86 -> orderquerywire_req?86 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_querier_process -> orderreadwire_stmt!86 -> orderreadwire_stmt?86 -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstore_process -> orderreadwire_res!86 -> orderreadwire_res?86 -> OrdersService_orderreadwire_querier_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!86 -> orderquerywire_res?86" exprText="[] (OrdersService.get.ack-> &lt;> OrdersDB.orderreadwire.readstore.process)">
        <connector href="target.arch#//@connector.8"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="secure-writeoraclepaywire" visitedStates="170266" verifyTime="5.4781504" testport="//@interimmodels.13/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!92 -> orderwire_pevt?92 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!92 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?92 -> orderwire_bevt!92 -> orderwire_bevt?92 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!92 -> orderlogwire_cmmd!92 -> orderlogwire_cmmd?92 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_requester_process -> paywire_req!92 -> paywire_req?92 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!92 -> oraclepaywire_token?92 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!92 -> paywire_res?92 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!92 -> shippingwire_req?92 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!92 -> shippinglogwire_stmt?92 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!92 -> shippinglogwire_cmmd?92 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!92 -> shippingwire_res?92 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (Payment.pay.paid-> &lt;> PaymentBlockchain.oraclepaywire.blockstorage.stored)">
        <connector href="target.arch#//@connector.11"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-command-orderlogwire" visitedStates="170522" verifyTime="5.5065257999999995" testport="//@interimmodels.13/@designmodel/@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_eventpublisher_process -> orderwire_pevt!63 -> orderwire_pevt?63 -> OrderwireLog_logorderwire_logged -> OrderwireLog_orderwire_eventstore_process -> orderwire_sevt!63 -> OrderwireLog_orderwire_eventstore_persist -> orderwire_sevt?63 -> orderwire_bevt!63 -> orderwire_bevt?63 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_commander_process -> orderlogwire_stmt!63 -> orderlogwire_cmmd!63 -> orderlogwire_cmmd?63 -> OrderlogwireCommandLog_logorderlogwire_logged -> OrderlogwireCommandLog_orderlogwire_commandstore_process -> OrderlogwireCommandLog_orderlogwire_commandstore_persist -> OrdersService_orderlogwire_commander_Skip -> OrdersService_paywire_requester_process -> paywire_req!63 -> paywire_req?63 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_oraclepaywire_extsupplier_process -> oraclepaywire_token!63 -> oraclepaywire_token?63 -> PaymentBlockchain_append_appended -> PaymentBlockchain_oraclepaywire_blockstorage_process -> PaymentBlockchain_oraclepaywire_blockstorage_stored -> Payment_paywire_responder_process -> paywire_res!63 -> paywire_res?63 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!63 -> shippingwire_req?63 -> ShippingService_shippingwire_responder_invoke -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_commander_process -> shippinglogwire_stmt!63 -> shippinglogwire_stmt?63 -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_readstore_process -> QueueDB_shippinglogwire_readstore_persist -> shippinglogwire_cmmd!63 -> shippinglogwire_cmmd?63 -> ShippinglogwireCommandLog_logshippinglogwire_logged -> ShippinglogwireCommandLog_shippinglogwire_commandstore_process -> ShippinglogwireCommandLog_shippinglogwire_commandstore_persist -> ShippingService_shippinglogwire_commander_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!63 -> shippingwire_res?63 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_eventsubscriber_process -> ShopFrontend_orderwire_eventpublisher_broadcast" exprText="[] (OrdersService.postorder.check-> &lt;> OrderlogwireCommandLog.orderlogwire.commandstore.persist)">
        <connector href="target.arch#//@connector.7"/>
      </verifyProperty>
      <verifyProperty xsi:type="arch:BehaviourProperty" name="event-query-queuereadwire" visitedStates="14" verifyTime="0.0241865" testport="//@interimmodels.13/@designmodel/@component.8/@port.0" traceExample="init -> ShippingWorker_listqueue_renderqueue -> ShippingWorker_queuereadwire_querier_process -> queuereadwire_stmt!42 -> queuereadwire_stmt?42 -> QueueDB_readqueue_queuereaded -> QueueDB_queuereadwire_readstore_process -> queuereadwire_res!42 -> queuereadwire_res?42" exprText="[] (ShippingWorker.listqueue.renderqueue-> &lt;> QueueDB.queuereadwire.readstore.process)">
        <connector href="target.arch#//@connector.5"/>
      </verifyProperty>
      <host netAccessType="PUBLIC" name="PublicServer" hostType="CLOUD_PLATFORM">
        <node name="NodeJSContainer1" component="//@interimmodels.13/@designmodel/@component.0 //@interimmodels.13/@designmodel/@component.10">
          <port name="port" portNumber="15551" node="//@interimmodels.13/@designmodel/@host.0/@node.0" namedport="//@interimmodels.13/@designmodel/@component.0/@port.0"/>
          <port name="port" portNumber="15552" node="//@interimmodels.13/@designmodel/@host.0/@node.0" namedport="//@interimmodels.13/@designmodel/@component.0/@port.2"/>
          <port name="port" portNumber="15553" node="//@interimmodels.13/@designmodel/@host.0/@node.0" namedport="//@interimmodels.13/@designmodel/@component.10/@port.0"/>
          <port name="port" portNumber="15554" node="//@interimmodels.13/@designmodel/@host.0/@node.0" namedport="//@interimmodels.13/@designmodel/@component.0/@port.3"/>
          <port name="port" portNumber="15555" node="//@interimmodels.13/@designmodel/@host.0/@node.0" namedport="//@interimmodels.13/@designmodel/@component.0/@port.1"/>
        </node>
        <node name="GoContainer3" component="//@interimmodels.13/@designmodel/@component.1">
          <port name="port" portNumber="80" node="//@interimmodels.13/@designmodel/@host.0/@node.1" namedport="//@interimmodels.13/@designmodel/@component.1/@port.0" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="SecureServer">
        <node name="GoContainer1" component="//@interimmodels.13/@designmodel/@component.2">
          <port name="port" portNumber="80" node="//@interimmodels.13/@designmodel/@host.1/@node.0" namedport="//@interimmodels.13/@designmodel/@component.2/@port.0" hasFirewall="true"/>
        </node>
        <node name="GoContainer2" component="//@interimmodels.13/@designmodel/@component.6">
          <port name="port" portNumber="80" node="//@interimmodels.13/@designmodel/@host.1/@node.1" namedport="//@interimmodels.13/@designmodel/@component.6/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
        </node>
      </host>
      <host name="LocalServer">
        <node name="JEEContainer1" component="//@interimmodels.13/@designmodel/@component.3 //@interimmodels.13/@designmodel/@component.5">
          <port name="port" portNumber="80" namedport="//@interimmodels.13/@designmodel/@component.3/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15561" node="//@interimmodels.13/@designmodel/@host.2/@node.0" namedport="//@interimmodels.13/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15562" node="//@interimmodels.13/@designmodel/@host.2/@node.0" namedport="//@interimmodels.13/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15563" node="//@interimmodels.13/@designmodel/@host.2/@node.0" namedport="//@interimmodels.13/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15564" node="//@interimmodels.13/@designmodel/@host.2/@node.0" namedport="//@interimmodels.13/@designmodel/@component.3/@port.0"/>
          <port name="port" portNumber="15566" node="//@interimmodels.13/@designmodel/@host.2/@node.0" namedport="//@interimmodels.13/@designmodel/@component.3/@port.1"/>
          <port name="port" portNumber="81" node="//@interimmodels.13/@designmodel/@host.2/@node.0" namedport="//@interimmodels.13/@designmodel/@component.3/@port.1"/>
        </node>
        <node name="MySQL1" component="//@interimmodels.13/@designmodel/@component.4">
          <port name="port" portNumber="3306" node="//@interimmodels.13/@designmodel/@host.2/@node.1" namedport="//@interimmodels.13/@designmodel/@component.4/@port.0 //@interimmodels.13/@designmodel/@component.4/@port.1"/>
        </node>
      </host>
      <host name="BackOfficeServer">
        <node name="JEEContainer4" component="//@interimmodels.13/@designmodel/@component.7 //@interimmodels.13/@designmodel/@component.8">
          <port name="port" portNumber="80" node="//@interimmodels.13/@designmodel/@host.3/@node.0" namedport="//@interimmodels.13/@designmodel/@component.7/@port.0" hasAuthentication="true" hasAuthorization="true"/>
          <port name="port" portNumber="15571" node="//@interimmodels.13/@designmodel/@host.3/@node.0" namedport="//@interimmodels.13/@designmodel/@component.7/@port.0"/>
          <port name="port" portNumber="15572" node="//@interimmodels.13/@designmodel/@host.3/@node.0" namedport="//@interimmodels.13/@designmodel/@component.7/@port.0"/>
        </node>
        <node name="MySQL2" component="//@interimmodels.13/@designmodel/@component.9">
          <port name="port" portNumber="3306" node="//@interimmodels.13/@designmodel/@host.3/@node.1" namedport="//@interimmodels.13/@designmodel/@component.9/@port.0 //@interimmodels.13/@designmodel/@component.9/@port.1"/>
        </node>
      </host>
      <link name="link2" linkType="HTTPS" networkType="INTERNET" source="//@interimmodels.13/@designmodel/@host.0/@node.0/@port.1" target="//@interimmodels.13/@designmodel/@host.2/@node.0/@port.0"/>
      <link name="link3" source="//@interimmodels.13/@designmodel/@host.2/@node.0/@port.1"/>
      <link name="link4" source="//@interimmodels.13/@designmodel/@host.2/@node.0/@port.2"/>
      <link name="link5" target="//@interimmodels.13/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link7" networkType="INTERNET" source="//@interimmodels.13/@designmodel/@host.0/@node.0/@port.3"/>
      <link name="link9" source="//@interimmodels.13/@designmodel/@host.0/@node.0/@port.4" target="//@interimmodels.13/@designmodel/@host.0/@node.1/@port.0"/>
      <link name="link11" source="//@interimmodels.13/@designmodel/@host.3/@node.0/@port.1"/>
      <link name="link12" source="//@interimmodels.13/@designmodel/@host.3/@node.0/@port.2"/>
      <link name="link13" target="//@interimmodels.13/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link14" target="//@interimmodels.13/@designmodel/@host.3/@node.1/@port.0"/>
      <link name="link16" source="//@interimmodels.13/@designmodel/@host.2/@node.0/@port.5" target="//@interimmodels.13/@designmodel/@host.2/@node.1/@port.0"/>
      <link name="link15" networkType="INTERNET" source="//@interimmodels.13/@designmodel/@host.0/@node.0/@port.2" target="//@interimmodels.13/@designmodel/@host.2/@node.0/@port.6"/>
      <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
      <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
      <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
      <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
      <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb"/>
    </designmodel>
  </interimmodels>
</arch:MigrationModel>
