<?xml version="1.0" encoding="UTF-8"?>
<arch:DesignModel xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arch="http://www.example.org/arch" name="sockshop">
  <component name="ShopFrontend" type="client,broadcaster" deploymentnode="//@host.0/@node.0" securityCharacters="AttackSurface,LeastPriviledge">
    <port name="auth" role="//@connector.0/@role.0" type="request,OutboundPort">
      <events name="checked"/>
    </port>
    <port name="browse" role="//@connector.1/@role.0" type="request,OutboundPort">
      <events name="read"/>
    </port>
    <port name="order" role="//@connector.9/@role.0" type="broadcast,OutboundPort">
      <events name="purchased"/>
    </port>
    <port name="shop" role="//@connector.3/@role.0" type="request,OutboundPort">
      <events name="itemadded"/>
    </port>
  </component>
  <component name="CateloqueService" type="server" deploymentnode="//@host.0/@node.1" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
    <port name="list" role="//@connector.1/@role.1" type="response,InboundPort">
      <events name="query"/>
    </port>
  </component>
  <component name="UserService" type="server" deploymentnode="//@host.1/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DefenseInDepth,DenialOfService">
    <port name="login" role="//@connector.0/@role.1" type="response,InboundPort">
      <events name="signedon"/>
    </port>
  </component>
  <component name="OrdersService" type="client,server,listener,eventconsumer,readendpoint,datawriter,datareader" deploymentnode="//@host.2/@node.0" criticalLevel="Low" securityCharacters="AttackSurface,LeastPriviledge,Compartmentalization,DenialOfService,DataTampering">
    <port name="postorder" role="//@connector.4/@role.0 //@connector.7/@role.0 //@connector.9/@role.1 //@connector.10/@role.0" type="request,listen,write,OutboundPort,InboundPort,EventProcessorPort">
      <events name="check" next="//@component.3/@port.0/@events.1"/>
      <events name="save"/>
    </port>
    <port name="get" role="//@connector.2/@role.1 //@connector.8/@role.0" type="response,read,OutboundPort,InboundPort,EventProcessorPort">
      <events name="ack"/>
    </port>
  </component>
  <component name="OrdersDB" type="repository,datastore" deploymentnode="//@host.2/@node.1">
    <port name="writeorder" role="//@connector.7/@role.1" type="store,InboundPort,EventProcessorPort">
      <events name="orderwritten"/>
    </port>
    <port name="queryorder" role="//@connector.8/@role.1" type="access,InboundPort,EventProcessorPort">
      <events name="orderreaded"/>
    </port>
  </component>
  <component name="CartsService" type="server" deploymentnode="//@host.2/@node.0" securityCharacters="AttackSurface,DenialOfService,DataTampering">
    <port name="manage" role="//@connector.3/@role.1" type="response,InboundPort">
      <events name="saveitem"/>
    </port>
  </component>
  <component name="Payment" type="repository,RuleSecureWriting,datastore" deploymentnode="//@host.1/@node.1" criticalLevel="High" securityCharacters="DefenseInDepth,Compartmentalization">
    <port name="pay" role="//@connector.10/@role.1" type="store,InboundPort,TamperingProofPort">
      <events name="paid"/>
    </port>
  </component>
  <component name="ShippingService" type="server,datawriter" deploymentnode="//@host.3/@node.0" securityCharacters="Compartmentalization">
    <port name="postshipping" role="//@connector.4/@role.1 //@connector.6/@role.0" type="response,write,OutboundPort,InboundPort,EventProcessorPort">
      <events name="posted"/>
    </port>
  </component>
  <component name="ShippingWorker" type="readendpoint,datareader" deploymentnode="//@host.3/@node.0">
    <port name="listqueue" role="//@connector.5/@role.0" type="read,OutboundPort,EventProcessorPort">
      <events name="renderqueue"/>
    </port>
  </component>
  <component name="QueueDB" type="repository,datastore" deploymentnode="//@host.3/@node.1">
    <port name="writequeue" role="//@connector.6/@role.1" type="store,InboundPort,EventProcessorPort">
      <events name="queuewritten"/>
    </port>
    <port name="readqueue" role="//@connector.5/@role.1" type="access,InboundPort,EventProcessorPort">
      <events name="queuereaded"/>
    </port>
  </component>
  <component name="ShopBackend" type="client" deploymentnode="//@host.0/@node.0" securityCharacters="AttackSurface">
    <port name="listorder" role="//@connector.2/@role.0" type="request,OutboundPort">
      <events name="renderlist"/>
    </port>
  </component>
  <connector name="userwire" type="CSConnector" connectortype="//@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
    <role name="requester" roletype="//@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@connector.0"/>
    <role name="responder" roletype="//@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@connector.0"/>
  </connector>
  <connector name="cateloquewire" type="CSConnector" connectortype="//@archstyle.0/@connectortype.0" securityCharacters="DenialOfServiceConnector">
    <role name="requester" roletype="//@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@connector.1"/>
    <role name="responder" roletype="//@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@connector.1"/>
  </connector>
  <connector name="orderquerywire" type="CSConnector" connectortype="//@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
    <role name="requester" roletype="//@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@connector.2"/>
    <role name="responder" roletype="//@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@connector.8/@role.0" connector="//@connector.2"/>
  </connector>
  <connector name="cartwire" type="CSConnector" connectortype="//@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
    <role name="requester" roletype="//@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@connector.3"/>
    <role name="responder" roletype="//@archstyle.0/@connectortype.0/@roletype.1" type="in" connector="//@connector.3"/>
  </connector>
  <connector name="shippingwire" type="CSConnector" connectortype="//@archstyle.0/@connectortype.0">
    <role name="requester" roletype="//@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@connector.4"/>
    <role name="responder" roletype="//@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@connector.6/@role.0" connector="//@connector.4"/>
  </connector>
  <connector name="queuereadwire" type="REConnector,RuleEventQuery" connectortype="//@archstyle.6/@connectortype.0">
    <role name="reader" roletype="//@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@connector.5"/>
    <role name="readstorage" roletype="//@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@connector.5"/>
  </connector>
  <connector name="shippinglogwire" type="WRConnector,RuleEventCommand" connectortype="//@archstyle.5/@connectortype.0">
    <role name="writer" roletype="//@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@connector.6"/>
    <role name="writestorage" roletype="//@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@connector.6"/>
  </connector>
  <connector name="orderlogwire" type="WRConnector,RuleEventCommand" connectortype="//@archstyle.5/@connectortype.0">
    <role name="writer" roletype="//@archstyle.5/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@connector.10/@role.0" connector="//@connector.7"/>
    <role name="writestorage" roletype="//@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@connector.7"/>
  </connector>
  <connector name="orderreadwire" type="REConnector,RuleEventQuery" connectortype="//@archstyle.6/@connectortype.0">
    <role name="reader" roletype="//@archstyle.6/@connectortype.0/@roletype.0" type="out" connector="//@connector.8"/>
    <role name="readstorage" roletype="//@archstyle.6/@connectortype.0/@roletype.1" type="in" connector="//@connector.8"/>
  </connector>
  <connector name="orderwire" type="PSConnector,RuleEventCentre" connectortype="//@archstyle.1/@connectortype.0">
    <role name="publisher" roletype="//@archstyle.1/@connectortype.0/@roletype.0" type="out" connector="//@connector.9"/>
    <role name="subscriber" roletype="//@archstyle.1/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@connector.7/@role.0" connector="//@connector.9"/>
  </connector>
  <connector name="paywire" type="WRConnector" connectortype="//@archstyle.5/@connectortype.0">
    <role name="writer" roletype="//@archstyle.5/@connectortype.0/@roletype.0" type="writer" nextRoleExpr="//@connector.4/@role.0" connector="//@connector.10"/>
    <role name="writestorage" roletype="//@archstyle.5/@connectortype.0/@roletype.1" type="writestorage" connector="//@connector.10"/>
  </connector>
  <archstyle name="client-server">
    <connectortype name="CSConnector">
      <roletype name="requester" porttype="//@archstyle.0/@componenttype.0/@porttype.0">
        <event name="process" next="//@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
        <event xsi:type="arch:Channel" name="req" next="//@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
        <event xsi:type="arch:Channel" name="res" next="//@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
        <event name="Skip"/>
      </roletype>
      <roletype name="responder" porttype="//@archstyle.0/@componenttype.1/@porttype.0">
        <event xsi:type="arch:Channel" name="req" next="//@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
        <event name="invoke" next="//@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
        <event name="process" next="//@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
        <event xsi:type="arch:Channel" name="res" type="output" bind="//@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
      </roletype>
    </connectortype>
    <componenttype name="client">
      <porttype name="request"/>
    </componenttype>
    <componenttype name="server">
      <porttype name="response"/>
    </componenttype>
  </archstyle>
  <archstyle name="publish-subscribe">
    <connectortype name="PSConnector" eaConnector="//@archstyle.0/@connectortype.0">
      <roletype name="publisher" porttype="//@archstyle.1/@componenttype.0/@porttype.0">
        <event name="process" next="//@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
        <event xsi:type="arch:Channel" name="pub" next="//@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
        <event name="Skip"/>
      </roletype>
      <roletype name="subscriber" porttype="//@archstyle.1/@componenttype.1/@porttype.0">
        <event xsi:type="arch:Channel" name="pub" next="//@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
        <event name="process"/>
      </roletype>
    </connectortype>
    <componenttype name="broadcaster">
      <porttype name="broadcast"/>
    </componenttype>
    <componenttype name="listener">
      <porttype name="listen"/>
    </componenttype>
  </archstyle>
  <archstyle name="event-sourcing">
    <connectortype name="ESConnector">
      <roletype name="eventpublisher" porttype="//@archstyle.2/@componenttype.0/@porttype.0">
        <event name="process" next="//@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
        <event xsi:type="arch:Channel" name="pevt" next="//@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
        <event xsi:type="arch:Channel" name="sevt" next="//@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
        <event xsi:type="arch:Channel" name="bevt" next="//@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
        <event name="broadcast" next="//@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
        <event name="Skip"/>
      </roletype>
      <roletype name="eventsubscriber" porttype="//@archstyle.2/@componenttype.1/@porttype.0">
        <event xsi:type="arch:Channel" name="bevt" next="//@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
        <event name="process"/>
      </roletype>
      <roletype name="eventstore" porttype="//@archstyle.2/@componenttype.2/@porttype.0">
        <event xsi:type="arch:Channel" name="pevt" next="//@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
        <event name="process" next="//@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
        <event xsi:type="arch:Channel" name="sevt" next="//@archstyle.2/@connectortype.0/@roletype.2/@event.4" type="output" bind="//@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
        <event name="persist" next="//@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
        <event name="Skip"/>
      </roletype>
    </connectortype>
    <componenttype name="eventsource">
      <porttype name="publish"/>
    </componenttype>
    <componenttype name="eventconsumer">
      <porttype name="listen"/>
    </componenttype>
    <componenttype name="eventlogger">
      <porttype name="log"/>
    </componenttype>
  </archstyle>
  <archstyle name="query-responsibility">
    <connectortype name="QRConnector">
      <roletype name="querier" porttype="//@archstyle.3/@componenttype.0/@porttype.0">
        <event name="process" next="//@archstyle.3/@connectortype.0/@roletype.0/@event.3"/>
        <event xsi:type="arch:Channel" name="stmt" next="//@archstyle.3/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@archstyle.3/@connectortype.0/@roletype.1/@event.0"/>
        <event xsi:type="arch:Channel" name="res" next="//@archstyle.3/@connectortype.0/@roletype.0/@event.0" type="input"/>
        <event name="Skip"/>
      </roletype>
      <roletype name="readstore" porttype="//@archstyle.3/@componenttype.1/@porttype.0">
        <event xsi:type="arch:Channel" name="stmt" next="//@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="input"/>
        <event name="process" next="//@archstyle.3/@connectortype.0/@roletype.1/@event.2"/>
        <event xsi:type="arch:Channel" name="res" type="output" bind="//@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
      </roletype>
    </connectortype>
    <componenttype name="readendpoint">
      <porttype name="read"/>
    </componenttype>
    <componenttype name="viewdb">
      <porttype name="query"/>
    </componenttype>
  </archstyle>
  <archstyle name="command-responsibility">
    <connectortype name="CRConnector">
      <roletype name="readstore" porttype="//@archstyle.4/@componenttype.1/@porttype.0">
        <event xsi:type="arch:Channel" name="stmt" next="//@archstyle.4/@connectortype.0/@roletype.0/@event.1" type="input"/>
        <event name="process" next="//@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
        <event name="persist"/>
      </roletype>
      <roletype name="commander" porttype="//@archstyle.4/@componenttype.0/@porttype.0">
        <event name="process" next="//@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
        <event xsi:type="arch:Channel" name="stmt" next="//@archstyle.4/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@archstyle.4/@connectortype.0/@roletype.0/@event.0"/>
        <event name="Skip"/>
        <event xsi:type="arch:Channel" name="cmmd" next="//@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@archstyle.4/@connectortype.0/@roletype.2/@event.0"/>
      </roletype>
      <roletype name="commandstore" porttype="//@archstyle.4/@componenttype.2/@porttype.0">
        <event xsi:type="arch:Channel" name="cmmd" next="//@archstyle.4/@connectortype.0/@roletype.2/@event.1" type="input"/>
        <event name="process" next="//@archstyle.4/@connectortype.0/@roletype.2/@event.2"/>
        <event name="persist"/>
      </roletype>
    </connectortype>
    <componenttype name="commandendpoint">
      <porttype name="issue"/>
    </componenttype>
    <componenttype name="viewdb">
      <porttype name="update"/>
    </componenttype>
    <componenttype name="commanddb">
      <porttype name="logcommand"/>
    </componenttype>
  </archstyle>
  <archstyle name="repository-write">
    <connectortype name="WRConnector">
      <roletype name="writer" porttype="//@archstyle.5/@componenttype.0/@porttype.0">
        <event name="request" next="//@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
        <event xsi:type="arch:Channel" name="req" next="//@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
        <event xsi:type="arch:Channel" name="res" next="//@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
        <event name="process" next="//@archstyle.5/@connectortype.0/@roletype.0/@event.4"/>
        <event name="Skip"/>
      </roletype>
      <roletype name="writestorage" porttype="//@archstyle.5/@componenttype.1/@porttype.0">
        <event xsi:type="arch:Channel" name="req" next="//@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
        <event name="invoke" next="//@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
        <event name="process" next="//@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
        <event xsi:type="arch:Channel" name="res" type="output" bind="//@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
      </roletype>
    </connectortype>
    <componenttype name="datawriter">
      <porttype name="write"/>
    </componenttype>
    <componenttype name="repository">
      <porttype name="store"/>
    </componenttype>
  </archstyle>
  <archstyle name="repository-read">
    <connectortype name="REConnector">
      <roletype name="reader" porttype="//@archstyle.6/@componenttype.0/@porttype.0">
        <event name="process" next="//@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
        <event xsi:type="arch:Channel" name="req" next="//@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
        <event xsi:type="arch:Channel" name="res" next="//@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
        <event name="Skip"/>
      </roletype>
      <roletype name="readstorage" porttype="//@archstyle.6/@componenttype.1/@porttype.0">
        <event xsi:type="arch:Channel" name="req" next="//@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
        <event name="invoke" next="//@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
        <event name="process" next="//@archstyle.6/@connectortype.0/@roletype.1/@event.3"/>
        <event xsi:type="arch:Channel" name="res" type="output" bind="//@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
      </roletype>
    </connectortype>
    <componenttype name="datareader">
      <porttype name="read"/>
    </componenttype>
    <componenttype name="repository">
      <porttype name="access"/>
    </componenttype>
  </archstyle>
  <archstyle name="reverse-oracle">
    <connectortype name="ROConnector">
      <roletype name="extquerier" porttype="//@archstyle.7/@componenttype.0/@porttype.0">
        <event name="request" next="//@archstyle.7/@connectortype.0/@roletype.0/@event.1"/>
        <event xsi:type="arch:Channel" name="uid" next="//@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
        <event xsi:type="arch:Channel" name="res" next="//@archstyle.7/@connectortype.0/@roletype.0/@event.3" type="input"/>
        <event name="process" next="//@archstyle.7/@connectortype.0/@roletype.0/@event.4"/>
        <event name="Skip"/>
      </roletype>
      <roletype name="blocksupplier" porttype="//@archstyle.7/@componenttype.1/@porttype.0">
        <event xsi:type="arch:Channel" name="uid" next="//@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
        <event name="process" next="//@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
        <event xsi:type="arch:Channel" name="res" type="output" bind="//@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
      </roletype>
    </connectortype>
    <componenttype name="reverseoracle">
      <porttype name="blockquery"/>
    </componenttype>
    <componenttype name="blockchain">
      <porttype name="blocksupply"/>
    </componenttype>
  </archstyle>
  <archstyle name="oracle">
    <connectortype name="IOConnector">
      <roletype name="blockstorage" porttype="//@archstyle.8/@componenttype.0/@porttype.0">
        <event xsi:type="arch:Channel" name="token" next="//@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
        <event name="process" next="//@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
        <event name="stored"/>
      </roletype>
      <roletype name="extsupplier" porttype="//@archstyle.8/@componenttype.1/@porttype.0">
        <event name="process" next="//@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
        <event xsi:type="arch:Channel" name="token" type="output" bind="//@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
      </roletype>
    </connectortype>
    <componenttype name="blockchain">
      <porttype name="bcstore"/>
    </componenttype>
    <componenttype name="oracle">
      <porttype name="orafeed"/>
    </componenttype>
  </archstyle>
  <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="/" counterExample="" visitedStates="15" verifyTime="0.0056955" testport="//@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!48 -> cartwire_req?48 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!48 -> cartwire_res?48" exprText="[]  (ShopFrontend.shop.itemadded -> &lt;> CartsService.manage.saveitem)">
    <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@verifyProperty.0">
      <expr xsi:type="arch:LTLRegularExpr" event="//@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
      <expr xsi:type="arch:LTLRegularExpr" event="//@component.0/@port.3/@events.0" nextExpr="//@verifyProperty.0/@ltlexpr.0/@expr.0"/>
    </ltlexpr>
  </verifyProperty>
  <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="/" counterExample="" visitedStates="63" verifyTime="0.0112015" testport="//@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_publisher_process -> orderwire_pub!79 -> orderwire_pub?79 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!79 -> orderlogwire_req?79 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!79 -> orderlogwire_res?79 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_requester_process -> paywire_req!79 -> paywire_req?79 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_paywire_responder_process -> paywire_res!79 -> paywire_res?79 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!79 -> shippingwire_req?79 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!79 -> shippinglogwire_req?79 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!79 -> shippinglogwire_res?79 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!79 -> shippingwire_res?79 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_subscriber_process" exprText="[]  (Payment.pay.paid -> &lt;> ShippingService.postshipping.posted)">
    <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@verifyProperty.1">
      <expr xsi:type="arch:LTLRegularExpr" event="//@component.6/@port.0/@events.0" nextExpr="//@verifyProperty.1/@ltlexpr.0/@expr.1"/>
      <expr xsi:type="arch:LTLRegularExpr" event="//@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
    </ltlexpr>
  </verifyProperty>
  <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="/" visitedStates="10" verifyTime="0.005912" testport="//@component.0/@port.3" traceExample="init -> ShopFrontend_shop_itemadded -> ShopFrontend_cartwire_requester_process -> cartwire_req!51 -> cartwire_req?51 -> CartsService_cartwire_responder_invoke -> CartsService_manage_saveitem -> CartsService_cartwire_responder_process -> cartwire_res!51 -> cartwire_res?51" exprText="[]  (OrdersService.postorder.save -> &lt;> Payment.pay.paid)">
    <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@verifyProperty.2">
      <expr xsi:type="arch:LTLRegularExpr" event="//@component.3/@port.0/@events.1" nextExpr="//@verifyProperty.2/@ltlexpr.0/@expr.1"/>
      <expr xsi:type="arch:LTLRegularExpr" event="//@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
    </ltlexpr>
  </verifyProperty>
  <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="/" counterExample="" visitedStates="15" verifyTime="0.005777099999999999" testport="//@component.0/@port.0" traceExample="init -> ShopFrontend_auth_checked -> ShopFrontend_userwire_requester_process -> userwire_req!78 -> userwire_req?78 -> UserService_userwire_responder_invoke -> UserService_login_signedon -> UserService_userwire_responder_process -> userwire_res!78 -> userwire_res?78" exprText="[]  (ShopFrontend.auth.checked -> &lt;> UserService.login.signedon)">
    <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@verifyProperty.3">
      <expr xsi:type="arch:LTLRegularExpr" event="//@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
      <expr xsi:type="arch:LTLRegularExpr" event="//@component.0/@port.0/@events.0" nextExpr="//@verifyProperty.3/@ltlexpr.0/@expr.0"/>
    </ltlexpr>
  </verifyProperty>
  <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="/" counterExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!62 -> cateloquewire_req?62 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!62 -> cateloquewire_res?62" visitedStates="24" verifyTime="0.005226199999999999" testport="//@component.0/@port.1" traceExample="init -> ShopFrontend_browse_read -> ShopFrontend_cateloquewire_requester_process -> cateloquewire_req!91 -> cateloquewire_req?91 -> CateloqueService_cateloquewire_responder_invoke -> CateloqueService_list_query -> CateloqueService_cateloquewire_responder_process -> cateloquewire_res!91 -> cateloquewire_res?91" exprText="[]  (&lt;> ShopFrontend.browse.read -> &lt;> CateloqueService.list.query)">
    <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@verifyProperty.4">
      <expr xsi:type="arch:LTLRegularExpr" event="//@component.1/@port.0/@events.0" operator="EVENTUALLY"/>
      <expr xsi:type="arch:LTLRegularExpr" event="//@component.0/@port.1/@events.0" operator="EVENTUALLY" nextExpr="//@verifyProperty.4/@ltlexpr.0/@expr.0"/>
    </ltlexpr>
  </verifyProperty>
  <verifyProperty xsi:type="arch:BehaviourProperty" name="prop6" model="/" counterExample="" visitedStates="29" verifyTime="0.0057502" testport="//@component.10/@port.0" traceExample="init -> ShopBackend_listorder_renderlist -> ShopBackend_orderquerywire_requester_process -> orderquerywire_req!62 -> orderquerywire_req?62 -> OrdersService_orderquerywire_responder_invoke -> OrdersService_get_ack -> OrdersService_orderreadwire_reader_process -> orderreadwire_req!62 -> orderreadwire_req?62 -> OrdersDB_orderreadwire_readstorage_invoke -> OrdersDB_queryorder_orderreaded -> OrdersDB_orderreadwire_readstorage_process -> orderreadwire_res!62 -> orderreadwire_res?62 -> OrdersService_orderreadwire_reader_Skip -> OrdersService_orderquerywire_responder_process -> orderquerywire_res!62 -> orderquerywire_res?62" exprText="[]  (ShopBackend.listorder.renderlist -> &lt;> OrdersDB.queryorder.orderreaded)">
    <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@verifyProperty.5">
      <expr xsi:type="arch:LTLRegularExpr" event="//@component.10/@port.0/@events.0" nextExpr="//@verifyProperty.5/@ltlexpr.0/@expr.1"/>
      <expr xsi:type="arch:LTLRegularExpr" event="//@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
    </ltlexpr>
  </verifyProperty>
  <verifyProperty xsi:type="arch:BehaviourProperty" name="prop7" model="/" counterExample="" visitedStates="59" verifyTime="0.0096414" testport="//@component.0/@port.2" traceExample="init -> ShopFrontend_order_purchased -> ShopFrontend_orderwire_publisher_process -> orderwire_pub!93 -> orderwire_pub?93 -> OrdersService_orderlogwire_writer_request -> orderlogwire_req!93 -> orderlogwire_req?93 -> OrdersDB_orderlogwire_writestorage_invoke -> OrdersDB_writeorder_orderwritten -> OrdersDB_orderlogwire_writestorage_process -> orderlogwire_res!93 -> orderlogwire_res?93 -> OrdersService_postorder_check -> OrdersService_postorder_save -> OrdersService_orderlogwire_writer_process -> OrdersService_orderlogwire_writer_Skip -> OrdersService_paywire_requester_process -> paywire_req!93 -> paywire_req?93 -> Payment_paywire_responder_invoke -> Payment_pay_paid -> Payment_paywire_responder_process -> paywire_res!93 -> paywire_res?93 -> OrdersService_paywire_requester_Skip -> OrdersService_shippingwire_requester_process -> shippingwire_req!93 -> shippingwire_req?93 -> ShippingService_shippingwire_responder_invoke -> ShippingService_shippinglogwire_writer_request -> shippinglogwire_req!93 -> shippinglogwire_req?93 -> QueueDB_shippinglogwire_writestorage_invoke -> QueueDB_writequeue_queuewritten -> QueueDB_shippinglogwire_writestorage_process -> shippinglogwire_res!93 -> shippinglogwire_res?93 -> ShippingService_postshipping_posted -> ShippingService_shippinglogwire_writer_process -> ShippingService_shippinglogwire_writer_Skip -> ShippingService_shippingwire_responder_process -> shippingwire_res!93 -> shippingwire_res?93 -> OrdersService_shippingwire_requester_Skip -> OrdersService_orderwire_subscriber_process" exprText="[]  (ShopFrontend.order.purchased -> &lt;> OrdersService.postorder.save)">
    <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@verifyProperty.6">
      <expr xsi:type="arch:LTLRegularExpr" event="//@component.3/@port.0/@events.1" operator="EVENTUALLY"/>
      <expr xsi:type="arch:LTLRegularExpr" event="//@component.0/@port.2/@events.0" nextExpr="//@verifyProperty.6/@ltlexpr.0/@expr.0"/>
    </ltlexpr>
  </verifyProperty>
  <host netAccessType="PUBLIC" name="PublicServer" hostType="CLOUD_PLATFORM">
    <node name="NodeJSContainer1" component="//@component.0 //@component.10">
      <port name="port" portNumber="15551" node="//@host.0/@node.0" namedport="//@component.0/@port.0"/>
      <port name="port" portNumber="15552" node="//@host.0/@node.0" namedport="//@component.0/@port.2"/>
      <port name="port" portNumber="15553" node="//@host.0/@node.0" namedport="//@component.10/@port.0"/>
      <port name="port" portNumber="15554" node="//@host.0/@node.0" namedport="//@component.0/@port.3"/>
      <port name="port" portNumber="15555" node="//@host.0/@node.0" namedport="//@component.0/@port.1"/>
    </node>
    <node name="GoContainer3" component="//@component.1">
      <port name="port" portNumber="80" node="//@host.0/@node.1" namedport="//@component.1/@port.0" hasAuthentication="true" hasAuthorization="true"/>
    </node>
  </host>
  <host name="SecureServer">
    <node name="GoContainer1" component="//@component.2">
      <port name="port" portNumber="80" node="//@host.1/@node.0" namedport="//@component.2/@port.0" hasFirewall="true"/>
    </node>
    <node name="GoContainer2" component="//@component.6">
      <port name="port" portNumber="80" node="//@host.1/@node.1" namedport="//@component.6/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
    </node>
  </host>
  <host name="LocalServer">
    <node name="JEEContainer1" component="//@component.3 //@component.5">
      <port name="port" portNumber="80" namedport="//@component.3/@port.0" hasFirewall="true" hasAuthentication="true" hasAuthorization="true"/>
      <port name="port" portNumber="15561" node="//@host.2/@node.0" namedport="//@component.3/@port.0"/>
      <port name="port" portNumber="15562" node="//@host.2/@node.0" namedport="//@component.3/@port.0"/>
      <port name="port" portNumber="15563" node="//@host.2/@node.0" namedport="//@component.3/@port.0"/>
      <port name="port" portNumber="15564" node="//@host.2/@node.0" namedport="//@component.3/@port.0"/>
      <port name="port" portNumber="15566" node="//@host.2/@node.0" namedport="//@component.3/@port.1"/>
      <port name="port" portNumber="81" node="//@host.2/@node.0" namedport="//@component.3/@port.1"/>
    </node>
    <node name="MySQL1" component="//@component.4">
      <port name="port" portNumber="3306" node="//@host.2/@node.1" namedport="//@component.4/@port.0 //@component.4/@port.1"/>
    </node>
  </host>
  <host name="BackOfficeServer">
    <node name="JEEContainer4" component="//@component.7 //@component.8">
      <port name="port" portNumber="80" node="//@host.3/@node.0" namedport="//@component.7/@port.0" hasAuthentication="true" hasAuthorization="true"/>
      <port name="port" portNumber="15571" node="//@host.3/@node.0" namedport="//@component.7/@port.0"/>
      <port name="port" portNumber="15572" node="//@host.3/@node.0" namedport="//@component.7/@port.0"/>
    </node>
    <node name="MySQL2" component="//@component.9">
      <port name="port" portNumber="3306" node="//@host.3/@node.1" namedport="//@component.9/@port.0 //@component.9/@port.1"/>
    </node>
  </host>
  <link name="link2" linkType="HTTPS" networkType="INTERNET" source="//@host.0/@node.0/@port.1" target="//@host.2/@node.0/@port.0"/>
  <link name="link3" source="//@host.2/@node.0/@port.1"/>
  <link name="link4" source="//@host.2/@node.0/@port.2"/>
  <link name="link5" target="//@host.2/@node.1/@port.0"/>
  <link name="link7" networkType="INTERNET" source="//@host.0/@node.0/@port.3"/>
  <link name="link9" source="//@host.0/@node.0/@port.4" target="//@host.0/@node.1/@port.0"/>
  <link name="link11" source="//@host.3/@node.0/@port.1"/>
  <link name="link12" source="//@host.3/@node.0/@port.2"/>
  <link name="link13" target="//@host.3/@node.1/@port.0"/>
  <link name="link14" target="//@host.3/@node.1/@port.0"/>
  <link name="link16" source="//@host.2/@node.0/@port.5" target="//@host.2/@node.1/@port.0"/>
  <link name="link15" networkType="INTERNET" source="//@host.0/@node.0/@port.2" target="//@host.2/@node.0/@port.6"/>
  <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
  <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
  <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
  <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
  <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
  <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
  <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
  <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb"/>
</arch:DesignModel>
