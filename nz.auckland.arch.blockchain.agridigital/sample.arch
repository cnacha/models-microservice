<?xml version="1.0" encoding="UTF-8"?>
<arch:DesignModel xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arch="http://www.example.org/arch" name="agridigital">
  <component name="ADWebApp" type="client,listener,eventconsumer" deploymentnode="//@host.0/@node.0">
    <port name="adconsume" role="//@connector.0/@role.0" type="request,OutboundPort">
      <events name="adapirequest"/>
    </port>
    <port name="adnotify" role="//@connector.1/@role.1" type="listen,listen,InboundPort">
      <events name="notified"/>
    </port>
  </component>
  <component name="ADWebAPI" type="server" deploymentnode="//@host.1/@node.0">
    <port name="adprovide" role="//@connector.0/@role.1" type="response,InboundPort">
      <events name="invoke"/>
    </port>
  </component>
  <component name="ADMessageBus" type="eventlogger" deploymentnode="//@host.1/@node.1" securityCharacters="AttackSurface,DataTampering">
    <port name="adlog" role="//@connector.1/@role.2" type="log,InboundPort">
      <events name="logged"/>
    </port>
  </component>
  <component name="ProvenanceInt" type="server,eventsource,LinkOverload" valid="false" deploymentnode="//@host.2/@node.1" securityCharacters="AttackSurface,DataTampering">
    <port name="prvpub" role="//@connector.1/@role.0 //@connector.2/@role.1 //@connector.3/@role.0" type="response,publish,OutboundPort,InboundPort">
      <events name="prvevntpublish"/>
    </port>
  </component>
  <component name="ProvenanceWebApp" type="client" deploymentnode="//@host.2/@node.0" securityCharacters="AttackSurface">
    <port name="prvconsume" role="//@connector.2/@role.0" type="request,OutboundPort">
      <events name="provenancerequest"/>
    </port>
  </component>
  <component name="IOTWebAPI" type="server,eventsource" deploymentnode="//@host.3/@node.0" securityCharacters="AttackSurface,Compartmentalization,DenialOfService">
    <port name="iotpub" role="//@connector.3/@role.0 //@connector.7/@role.1" type="response,publish,OutboundPort,InboundPort">
      <events name="published"/>
    </port>
  </component>
  <component name="BCMessageBus" type="eventlogger" deploymentnode="//@host.2/@node.2" securityCharacters="AttackSurface,DenialOfService,DataTampering">
    <port name="bclog" role="//@connector.3/@role.2" type="log,InboundPort">
      <events name="evntlogged"/>
    </port>
  </component>
  <component name="BCIntegrator" type="listener,eventconsumer,oracle,LinkOverload" valid="false" deploymentnode="//@host.2/@node.3" securityCharacters="AttackSurface,LeastPriviledge,DenialOfService">
    <port name="bcint" role="//@connector.3/@role.1 //@connector.4/@role.1 //@connector.6/@role.1" type="listen,listen,orafeed,OutboundPort,InboundPort">
      <events name="sendtobc"/>
    </port>
  </component>
  <component name="PublicBlockChain" type="blockchain,blockchain,blockchain,blockchain,blockchain" deploymentnode="//@host.4/@node.0" criticalLevel="High" securityCharacters="AttackSurface,DenialOfService,DataTampering">
    <port name="logfinance" role="//@connector.4/@role.0" type="bcstore,InboundPort">
      <events name="finlogged"/>
    </port>
    <port name="checkfinance" role="//@connector.5/@role.1" type="blocksupply,InboundPort">
      <events name="check"/>
    </port>
  </component>
  <component name="PrivateBlockChain" type="blockchain,blockchain,blockchain,blockchain,blockchain" deploymentnode="//@host.6/@node.0" criticalLevel="High">
    <port name="logstate" role="//@connector.6/@role.0" type="bcstore,InboundPort">
      <events name="statelogged"/>
    </port>
  </component>
  <component name="DigitalWallet" type="server,reverseoracle" deploymentnode="//@host.5/@node.0" securityCharacters="LeastPriviledge,Compartmentalization">
    <port name="pay" role="//@connector.5/@role.0" type="blockquery,OutboundPort">
      <events name="commit"/>
    </port>
    <port name="access" role="//@connector.8/@role.1" type="response,InboundPort">
      <events name="accessed"/>
    </port>
  </component>
  <component name="IOTSensor" type="client" deploymentnode="//@host.7/@node.0">
    <port name="sense" role="//@connector.7/@role.0" type="request,OutboundPort">
      <events name="send"/>
    </port>
  </component>
  <component name="InternetBanking" type="client" deploymentnode="//@host.5/@node.1">
    <port name="listaccount" role="//@connector.8/@role.0" type="request,OutboundPort">
      <events name="list"/>
    </port>
  </component>
  <component name="AdversaryDTP1" type="adversary">
    <port name="attack1" role="//@connector.1/@role.0" type="OutboundPort">
      <events name="attacked"/>
    </port>
  </component>
  <component name="AdversaryDTP2" type="adversary">
    <port name="attack2" role="//@connector.2/@role.0" type="OutboundPort">
      <events name="attacked"/>
    </port>
  </component>
  <component name="AdversaryDTP3" type="adversary">
    <port name="attack3" role="//@connector.3/@role.0" type="OutboundPort">
      <events name="attacked"/>
    </port>
  </component>
  <component name="AdversaryDTP4" type="adversary">
    <port name="attack4" role="//@connector.5/@role.0" type="OutboundPort">
      <events name="attacked"/>
    </port>
  </component>
  <component name="AdversaryMIM1" type="adversary">
    <port name="attack1" role="//@connector.1/@role.0" type="OutboundPort">
      <events name="attacked"/>
    </port>
  </component>
  <component name="AdversaryMIM2" type="adversary">
    <port name="attack2" role="//@connector.2/@role.0" type="OutboundPort">
      <events name="attacked"/>
    </port>
  </component>
  <component name="AdversaryMIM3" type="adversary">
    <port name="attack3" role="//@connector.3/@role.0" type="OutboundPort">
      <events name="attacked"/>
    </port>
  </component>
  <component name="AdversaryMIM4" type="adversary">
    <port name="attack4" role="//@connector.5/@role.0" type="OutboundPort">
      <events name="attacked"/>
    </port>
  </component>
  <component name="AdversaryMIM5" type="adversary">
    <port name="attack5" role="//@connector.7/@role.0" type="OutboundPort">
      <events name="attacked"/>
    </port>
  </component>
  <connector name="adapiwire" type="CSConnector" connectortype="//@archstyle.0/@connectortype.0">
    <role name="requester" roletype="//@archstyle.0/@connectortype.0/@roletype.0" type="requester,out" connector="//@connector.0"/>
    <role name="responder" roletype="//@archstyle.0/@connectortype.0/@roletype.1" type="responder,in" connector="//@connector.0"/>
    <communicationlink href="data.json#//@link.0"/>
  </connector>
  <connector name="admsgwire" type="ESConnector" connectortype="//@archstyle.2/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector">
    <role name="eventpublisher" roletype="//@archstyle.2/@connectortype.0/@roletype.0" type="eventpublisher,out" nextRoleExpr="//@connector.3/@role.0" connector="//@connector.1"/>
    <role name="eventsubscriber" roletype="//@archstyle.2/@connectortype.0/@roletype.1" type="eventsubscriber,in" connector="//@connector.1"/>
    <role name="eventstore" roletype="//@archstyle.2/@connectortype.0/@roletype.2" type="eventstore,in" connector="//@connector.1"/>
    <communicationlink href="data.json#//@link.2"/>
  </connector>
  <connector name="prvapiwire" type="CSConnector" connectortype="//@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector">
    <role name="requester" roletype="//@archstyle.0/@connectortype.0/@roletype.0" type="requester,out" connector="//@connector.2"/>
    <role name="responder" roletype="//@archstyle.0/@connectortype.0/@roletype.1" type="responder,in" nextRoleExpr="//@connector.1/@role.0" connector="//@connector.2"/>
    <communicationlink href="data.json#//@link.1"/>
  </connector>
  <connector name="prvmsgwire" type="ESConnector" connectortype="//@archstyle.2/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
    <role name="eventpublisher" roletype="//@archstyle.2/@connectortype.0/@roletype.0" type="eventpublisher,out" connector="//@connector.3"/>
    <role name="eventsubscriber" roletype="//@archstyle.2/@connectortype.0/@roletype.1" type="eventsubscriber,in" nextRoleExpr="//@connector.4/@role.1" connector="//@connector.3"/>
    <role name="eventstore" roletype="//@archstyle.2/@connectortype.0/@roletype.2" type="eventstore,in" connector="//@connector.3"/>
    <communicationlink href="data.json#//@link.3"/>
    <communicationlink href="data.json#//@link.4"/>
    <communicationlink href="data.json#//@link.9"/>
  </connector>
  <connector name="pubwire" type="IOConnector" connectortype="//@archstyle.5/@connectortype.0" securityCharacters="DenialOfServiceConnector">
    <role name="blockstorage" roletype="//@archstyle.5/@connectortype.0/@roletype.0" type="blockstorage,in" connector="//@connector.4"/>
    <role name="extsupplier" roletype="//@archstyle.5/@connectortype.0/@roletype.1" type="extsupplier,out" nextRoleExpr="//@connector.6/@role.1" connector="//@connector.4"/>
    <communicationlink href="data.json#//@link.5"/>
  </connector>
  <connector name="walletwire" type="ROConnector" connectortype="//@archstyle.6/@connectortype.0" securityCharacters="ManInMiddleConnector,DataTamperingConnector,DenialOfServiceConnector">
    <role name="extquerier" roletype="//@archstyle.6/@connectortype.0/@roletype.0" type="extquerier,out" connector="//@connector.5"/>
    <role name="blocksupplier" roletype="//@archstyle.6/@connectortype.0/@roletype.1" type="blocksupplier,in" connector="//@connector.5"/>
    <communicationlink href="data.json#//@link.6"/>
  </connector>
  <connector name="prvwire" type="IOConnector" connectortype="//@archstyle.5/@connectortype.0">
    <role name="blockstorage" roletype="//@archstyle.5/@connectortype.0/@roletype.0" type="blockstorage,in" connector="//@connector.6"/>
    <role name="extsupplier" roletype="//@archstyle.5/@connectortype.0/@roletype.1" type="extsupplier,out" connector="//@connector.6"/>
    <communicationlink href="data.json#//@link.7"/>
  </connector>
  <connector name="iotreqwire" type="CSConnector" connectortype="//@archstyle.0/@connectortype.0" securityCharacters="ManInMiddleConnector,DenialOfServiceConnector">
    <role name="requester" roletype="//@archstyle.0/@connectortype.0/@roletype.0" type="requester,out" connector="//@connector.7"/>
    <role name="responder" roletype="//@archstyle.0/@connectortype.0/@roletype.1" type="responder,in" nextRoleExpr="//@connector.3/@role.0" connector="//@connector.7"/>
    <communicationlink href="data.json#//@link.8"/>
  </connector>
  <connector name="ibankwire" type="CSConnector" connectortype="//@archstyle.0/@connectortype.0">
    <role name="requester" roletype="//@archstyle.0/@connectortype.0/@roletype.0" type="requester,out" connector="//@connector.8"/>
    <role name="responder" roletype="//@archstyle.0/@connectortype.0/@roletype.1" type="responder,in" connector="//@connector.8"/>
    <communicationlink href="data.json#//@link.10"/>
  </connector>
  <archstyle name="client-server">
    <connectortype name="CSConnector">
      <roletype name="requester" porttype="//@archstyle.0/@componenttype.0/@porttype.0">
        <event name="request" next="//@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
        <event xsi:type="arch:Channel" name="req" next="//@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
        <event xsi:type="arch:Channel" name="res" next="//@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
        <event name="process" next="//@archstyle.0/@connectortype.0/@roletype.0/@event.4"/>
        <event name="Skip"/>
      </roletype>
      <roletype name="responder" porttype="//@archstyle.0/@componenttype.1/@porttype.0">
        <event xsi:type="arch:Channel" name="req" next="//@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
        <event name="invoke" next="//@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
        <event name="process" next="//@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
        <event xsi:type="arch:Channel" name="res" type="output" bind="//@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
      </roletype>
    </connectortype>
    <componenttype name="client">
      <porttype name="request"/>
    </componenttype>
    <componenttype name="server">
      <porttype name="response"/>
    </componenttype>
  </archstyle>
  <archstyle name="publish-subscribe">
    <connectortype name="PSConnector" eaConnector="//@archstyle.0/@connectortype.0">
      <roletype name="publisher" porttype="//@archstyle.1/@componenttype.0/@porttype.0">
        <event name="process" next="//@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
        <event xsi:type="arch:Channel" name="pub" next="//@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
        <event name="Skip"/>
      </roletype>
      <roletype name="subscriber" porttype="//@archstyle.1/@componenttype.1/@porttype.0">
        <event xsi:type="arch:Channel" name="pub" next="//@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
        <event name="process"/>
      </roletype>
    </connectortype>
    <componenttype name="broadcaster">
      <porttype name="broadcast"/>
    </componenttype>
    <componenttype name="listener">
      <porttype name="listen"/>
    </componenttype>
  </archstyle>
  <archstyle name="event-sourcing">
    <connectortype name="ESConnector">
      <roletype name="eventpublisher" porttype="//@archstyle.2/@componenttype.0/@porttype.0">
        <event name="process" next="//@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
        <event xsi:type="arch:Channel" name="pevt" next="//@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
        <event xsi:type="arch:Channel" name="sevt" next="//@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
        <event xsi:type="arch:Channel" name="bevt" next="//@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
        <event name="broadcast" next="//@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
        <event name="Skip"/>
      </roletype>
      <roletype name="eventsubscriber" porttype="//@archstyle.2/@componenttype.1/@porttype.0">
        <event xsi:type="arch:Channel" name="bevt" next="//@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
        <event name="process" next="//@archstyle.2/@connectortype.0/@roletype.1/@event.2"/>
        <event name="Skip"/>
      </roletype>
      <roletype name="eventstore" porttype="//@archstyle.2/@componenttype.2/@porttype.0">
        <event xsi:type="arch:Channel" name="pevt" next="//@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
        <event name="process" next="//@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
        <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
        <event name="persist" next="//@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
      </roletype>
    </connectortype>
    <componenttype name="eventsource">
      <porttype name="publish"/>
    </componenttype>
    <componenttype name="eventconsumer">
      <porttype name="listen"/>
    </componenttype>
    <componenttype name="eventlogger">
      <porttype name="log"/>
    </componenttype>
  </archstyle>
  <archstyle name="command-responsibility">
    <connectortype name="CRConnector">
      <roletype name="readstore" porttype="//@archstyle.3/@componenttype.1/@porttype.0">
        <event xsi:type="arch:Channel" name="stmt" next="//@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
        <event name="process" next="//@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
        <event name="persist"/>
      </roletype>
      <roletype name="commander" porttype="//@archstyle.3/@componenttype.0/@porttype.0">
        <event name="process" next="//@archstyle.3/@connectortype.0/@roletype.1/@event.1"/>
        <event xsi:type="arch:Channel" name="stmt" next="//@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
        <event name="Skip"/>
      </roletype>
    </connectortype>
    <componenttype name="commandendpoint">
      <porttype name="issue"/>
    </componenttype>
    <componenttype name="viewdb">
      <porttype name="update"/>
    </componenttype>
  </archstyle>
  <archstyle name="query-responsibility">
    <connectortype name="QRConnector">
      <roletype name="reader" porttype="//@archstyle.4/@componenttype.0/@porttype.0">
        <event name="process" next="//@archstyle.4/@connectortype.0/@roletype.0/@event.3"/>
        <event xsi:type="arch:Channel" name="stmt" next="//@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
        <event xsi:type="arch:Channel" name="res" next="//@archstyle.4/@connectortype.0/@roletype.0/@event.0" type="input"/>
        <event name="Skip"/>
      </roletype>
      <roletype name="readstore" porttype="//@archstyle.4/@componenttype.1/@porttype.0">
        <event xsi:type="arch:Channel" name="stmt" next="//@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
        <event name="process" next="//@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
        <event xsi:type="arch:Channel" name="res" type="output" bind="//@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
      </roletype>
    </connectortype>
    <componenttype name="readendpoint">
      <porttype name="read"/>
    </componenttype>
    <componenttype name="viewdb">
      <porttype name="query"/>
    </componenttype>
  </archstyle>
  <archstyle name="oracle">
    <connectortype name="IOConnector">
      <roletype name="blockstorage" porttype="//@archstyle.5/@componenttype.0/@porttype.0">
        <event xsi:type="arch:Channel" name="token" next="//@archstyle.5/@connectortype.0/@roletype.0/@event.1" type="input"/>
        <event name="process" next="//@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
        <event name="stored"/>
      </roletype>
      <roletype name="extsupplier" porttype="//@archstyle.5/@componenttype.1/@porttype.0">
        <event name="process" next="//@archstyle.5/@connectortype.0/@roletype.1/@event.1"/>
        <event xsi:type="arch:Channel" name="token" type="output" bind="//@archstyle.5/@connectortype.0/@roletype.0/@event.0"/>
      </roletype>
    </connectortype>
    <componenttype name="blockchain">
      <porttype name="bcstore"/>
    </componenttype>
    <componenttype name="oracle">
      <porttype name="orafeed"/>
    </componenttype>
  </archstyle>
  <archstyle name="reverse-oracle">
    <connectortype name="ROConnector">
      <roletype name="extquerier" porttype="//@archstyle.6/@componenttype.0/@porttype.0">
        <event name="request" next="//@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
        <event xsi:type="arch:Channel" name="uid" next="//@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
        <event xsi:type="arch:Channel" name="res" next="//@archstyle.6/@connectortype.0/@roletype.0/@event.3" type="input"/>
        <event name="process" next="//@archstyle.6/@connectortype.0/@roletype.0/@event.4"/>
        <event name="Skip"/>
      </roletype>
      <roletype name="blocksupplier" porttype="//@archstyle.6/@componenttype.1/@porttype.0">
        <event xsi:type="arch:Channel" name="uid" next="//@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
        <event name="process" next="//@archstyle.6/@connectortype.0/@roletype.1/@event.2"/>
        <event xsi:type="arch:Channel" name="res" type="output" bind="//@archstyle.6/@connectortype.0/@roletype.0/@event.2"/>
      </roletype>
    </connectortype>
    <componenttype name="reverseoracle">
      <porttype name="blockquery"/>
    </componenttype>
    <componenttype name="blockchain">
      <porttype name="blocksupply"/>
    </componenttype>
  </archstyle>
  <archstyle name="offchain-storage-put">
    <connectortype name="OSPConnector">
      <roletype name="hashlogger" porttype="//@archstyle.7/@componenttype.1/@porttype.0">
        <event xsi:type="arch:Channel" name="hash" next="//@archstyle.7/@connectortype.0/@roletype.0/@event.1" type="input"/>
        <event name="process"/>
      </roletype>
      <roletype name="hashsupplier" porttype="//@archstyle.7/@componenttype.0/@porttype.0">
        <event name="process" next="//@archstyle.7/@connectortype.0/@roletype.1/@event.1"/>
        <event name="calculate" next="//@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
        <event xsi:type="arch:Channel" name="hash" type="output" bind="//@archstyle.7/@connectortype.0/@roletype.0/@event.0"/>
      </roletype>
    </connectortype>
    <componenttype name="storage">
      <porttype name="hashsupply"/>
    </componenttype>
    <componenttype name="blockchain">
      <porttype name="hashlog"/>
    </componenttype>
  </archstyle>
  <archstyle name="offchain-storage-fetch">
    <connectortype name="OSFConnector">
      <roletype name="hashvalidator" porttype="//@archstyle.8/@componenttype.0/@porttype.0">
        <event xsi:type="arch:Channel" name="hash" next="//@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
        <event name="process" next="//@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
        <event name="check" next="//@archstyle.8/@connectortype.0/@roletype.0/@event.3"/>
        <event xsi:type="arch:Channel" name="res" type="output" bind="//@archstyle.8/@connectortype.0/@roletype.1/@event.2"/>
      </roletype>
      <roletype name="hashchecker" porttype="//@archstyle.8/@componenttype.1/@porttype.0">
        <event xsi:type="arch:Channel" name="hash" next="//@archstyle.8/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
        <event name="calculate" next="//@archstyle.8/@connectortype.0/@roletype.1/@event.0"/>
        <event xsi:type="arch:Channel" name="res" next="//@archstyle.8/@connectortype.0/@roletype.1/@event.3" type="input"/>
        <event name="process"/>
      </roletype>
    </connectortype>
    <componenttype name="blockchain">
      <porttype name="hashvalidate"/>
    </componenttype>
    <componenttype name="storage">
      <porttype name="hashcheck"/>
    </componenttype>
  </archstyle>
  <archstyle name="factory-contract">
    <connectortype name="FCConnector">
      <roletype name="contractcreator" porttype="//@archstyle.9/@componenttype.1/@porttype.0">
        <event name="process" next="//@archstyle.9/@connectortype.0/@roletype.0/@event.1"/>
        <event name="create" next="//@archstyle.9/@connectortype.0/@roletype.0/@event.2"/>
        <event xsi:type="arch:Channel" name="smcon" type="output" bind="//@archstyle.9/@connectortype.0/@roletype.1/@event.2"/>
      </roletype>
      <roletype name="contractdeployer" porttype="//@archstyle.9/@componenttype.0/@porttype.0">
        <event name="process" next="//@archstyle.9/@connectortype.0/@roletype.1/@event.1"/>
        <event name="deploy"/>
        <event xsi:type="arch:Channel" name="smcon" next="//@archstyle.9/@connectortype.0/@roletype.1/@event.0" type="input"/>
      </roletype>
    </connectortype>
    <componenttype name="blockchain">
      <porttype name="contractdeploy"/>
    </componenttype>
    <componenttype name="contractfactory">
      <porttype name="contractcreate"/>
    </componenttype>
  </archstyle>
  <verifyProperty xsi:type="arch:BehaviourProperty" name="datatampering1" model="/" visitedStates="53438" verifyTime="1.4766077" testport="//@component.4/@port.0" traceExample="init -> ProvenanceWebApp_prvapiwire_requester_request -> prvapiwire_req!79 -> prvapiwire_req?79 -> ProvenanceInt_prvapiwire_responder_invoke -> ProvenanceInt_prvpub_prvevntpublish -> ProvenanceInt_admsgwire_eventpublisher_process -> admsgwire_pevt!79 -> admsgwire_pevt?79 -> ADMessageBus_adlog_logged -> ADMessageBus_admsgwire_eventstore_process -> admsgwire_sevt!79 -> admsgwire_sevt?79 -> admsgwire_bevt!79 -> ProvenanceInt_admsgwire_eventpublisher_broadcast -> ProvenanceInt_admsgwire_eventpublisher_Skip -> ProvenanceInt_prvmsgwire_eventpublisher_process -> prvmsgwire_pevt!79 -> prvmsgwire_pevt?79 -> BCMessageBus_bclog_evntlogged -> BCMessageBus_prvmsgwire_eventstore_process -> prvmsgwire_sevt!79 -> BCMessageBus_prvmsgwire_eventstore_persist -> prvmsgwire_sevt?79 -> prvmsgwire_bevt!79 -> prvmsgwire_bevt?79 -> BCIntegrator_bcint_sendtobc -> BCIntegrator_pubwire_extsupplier_process -> pubwire_token!79 -> pubwire_token?79 -> PublicBlockChain_logfinance_finlogged -> PublicBlockChain_pubwire_blockstorage_process -> PublicBlockChain_pubwire_blockstorage_stored -> BCIntegrator_prvwire_extsupplier_process -> prvwire_token!79 -> prvwire_token?79 -> PrivateBlockChain_logstate_statelogged -> PrivateBlockChain_prvwire_blockstorage_process -> PrivateBlockChain_prvwire_blockstorage_stored -> BCIntegrator_prvmsgwire_eventsubscriber_process -> ProvenanceInt_prvmsgwire_eventpublisher_broadcast -> ProvenanceInt_prvmsgwire_eventpublisher_Skip -> ProvenanceInt_prvapiwire_responder_process -> prvapiwire_res!79 -> prvapiwire_res?79 -> ProvenanceWebApp_prvconsume_provenancerequest -> ProvenanceWebApp_prvapiwire_requester_process -> ADMessageBus_admsgwire_eventstore_persist -> admsgwire_bevt?79 -> ADWebApp_adnotify_notified -> ADWebApp_admsgwire_eventsubscriber_process">
    <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@verifyProperty.0">
      <expr xsi:type="arch:LTLRegularExpr" event="//@component.8/@port.0/@events.0" operator="EVENTUALLY"/>
      <expr xsi:type="arch:LTLRegularExpr" event="//@component.6/@port.0/@events.0" nextExpr="//@verifyProperty.0/@ltlexpr.0/@expr.0"/>
    </ltlexpr>
  </verifyProperty>
  <verifyProperty xsi:type="arch:BehaviourProperty" name="datatampering2" model="/" visitedStates="56990" verifyTime="1.4931305" testport="//@component.4/@port.0" traceExample="init -> ProvenanceWebApp_prvapiwire_requester_request -> prvapiwire_req!56 -> prvapiwire_req?56 -> ProvenanceInt_prvapiwire_responder_invoke -> ProvenanceInt_prvpub_prvevntpublish -> ProvenanceInt_admsgwire_eventpublisher_process -> admsgwire_pevt!56 -> admsgwire_pevt?56 -> ADMessageBus_adlog_logged -> ADMessageBus_admsgwire_eventstore_process -> admsgwire_sevt!56 -> admsgwire_sevt?56 -> admsgwire_bevt!56 -> ProvenanceInt_admsgwire_eventpublisher_broadcast -> ProvenanceInt_admsgwire_eventpublisher_Skip -> ProvenanceInt_prvmsgwire_eventpublisher_process -> prvmsgwire_pevt!56 -> prvmsgwire_pevt?56 -> BCMessageBus_bclog_evntlogged -> BCMessageBus_prvmsgwire_eventstore_process -> prvmsgwire_sevt!56 -> BCMessageBus_prvmsgwire_eventstore_persist -> prvmsgwire_sevt?56 -> prvmsgwire_bevt!56 -> prvmsgwire_bevt?56 -> BCIntegrator_bcint_sendtobc -> BCIntegrator_pubwire_extsupplier_process -> pubwire_token!56 -> pubwire_token?56 -> PublicBlockChain_logfinance_finlogged -> PublicBlockChain_pubwire_blockstorage_process -> PublicBlockChain_pubwire_blockstorage_stored -> BCIntegrator_prvwire_extsupplier_process -> prvwire_token!56 -> prvwire_token?56 -> PrivateBlockChain_logstate_statelogged -> PrivateBlockChain_prvwire_blockstorage_process -> PrivateBlockChain_prvwire_blockstorage_stored -> BCIntegrator_prvmsgwire_eventsubscriber_process -> ProvenanceInt_prvmsgwire_eventpublisher_broadcast -> ProvenanceInt_prvmsgwire_eventpublisher_Skip -> ProvenanceInt_prvapiwire_responder_process -> prvapiwire_res!56 -> prvapiwire_res?56 -> ProvenanceWebApp_prvconsume_provenancerequest -> ProvenanceWebApp_prvapiwire_requester_process -> ADMessageBus_admsgwire_eventstore_persist -> admsgwire_bevt?56 -> ADWebApp_adnotify_notified -> ADWebApp_admsgwire_eventsubscriber_process">
    <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@verifyProperty.1">
      <expr xsi:type="arch:LTLRegularExpr" event="//@component.6/@port.0/@events.0" nextExpr="//@verifyProperty.1/@ltlexpr.0/@expr.1"/>
      <expr xsi:type="arch:LTLRegularExpr" event="//@component.9/@port.0/@events.0" operator="EVENTUALLY"/>
    </ltlexpr>
  </verifyProperty>
  <verifyProperty xsi:type="arch:BehaviourProperty" name="AdversaryDTP1VerifyProp" testport="//@component.13/@port.0">
    <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS">
      <expr xsi:type="arch:LTLRegularExpr" event="//@archstyle.2/@connectortype.0/@roletype.0/@event.0" nextExpr="//@verifyProperty.2/@ltlexpr.0/@expr.1" role="//@connector.1/@role.0" port="//@component.13/@port.0"/>
      <expr xsi:type="arch:LTLRegularExpr" event="//@component.0/@port.1/@events.0" operator="EVENTUALLY"/>
    </ltlexpr>
  </verifyProperty>
  <verifyProperty xsi:type="arch:BehaviourProperty" name="AdversaryDTP1VerifyProp" testport="//@component.13/@port.0">
    <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS">
      <expr xsi:type="arch:LTLRegularExpr" event="//@archstyle.2/@connectortype.0/@roletype.0/@event.0" nextExpr="//@verifyProperty.3/@ltlexpr.0/@expr.1" role="//@connector.1/@role.0" port="//@component.13/@port.0"/>
      <expr xsi:type="arch:LTLRegularExpr" event="//@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
    </ltlexpr>
  </verifyProperty>
  <verifyProperty xsi:type="arch:BehaviourProperty" name="AdversaryDTP2VerifyProp" testport="//@component.14/@port.0">
    <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS">
      <expr xsi:type="arch:LTLRegularExpr" event="//@archstyle.0/@connectortype.0/@roletype.0/@event.0" nextExpr="//@verifyProperty.4/@ltlexpr.0/@expr.1" role="//@connector.2/@role.0" port="//@component.14/@port.0"/>
      <expr xsi:type="arch:LTLRegularExpr" event="//@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
    </ltlexpr>
  </verifyProperty>
  <verifyProperty xsi:type="arch:BehaviourProperty" name="AdversaryDTP3VerifyProp" testport="//@component.15/@port.0">
    <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS">
      <expr xsi:type="arch:LTLRegularExpr" event="//@archstyle.2/@connectortype.0/@roletype.0/@event.0" nextExpr="//@verifyProperty.5/@ltlexpr.0/@expr.1" role="//@connector.3/@role.0" port="//@component.15/@port.0"/>
      <expr xsi:type="arch:LTLRegularExpr" event="//@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
    </ltlexpr>
  </verifyProperty>
  <verifyProperty xsi:type="arch:BehaviourProperty" name="AdversaryDTP3VerifyProp" testport="//@component.15/@port.0">
    <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS">
      <expr xsi:type="arch:LTLRegularExpr" event="//@archstyle.2/@connectortype.0/@roletype.0/@event.0" nextExpr="//@verifyProperty.6/@ltlexpr.0/@expr.1" role="//@connector.3/@role.0" port="//@component.15/@port.0"/>
      <expr xsi:type="arch:LTLRegularExpr" event="//@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
    </ltlexpr>
  </verifyProperty>
  <verifyProperty xsi:type="arch:BehaviourProperty" name="AdversaryDTP4VerifyProp" testport="//@component.16/@port.0">
    <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS">
      <expr xsi:type="arch:LTLRegularExpr" event="//@archstyle.6/@connectortype.0/@roletype.0/@event.0" nextExpr="//@verifyProperty.7/@ltlexpr.0/@expr.1" role="//@connector.5/@role.0" port="//@component.16/@port.0"/>
      <expr xsi:type="arch:LTLRegularExpr" event="//@component.8/@port.1/@events.0" operator="EVENTUALLY"/>
    </ltlexpr>
  </verifyProperty>
  <verifyProperty xsi:type="arch:BehaviourProperty" name="AdversaryMIM1VerifyProp" testport="//@component.17/@port.0">
    <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS">
      <expr xsi:type="arch:LTLRegularExpr" event="//@archstyle.2/@connectortype.0/@roletype.0/@event.0" nextExpr="//@verifyProperty.8/@ltlexpr.0/@expr.1" role="//@connector.1/@role.0" port="//@component.17/@port.0"/>
      <expr xsi:type="arch:LTLRegularExpr" event="//@component.0/@port.1/@events.0" operator="EVENTUALLY"/>
    </ltlexpr>
  </verifyProperty>
  <verifyProperty xsi:type="arch:BehaviourProperty" name="AdversaryMIM1VerifyProp" testport="//@component.17/@port.0">
    <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS">
      <expr xsi:type="arch:LTLRegularExpr" event="//@archstyle.2/@connectortype.0/@roletype.0/@event.0" nextExpr="//@verifyProperty.9/@ltlexpr.0/@expr.1" role="//@connector.1/@role.0" port="//@component.17/@port.0"/>
      <expr xsi:type="arch:LTLRegularExpr" event="//@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
    </ltlexpr>
  </verifyProperty>
  <verifyProperty xsi:type="arch:BehaviourProperty" name="AdversaryMIM2VerifyProp" visitedStates="38014" verifyTime="0.9374053" testport="//@component.18/@port.0" traceExample="init -> AdversaryMIM2_prvapiwire_requester_request -> prvapiwire_req!64 -> prvapiwire_req?64 -> ProvenanceInt_prvapiwire_responder_invoke -> ProvenanceInt_prvpub_prvevntpublish -> ProvenanceInt_admsgwire_eventpublisher_process -> admsgwire_pevt!64 -> admsgwire_pevt?64 -> ADMessageBus_adlog_logged -> ADMessageBus_admsgwire_eventstore_process -> admsgwire_sevt!64 -> admsgwire_sevt?64 -> admsgwire_bevt!64 -> ProvenanceInt_admsgwire_eventpublisher_broadcast -> ProvenanceInt_admsgwire_eventpublisher_Skip -> ProvenanceInt_prvmsgwire_eventpublisher_process -> prvmsgwire_pevt!64 -> prvmsgwire_pevt?64 -> BCMessageBus_bclog_evntlogged -> BCMessageBus_prvmsgwire_eventstore_process -> prvmsgwire_sevt!64 -> BCMessageBus_prvmsgwire_eventstore_persist -> prvmsgwire_sevt?64 -> prvmsgwire_bevt!64 -> prvmsgwire_bevt?64 -> BCIntegrator_bcint_sendtobc -> BCIntegrator_pubwire_extsupplier_process -> pubwire_token!64 -> pubwire_token?64 -> PublicBlockChain_logfinance_finlogged -> PublicBlockChain_pubwire_blockstorage_process -> PublicBlockChain_pubwire_blockstorage_stored -> BCIntegrator_prvwire_extsupplier_process -> prvwire_token!64 -> prvwire_token?64 -> PrivateBlockChain_logstate_statelogged -> PrivateBlockChain_prvwire_blockstorage_process -> PrivateBlockChain_prvwire_blockstorage_stored -> BCIntegrator_prvmsgwire_eventsubscriber_process -> ProvenanceInt_prvmsgwire_eventpublisher_broadcast -> ProvenanceInt_prvmsgwire_eventpublisher_Skip -> ProvenanceInt_prvapiwire_responder_process -> prvapiwire_res!64 -> prvapiwire_res?64 -> AdversaryMIM2_attack2_attacked -> AdversaryMIM2_prvapiwire_requester_process -> ADMessageBus_admsgwire_eventstore_persist -> admsgwire_bevt?64 -> ADWebApp_adnotify_notified -> ADWebApp_admsgwire_eventsubscriber_process">
    <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS">
      <expr xsi:type="arch:LTLRegularExpr" event="//@archstyle.0/@connectortype.0/@roletype.0/@event.0" nextExpr="//@verifyProperty.10/@ltlexpr.0/@expr.1" role="//@connector.2/@role.0" port="//@component.18/@port.0"/>
      <expr xsi:type="arch:LTLRegularExpr" event="//@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
    </ltlexpr>
  </verifyProperty>
  <verifyProperty xsi:type="arch:BehaviourProperty" name="AdversaryMIM3VerifyProp" visitedStates="802" verifyTime="0.0212568" testport="//@component.19/@port.0" traceExample="init -> AdversaryMIM3_attack3_attacked -> AdversaryMIM3_prvmsgwire_eventpublisher_process -> prvmsgwire_pevt!13 -> prvmsgwire_pevt?13 -> BCMessageBus_bclog_evntlogged -> BCMessageBus_prvmsgwire_eventstore_process -> prvmsgwire_sevt!13 -> prvmsgwire_sevt?13 -> prvmsgwire_bevt!13 -> AdversaryMIM3_prvmsgwire_eventpublisher_broadcast -> prvmsgwire_bevt?13 -> BCIntegrator_bcint_sendtobc -> BCIntegrator_pubwire_extsupplier_process -> pubwire_token!13 -> pubwire_token?13 -> PublicBlockChain_logfinance_finlogged -> PublicBlockChain_pubwire_blockstorage_process -> PublicBlockChain_pubwire_blockstorage_stored -> BCIntegrator_prvwire_extsupplier_process -> prvwire_token!13 -> prvwire_token?13 -> PrivateBlockChain_logstate_statelogged -> PrivateBlockChain_prvwire_blockstorage_process -> PrivateBlockChain_prvwire_blockstorage_stored -> BCIntegrator_prvmsgwire_eventsubscriber_process -> BCMessageBus_prvmsgwire_eventstore_persist">
    <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS">
      <expr xsi:type="arch:LTLRegularExpr" event="//@archstyle.2/@connectortype.0/@roletype.0/@event.0" nextExpr="//@verifyProperty.11/@ltlexpr.0/@expr.1" role="//@connector.3/@role.0" port="//@component.19/@port.0"/>
      <expr xsi:type="arch:LTLRegularExpr" event="//@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
    </ltlexpr>
  </verifyProperty>
  <verifyProperty xsi:type="arch:BehaviourProperty" name="AdversaryMIM3VerifyProp" visitedStates="781" verifyTime="0.021369799999999998" testport="//@component.19/@port.0" traceExample="init -> AdversaryMIM3_attack3_attacked -> AdversaryMIM3_prvmsgwire_eventpublisher_process -> prvmsgwire_pevt!84 -> prvmsgwire_pevt?84 -> BCMessageBus_bclog_evntlogged -> BCMessageBus_prvmsgwire_eventstore_process -> prvmsgwire_sevt!84 -> prvmsgwire_sevt?84 -> prvmsgwire_bevt!84 -> AdversaryMIM3_prvmsgwire_eventpublisher_broadcast -> prvmsgwire_bevt?84 -> BCIntegrator_bcint_sendtobc -> BCIntegrator_pubwire_extsupplier_process -> pubwire_token!84 -> pubwire_token?84 -> PublicBlockChain_logfinance_finlogged -> PublicBlockChain_pubwire_blockstorage_process -> PublicBlockChain_pubwire_blockstorage_stored -> BCIntegrator_prvwire_extsupplier_process -> prvwire_token!84 -> prvwire_token?84 -> PrivateBlockChain_logstate_statelogged -> PrivateBlockChain_prvwire_blockstorage_process -> PrivateBlockChain_prvwire_blockstorage_stored -> BCIntegrator_prvmsgwire_eventsubscriber_process -> BCMessageBus_prvmsgwire_eventstore_persist">
    <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS">
      <expr xsi:type="arch:LTLRegularExpr" event="//@archstyle.2/@connectortype.0/@roletype.0/@event.0" nextExpr="//@verifyProperty.12/@ltlexpr.0/@expr.1" role="//@connector.3/@role.0" port="//@component.19/@port.0"/>
      <expr xsi:type="arch:LTLRegularExpr" event="//@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
    </ltlexpr>
  </verifyProperty>
  <verifyProperty xsi:type="arch:BehaviourProperty" name="AdversaryMIM4VerifyProp" visitedStates="13" verifyTime="0.0050609999999999995" testport="//@component.20/@port.0" traceExample="init -> AdversaryMIM4_walletwire_extquerier_request -> walletwire_uid!35 -> walletwire_uid?35 -> PublicBlockChain_checkfinance_check -> PublicBlockChain_walletwire_blocksupplier_process -> walletwire_res!35 -> walletwire_res?35 -> AdversaryMIM4_attack4_attacked -> AdversaryMIM4_walletwire_extquerier_process">
    <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS">
      <expr xsi:type="arch:LTLRegularExpr" event="//@archstyle.6/@connectortype.0/@roletype.0/@event.0" nextExpr="//@verifyProperty.13/@ltlexpr.0/@expr.1" role="//@connector.5/@role.0" port="//@component.20/@port.0"/>
      <expr xsi:type="arch:LTLRegularExpr" event="//@component.8/@port.1/@events.0" operator="EVENTUALLY"/>
    </ltlexpr>
  </verifyProperty>
  <verifyProperty xsi:type="arch:BehaviourProperty" name="AdversaryMIM5VerifyProp" visitedStates="3462" verifyTime="0.0794076" testport="//@component.21/@port.0" traceExample="init -> AdversaryMIM5_iotreqwire_requester_request -> iotreqwire_req!81 -> iotreqwire_req?81 -> IOTWebAPI_iotreqwire_responder_invoke -> IOTWebAPI_iotpub_published -> IOTWebAPI_prvmsgwire_eventpublisher_process -> prvmsgwire_pevt!81 -> prvmsgwire_pevt?81 -> BCMessageBus_bclog_evntlogged -> BCMessageBus_prvmsgwire_eventstore_process -> prvmsgwire_sevt!81 -> BCMessageBus_prvmsgwire_eventstore_persist -> prvmsgwire_sevt?81 -> prvmsgwire_bevt!81 -> prvmsgwire_bevt?81 -> BCIntegrator_bcint_sendtobc -> BCIntegrator_pubwire_extsupplier_process -> pubwire_token!81 -> pubwire_token?81 -> PublicBlockChain_logfinance_finlogged -> PublicBlockChain_pubwire_blockstorage_process -> PublicBlockChain_pubwire_blockstorage_stored -> BCIntegrator_prvwire_extsupplier_process -> prvwire_token!81 -> prvwire_token?81 -> PrivateBlockChain_logstate_statelogged -> PrivateBlockChain_prvwire_blockstorage_process -> PrivateBlockChain_prvwire_blockstorage_stored -> BCIntegrator_prvmsgwire_eventsubscriber_process -> IOTWebAPI_prvmsgwire_eventpublisher_broadcast -> IOTWebAPI_prvmsgwire_eventpublisher_Skip -> IOTWebAPI_iotreqwire_responder_process -> iotreqwire_res!81 -> iotreqwire_res?81 -> AdversaryMIM5_attack5_attacked -> AdversaryMIM5_iotreqwire_requester_process">
    <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS">
      <expr xsi:type="arch:LTLRegularExpr" event="//@archstyle.0/@connectortype.0/@roletype.0/@event.0" nextExpr="//@verifyProperty.14/@ltlexpr.0/@expr.1" role="//@connector.7/@role.0" port="//@component.21/@port.0"/>
      <expr xsi:type="arch:LTLRegularExpr" event="//@component.5/@port.0/@events.0" operator="EVENTUALLY"/>
    </ltlexpr>
  </verifyProperty>
  <host name="ADWebServer">
    <node type="APPLICATION_CONTAINER" name="ApacheTomcat" component="//@component.0">
      <port name="port" portNumber="12030" node="//@host.0/@node.0" namedport="//@component.0/@port.0"/>
    </node>
  </host>
  <host name="ADAppServer">
    <node type="APPLICATION_CONTAINER" name="JBoss" component="//@component.1">
      <port name="port" portNumber="8080" node="//@host.1/@node.0" namedport="//@component.1/@port.0"/>
    </node>
    <node type="APPLICATION_CONTAINER" name="Kafka" component="//@component.2">
      <port name="port" portNumber="5228" node="//@host.1/@node.1" namedport="//@component.2/@port.0" hasInputSanitization="true"/>
    </node>
  </host>
  <host netAccessType="PUBLIC" name="AWSECS" hostType="CLOUD_PLATFORM">
    <node name="Docker1" component="//@component.4">
      <port name="port" portNumber="12032" node="//@host.2/@node.0" namedport="//@component.4/@port.0"/>
    </node>
    <node name="Docker2" component="//@component.3">
      <port name="port" portNumber="8081" node="//@host.2/@node.1" namedport="//@component.3/@port.0" hasInputSanitization="true"/>
      <port name="port" portNumber="12033" node="//@host.2/@node.1" namedport="//@component.3/@port.0"/>
      <port name="port" portNumber="12034" node="//@host.2/@node.1" namedport="//@component.3/@port.0"/>
    </node>
    <node name="Docker3" component="//@component.6">
      <port name="port" portNumber="5334" node="//@host.2/@node.2" namedport="//@component.6/@port.0"/>
      <port name="port" portNumber="12581" node="//@host.2/@node.2" namedport="//@component.6/@port.0"/>
    </node>
    <node name="Docker4" component="//@component.7">
      <port name="port" portNumber="12037" node="//@host.2/@node.3" namedport="//@component.7/@port.0"/>
      <port name="port" portNumber="12039" node="//@host.2/@node.3" namedport="//@component.7/@port.0"/>
      <port name="port" portNumber="8984" node="//@host.2/@node.3" namedport="//@component.7/@port.0"/>
    </node>
  </host>
  <host netAccessType="PUBLIC" name="IOTWebApp">
    <node type="APPLICATION_CONTAINER" name="IOWebHub" component="//@component.5">
      <port name="port" portNumber="12035" node="//@host.3/@node.0" namedport="//@component.5/@port.0"/>
      <port name="port" portNumber="8087" node="//@host.3/@node.0" namedport="//@component.5/@port.0" hasAuthentication="true" hasAuthorization="true"/>
    </node>
  </host>
  <host netAccessType="PUBLIC" name="Ethereum">
    <node name="BCNode" component="//@component.8">
      <port name="port" portNumber="8889" node="//@host.4/@node.0" namedport="//@component.8/@port.0"/>
      <port name="port" portNumber="18443" node="//@host.4/@node.0" namedport="//@component.8/@port.1"/>
    </node>
  </host>
  <host name="BankNet">
    <node type="APPLICATION_CONTAINER" name="AppServer1" component="//@component.10">
      <port name="port" portNumber="12038" node="//@host.5/@node.0" namedport="//@component.10/@port.0"/>
      <port name="port" portNumber="8882" node="//@host.5/@node.0" namedport="//@component.10/@port.1" hasFirewall="true" hasAuthentication="true" hasAuthorization="true" hasInputSanitization="true"/>
    </node>
    <node name="AppServer2" component="//@component.12">
      <port name="port" portNumber="12039" node="//@host.5/@node.1" namedport="//@component.12/@port.0"/>
    </node>
  </host>
  <host name="Quorum">
    <node name="QRNode" component="//@component.9">
      <port name="port" portNumber="8892" node="//@host.6/@node.0" namedport="//@component.9/@port.0"/>
    </node>
  </host>
  <host name="IOTDevice" hostType="DEDICATED_SERVER">
    <node type="APPLICATION_CONTAINER" name="EmbededApp" component="//@component.11">
      <port name="port" portNumber="19802" node="//@host.7/@node.0" namedport="//@component.11/@port.0"/>
    </node>
  </host>
  <link name="link1" source="//@host.0/@node.0/@port.0" target="//@host.1/@node.0/@port.0"/>
  <link name="link3" networkType="INTERNET" source="//@host.2/@node.0/@port.0" target="//@host.2/@node.1/@port.0"/>
  <link name="link2" networkType="INTERNET" source="//@host.2/@node.1/@port.1" target="//@host.1/@node.1/@port.0"/>
  <link name="link4" source="//@host.2/@node.1/@port.2" target="//@host.2/@node.2/@port.0"/>
  <link name="link5" networkType="INTERNET" source="//@host.3/@node.0/@port.0" target="//@host.2/@node.2/@port.0"/>
  <link name="link6" source="//@host.2/@node.3/@port.0" target="//@host.4/@node.0/@port.0"/>
  <link name="link7" networkType="INTERNET" source="//@host.5/@node.0/@port.0" target="//@host.4/@node.0/@port.1"/>
  <link name="link8" source="//@host.2/@node.3/@port.1" target="//@host.6/@node.0/@port.0"/>
  <link name="link9" networkType="INTERNET" source="//@host.7/@node.0/@port.0" target="//@host.3/@node.0/@port.1"/>
  <link name="link10" source="//@host.2/@node.2/@port.1" target="//@host.2/@node.3/@port.2"/>
  <link name="link11" linkType="HTTPS" source="//@host.5/@node.1/@port.0" target="//@host.5/@node.0/@port.1"/>
</arch:DesignModel>
